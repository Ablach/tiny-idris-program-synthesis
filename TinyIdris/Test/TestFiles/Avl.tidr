data Nat : Type where
  Z : Nat
  S : Nat -> Nat

data Vec : Nat -> Type -> Type where
  Nil : (a : Type) -> Vec Z a
  Cons : (a : Type) -> (n : Nat) -> a -> Vec n a -> Vec (S n) a

add : Nat -> Nat -> Nat
pat n =>
  add Z n = n
pat m : Nat, n : Nat =>
  add (S m) n = S (add m n)

append : (a : Type) -> (n : Nat) -> (m : Nat) -> 
	 (xs : Vec n a) -> (ys : Vec m a) -> Vec (add n m) a
pat a : Type, n : Nat, m : Nat, x : a, xs : Vec n a, ys : Vec m a =>
  append a n m (Cons a n x xs) ys = ?v92

