#!/usr/bin/chezscheme9.5 --script

; @generated
(import (chezscheme))
(case (machine-type)
  [(i3le ti3le a6le ta6le) (load-shared-object "libc.so.6")]
  [(i3osx ti3osx a6osx ta6osx) (load-shared-object "libc.dylib")]
  [(i3nt ti3nt a6nt ta6nt) (load-shared-object "msvcrt.dll")                           (load-shared-object "ws2_32.dll")]
  [else (load-shared-object "libc.so")])



(let ()
(define (blodwen-os)
  (case (machine-type)
    [(i3le ti3le a6le ta6le) "unix"]  ; GNU/Linux
    [(i3ob ti3ob a6ob ta6ob) "unix"]  ; OpenBSD
    [(i3fb ti3fb a6fb ta6fb) "unix"]  ; FreeBSD
    [(i3nb ti3nb a6nb ta6nb) "unix"]  ; NetBSD
    [(i3osx ti3osx a6osx ta6osx) "darwin"]
    [(i3nt ti3nt a6nt ta6nt) "windows"]
    [else "unknown"]))

(define blodwen-read-args (lambda (desc)
  (case (vector-ref desc 0)
    ((0) '())
    ((1) (cons (vector-ref desc 2)
               (blodwen-read-args (vector-ref desc 3)))))))
(define b+ (lambda (x y bits) (remainder (+ x y) (ash 1 bits))))
(define b- (lambda (x y bits) (remainder (- x y) (ash 1 bits))))
(define b* (lambda (x y bits) (remainder (* x y) (ash 1 bits))))
(define b/ (lambda (x y bits) (remainder (exact-floor (/ x y)) (ash 1 bits))))

(define integer->bits8 (lambda (x) (modulo x (expt 2 8))))
(define integer->bits16 (lambda (x) (modulo x (expt 2 16))))
(define integer->bits32 (lambda (x) (modulo x (expt 2 32))))
(define integer->bits64 (lambda (x) (modulo x (expt 2 64))))

(define bits16->bits8 (lambda (x) (modulo x (expt 2 8))))
(define bits32->bits8 (lambda (x) (modulo x (expt 2 8))))
(define bits32->bits16 (lambda (x) (modulo x (expt 2 16))))
(define bits64->bits8 (lambda (x) (modulo x (expt 2 8))))
(define bits64->bits16 (lambda (x) (modulo x (expt 2 16))))
(define bits64->bits32 (lambda (x) (modulo x (expt 2 32))))

(define blodwen-bits-shl (lambda (x y bits) (remainder (ash x y) (ash 1 bits))))
(define blodwen-shl (lambda (x y) (ash x y)))
(define blodwen-shr (lambda (x y) (ash x (- y))))
(define blodwen-and (lambda (x y) (logand x y)))
(define blodwen-or (lambda (x y) (logor x y)))
(define blodwen-xor (lambda (x y) (logxor x y)))

(define cast-num
  (lambda (x)
    (if (number? x) x 0)))
(define destroy-prefix
  (lambda (x)
    (cond
      ((equal? x "") "")
      ((equal? (string-ref x 0) #\#) "")
      (else x))))
(define cast-string-int
  (lambda (x)
    (floor (cast-num (string->number (destroy-prefix x))))))
(define cast-int-char
  (lambda (x)
    (if (and (>= x 0)
             (<= x #x10ffff))
        (integer->char x)
        0)))
(define exact-floor
  (lambda (x)
    (inexact->exact (floor x))))
(define cast-string-double
  (lambda (x)
    (cast-num (string->number (destroy-prefix x)))))

(define (from-idris-list xs)
  (if (= (vector-ref xs 0) 0)
    '()
    (cons (vector-ref xs 1) (from-idris-list (vector-ref xs 2)))))
(define (string-concat xs) (apply string-append (from-idris-list xs)))
(define (string-pack xs) (apply string (from-idris-list xs)))
(define string-cons (lambda (x y) (string-append (string x) y)))
(define get-tag (lambda (x) (vector-ref x 0)))
(define string-reverse (lambda (x)
  (list->string (reverse (string->list x)))))
(define (string-substr off len s)
    (let* ((l (string-length s))
          (b (max 0 off))
          (x (max 0 len))
          (end (min l (+ b x))))
          (if (> b l)
              ""
              (substring s b end))))

(define either-left
  (lambda (x)
    (vector 0 x)))

(define either-right
  (lambda (x)
    (vector 1 x)))

(define blodwen-error-quit
  (lambda (msg)
    (display msg)
    (newline)
    (exit 1)))

(define (blodwen-get-line p)
    (if (port? p)
        (let ((str (get-line p)))
            (if (eof-object? str)
                ""
                str))
        void))

(define (blodwen-get-char p)
    (if (port? p)
        (let ((chr (get-char p)))
            (if (eof-object? chr)
                #\nul
                chr))
        void))

;; Buffers

(define (blodwen-new-buffer size)
  (make-bytevector size 0))

(define (blodwen-buffer-size buf)
  (bytevector-length buf))

(define (blodwen-buffer-setbyte buf loc val)
  (bytevector-u8-set! buf loc val))

(define (blodwen-buffer-getbyte buf loc)
  (bytevector-u8-ref buf loc))

(define (blodwen-buffer-setbits16 buf loc val)
  (bytevector-u16-set! buf loc val (native-endianness)))

(define (blodwen-buffer-getbits16 buf loc)
  (bytevector-u16-ref buf loc (native-endianness)))

(define (blodwen-buffer-setbits32 buf loc val)
  (bytevector-u32-set! buf loc val (native-endianness)))

(define (blodwen-buffer-getbits32 buf loc)
  (bytevector-u32-ref buf loc (native-endianness)))

(define (blodwen-buffer-setbits64 buf loc val)
  (bytevector-u64-set! buf loc val (native-endianness)))

(define (blodwen-buffer-getbits64 buf loc)
  (bytevector-u64-ref buf loc (native-endianness)))

(define (blodwen-buffer-setint32 buf loc val)
  (bytevector-s32-set! buf loc val (native-endianness)))

(define (blodwen-buffer-getint32 buf loc)
  (bytevector-s32-ref buf loc (native-endianness)))

(define (blodwen-buffer-setint buf loc val)
  (bytevector-s64-set! buf loc val (native-endianness)))

(define (blodwen-buffer-getint buf loc)
  (bytevector-s64-ref buf loc (native-endianness)))

(define (blodwen-buffer-setdouble buf loc val)
  (bytevector-ieee-double-set! buf loc val (native-endianness)))

(define (blodwen-buffer-getdouble buf loc)
  (bytevector-ieee-double-ref buf loc (native-endianness)))

(define (blodwen-stringbytelen str)
  (bytevector-length (string->utf8 str)))

(define (blodwen-buffer-setstring buf loc val)
  (let* [(strvec (string->utf8 val))
         (len (bytevector-length strvec))]
    (bytevector-copy! strvec 0 buf loc len)))

(define (blodwen-buffer-getstring buf loc len)
  (let [(newvec (make-bytevector len))]
    (bytevector-copy! buf loc newvec 0 len)
    (utf8->string newvec)))

(define (blodwen-buffer-copydata buf start len dest loc)
  (bytevector-copy! buf start dest loc len))

;; Threads

(define blodwen-thread-data (make-thread-parameter #f))

(define (blodwen-thread p)
    (fork-thread (lambda () (p (vector 0)))))

(define (blodwen-get-thread-data ty)
  (blodwen-thread-data))

(define (blodwen-set-thread-data a)
  (blodwen-thread-data a))

(define (blodwen-mutex) (make-mutex))
(define (blodwen-lock m) (mutex-acquire m))
(define (blodwen-unlock m) (mutex-release m))
(define (blodwen-thisthread) (get-thread-id))

(define (blodwen-condition) (make-condition))
(define (blodwen-condition-wait c m) (condition-wait c m))
(define (blodwen-condition-wait-timeout c m t)
  (let ((sec (div t 1000000))
        (micro (mod t 1000000)))
  (condition-wait c m (make-time 'time-duration (* 1000 micro) sec))))
(define (blodwen-condition-signal c) (condition-signal c))
(define (blodwen-condition-broadcast c) (condition-broadcast c))

(define (blodwen-sleep s) (sleep (make-time 'time-duration 0 s)))
(define (blodwen-usleep s)
  (let ((sec (div s 1000000))
        (micro (mod s 1000000)))
       (sleep (make-time 'time-duration (* 1000 micro) sec))))

(define (blodwen-time) (time-second (current-time)))
(define (blodwen-clock-time-utc) (current-time 'time-utc))
(define (blodwen-clock-time-monotonic) (current-time 'time-monotonic))
(define (blodwen-clock-time-duration) (current-time 'time-duration))
(define (blodwen-clock-time-process) (current-time 'time-process))
(define (blodwen-clock-time-thread) (current-time 'time-thread))
(define (blodwen-clock-time-gccpu) (current-time 'time-collector-cpu))
(define (blodwen-clock-time-gcreal) (current-time 'time-collector-real))
(define (blodwen-is-time? clk) (if (time? clk) 1 0))
(define (blodwen-clock-second time) (time-second time))
(define (blodwen-clock-nanosecond time) (time-nanosecond time))

(define (blodwen-args)
  (define (blodwen-build-args args)
    (if (null? args)
        (vector 0) ; Prelude.List
        (vector 1 (car args) (blodwen-build-args (cdr args)))))
    (blodwen-build-args (command-line)))

(define (blodwen-hasenv var)
  (if (eq? (getenv var) #f) 0 1))

(define (blodwen-system cmd)
  (system cmd))

;; Randoms
(define random-seed-register 0)
(define (initialize-random-seed-once)
  (if (= (virtual-register random-seed-register) 0)
      (let ([seed (time-nanosecond (current-time))])
        (set-virtual-register! random-seed-register seed)
        (random-seed seed))))

(define (blodwen-random-seed seed)
  (set-virtual-register! random-seed-register seed)
  (random-seed seed))
(define blodwen-random
  (case-lambda
    ;; no argument, pick a real value from [0, 1.0)
    [() (begin
          (initialize-random-seed-once)
          (random 1.0))]
    ;; single argument k, pick an integral value from [0, k)
    [(k)
      (begin
        (initialize-random-seed-once)
        (if (> k 0)
              (random k)
              (assertion-violationf 'blodwen-random "invalid range argument ~a" k)))]))

;; For finalisers

(define blodwen-finaliser (make-guardian))
(define (blodwen-register-object obj proc)
  (let [(x (cons obj proc))]
       (blodwen-finaliser x)
       x))
(define blodwen-run-finalisers
  (lambda ()
    (let run ()
      (let ([x (blodwen-finaliser)])
        (when x
          (((cdr x) (car x)) 'erased)
          (run))))))
(define Prelude-Types-fastPack (lambda (farg-0) (string-pack farg-0)))
(define PrimIO-prim__nullAnyPtr (lambda (farg-0) ((foreign-procedure #f "idris2_isNull" (void*) int) farg-0)))
(define Prelude-IO-prim__putStr (lambda (farg-0 farg-1) ((foreign-procedure #f "idris2_putStr" (string) void) farg-0) (vector 0 )))
(define Prelude-IO-prim__getString (lambda (farg-0) ((foreign-procedure #f "idris2_getString" (void*) string) farg-0)))
(define Prelude-IO-prim__getStr (lambda (farg-0) ((foreign-procedure #f "idris2_getStr" () string) )))
(define Data-Strings-fastConcat (lambda (farg-0) (string-concat farg-0)))
(define System-File-prim__readLine (lambda (farg-0 farg-1) ((foreign-procedure #f "idris2_readLine" (void*) void*) farg-0)))
(define System-File-prim__open (lambda (farg-0 farg-1 farg-2) ((foreign-procedure #f "idris2_openFile" (string string) void*) farg-0 farg-1)))
(define System-File-prim__fileErrno (lambda (farg-0) ((foreign-procedure #f "idris2_fileErrno" () int) )))
(define System-File-prim__eof (lambda (farg-0 farg-1) ((foreign-procedure #f "idris2_eof" (void*) int) farg-0)))
(define System-File-prim__close (lambda (farg-0 farg-1) ((foreign-procedure #f "idris2_closeFile" (void*) void) farg-0) (vector 0 )))
(define System-prim__getArgs (lambda (farg-0) (blodwen-args )))
(define prim__add_Int (lambda (arg-0 arg-1) (b+ arg-0 arg-1 63)))
(define prim__add_Integer (lambda (arg-0 arg-1) (+ arg-0 arg-1)))
(define prim__sub_Int (lambda (arg-0 arg-1) (b- arg-0 arg-1 63)))
(define prim__sub_Integer (lambda (arg-0 arg-1) (- arg-0 arg-1)))
(define prim__mul_Int (lambda (arg-0 arg-1) (b* arg-0 arg-1 63)))
(define prim__mul_Integer (lambda (arg-0 arg-1) (* arg-0 arg-1)))
(define prim__lt_Int (lambda (arg-0 arg-1) (or (and (< arg-0 arg-1) 1) 0)))
(define prim__lt_Integer (lambda (arg-0 arg-1) (or (and (< arg-0 arg-1) 1) 0)))
(define prim__lt_String (lambda (arg-0 arg-1) (or (and (string<? arg-0 arg-1) 1) 0)))
(define prim__lte_Int (lambda (arg-0 arg-1) (or (and (<= arg-0 arg-1) 1) 0)))
(define prim__lte_Integer (lambda (arg-0 arg-1) (or (and (<= arg-0 arg-1) 1) 0)))
(define prim__lte_Char (lambda (arg-0 arg-1) (or (and (char<=? arg-0 arg-1) 1) 0)))
(define prim__lte_String (lambda (arg-0 arg-1) (or (and (string<=? arg-0 arg-1) 1) 0)))
(define prim__eq_Int (lambda (arg-0 arg-1) (or (and (= arg-0 arg-1) 1) 0)))
(define prim__eq_Integer (lambda (arg-0 arg-1) (or (and (= arg-0 arg-1) 1) 0)))
(define prim__eq_Char (lambda (arg-0 arg-1) (or (and (char=? arg-0 arg-1) 1) 0)))
(define prim__eq_String (lambda (arg-0 arg-1) (or (and (string=? arg-0 arg-1) 1) 0)))
(define prim__gte_Int (lambda (arg-0 arg-1) (or (and (>= arg-0 arg-1) 1) 0)))
(define prim__gte_Integer (lambda (arg-0 arg-1) (or (and (>= arg-0 arg-1) 1) 0)))
(define prim__gte_Char (lambda (arg-0 arg-1) (or (and (char>=? arg-0 arg-1) 1) 0)))
(define prim__gte_String (lambda (arg-0 arg-1) (or (and (string>=? arg-0 arg-1) 1) 0)))
(define prim__gt_Int (lambda (arg-0 arg-1) (or (and (> arg-0 arg-1) 1) 0)))
(define prim__gt_Integer (lambda (arg-0 arg-1) (or (and (> arg-0 arg-1) 1) 0)))
(define prim__gt_Char (lambda (arg-0 arg-1) (or (and (char>? arg-0 arg-1) 1) 0)))
(define prim__gt_String (lambda (arg-0 arg-1) (or (and (string>? arg-0 arg-1) 1) 0)))
(define prim__strLength (lambda (arg-0) (string-length arg-0)))
(define prim__strHead (lambda (arg-0) (string-ref arg-0 0)))
(define prim__strTail (lambda (arg-0) (substring arg-0 1 (string-length arg-0))))
(define prim__strIndex (lambda (arg-0 arg-1) (string-ref arg-0 arg-1)))
(define prim__strCons (lambda (arg-0 arg-1) (string-cons arg-0 arg-1)))
(define prim__strAppend (lambda (arg-0 arg-1) (string-append arg-0 arg-1)))
(define prim__strReverse (lambda (arg-0) (string-reverse arg-0)))
(define prim__strSubstr (lambda (arg-0 arg-1 arg-2) (string-substr arg-0 arg-1 arg-2)))
(define prim__believe_me (lambda (arg-0 arg-1 arg-2) arg-2))
(define prim__cast_IntString (lambda (arg-0) (number->string arg-0)))
(define prim__cast_IntegerString (lambda (arg-0) (number->string arg-0)))
(define prim__cast_DoubleString (lambda (arg-0) (number->string arg-0)))
(define prim__cast_StringInteger (lambda (arg-0) (cast-string-int arg-0)))
(define prim__cast_IntInteger (lambda (arg-0) arg-0))
(define prim__cast_CharInteger (lambda (arg-0) (char->integer arg-0)))
(define prim__cast_IntegerInt (lambda (arg-0) arg-0))
(define prim__cast_CharInt (lambda (arg-0) (char->integer arg-0)))
(define prim__cast_StringDouble (lambda (arg-0) (cast-string-double arg-0)))
(define prim__cast_IntChar (lambda (arg-0) (cast-int-char arg-0)))
(define Idris-Main-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32main-5802 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-5)) (case (vector-ref sc0 0) ((1) (let ((e-2 (vector-ref sc0 1))) (lambda (eta-0) (Core-Core-coreRun 'erased 'erased (lambda (eta-1) (Idris-Main-runMain arg-3 e-2 eta-1)) (lambda (err) (Prelude-IO-printLn 'erased 'erased (vector 0 (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-62) (lambda (eta-1) (Prelude-IO-map_Functor__IO 'erased 'erased func arg-62 eta-1)))))) (lambda (a) (lambda (arg-172) (lambda (eta-1) arg-172))) (lambda (b) (lambda (a) (lambda (arg-173) (lambda (arg-175) (lambda (eta-1) (let ((act-17 (arg-173 eta-1))) (let ((act-16 (arg-175 eta-1))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-334) (lambda (arg-335) (lambda (eta-1) (let ((act-24 (arg-334 eta-1))) ((arg-335 act-24) eta-1))))))) (lambda (a) (lambda (arg-337) (lambda (eta-1) (let ((act-51 (arg-337 eta-1))) (act-51 eta-1)))))) (lambda (a) (lambda (arg-6366) arg-6366))) (vector 0 (lambda (x) (Core-Core-show_Show__Error x)) (lambda (d) (lambda (x) (Core-Core-showPrec_Show__Error d x))))) err)) (lambda (arg-6) (lambda (eta-1) arg-6)) eta-0)))) (else (Prelude-IO-printLn 'erased 'erased (vector 0 (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-62) (lambda (eta-0) (Prelude-IO-map_Functor__IO 'erased 'erased func arg-62 eta-0)))))) (lambda (a) (lambda (arg-172) (lambda (eta-0) arg-172))) (lambda (b) (lambda (a) (lambda (arg-173) (lambda (arg-175) (lambda (eta-0) (let ((act-17 (arg-173 eta-0))) (let ((act-16 (arg-175 eta-0))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-334) (lambda (arg-335) (lambda (eta-0) (let ((act-24 (arg-334 eta-0))) ((arg-335 act-24) eta-0))))))) (lambda (a) (lambda (arg-337) (lambda (eta-0) (let ((act-51 (arg-337 eta-0))) (act-51 eta-0)))))) (lambda (a) (lambda (arg-6366) arg-6366))) (vector 0 (lambda (x) (Prelude-Show-show_Show__String x)) (lambda (d) (lambda (x) (Prelude-Show-showPrec_Show__String d x))))) (Synthesis-Test-getAnswerFile arg-1)))))))
(define Idris-Main-case--caseC-32blockC-32inC-32main-5781 (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((1) (let ((e-2 (vector-ref sc0 1))) (lambda (eta-0) (let ((act-24 (Synthesis-Test-parseAnswers (Synthesis-Test-getAnswerFile arg-1) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((1) (let ((e-3 (vector-ref sc1 1))) (Core-Core-coreRun 'erased 'erased (lambda (eta-1) (Idris-Main-runMain e-2 e-3 eta-1)) (lambda (err) (Prelude-IO-printLn 'erased 'erased (vector 0 (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-62) (lambda (eta-1) (Prelude-IO-map_Functor__IO 'erased 'erased func arg-62 eta-1)))))) (lambda (a) (lambda (arg-172) (lambda (eta-1) arg-172))) (lambda (b) (lambda (a) (lambda (arg-173) (lambda (arg-175) (lambda (eta-1) (let ((act-17 (arg-173 eta-1))) (let ((act-16 (arg-175 eta-1))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-334) (lambda (arg-335) (lambda (eta-1) (let ((act-25 (arg-334 eta-1))) ((arg-335 act-25) eta-1))))))) (lambda (a) (lambda (arg-337) (lambda (eta-1) (let ((act-51 (arg-337 eta-1))) (act-51 eta-1)))))) (lambda (a) (lambda (arg-6366) arg-6366))) (vector 0 (lambda (x) (Core-Core-show_Show__Error x)) (lambda (d) (lambda (x) (Core-Core-showPrec_Show__Error d x))))) err)) (lambda (arg-4) (lambda (eta-1) arg-4)) eta-0))) (else ((Prelude-IO-printLn 'erased 'erased (vector 0 (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-62) (lambda (eta-1) (Prelude-IO-map_Functor__IO 'erased 'erased func arg-62 eta-1)))))) (lambda (a) (lambda (arg-172) (lambda (eta-1) arg-172))) (lambda (b) (lambda (a) (lambda (arg-173) (lambda (arg-175) (lambda (eta-1) (let ((act-17 (arg-173 eta-1))) (let ((act-16 (arg-175 eta-1))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-334) (lambda (arg-335) (lambda (eta-1) (let ((act-25 (arg-334 eta-1))) ((arg-335 act-25) eta-1))))))) (lambda (a) (lambda (arg-337) (lambda (eta-1) (let ((act-51 (arg-337 eta-1))) (act-51 eta-1)))))) (lambda (a) (lambda (arg-6366) arg-6366))) (vector 0 (lambda (x) (Prelude-Show-show_Show__String x)) (lambda (d) (lambda (x) (Prelude-Show-showPrec_Show__String d x))))) (Synthesis-Test-getAnswerFile arg-1)) eta-0)))))))) (else (let ((e-5 (vector-ref sc0 1))) (Prelude-IO-printLn 'erased 'erased (vector 0 (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-62) (lambda (eta-0) (Prelude-IO-map_Functor__IO 'erased 'erased func arg-62 eta-0)))))) (lambda (a) (lambda (arg-172) (lambda (eta-0) arg-172))) (lambda (b) (lambda (a) (lambda (arg-173) (lambda (arg-175) (lambda (eta-0) (let ((act-17 (arg-173 eta-0))) (let ((act-16 (arg-175 eta-0))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-334) (lambda (arg-335) (lambda (eta-0) (let ((act-24 (arg-334 eta-0))) ((arg-335 act-24) eta-0))))))) (lambda (a) (lambda (arg-337) (lambda (eta-0) (let ((act-51 (arg-337 eta-0))) (act-51 eta-0)))))) (lambda (a) (lambda (arg-6366) arg-6366))) (vector 0 (lambda (x) (Parser-Support-show_Show__C-40ParseErrorC-32C-36tokC-41 'erased (vector 0 (lambda (x-0) (Parser-Lexer-Source-show_Show__Token x-0)) (lambda (d) (lambda (x-0) (Parser-Lexer-Source-showPrec_Show__Token d x-0)))) x)) (lambda (d) (lambda (x) (Parser-Support-showPrec_Show__C-40ParseErrorC-32C-36tokC-41 'erased (vector 0 (lambda (x-0) (Parser-Lexer-Source-show_Show__Token x-0)) (lambda (d-0) (lambda (x-0) (Parser-Lexer-Source-showPrec_Show__Token d-0 x-0)))) d x))))) e-5)))))))
(define Idris-Main-case--main-5747 (lambda (arg-0) (let ((sc0 arg-0)) (case (vector-ref sc0 0) ((1) (let ((e-2 (vector-ref sc0 2))) (let ((sc1 e-2)) (case (vector-ref sc1 0) ((1) (let ((e-4 (vector-ref sc1 1))) (let ((e-5 (vector-ref sc1 2))) (let ((sc2 e-5)) (case (vector-ref sc2 0) ((0) (lambda (eta-0) (let ((act-24 (Parser-Source-parseFile 'erased e-4 (vector 7 1 (TTImp-Parser-prog e-4) (lambda () (lambda (p) (vector 8 1 1 (Parser-Rule-Source-eoi) (lambda (_-5878) (vector 0 p)))))) eta-0))) (let ((sc3 act-24)) (case (vector-ref sc3 0) ((1) (let ((e-3 (vector-ref sc3 1))) (let ((act-25 (Synthesis-Test-parseAnswers (Synthesis-Test-getAnswerFile e-4) eta-0))) (let ((sc4 act-25)) (case (vector-ref sc4 0) ((1) (let ((e-6 (vector-ref sc4 1))) (Core-Core-coreRun 'erased 'erased (lambda (eta-1) (Idris-Main-runMain e-3 e-6 eta-1)) (lambda (err) (Prelude-IO-printLn 'erased 'erased (vector 0 (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-62) (lambda (eta-1) (Prelude-IO-map_Functor__IO 'erased 'erased func arg-62 eta-1)))))) (lambda (a) (lambda (arg-172) (lambda (eta-1) arg-172))) (lambda (b) (lambda (a) (lambda (arg-173) (lambda (arg-175) (lambda (eta-1) (let ((act-17 (arg-173 eta-1))) (let ((act-16 (arg-175 eta-1))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-334) (lambda (arg-335) (lambda (eta-1) (let ((act-26 (arg-334 eta-1))) ((arg-335 act-26) eta-1))))))) (lambda (a) (lambda (arg-337) (lambda (eta-1) (let ((act-51 (arg-337 eta-1))) (act-51 eta-1)))))) (lambda (a) (lambda (arg-6366) arg-6366))) (vector 0 (lambda (x) (Core-Core-show_Show__Error x)) (lambda (d) (lambda (x) (Core-Core-showPrec_Show__Error d x))))) err)) (lambda (arg-1) (lambda (eta-1) arg-1)) eta-0))) (else ((Prelude-IO-printLn 'erased 'erased (vector 0 (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-62) (lambda (eta-1) (Prelude-IO-map_Functor__IO 'erased 'erased func arg-62 eta-1)))))) (lambda (a) (lambda (arg-172) (lambda (eta-1) arg-172))) (lambda (b) (lambda (a) (lambda (arg-173) (lambda (arg-175) (lambda (eta-1) (let ((act-17 (arg-173 eta-1))) (let ((act-16 (arg-175 eta-1))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-334) (lambda (arg-335) (lambda (eta-1) (let ((act-26 (arg-334 eta-1))) ((arg-335 act-26) eta-1))))))) (lambda (a) (lambda (arg-337) (lambda (eta-1) (let ((act-51 (arg-337 eta-1))) (act-51 eta-1)))))) (lambda (a) (lambda (arg-6366) arg-6366))) (vector 0 (lambda (x) (Prelude-Show-show_Show__String x)) (lambda (d) (lambda (x) (Prelude-Show-showPrec_Show__String d x))))) (Synthesis-Test-getAnswerFile e-4)) eta-0))))))) (else (let ((e-6 (vector-ref sc3 1))) ((Prelude-IO-printLn 'erased 'erased (vector 0 (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-62) (lambda (eta-1) (Prelude-IO-map_Functor__IO 'erased 'erased func arg-62 eta-1)))))) (lambda (a) (lambda (arg-172) (lambda (eta-1) arg-172))) (lambda (b) (lambda (a) (lambda (arg-173) (lambda (arg-175) (lambda (eta-1) (let ((act-17 (arg-173 eta-1))) (let ((act-16 (arg-175 eta-1))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-334) (lambda (arg-335) (lambda (eta-1) (let ((act-25 (arg-334 eta-1))) ((arg-335 act-25) eta-1))))))) (lambda (a) (lambda (arg-337) (lambda (eta-1) (let ((act-51 (arg-337 eta-1))) (act-51 eta-1)))))) (lambda (a) (lambda (arg-6366) arg-6366))) (vector 0 (lambda (x) (Parser-Support-show_Show__C-40ParseErrorC-32C-36tokC-41 'erased (vector 0 (lambda (x-0) (Parser-Lexer-Source-show_Show__Token x-0)) (lambda (d) (lambda (x-0) (Parser-Lexer-Source-showPrec_Show__Token d x-0)))) x)) (lambda (d) (lambda (x) (Parser-Support-showPrec_Show__C-40ParseErrorC-32C-36tokC-41 'erased (vector 0 (lambda (x-0) (Parser-Lexer-Source-show_Show__Token x-0)) (lambda (d-0) (lambda (x-0) (Parser-Lexer-Source-showPrec_Show__Token d-0 x-0)))) d x))))) e-6) eta-0))))))))(else (Prelude-IO-putStrLn 'erased (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-62) (lambda (eta-0) (Prelude-IO-map_Functor__IO 'erased 'erased func arg-62 eta-0)))))) (lambda (a) (lambda (arg-172) (lambda (eta-0) arg-172))) (lambda (b) (lambda (a) (lambda (arg-173) (lambda (arg-175) (lambda (eta-0) (let ((act-17 (arg-173 eta-0))) (let ((act-16 (arg-175 eta-0))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-334) (lambda (arg-335) (lambda (eta-0) (let ((act-24 (arg-334 eta-0))) ((arg-335 act-24) eta-0))))))) (lambda (a) (lambda (arg-337) (lambda (eta-0) (let ((act-51 (arg-337 eta-0))) (act-51 eta-0)))))) (lambda (a) (lambda (arg-6366) arg-6366))) "Usage: tinyidris <filename>")))))))(else (Prelude-IO-putStrLn 'erased (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-62) (lambda (eta-0) (Prelude-IO-map_Functor__IO 'erased 'erased func arg-62 eta-0)))))) (lambda (a) (lambda (arg-172) (lambda (eta-0) arg-172))) (lambda (b) (lambda (a) (lambda (arg-173) (lambda (arg-175) (lambda (eta-0) (let ((act-17 (arg-173 eta-0))) (let ((act-16 (arg-175 eta-0))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-334) (lambda (arg-335) (lambda (eta-0) (let ((act-24 (arg-334 eta-0))) ((arg-335 act-24) eta-0))))))) (lambda (a) (lambda (arg-337) (lambda (eta-0) (let ((act-51 (arg-337 eta-0))) (act-51 eta-0)))))) (lambda (a) (lambda (arg-6366) arg-6366))) "Usage: tinyidris <filename>"))))))(else (Prelude-IO-putStrLn 'erased (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-62) (lambda (eta-0) (Prelude-IO-map_Functor__IO 'erased 'erased func arg-62 eta-0)))))) (lambda (a) (lambda (arg-172) (lambda (eta-0) arg-172))) (lambda (b) (lambda (a) (lambda (arg-173) (lambda (arg-175) (lambda (eta-0) (let ((act-17 (arg-173 eta-0))) (let ((act-16 (arg-175 eta-0))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-334) (lambda (arg-335) (lambda (eta-0) (let ((act-24 (arg-334 eta-0))) ((arg-335 act-24) eta-0))))))) (lambda (a) (lambda (arg-337) (lambda (eta-0) (let ((act-51 (arg-337 eta-0))) (act-51 eta-0)))))) (lambda (a) (lambda (arg-6366) arg-6366))) "Usage: tinyidris <filename>"))))))
(define Idris-Main-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32caseC-32blockC-32inC-32caseC-32blockC-32inC-32repl-5461 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (let ((sc0 arg-6)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (lambda (eta-0) (let ((act-24 (let ((act-24 ((Prelude-IO-putStrLn 'erased (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-62) (lambda (eta-1) (Prelude-IO-map_Functor__IO 'erased 'erased func arg-62 eta-1)))))) (lambda (a) (lambda (arg-172) (lambda (eta-1) arg-172))) (lambda (b) (lambda (a) (lambda (arg-173) (lambda (arg-175) (lambda (eta-1) (let ((act-17 (arg-173 eta-1))) (let ((act-16 (arg-175 eta-1))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-334) (lambda (arg-335) (lambda (eta-1) (let ((act-24 (arg-334 eta-1))) ((arg-335 act-24) eta-1))))))) (lambda (a) (lambda (arg-337) (lambda (eta-1) (let ((act-51 (arg-337 eta-1))) (act-51 eta-1)))))) (lambda (a) (lambda (arg-6366) arg-6366))) (Prelude-Types-Strings-C-43C-43 "Checked: " (Core-TT-show_Show__C-40TermC-32C-36varsC-41 (vector 0 ) e-2))) eta-0))) (vector 1 act-24)))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-4 (vector-ref sc1 1))) (vector 0 e-4))) (else (let ((act-25 (let ((act-25 (unbox arg-2))) (vector 1 act-25)))) (let ((sc2 act-25)) (case (vector-ref sc2 0) ((0) (let ((e-4 (vector-ref sc2 1))) (vector 0 e-4))) (else (let ((e-6 (vector-ref sc2 1))) (let ((act-26 (let ((act-26 ((Core-Normalise-getTerm 'erased e-3) eta-0))) (let ((sc3 act-26)) (case (vector-ref sc3 0) ((0) (let ((e-4 (vector-ref sc3 1))) (vector 0 e-4))) (else (let ((e-7 (vector-ref sc3 1))) (let ((act-27 (Core-Normalise-normalise (vector 0 ) e-6 (vector 0 ) e-7 eta-0))) (let ((sc4 act-27)) (case (vector-ref sc4 0) ((0) (let ((e-4 (vector-ref sc4 1))) (vector 0 e-4))) (else (let ((e-8 (vector-ref sc4 1))) (let ((act-28 ((Prelude-IO-putStrLn 'erased (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-62) (lambda (eta-1) (Prelude-IO-map_Functor__IO 'erased 'erased func arg-62 eta-1)))))) (lambda (a) (lambda (arg-172) (lambda (eta-1) arg-172))) (lambda (b) (lambda (a) (lambda (arg-173) (lambda (arg-175) (lambda (eta-1) (let ((act-17 (arg-173 eta-1))) (let ((act-16 (arg-175 eta-1))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-334) (lambda (arg-335) (lambda (eta-1) (let ((act-28 (arg-334 eta-1))) ((arg-335 act-28) eta-1))))))) (lambda (a) (lambda (arg-337) (lambda (eta-1) (let ((act-51 (arg-337 eta-1))) (act-51 eta-1)))))) (lambda (a) (lambda (arg-6366) arg-6366))) (Prelude-Types-Strings-C-43C-43 "Type: " (Core-TT-show_Show__C-40TermC-32C-36varsC-41 (vector 0 ) e-8))) eta-0))) (vector 1 act-28)))))))))))))) (let ((sc3 act-26)) (case (vector-ref sc3 0) ((0) (let ((e-4 (vector-ref sc3 1))) (vector 0 e-4))) (else (let ((act-27 (Core-Normalise-normalise (vector 0 ) e-6 (vector 0 ) e-2 eta-0))) (let ((sc4 act-27)) (case (vector-ref sc4 0) ((0) (let ((e-4 (vector-ref sc4 1))) (vector 0 e-4))) (else (let ((e-8 (vector-ref sc4 1))) (let ((act-28 (let ((act-28 ((Prelude-IO-putStrLn 'erased (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-62) (lambda (eta-1) (Prelude-IO-map_Functor__IO 'erased 'erased func arg-62 eta-1)))))) (lambda (a) (lambda (arg-172) (lambda (eta-1) arg-172))) (lambda (b) (lambda (a) (lambda (arg-173) (lambda (arg-175) (lambda (eta-1) (let ((act-17 (arg-173 eta-1))) (let ((act-16 (arg-175 eta-1))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-334) (lambda (arg-335) (lambda (eta-1) (let ((act-28 (arg-334 eta-1))) ((arg-335 act-28) eta-1))))))) (lambda (a) (lambda (arg-337) (lambda (eta-1) (let ((act-51 (arg-337 eta-1))) (act-51 eta-1)))))) (lambda (a) (lambda (arg-6366) arg-6366))) (Prelude-Types-Strings-C-43C-43 "Evaluated: " (Core-TT-show_Show__C-40TermC-32C-36varsC-41 (vector 0 ) e-8))) eta-0))) (vector 1 act-28)))) (let ((sc5 act-28)) (case (vector-ref sc5 0) ((0) (let ((e-4 (vector-ref sc5 1))) (vector 0 e-4))) (else (Idris-Main-repl arg-2 arg-1 arg-0 eta-0)))))))))))))))))))))))))))))
(define Idris-Main-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32caseC-32blockC-32inC-32repl-5432 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-5)) (case (vector-ref sc0 0) ((1) (let ((e-2 (vector-ref sc0 1))) (lambda (eta-0) (let ((act-24 ((TTImp-Elab-Term-checkTerm (vector 0 ) arg-2 arg-1 (vector 0 ) e-2 (vector 0 )) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-3 (vector-ref sc1 1))) (vector 0 e-3))) (else (let ((e-5 (vector-ref sc1 1))) (let ((sc2 e-5)) (let ((e-4 (vector-ref sc2 1))) (let ((e-3 (vector-ref sc2 2))) (let ((act-25 (let ((act-25 ((Prelude-IO-putStrLn 'erased (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-62) (lambda (eta-1) (Prelude-IO-map_Functor__IO 'erased 'erased func arg-62 eta-1)))))) (lambda (a) (lambda (arg-172) (lambda (eta-1) arg-172))) (lambda (b) (lambda (a) (lambda (arg-173) (lambda (arg-175) (lambda (eta-1) (let ((act-17 (arg-173 eta-1))) (let ((act-16 (arg-175 eta-1))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-334) (lambda (arg-335) (lambda (eta-1) (let ((act-25 (arg-334 eta-1))) ((arg-335 act-25) eta-1))))))) (lambda (a) (lambda (arg-337) (lambda (eta-1) (let ((act-51 (arg-337 eta-1))) (act-51 eta-1)))))) (lambda (a) (lambda (arg-6366) arg-6366))) (Prelude-Types-Strings-C-43C-43 "Checked: " (Core-TT-show_Show__C-40TermC-32C-36varsC-41 (vector 0 ) e-4))) eta-0))) (vector 1 act-25)))) (let ((sc3 act-25)) (case (vector-ref sc3 0) ((0) (let ((e-6 (vector-ref sc3 1))) (vector 0 e-6))) (else (let ((act-26 (let ((act-26 (unbox arg-2))) (vector 1 act-26)))) (let ((sc4 act-26)) (case (vector-ref sc4 0) ((0) (let ((e-7 (vector-ref sc4 1))) (vector 0 e-7))) (else (let ((e-7 (vector-ref sc4 1))) (let ((act-27 (let ((act-27 ((Core-Normalise-getTerm 'erased e-3) eta-0))) (let ((sc5 act-27)) (case (vector-ref sc5 0) ((0) (let ((e-8 (vector-ref sc5 1))) (vector 0 e-8))) (else (let ((e-8 (vector-ref sc5 1))) (let ((act-28 (Core-Normalise-normalise (vector 0 ) e-7 (vector 0 ) e-8 eta-0))) (let ((sc6 act-28)) (case (vector-ref sc6 0) ((0) (let ((e-9 (vector-ref sc6 1))) (vector 0 e-9))) (else (let ((e-9 (vector-ref sc6 1))) (let ((act-29 ((Prelude-IO-putStrLn 'erased (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-62) (lambda (eta-1) (Prelude-IO-map_Functor__IO 'erased 'erased func arg-62 eta-1)))))) (lambda (a) (lambda (arg-172) (lambda (eta-1) arg-172))) (lambda (b) (lambda (a) (lambda (arg-173) (lambda (arg-175) (lambda (eta-1) (let ((act-17 (arg-173 eta-1))) (let ((act-16 (arg-175 eta-1))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-334) (lambda (arg-335) (lambda (eta-1) (let ((act-29 (arg-334 eta-1))) ((arg-335 act-29) eta-1))))))) (lambda (a) (lambda (arg-337) (lambda (eta-1) (let ((act-51 (arg-337 eta-1))) (act-51 eta-1)))))) (lambda (a) (lambda (arg-6366) arg-6366))) (Prelude-Types-Strings-C-43C-43 "Type: " (Core-TT-show_Show__C-40TermC-32C-36varsC-41 (vector 0 ) e-9))) eta-0))) (vector 1 act-29)))))))))))))) (let ((sc5 act-27)) (case (vector-ref sc5 0) ((0) (let ((e-8 (vector-ref sc5 1))) (vector 0 e-8))) (else (let ((act-28 (Core-Normalise-normalise (vector 0 ) e-7 (vector 0 ) e-4 eta-0))) (let ((sc6 act-28)) (case (vector-ref sc6 0) ((0) (let ((e-9 (vector-ref sc6 1))) (vector 0 e-9))) (else (let ((e-9 (vector-ref sc6 1))) (let ((act-29 (let ((act-29 ((Prelude-IO-putStrLn 'erased (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-62) (lambda (eta-1) (Prelude-IO-map_Functor__IO 'erased 'erased func arg-62 eta-1)))))) (lambda (a) (lambda (arg-172) (lambda (eta-1) arg-172))) (lambda (b) (lambda (a) (lambda (arg-173) (lambda (arg-175) (lambda (eta-1) (let ((act-17 (arg-173 eta-1))) (let ((act-16 (arg-175 eta-1))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-334) (lambda (arg-335) (lambda (eta-1) (let ((act-29 (arg-334 eta-1))) ((arg-335 act-29) eta-1))))))) (lambda (a) (lambda (arg-337) (lambda (eta-1) (let ((act-51 (arg-337 eta-1))) (act-51 eta-1)))))) (lambda (a) (lambda (arg-6366) arg-6366))) (Prelude-Types-Strings-C-43C-43 "Evaluated: " (Core-TT-show_Show__C-40TermC-32C-36varsC-41 (vector 0 ) e-9))) eta-0))) (vector 1 act-29)))) (let ((sc7 act-29)) (case (vector-ref sc7 0) ((0) (let ((e-10 (vector-ref sc7 1))) (vector 0 e-10))) (else (Idris-Main-repl arg-2 arg-1 arg-0 eta-0)))))))))))))))))))))))))))))))))) (else (let ((e-5 (vector-ref sc0 1))) (lambda (eta-0) (let ((act-24 (let ((act-24 ((Prelude-IO-printLn 'erased 'erased (vector 0 (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-62) (lambda (eta-1) (Prelude-IO-map_Functor__IO 'erased 'erased func arg-62 eta-1)))))) (lambda (a) (lambda (arg-172) (lambda (eta-1) arg-172))) (lambda (b) (lambda (a) (lambda (arg-173) (lambda (arg-175) (lambda (eta-1) (let ((act-17 (arg-173 eta-1))) (let ((act-16 (arg-175 eta-1))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-334) (lambda (arg-335) (lambda (eta-1) (let ((act-24 (arg-334 eta-1))) ((arg-335 act-24) eta-1))))))) (lambda (a) (lambda (arg-337) (lambda (eta-1) (let ((act-51 (arg-337 eta-1))) (act-51 eta-1)))))) (lambda (a) (lambda (arg-6366) arg-6366))) (vector 0 (lambda (x) (Parser-Support-show_Show__C-40ParseErrorC-32C-36tokC-41 'erased (vector 0 (lambda (x-0) (Parser-Lexer-Source-show_Show__Token x-0)) (lambda (d) (lambda (x-0) (Parser-Lexer-Source-showPrec_Show__Token d x-0)))) x)) (lambda (d) (lambda (x) (Parser-Support-showPrec_Show__C-40ParseErrorC-32C-36tokC-41 'erased (vector 0 (lambda (x-0) (Parser-Lexer-Source-show_Show__Token x-0)) (lambda (d-0) (lambda (x-0) (Parser-Lexer-Source-showPrec_Show__Token d-0 x-0)))) d x))))) e-5) eta-0))) (vector 1 act-24)))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (Idris-Main-repl arg-2 arg-1 arg-0 eta-0))))))))))))
(define Idris-Main-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32repl-5409 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-5)) (cond ((equal? sc0 1) (Idris-Main-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32caseC-32blockC-32inC-32repl-5432 arg-0 arg-1 arg-2 arg-3 arg-4 (Parser-Source-runParser 'erased 0 (vector 0 ) arg-4 (TTImp-Parser-expr "(input)" (Parser-Rule-Source-init))))) (else (lambda (eta-0) (let ((act-24 (let ((act-24 ((Prelude-IO-putStrLn 'erased (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-62) (lambda (eta-1) (Prelude-IO-map_Functor__IO 'erased 'erased func arg-62 eta-1)))))) (lambda (a) (lambda (arg-172) (lambda (eta-1) arg-172))) (lambda (b) (lambda (a) (lambda (arg-173) (lambda (arg-175) (lambda (eta-1) (let ((act-17 (arg-173 eta-1))) (let ((act-16 (arg-175 eta-1))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-334) (lambda (arg-335) (lambda (eta-1) (let ((act-24 (arg-334 eta-1))) ((arg-335 act-24) eta-1))))))) (lambda (a) (lambda (arg-337) (lambda (eta-1) (let ((act-51 (arg-337 eta-1))) (act-51 eta-1)))))) (lambda (a) (lambda (arg-6366) arg-6366))) "Running tests: ") eta-0))) (vector 1 act-24)))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((act-25 (Synthesis-Test-runTests arg-2 arg-1 arg-0 eta-0))) (let ((sc2 act-25)) (case (vector-ref sc2 0) ((0) (let ((e-2 (vector-ref sc2 1))) (vector 0 e-2))) (else (Idris-Main-repl arg-2 arg-1 arg-0 eta-0)))))))))))))))
(define Idris-Main-case--caseC-32blockC-32inC-32repl-5394 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-5)) (case (vector-ref sc0 0) ((0) (Idris-Main-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32repl-5409 arg-0 arg-1 arg-2 arg-3 arg-4 (Idris-Main-isTest arg-4))) (else (let ((e-2 (vector-ref sc0 1))) (lambda (eta-0) (let ((act-24 (let ((act-24 ((Prelude-IO-putStrLn 'erased (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-62) (lambda (eta-1) (Prelude-IO-map_Functor__IO 'erased 'erased func arg-62 eta-1)))))) (lambda (a) (lambda (arg-172) (lambda (eta-1) arg-172))) (lambda (b) (lambda (a) (lambda (arg-173) (lambda (arg-175) (lambda (eta-1) (let ((act-17 (arg-173 eta-1))) (let ((act-16 (arg-175 eta-1))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-334) (lambda (arg-335) (lambda (eta-1) (let ((act-24 (arg-334 eta-1))) ((arg-335 act-24) eta-1))))))) (lambda (a) (lambda (arg-337) (lambda (eta-1) (let ((act-51 (arg-337 eta-1))) (act-51 eta-1)))))) (lambda (a) (lambda (arg-6366) arg-6366))) "Running One Test: ") eta-0))) (vector 1 act-24)))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-3 (vector-ref sc1 1))) (vector 0 e-3))) (else (let ((act-25 ((Idris-Main-runTestOne arg-2 arg-1 arg-0 e-2) eta-0))) (let ((sc2 act-25)) (case (vector-ref sc2 0) ((0) (let ((e-3 (vector-ref sc2 1))) (vector 0 e-3))) (else (Idris-Main-repl arg-2 arg-1 arg-0 eta-0))))))))))))))))
(define Idris-Main-case--repl-5378 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-5)) (case (vector-ref sc0 0) ((0) (Idris-Main-case--caseC-32blockC-32inC-32repl-5394 arg-0 arg-1 arg-2 arg-3 arg-4 (Idris-Main-isTestOne arg-4))) (else (let ((e-2 (vector-ref sc0 1))) (lambda (eta-0) (let ((act-24 (let ((act-24 ((Prelude-IO-putStrLn 'erased (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-62) (lambda (eta-1) (Prelude-IO-map_Functor__IO 'erased 'erased func arg-62 eta-1)))))) (lambda (a) (lambda (arg-172) (lambda (eta-1) arg-172))) (lambda (b) (lambda (a) (lambda (arg-173) (lambda (arg-175) (lambda (eta-1) (let ((act-17 (arg-173 eta-1))) (let ((act-16 (arg-175 eta-1))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-334) (lambda (arg-335) (lambda (eta-1) (let ((act-24 (arg-334 eta-1))) ((arg-335 act-24) eta-1))))))) (lambda (a) (lambda (arg-337) (lambda (eta-1) (let ((act-51 (arg-337 eta-1))) (act-51 eta-1)))))) (lambda (a) (lambda (arg-6366) arg-6366))) "Running Auto Search: ") eta-0))) (vector 1 act-24)))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-3 (vector-ref sc1 1))) (vector 0 e-3))) (else (let ((act-25 ((Idris-Main-runAuto arg-2 arg-1 arg-0 e-2) eta-0))) (let ((sc2 act-25)) (case (vector-ref sc2 0) ((0) (let ((e-3 (vector-ref sc2 1))) (vector 0 e-3))) (else (Idris-Main-repl arg-2 arg-1 arg-0 eta-0))))))))))))))))
(define Idris-Main-case--caseC-32blockC-32inC-32runTestOne-5300 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-4)) (case (vector-ref sc0 0) ((0) (let ((e-0 (vector-ref sc0 1))) (lambda (eta-0) (Synthesis-Test-testOne arg-3 arg-2 arg-1 e-0 eta-0))))(else (lambda (eta-0) (let ((act-24 ((Prelude-IO-putStrLn 'erased (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-62) (lambda (eta-1) (Prelude-IO-map_Functor__IO 'erased 'erased func arg-62 eta-1)))))) (lambda (a) (lambda (arg-172) (lambda (eta-1) arg-172))) (lambda (b) (lambda (a) (lambda (arg-173) (lambda (arg-175) (lambda (eta-1) (let ((act-17 (arg-173 eta-1))) (let ((act-16 (arg-175 eta-1))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-334) (lambda (arg-335) (lambda (eta-1) (let ((act-24 (arg-334 eta-1))) ((arg-335 act-24) eta-1))))))) (lambda (a) (lambda (arg-337) (lambda (eta-1) (let ((act-51 (arg-337 eta-1))) (act-51 eta-1)))))) (lambda (a) (lambda (arg-6366) arg-6366))) "Not a hole or var") eta-0))) (vector 1 act-24))))))))
(define Idris-Main-case--runTestOne-5277 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-4)) (case (vector-ref sc0 0) ((1) (let ((e-2 (vector-ref sc0 1))) (lambda (eta-0) (let ((act-24 (let ((sc1 e-2)) (case (vector-ref sc1 0) ((0) (let ((e-0 (vector-ref sc1 1))) (Synthesis-Test-testOne arg-3 arg-2 arg-1 e-0 eta-0)))(else (let ((act-24 ((Prelude-IO-putStrLn 'erased (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-62) (lambda (eta-1) (Prelude-IO-map_Functor__IO 'erased 'erased func arg-62 eta-1)))))) (lambda (a) (lambda (arg-172) (lambda (eta-1) arg-172))) (lambda (b) (lambda (a) (lambda (arg-173) (lambda (arg-175) (lambda (eta-1) (let ((act-17 (arg-173 eta-1))) (let ((act-16 (arg-175 eta-1))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-334) (lambda (arg-335) (lambda (eta-1) (let ((act-24 (arg-334 eta-1))) ((arg-335 act-24) eta-1))))))) (lambda (a) (lambda (arg-337) (lambda (eta-1) (let ((act-51 (arg-337 eta-1))) (act-51 eta-1)))))) (lambda (a) (lambda (arg-6366) arg-6366))) "Not a hole or var") eta-0))) (vector 1 act-24))))))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-3 (vector-ref sc1 1))) (vector 0 e-3))) (else (Idris-Main-repl arg-3 arg-2 arg-1 eta-0)))))))) (else (let ((e-5 (vector-ref sc0 1))) (lambda (eta-0) (let ((act-24 (let ((act-24 ((Prelude-IO-printLn 'erased 'erased (vector 0 (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-62) (lambda (eta-1) (Prelude-IO-map_Functor__IO 'erased 'erased func arg-62 eta-1)))))) (lambda (a) (lambda (arg-172) (lambda (eta-1) arg-172))) (lambda (b) (lambda (a) (lambda (arg-173) (lambda (arg-175) (lambda (eta-1) (let ((act-17 (arg-173 eta-1))) (let ((act-16 (arg-175 eta-1))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-334) (lambda (arg-335) (lambda (eta-1) (let ((act-24 (arg-334 eta-1))) ((arg-335 act-24) eta-1))))))) (lambda (a) (lambda (arg-337) (lambda (eta-1) (let ((act-51 (arg-337 eta-1))) (act-51 eta-1)))))) (lambda (a) (lambda (arg-6366) arg-6366))) (vector 0 (lambda (x) (Parser-Support-show_Show__C-40ParseErrorC-32C-36tokC-41 'erased (vector 0 (lambda (x-0) (Parser-Lexer-Source-show_Show__Token x-0)) (lambda (d) (lambda (x-0) (Parser-Lexer-Source-showPrec_Show__Token d x-0)))) x)) (lambda (d) (lambda (x) (Parser-Support-showPrec_Show__C-40ParseErrorC-32C-36tokC-41 'erased (vector 0 (lambda (x-0) (Parser-Lexer-Source-show_Show__Token x-0)) (lambda (d-0) (lambda (x-0) (Parser-Lexer-Source-showPrec_Show__Token d-0 x-0)))) d x))))) e-5) eta-0))) (vector 1 act-24)))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (Idris-Main-repl arg-3 arg-2 arg-1 eta-0))))))))))))
(define Idris-Main-case--caseC-32blockC-32inC-32runAuto-5202 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-4)) (case (vector-ref sc0 0) ((0) (let ((e-0 (vector-ref sc0 1))) (lambda (eta-0) (let ((act-24 (Synthesis-Synthesize-run arg-3 arg-2 e-0 eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc1 1))) (let ((act-25 ((Prelude-IO-putStrLn 'erased (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-62) (lambda (eta-1) (Prelude-IO-map_Functor__IO 'erased 'erased func arg-62 eta-1)))))) (lambda (a) (lambda (arg-172) (lambda (eta-1) arg-172))) (lambda (b) (lambda (a) (lambda (arg-173) (lambda (arg-175) (lambda (eta-1) (let ((act-17 (arg-173 eta-1))) (let ((act-16 (arg-175 eta-1))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-334) (lambda (arg-335) (lambda (eta-1) (let ((act-25 (arg-334 eta-1))) ((arg-335 act-25) eta-1))))))) (lambda (a) (lambda (arg-337) (lambda (eta-1) (let ((act-51 (arg-337 eta-1))) (act-51 eta-1)))))) (lambda (a) (lambda (arg-6366) arg-6366))) e-5) eta-0))) (vector 1 act-25))))))))))(else (lambda (eta-0) (let ((act-24 ((Prelude-IO-putStrLn 'erased (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-62) (lambda (eta-1) (Prelude-IO-map_Functor__IO 'erased 'erased func arg-62 eta-1)))))) (lambda (a) (lambda (arg-172) (lambda (eta-1) arg-172))) (lambda (b) (lambda (a) (lambda (arg-173) (lambda (arg-175) (lambda (eta-1) (let ((act-17 (arg-173 eta-1))) (let ((act-16 (arg-175 eta-1))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-334) (lambda (arg-335) (lambda (eta-1) (let ((act-24 (arg-334 eta-1))) ((arg-335 act-24) eta-1))))))) (lambda (a) (lambda (arg-337) (lambda (eta-1) (let ((act-51 (arg-337 eta-1))) (act-51 eta-1)))))) (lambda (a) (lambda (arg-6366) arg-6366))) "Not a hole or var") eta-0))) (vector 1 act-24))))))))
(define Idris-Main-case--runAuto-5179 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-4)) (case (vector-ref sc0 0) ((1) (let ((e-2 (vector-ref sc0 1))) (lambda (eta-0) (let ((act-24 (let ((sc1 e-2)) (case (vector-ref sc1 0) ((0) (let ((e-0 (vector-ref sc1 1))) (let ((act-24 (Synthesis-Synthesize-run arg-3 arg-2 e-0 eta-0))) (let ((sc2 act-24)) (case (vector-ref sc2 0) ((0) (let ((e-3 (vector-ref sc2 1))) (vector 0 e-3))) (else (let ((e-5 (vector-ref sc2 1))) (let ((act-25 ((Prelude-IO-putStrLn 'erased (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-62) (lambda (eta-1) (Prelude-IO-map_Functor__IO 'erased 'erased func arg-62 eta-1)))))) (lambda (a) (lambda (arg-172) (lambda (eta-1) arg-172))) (lambda (b) (lambda (a) (lambda (arg-173) (lambda (arg-175) (lambda (eta-1) (let ((act-17 (arg-173 eta-1))) (let ((act-16 (arg-175 eta-1))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-334) (lambda (arg-335) (lambda (eta-1) (let ((act-25 (arg-334 eta-1))) ((arg-335 act-25) eta-1))))))) (lambda (a) (lambda (arg-337) (lambda (eta-1) (let ((act-51 (arg-337 eta-1))) (act-51 eta-1)))))) (lambda (a) (lambda (arg-6366) arg-6366))) e-5) eta-0))) (vector 1 act-25)))))))))(else (let ((act-24 ((Prelude-IO-putStrLn 'erased (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-62) (lambda (eta-1) (Prelude-IO-map_Functor__IO 'erased 'erased func arg-62 eta-1)))))) (lambda (a) (lambda (arg-172) (lambda (eta-1) arg-172))) (lambda (b) (lambda (a) (lambda (arg-173) (lambda (arg-175) (lambda (eta-1) (let ((act-17 (arg-173 eta-1))) (let ((act-16 (arg-175 eta-1))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-334) (lambda (arg-335) (lambda (eta-1) (let ((act-24 (arg-334 eta-1))) ((arg-335 act-24) eta-1))))))) (lambda (a) (lambda (arg-337) (lambda (eta-1) (let ((act-51 (arg-337 eta-1))) (act-51 eta-1)))))) (lambda (a) (lambda (arg-6366) arg-6366))) "Not a hole or var") eta-0))) (vector 1 act-24))))))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-3 (vector-ref sc1 1))) (vector 0 e-3))) (else (Idris-Main-repl arg-3 arg-2 arg-1 eta-0)))))))) (else (let ((e-5 (vector-ref sc0 1))) (lambda (eta-0) (let ((act-24 (let ((act-24 ((Prelude-IO-printLn 'erased 'erased (vector 0 (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-62) (lambda (eta-1) (Prelude-IO-map_Functor__IO 'erased 'erased func arg-62 eta-1)))))) (lambda (a) (lambda (arg-172) (lambda (eta-1) arg-172))) (lambda (b) (lambda (a) (lambda (arg-173) (lambda (arg-175) (lambda (eta-1) (let ((act-17 (arg-173 eta-1))) (let ((act-16 (arg-175 eta-1))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-334) (lambda (arg-335) (lambda (eta-1) (let ((act-24 (arg-334 eta-1))) ((arg-335 act-24) eta-1))))))) (lambda (a) (lambda (arg-337) (lambda (eta-1) (let ((act-51 (arg-337 eta-1))) (act-51 eta-1)))))) (lambda (a) (lambda (arg-6366) arg-6366))) (vector 0 (lambda (x) (Parser-Support-show_Show__C-40ParseErrorC-32C-36tokC-41 'erased (vector 0 (lambda (x-0) (Parser-Lexer-Source-show_Show__Token x-0)) (lambda (d) (lambda (x-0) (Parser-Lexer-Source-showPrec_Show__Token d x-0)))) x)) (lambda (d) (lambda (x) (Parser-Support-showPrec_Show__C-40ParseErrorC-32C-36tokC-41 'erased (vector 0 (lambda (x-0) (Parser-Lexer-Source-show_Show__Token x-0)) (lambda (d-0) (lambda (x-0) (Parser-Lexer-Source-showPrec_Show__Token d-0 x-0)))) d x))))) e-5) eta-0))) (vector 1 act-24)))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (Idris-Main-repl arg-3 arg-2 arg-1 eta-0))))))))))))
(define Idris-Main-case--isTestOne-5142 (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (cond ((equal? sc0 0) (vector 1 (Data-Strings-strSubstr 8 (Data-Strings-strLength arg-0) arg-0))) (else (vector 0 ))))))
(define Idris-Main-case--isAuto-5125 (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (cond ((equal? sc0 0) (vector 1 (Data-Strings-strSubstr 5 (Data-Strings-strLength arg-0) arg-0))) (else (vector 0 ))))))
(define Idris-Main-runTestOne (lambda (arg-0 arg-1 arg-2 arg-3) (Idris-Main-case--runTestOne-5277 arg-3 arg-2 arg-1 arg-0 (Parser-Source-runParser 'erased 0 (vector 0 ) arg-3 (TTImp-Parser-expr "(input)" (Parser-Rule-Source-init))))))
(define Idris-Main-runMain (lambda (arg-0 arg-1 ext-0) (let ((act-24 (let ((act-24 (Core-Context-initDefs ext-0))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (Core-Core-newRef 'erased 'erased (vector "Core.Context.Ctxt" ) e-5 ext-0)))))))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (let ((act-25 (Core-Core-newRef 'erased 'erased (vector "Core.UnifyState.UST" ) (Core-UnifyState-initUState) ext-0))) (let ((sc1 act-25)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-6 (vector-ref sc1 1))) (let ((act-26 (Core-Core-newRef 'erased 'erased (vector "Synthesis.Test.Answers" ) arg-1 ext-0))) (let ((sc2 act-26)) (case (vector-ref sc2 0) ((0) (let ((e-2 (vector-ref sc2 1))) (vector 0 e-2))) (else (let ((e-7 (vector-ref sc2 1))) (let ((act-27 ((Core-Core-traverse_ 'erased 'erased (lambda (eta-0) (TTImp-ProcessDecl-processDecl e-5 e-6 eta-0)) arg-0) ext-0))) (let ((sc3 act-27)) (case (vector-ref sc3 0) ((0) (let ((e-2 (vector-ref sc3 1))) (vector 0 e-2))) (else (Idris-Main-repl e-5 e-6 e-7 ext-0))))))))))))))))))))))
(define Idris-Main-runAuto (lambda (arg-0 arg-1 arg-2 arg-3) (Idris-Main-case--runAuto-5179 arg-3 arg-2 arg-1 arg-0 (Parser-Source-runParser 'erased 0 (vector 0 ) arg-3 (TTImp-Parser-expr "(input)" (Parser-Rule-Source-init))))))
(define Idris-Main-repl (lambda (arg-0 arg-1 arg-2 ext-0) (let ((act-24 (let ((act-24 ((Prelude-IO-putStr 'erased (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-62) (lambda (eta-0) (Prelude-IO-map_Functor__IO 'erased 'erased func arg-62 eta-0)))))) (lambda (a) (lambda (arg-172) (lambda (eta-0) arg-172))) (lambda (b) (lambda (a) (lambda (arg-173) (lambda (arg-175) (lambda (eta-0) (let ((act-17 (arg-173 eta-0))) (let ((act-16 (arg-175 eta-0))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-334) (lambda (arg-335) (lambda (eta-0) (let ((act-24 (arg-334 eta-0))) ((arg-335 act-24) eta-0))))))) (lambda (a) (lambda (arg-337) (lambda (eta-0) (let ((act-51 (arg-337 eta-0))) (act-51 eta-0)))))) (lambda (a) (lambda (arg-6366) arg-6366))) "> ") ext-0))) (vector 1 act-24)))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (let ((act-25 (let ((act-25 ((Prelude-IO-getLine 'erased (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-62) (lambda (eta-0) (Prelude-IO-map_Functor__IO 'erased 'erased func arg-62 eta-0)))))) (lambda (a) (lambda (arg-172) (lambda (eta-0) arg-172))) (lambda (b) (lambda (a) (lambda (arg-173) (lambda (arg-175) (lambda (eta-0) (let ((act-17 (arg-173 eta-0))) (let ((act-16 (arg-175 eta-0))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-334) (lambda (arg-335) (lambda (eta-0) (let ((act-25 (arg-334 eta-0))) ((arg-335 act-25) eta-0))))))) (lambda (a) (lambda (arg-337) (lambda (eta-0) (let ((act-51 (arg-337 eta-0))) (act-51 eta-0)))))) (lambda (a) (lambda (arg-6366) arg-6366)))) ext-0))) (vector 1 act-25)))) (let ((sc1 act-25)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-6 (vector-ref sc1 1))) ((Idris-Main-case--repl-5378 arg-2 arg-1 arg-0 e-5 e-6 (Idris-Main-isAuto e-6)) ext-0)))))))))))))
(define Idris-Main-main (lambda (ext-0) (let ((act-24 ((System-getArgs 'erased (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-62) (lambda (eta-0) (Prelude-IO-map_Functor__IO 'erased 'erased func arg-62 eta-0)))))) (lambda (a) (lambda (arg-172) (lambda (eta-0) arg-172))) (lambda (b) (lambda (a) (lambda (arg-173) (lambda (arg-175) (lambda (eta-0) (let ((act-17 (arg-173 eta-0))) (let ((act-16 (arg-175 eta-0))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-334) (lambda (arg-335) (lambda (eta-0) (let ((act-24 (arg-334 eta-0))) ((arg-335 act-24) eta-0))))))) (lambda (a) (lambda (arg-337) (lambda (eta-0) (let ((act-51 (arg-337 eta-0))) (act-51 eta-0)))))) (lambda (a) (lambda (arg-6366) arg-6366)))) ext-0))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((1) (let ((e-2 (vector-ref sc0 2))) (let ((sc1 e-2)) (case (vector-ref sc1 0) ((1) (let ((e-4 (vector-ref sc1 1))) (let ((e-5 (vector-ref sc1 2))) (let ((sc2 e-5)) (case (vector-ref sc2 0) ((0) (let ((act-25 (Parser-Source-parseFile 'erased e-4 (vector 7 1 (TTImp-Parser-prog e-4) (lambda () (lambda (p) (vector 8 1 1 (Parser-Rule-Source-eoi) (lambda (_-5878) (vector 0 p)))))) ext-0))) (let ((sc3 act-25)) (case (vector-ref sc3 0) ((1) (let ((e-3 (vector-ref sc3 1))) (let ((act-26 (Synthesis-Test-parseAnswers (Synthesis-Test-getAnswerFile e-4) ext-0))) (let ((sc4 act-26)) (case (vector-ref sc4 0) ((1) (let ((e-6 (vector-ref sc4 1))) (Core-Core-coreRun 'erased 'erased (lambda (eta-0) (Idris-Main-runMain e-3 e-6 eta-0)) (lambda (err) (Prelude-IO-printLn 'erased 'erased (vector 0 (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-62) (lambda (eta-0) (Prelude-IO-map_Functor__IO 'erased 'erased func arg-62 eta-0)))))) (lambda (a) (lambda (arg-172) (lambda (eta-0) arg-172))) (lambda (b) (lambda (a) (lambda (arg-173) (lambda (arg-175) (lambda (eta-0) (let ((act-17 (arg-173 eta-0))) (let ((act-16 (arg-175 eta-0))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-334) (lambda (arg-335) (lambda (eta-0) (let ((act-27 (arg-334 eta-0))) ((arg-335 act-27) eta-0))))))) (lambda (a) (lambda (arg-337) (lambda (eta-0) (let ((act-51 (arg-337 eta-0))) (act-51 eta-0)))))) (lambda (a) (lambda (arg-6366) arg-6366))) (vector 0 (lambda (x) (Core-Core-show_Show__Error x)) (lambda (d) (lambda (x) (Core-Core-showPrec_Show__Error d x))))) err)) (lambda (arg-0) (lambda (eta-0) arg-0)) ext-0))) (else ((Prelude-IO-printLn 'erased 'erased (vector 0 (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-62) (lambda (eta-0) (Prelude-IO-map_Functor__IO 'erased 'erased func arg-62 eta-0)))))) (lambda (a) (lambda (arg-172) (lambda (eta-0) arg-172))) (lambda (b) (lambda (a) (lambda (arg-173) (lambda (arg-175) (lambda (eta-0) (let ((act-17 (arg-173 eta-0))) (let ((act-16 (arg-175 eta-0))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-334) (lambda (arg-335) (lambda (eta-0) (let ((act-27 (arg-334 eta-0))) ((arg-335 act-27) eta-0))))))) (lambda (a) (lambda (arg-337) (lambda (eta-0) (let ((act-51 (arg-337 eta-0))) (act-51 eta-0)))))) (lambda (a) (lambda (arg-6366) arg-6366))) (vector 0 (lambda (x) (Prelude-Show-show_Show__String x)) (lambda (d) (lambda (x) (Prelude-Show-showPrec_Show__String d x))))) (Synthesis-Test-getAnswerFile e-4)) ext-0))))))) (else (let ((e-6 (vector-ref sc3 1))) ((Prelude-IO-printLn 'erased 'erased (vector 0 (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-62) (lambda (eta-0) (Prelude-IO-map_Functor__IO 'erased 'erased func arg-62 eta-0)))))) (lambda (a) (lambda (arg-172) (lambda (eta-0) arg-172))) (lambda (b) (lambda (a) (lambda (arg-173) (lambda (arg-175) (lambda (eta-0) (let ((act-17 (arg-173 eta-0))) (let ((act-16 (arg-175 eta-0))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-334) (lambda (arg-335) (lambda (eta-0) (let ((act-26 (arg-334 eta-0))) ((arg-335 act-26) eta-0))))))) (lambda (a) (lambda (arg-337) (lambda (eta-0) (let ((act-51 (arg-337 eta-0))) (act-51 eta-0)))))) (lambda (a) (lambda (arg-6366) arg-6366))) (vector 0 (lambda (x) (Parser-Support-show_Show__C-40ParseErrorC-32C-36tokC-41 'erased (vector 0 (lambda (x-0) (Parser-Lexer-Source-show_Show__Token x-0)) (lambda (d) (lambda (x-0) (Parser-Lexer-Source-showPrec_Show__Token d x-0)))) x)) (lambda (d) (lambda (x) (Parser-Support-showPrec_Show__C-40ParseErrorC-32C-36tokC-41 'erased (vector 0 (lambda (x-0) (Parser-Lexer-Source-show_Show__Token x-0)) (lambda (d-0) (lambda (x-0) (Parser-Lexer-Source-showPrec_Show__Token d-0 x-0)))) d x))))) e-6) ext-0)))))))(else ((Prelude-IO-putStrLn 'erased (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-62) (lambda (eta-0) (Prelude-IO-map_Functor__IO 'erased 'erased func arg-62 eta-0)))))) (lambda (a) (lambda (arg-172) (lambda (eta-0) arg-172))) (lambda (b) (lambda (a) (lambda (arg-173) (lambda (arg-175) (lambda (eta-0) (let ((act-17 (arg-173 eta-0))) (let ((act-16 (arg-175 eta-0))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-334) (lambda (arg-335) (lambda (eta-0) (let ((act-25 (arg-334 eta-0))) ((arg-335 act-25) eta-0))))))) (lambda (a) (lambda (arg-337) (lambda (eta-0) (let ((act-51 (arg-337 eta-0))) (act-51 eta-0)))))) (lambda (a) (lambda (arg-6366) arg-6366))) "Usage: tinyidris <filename>") ext-0)))))))(else ((Prelude-IO-putStrLn 'erased (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-62) (lambda (eta-0) (Prelude-IO-map_Functor__IO 'erased 'erased func arg-62 eta-0)))))) (lambda (a) (lambda (arg-172) (lambda (eta-0) arg-172))) (lambda (b) (lambda (a) (lambda (arg-173) (lambda (arg-175) (lambda (eta-0) (let ((act-17 (arg-173 eta-0))) (let ((act-16 (arg-175 eta-0))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-334) (lambda (arg-335) (lambda (eta-0) (let ((act-25 (arg-334 eta-0))) ((arg-335 act-25) eta-0))))))) (lambda (a) (lambda (arg-337) (lambda (eta-0) (let ((act-51 (arg-337 eta-0))) (act-51 eta-0)))))) (lambda (a) (lambda (arg-6366) arg-6366))) "Usage: tinyidris <filename>") ext-0))))))(else ((Prelude-IO-putStrLn 'erased (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-62) (lambda (eta-0) (Prelude-IO-map_Functor__IO 'erased 'erased func arg-62 eta-0)))))) (lambda (a) (lambda (arg-172) (lambda (eta-0) arg-172))) (lambda (b) (lambda (a) (lambda (arg-173) (lambda (arg-175) (lambda (eta-0) (let ((act-17 (arg-173 eta-0))) (let ((act-16 (arg-175 eta-0))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-334) (lambda (arg-335) (lambda (eta-0) (let ((act-25 (arg-334 eta-0))) ((arg-335 act-25) eta-0))))))) (lambda (a) (lambda (arg-337) (lambda (eta-0) (let ((act-51 (arg-337 eta-0))) (act-51 eta-0)))))) (lambda (a) (lambda (arg-6366) arg-6366))) "Usage: tinyidris <filename>") ext-0)))))))
(define Idris-Main-isTestOne (lambda (arg-0) (Idris-Main-case--isTestOne-5142 arg-0 (Data-Strings-isPrefixOf "testOne" arg-0))))
(define Idris-Main-isTest (lambda (arg-0) (Data-Strings-isPrefixOf "test" arg-0)))
(define Idris-Main-isAuto (lambda (arg-0) (Idris-Main-case--isAuto-5125 arg-0 (Data-Strings-isPrefixOf "auto" arg-0))))
(define Data-SortedMap-case--delete-4111 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (let ((sc0 arg-6)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 1 arg-2 (+ 1 arg-4) e-2))) (else (let ((e-5 (vector-ref sc0 1))) (vector 1 arg-2 arg-4 e-5)))))))
(define Data-SortedMap-case--delete-4049 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-5)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 1 arg-2 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (let ((sc1 e-5)) (vector 0 arg-2))))))))
(define Data-SortedMap-case--insert-3897 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (let ((sc0 arg-7)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 1 arg-2 arg-3 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (vector 1 arg-2 (+ 1 arg-3) e-5)))))))
(define Data-SortedMap-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32treeDelete-3638 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11) (let ((sc0 arg-11)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 (vector 2 arg-7 arg-9 arg-6 arg-10 e-2)))) (else (let ((e-5 (vector-ref sc0 1))) (vector 0 (Data-SortedMap-merge3 'erased 'erased 'erased 'erased arg-7 arg-9 arg-6 arg-10 e-5))))))))
(define Data-SortedMap-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32treeDelete-3521 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11) (let ((sc0 arg-11)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 (vector 2 arg-7 arg-9 e-2 arg-10 arg-5)))) (else (let ((e-5 (vector-ref sc0 1))) (vector 0 (Data-SortedMap-merge2 'erased 'erased 'erased 'erased arg-7 arg-9 e-5 arg-10 arg-5))))))))
(define Data-SortedMap-case--caseC-32blockC-32inC-32treeDelete-3482 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11) (let ((sc0 arg-11)) (cond ((equal? sc0 0) (Data-SortedMap-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32treeDelete-3521 'erased 'erased 'erased arg-3 arg-4 arg-5 arg-6 arg-7 arg-10 arg-9 arg-8 (Data-SortedMap-treeDelete 'erased 'erased 'erased arg-3 (+ 1 arg-4) arg-10 arg-6))) (else (Data-SortedMap-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32treeDelete-3638 'erased 'erased 'erased arg-3 arg-4 arg-5 arg-6 arg-7 arg-10 arg-9 arg-8 (Data-SortedMap-treeDelete 'erased 'erased 'erased arg-3 (+ 1 arg-4) arg-10 arg-5)))))))
(define Data-SortedMap-case--caseC-32blockC-32inC-32treeDelete-3368 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11) (let ((sc0 arg-11)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 (vector 2 e-2 arg-9 arg-6 arg-8 arg-5)))) (else (let ((e-5 (vector-ref sc0 1))) (vector 0 (Data-SortedMap-merge1 'erased 'erased 'erased 'erased e-5 arg-9 arg-6 arg-8 arg-5))))))))
(define Data-SortedMap-case--treeDelete-3329 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11) (let ((sc0 arg-11)) (cond ((equal? sc0 0) (Data-SortedMap-case--caseC-32blockC-32inC-32treeDelete-3368 'erased 'erased 'erased arg-3 arg-4 arg-8 arg-9 arg-10 arg-7 arg-6 arg-5 (Data-SortedMap-treeDelete 'erased 'erased 'erased arg-3 (+ 1 arg-4) arg-5 arg-10))) (else (Data-SortedMap-case--caseC-32blockC-32inC-32treeDelete-3482 'erased 'erased 'erased arg-3 arg-4 arg-8 arg-9 arg-10 arg-7 arg-6 arg-5 (let ((sc1 arg-3)) (let ((e-5 (vector-ref sc1 5))) ((e-5 arg-5) arg-7)))))))))
(define Data-SortedMap-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32treeDelete-3229 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9) (let ((sc0 arg-6)) (case (vector-ref sc0 0) ((1) (let ((e-4 (vector-ref sc0 1))) (let ((e-5 (vector-ref sc0 2))) (let ((e-6 (vector-ref sc0 3))) (vector 1 (vector 2 e-4 e-5 e-6 arg-8 arg-9)))))) (else (let ((e-11 (vector-ref sc0 1))) (let ((e-12 (vector-ref sc0 2))) (let ((e-13 (vector-ref sc0 3))) (let ((e-14 (vector-ref sc0 4))) (let ((e-15 (vector-ref sc0 5))) (vector 0 (Data-SortedMap-branch4 'erased 'erased 'erased 'erased e-11 e-12 e-13 e-14 e-15 arg-8 arg-9))))))))))))
(define Data-SortedMap-case--caseC-32blockC-32inC-32treeDelete-3163 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9) (let ((sc0 arg-9)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 (vector 1 arg-6 arg-7 e-2)))) (else (let ((e-5 (vector-ref sc0 1))) (let ((sc1 arg-6)) (case (vector-ref sc1 0) ((1) (let ((e-4 (vector-ref sc1 1))) (let ((e-7 (vector-ref sc1 2))) (let ((e-6 (vector-ref sc1 3))) (vector 1 (vector 2 e-4 e-7 e-6 arg-7 e-5)))))) (else (let ((e-11 (vector-ref sc1 1))) (let ((e-12 (vector-ref sc1 2))) (let ((e-13 (vector-ref sc1 3))) (let ((e-14 (vector-ref sc1 4))) (let ((e-15 (vector-ref sc1 5))) (vector 0 (Data-SortedMap-branch4 'erased 'erased 'erased 'erased e-11 e-12 e-13 e-14 e-15 arg-7 e-5))))))))))))))))
(define Data-SortedMap-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32treeDelete-3058 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9) (let ((sc0 arg-5)) (case (vector-ref sc0 0) ((1) (let ((e-4 (vector-ref sc0 1))) (let ((e-5 (vector-ref sc0 2))) (let ((e-6 (vector-ref sc0 3))) (vector 1 (vector 2 arg-9 arg-8 e-4 e-5 e-6)))))) (else (let ((e-11 (vector-ref sc0 1))) (let ((e-12 (vector-ref sc0 2))) (let ((e-13 (vector-ref sc0 3))) (let ((e-14 (vector-ref sc0 4))) (let ((e-15 (vector-ref sc0 5))) (vector 0 (Data-SortedMap-branch4 'erased 'erased 'erased 'erased arg-9 arg-8 e-11 e-12 e-13 e-14 e-15))))))))))))
(define Data-SortedMap-case--caseC-32blockC-32inC-32treeDelete-2992 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9) (let ((sc0 arg-9)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 (vector 1 e-2 arg-7 arg-5)))) (else (let ((e-5 (vector-ref sc0 1))) (let ((sc1 arg-5)) (case (vector-ref sc1 0) ((1) (let ((e-4 (vector-ref sc1 1))) (let ((e-7 (vector-ref sc1 2))) (let ((e-6 (vector-ref sc1 3))) (vector 1 (vector 2 e-5 arg-7 e-4 e-7 e-6)))))) (else (let ((e-11 (vector-ref sc1 1))) (let ((e-12 (vector-ref sc1 2))) (let ((e-13 (vector-ref sc1 3))) (let ((e-14 (vector-ref sc1 4))) (let ((e-15 (vector-ref sc1 5))) (vector 0 (Data-SortedMap-branch4 'erased 'erased 'erased 'erased e-5 arg-7 e-11 e-12 e-13 e-14 e-15))))))))))))))))
(define Data-SortedMap-case--treeDelete-2959 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9) (let ((sc0 arg-9)) (cond ((equal? sc0 0) (Data-SortedMap-case--caseC-32blockC-32inC-32treeDelete-2992 'erased 'erased 'erased arg-3 arg-4 arg-7 arg-8 arg-6 arg-5 (Data-SortedMap-treeDelete 'erased 'erased 'erased arg-3 (+ 1 arg-4) arg-5 arg-8))) (else (Data-SortedMap-case--caseC-32blockC-32inC-32treeDelete-3163 'erased 'erased 'erased arg-3 arg-4 arg-7 arg-8 arg-6 arg-5 (Data-SortedMap-treeDelete 'erased 'erased 'erased arg-3 (+ 1 arg-4) arg-5 arg-7)))))))
(define Data-SortedMap-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32treeDelete-2859 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10) (let ((sc0 arg-10)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 (vector 2 arg-6 arg-8 arg-5 arg-9 e-2)))) (else (let ((e-5 (vector-ref sc0 1))) (let ((sc1 e-5)) (vector 0 (vector 1 arg-6 arg-8 arg-5)))))))))
(define Data-SortedMap-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32treeDelete-2748 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10) (let ((sc0 arg-10)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 (vector 2 arg-6 arg-8 e-2 arg-9 arg-4)))) (else (let ((e-5 (vector-ref sc0 1))) (let ((sc1 e-5)) (vector 0 (vector 1 arg-6 arg-8 arg-4)))))))))
(define Data-SortedMap-case--caseC-32blockC-32inC-32treeDelete-2711 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10) (let ((sc0 arg-10)) (cond ((equal? sc0 0) (Data-SortedMap-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32treeDelete-2748 'erased 'erased 'erased arg-3 arg-4 arg-5 arg-6 arg-9 arg-8 arg-7 (Data-SortedMap-treeDelete 'erased 'erased 'erased arg-3 0 arg-9 arg-5))) (else (Data-SortedMap-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32treeDelete-2859 'erased 'erased 'erased arg-3 arg-4 arg-5 arg-6 arg-9 arg-8 arg-7 (Data-SortedMap-treeDelete 'erased 'erased 'erased arg-3 0 arg-9 arg-4)))))))
(define Data-SortedMap-case--caseC-32blockC-32inC-32treeDelete-2603 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10) (let ((sc0 arg-10)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 (vector 2 e-2 arg-8 arg-5 arg-7 arg-4)))) (else (let ((e-5 (vector-ref sc0 1))) (let ((sc1 e-5)) (vector 0 (vector 1 arg-5 arg-7 arg-4)))))))))
(define Data-SortedMap-case--treeDelete-2566 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10) (let ((sc0 arg-10)) (cond ((equal? sc0 0) (Data-SortedMap-case--caseC-32blockC-32inC-32treeDelete-2603 'erased 'erased 'erased arg-3 arg-7 arg-8 arg-9 arg-6 arg-5 arg-4 (Data-SortedMap-treeDelete 'erased 'erased 'erased arg-3 0 arg-4 arg-9))) (else (Data-SortedMap-case--caseC-32blockC-32inC-32treeDelete-2711 'erased 'erased 'erased arg-3 arg-7 arg-8 arg-9 arg-6 arg-5 arg-4 (let ((sc1 arg-3)) (let ((e-5 (vector-ref sc1 5))) ((e-5 arg-4) arg-6)))))))))
(define Data-SortedMap-case--caseC-32blockC-32inC-32treeDelete-2480 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8) (let ((sc0 arg-8)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 (vector 1 arg-5 arg-6 e-2)))) (else (let ((e-5 (vector-ref sc0 1))) (let ((sc1 e-5)) (vector 1 arg-5))))))))
(define Data-SortedMap-case--caseC-32blockC-32inC-32treeDelete-2391 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8) (let ((sc0 arg-8)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 (vector 1 e-2 arg-6 arg-4)))) (else (let ((e-5 (vector-ref sc0 1))) (let ((sc1 e-5)) (vector 1 arg-4))))))))
(define Data-SortedMap-case--treeDelete-2360 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8) (let ((sc0 arg-8)) (cond ((equal? sc0 0) (Data-SortedMap-case--caseC-32blockC-32inC-32treeDelete-2391 'erased 'erased 'erased arg-3 arg-6 arg-7 arg-5 arg-4 (Data-SortedMap-treeDelete 'erased 'erased 'erased arg-3 0 arg-4 arg-7))) (else (Data-SortedMap-case--caseC-32blockC-32inC-32treeDelete-2480 'erased 'erased 'erased arg-3 arg-6 arg-7 arg-5 arg-4 (Data-SortedMap-treeDelete 'erased 'erased 'erased arg-3 0 arg-4 arg-6)))))))
(define Data-SortedMap-case--treeDelete-2281 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (let ((sc0 arg-7)) (cond ((equal? sc0 0) (vector 1 (vector 0 ))) (else (vector 0 (vector 0 arg-5 arg-6)))))))
(define Data-SortedMap-case--treeInsert-2178 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8) (let ((sc0 arg-8)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (let ((sc1 e-5)) (let ((e-8 (vector-ref sc1 1))) (let ((e-9 (vector-ref sc1 2))) (let ((sc2 e-9)) (let ((e-12 (vector-ref sc2 1))) (let ((e-13 (vector-ref sc2 2))) (vector 1 (vector 1 e-8 e-12 e-13))))))))))))))
(define Data-SortedMap-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32treeInsertC-39-2037 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-13) (let ((sc0 arg-13)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 (vector 2 arg-7 arg-11 arg-6 arg-12 e-2)))) (else (let ((e-5 (vector-ref sc0 1))) (let ((sc1 e-5)) (let ((e-8 (vector-ref sc1 1))) (let ((e-9 (vector-ref sc1 2))) (let ((sc2 e-9)) (let ((e-12 (vector-ref sc2 1))) (let ((e-13 (vector-ref sc2 2))) (vector 1 (vector 0 (vector 1 arg-7 arg-11 arg-6) (vector 0 arg-12 (vector 1 e-8 e-12 e-13))))))))))))))))
(define Data-SortedMap-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32treeInsertC-39-1879 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-13) (let ((sc0 arg-13)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 (vector 2 arg-7 arg-11 e-2 arg-12 arg-5)))) (else (let ((e-5 (vector-ref sc0 1))) (let ((sc1 e-5)) (let ((e-8 (vector-ref sc1 1))) (let ((e-9 (vector-ref sc1 2))) (let ((sc2 e-9)) (let ((e-12 (vector-ref sc2 1))) (let ((e-13 (vector-ref sc2 2))) (vector 1 (vector 0 (vector 1 arg-7 arg-11 e-8) (vector 0 e-12 (vector 1 e-13 arg-12 arg-5))))))))))))))))
(define Data-SortedMap-case--caseC-32blockC-32inC-32treeInsertC-39-1832 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-13) (let ((sc0 arg-13)) (cond ((equal? sc0 0) (Data-SortedMap-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32treeInsertC-39-1879 'erased 'erased 'erased arg-3 'erased arg-5 arg-6 arg-7 'erased arg-12 arg-11 arg-10 arg-9 (Data-SortedMap-treeInsertC-39 'erased 'erased 'erased 'erased arg-3 arg-12 arg-11 arg-6))) (else (Data-SortedMap-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32treeInsertC-39-2037 'erased 'erased 'erased arg-3 'erased arg-5 arg-6 arg-7 'erased arg-12 arg-11 arg-10 arg-9 (Data-SortedMap-treeInsertC-39 'erased 'erased 'erased 'erased arg-3 arg-12 arg-11 arg-5)))))))
(define Data-SortedMap-case--caseC-32blockC-32inC-32treeInsertC-39-1679 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-13) (let ((sc0 arg-13)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 (vector 2 e-2 arg-10 arg-6 arg-9 arg-5)))) (else (let ((e-5 (vector-ref sc0 1))) (let ((sc1 e-5)) (let ((e-8 (vector-ref sc1 1))) (let ((e-9 (vector-ref sc1 2))) (let ((sc2 e-9)) (let ((e-12 (vector-ref sc2 1))) (let ((e-13 (vector-ref sc2 2))) (vector 1 (vector 0 (vector 1 e-8 e-12 e-13) (vector 0 arg-10 (vector 1 arg-6 arg-9 arg-5))))))))))))))))
(define Data-SortedMap-case--treeInsertC-39-1632 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-13) (let ((sc0 arg-13)) (cond ((equal? sc0 0) (Data-SortedMap-case--caseC-32blockC-32inC-32treeInsertC-39-1679 'erased 'erased 'erased arg-3 'erased arg-9 arg-10 arg-11 'erased arg-8 arg-7 arg-6 arg-5 (Data-SortedMap-treeInsertC-39 'erased 'erased 'erased 'erased arg-3 arg-5 arg-6 arg-11))) (else (Data-SortedMap-case--caseC-32blockC-32inC-32treeInsertC-39-1832 'erased 'erased 'erased arg-3 'erased arg-9 arg-10 arg-11 'erased arg-8 arg-7 arg-6 arg-5 (let ((sc1 arg-3)) (let ((e-5 (vector-ref sc1 5))) ((e-5 arg-5) arg-8)))))))))
(define Data-SortedMap-case--caseC-32blockC-32inC-32treeInsertC-39-1515 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11) (let ((sc0 arg-11)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 (vector 1 arg-6 arg-8 e-2)))) (else (let ((e-5 (vector-ref sc0 1))) (let ((sc1 e-5)) (let ((e-8 (vector-ref sc1 1))) (let ((e-9 (vector-ref sc1 2))) (let ((sc2 e-9)) (let ((e-12 (vector-ref sc2 1))) (let ((e-13 (vector-ref sc2 2))) (vector 0 (vector 2 arg-6 arg-8 e-8 e-12 e-13))))))))))))))
(define Data-SortedMap-case--caseC-32blockC-32inC-32treeInsertC-39-1387 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11) (let ((sc0 arg-11)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 (vector 1 e-2 arg-8 arg-5)))) (else (let ((e-5 (vector-ref sc0 1))) (let ((sc1 e-5)) (let ((e-8 (vector-ref sc1 1))) (let ((e-9 (vector-ref sc1 2))) (let ((sc2 e-9)) (let ((e-12 (vector-ref sc2 1))) (let ((e-13 (vector-ref sc2 2))) (vector 0 (vector 2 e-8 e-12 e-13 arg-8 arg-5))))))))))))))
(define Data-SortedMap-case--treeInsertC-39-1346 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11) (let ((sc0 arg-11)) (cond ((equal? sc0 0) (Data-SortedMap-case--caseC-32blockC-32inC-32treeInsertC-39-1387 'erased 'erased 'erased arg-3 'erased arg-8 arg-9 'erased arg-7 arg-6 arg-5 (Data-SortedMap-treeInsertC-39 'erased 'erased 'erased 'erased arg-3 arg-5 arg-6 arg-9))) (else (Data-SortedMap-case--caseC-32blockC-32inC-32treeInsertC-39-1515 'erased 'erased 'erased arg-3 'erased arg-8 arg-9 'erased arg-7 arg-6 arg-5 (Data-SortedMap-treeInsertC-39 'erased 'erased 'erased 'erased arg-3 arg-5 arg-6 arg-8)))))))
(define Data-SortedMap-case--treeInsertC-39-1187 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9) (let ((sc0 arg-9)) (cond ((equal? sc0 0) (vector 1 (vector 0 (vector 0 arg-4 arg-5) (vector 0 arg-4 (vector 0 arg-6 arg-7))))) ((equal? sc0 1) (vector 0 (vector 0 arg-4 arg-5))) (else (vector 1 (vector 0 (vector 0 arg-6 arg-7) (vector 0 arg-6 (vector 0 arg-4 arg-5)))))))))
(define Data-SortedMap-case--caseC-32blockC-32inC-32treeLookup-1081 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12) (let ((sc0 arg-12)) (cond ((equal? sc0 0) (Data-SortedMap-treeLookup 'erased 'erased 'erased 'erased arg-3 arg-11 arg-6)) (else (Data-SortedMap-treeLookup 'erased 'erased 'erased 'erased arg-3 arg-11 arg-5))))))
(define Data-SortedMap-case--treeLookup-1006 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12) (let ((sc0 arg-12)) (cond ((equal? sc0 0) (Data-SortedMap-treeLookup 'erased 'erased 'erased 'erased arg-3 arg-5 arg-10)) (else (Data-SortedMap-case--caseC-32blockC-32inC-32treeLookup-1081 'erased 'erased 'erased arg-3 'erased arg-8 arg-9 arg-10 'erased arg-7 arg-6 arg-5 (let ((sc1 arg-3)) (let ((e-5 (vector-ref sc1 5))) ((e-5 arg-5) arg-7)))))))))
(define Data-SortedMap-case--treeLookup-916 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10) (let ((sc0 arg-10)) (cond ((equal? sc0 0) (Data-SortedMap-treeLookup 'erased 'erased 'erased 'erased arg-3 arg-5 arg-8)) (else (Data-SortedMap-treeLookup 'erased 'erased 'erased 'erased arg-3 arg-5 arg-7))))))
(define Data-SortedMap-case--treeLookup-841 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8) (let ((sc0 arg-8)) (cond ((equal? sc0 0) (vector 1 arg-6)) (else (vector 0 ))))))
(define Data-SortedMap-n--5465-3726-treeToListC-39 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (let ((sc0 arg-6)) (case (vector-ref sc0 0) ((0) (let ((e-3 (vector-ref sc0 1))) (let ((e-4 (vector-ref sc0 2))) (arg-5 (vector 0 e-3 e-4))))) ((1) (let ((e-9 (vector-ref sc0 1))) (let ((e-11 (vector-ref sc0 3))) (Data-SortedMap-n--5465-3726-treeToListC-39 'erased 'erased 'erased 'erased 'erased (lambda (arg-7) (vector 1 arg-7 (Data-SortedMap-n--5465-3726-treeToListC-39 'erased 'erased 'erased 'erased 'erased arg-5 e-11))) e-9)))) (else (let ((e-16 (vector-ref sc0 1))) (let ((e-18 (vector-ref sc0 3))) (let ((e-20 (vector-ref sc0 5))) (Data-SortedMap-n--5465-3726-treeToListC-39 'erased 'erased 'erased 'erased 'erased (lambda (arg-7) (vector 1 arg-7 (Data-SortedMap-n--5465-3726-treeToListC-39 'erased 'erased 'erased 'erased 'erased (lambda (arg-8) (vector 1 arg-8 (Data-SortedMap-n--5465-3726-treeToListC-39 'erased 'erased 'erased 'erased 'erased arg-5 e-20))) e-18))) e-16)))))))))
(define Data-SortedMap-treeToList (lambda (arg-0 arg-1 arg-2 arg-3 ext-0) (Data-SortedMap-n--5465-3726-treeToListC-39 'erased 'erased 'erased 'erased 'erased (lambda (arg-4) (vector 1 arg-4 (vector 0 ))) ext-0)))
(define Data-SortedMap-treeLookup (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (let ((sc0 arg-6)) (case (vector-ref sc0 0) ((0) (let ((e-3 (vector-ref sc0 1))) (let ((e-4 (vector-ref sc0 2))) (Data-SortedMap-case--treeLookup-841 'erased 'erased 'erased arg-4 arg-5 e-3 e-4 'erased (let ((sc1 (let ((sc2 arg-4)) (let ((e-1 (vector-ref sc2 1))) e-1)))) (let ((e-1 (vector-ref sc1 1))) ((e-1 arg-5) e-3))))))) ((1) (let ((e-9 (vector-ref sc0 1))) (let ((e-10 (vector-ref sc0 2))) (let ((e-11 (vector-ref sc0 3))) (Data-SortedMap-case--treeLookup-916 'erased 'erased 'erased arg-4 'erased arg-5 e-10 e-11 e-9 'erased (let ((sc1 arg-4)) (let ((e-5 (vector-ref sc1 5))) ((e-5 arg-5) e-10)))))))) (else (let ((e-16 (vector-ref sc0 1))) (let ((e-17 (vector-ref sc0 2))) (let ((e-18 (vector-ref sc0 3))) (let ((e-19 (vector-ref sc0 4))) (let ((e-20 (vector-ref sc0 5))) (Data-SortedMap-case--treeLookup-1006 'erased 'erased 'erased arg-4 'erased arg-5 e-17 e-19 e-20 e-18 e-16 'erased (let ((sc1 arg-4)) (let ((e-5 (vector-ref sc1 5))) ((e-5 arg-5) e-17))))))))))))))
(define Data-SortedMap-treeInsertC-39 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (let ((sc0 arg-7)) (case (vector-ref sc0 0) ((0) (let ((e-3 (vector-ref sc0 1))) (let ((e-4 (vector-ref sc0 2))) (Data-SortedMap-case--treeInsertC-39-1187 'erased 'erased 'erased arg-4 arg-5 arg-6 e-3 e-4 'erased (let ((sc1 arg-4)) (let ((e-2 (vector-ref sc1 2))) ((e-2 arg-5) e-3))))))) ((1) (let ((e-9 (vector-ref sc0 1))) (let ((e-10 (vector-ref sc0 2))) (let ((e-11 (vector-ref sc0 3))) (Data-SortedMap-case--treeInsertC-39-1346 'erased 'erased 'erased arg-4 'erased arg-5 arg-6 e-10 e-11 e-9 'erased (let ((sc1 arg-4)) (let ((e-5 (vector-ref sc1 5))) ((e-5 arg-5) e-10)))))))) (else (let ((e-16 (vector-ref sc0 1))) (let ((e-17 (vector-ref sc0 2))) (let ((e-18 (vector-ref sc0 3))) (let ((e-19 (vector-ref sc0 4))) (let ((e-20 (vector-ref sc0 5))) (Data-SortedMap-case--treeInsertC-39-1632 'erased 'erased 'erased arg-4 'erased arg-5 arg-6 e-17 e-19 e-20 e-18 e-16 'erased (let ((sc1 arg-4)) (let ((e-5 (vector-ref sc1 5))) ((e-5 arg-5) e-17))))))))))))))
(define Data-SortedMap-treeInsert (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (Data-SortedMap-case--treeInsert-2178 'erased 'erased 'erased 'erased arg-4 arg-5 arg-6 arg-7 (Data-SortedMap-treeInsertC-39 'erased 'erased 'erased 'erased arg-4 arg-5 arg-6 arg-7))))
(define Data-SortedMap-treeDelete (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (let ((sc0 arg-4)) (cond ((equal? sc0 0) (let ((sc1 arg-6)) (let ((e-4 (vector-ref sc1 1))) (let ((e-5 (vector-ref sc1 2))) (Data-SortedMap-case--treeDelete-2281 'erased 'erased 'erased arg-3 arg-5 e-4 e-5 (let ((sc2 (let ((sc3 arg-3)) (let ((e-1 (vector-ref sc3 1))) e-1)))) (let ((e-1 (vector-ref sc2 1))) ((e-1 arg-5) e-4))))))))(else (let ((e-0 (- arg-4 1))) (let ((sc0 e-0)) (cond ((equal? sc0 0) (let ((sc1 arg-6)) (case (vector-ref sc1 0) ((1) (let ((e-11 (vector-ref sc1 1))) (let ((e-12 (vector-ref sc1 2))) (let ((e-13 (vector-ref sc1 3))) (Data-SortedMap-case--treeDelete-2360 'erased 'erased 'erased arg-3 arg-5 e-12 e-13 e-11 (let ((sc2 arg-3)) (let ((e-5 (vector-ref sc2 5))) ((e-5 arg-5) e-12)))))))) (else (let ((e-18 (vector-ref sc1 1))) (let ((e-19 (vector-ref sc1 2))) (let ((e-20 (vector-ref sc1 3))) (let ((e-21 (vector-ref sc1 4))) (let ((e-22 (vector-ref sc1 5))) (Data-SortedMap-case--treeDelete-2566 'erased 'erased 'erased arg-3 arg-5 e-19 e-21 e-22 e-20 e-18 (let ((sc2 arg-3)) (let ((e-5 (vector-ref sc2 5))) ((e-5 arg-5) e-19)))))))))))))(else (let ((e-6 (- e-0 1))) (let ((sc0 arg-6)) (case (vector-ref sc0 0) ((1) (let ((e-27 (vector-ref sc0 1))) (let ((e-28 (vector-ref sc0 2))) (let ((e-29 (vector-ref sc0 3))) (Data-SortedMap-case--treeDelete-2959 'erased 'erased 'erased arg-3 e-6 arg-5 e-28 e-29 e-27 (let ((sc1 arg-3)) (let ((e-5 (vector-ref sc1 5))) ((e-5 arg-5) e-28)))))))) (else (let ((e-34 (vector-ref sc0 1))) (let ((e-35 (vector-ref sc0 2))) (let ((e-36 (vector-ref sc0 3))) (let ((e-37 (vector-ref sc0 4))) (let ((e-38 (vector-ref sc0 5))) (Data-SortedMap-case--treeDelete-3329 'erased 'erased 'erased arg-3 e-6 arg-5 e-35 e-37 e-38 e-36 e-34 (let ((sc1 arg-3)) (let ((e-5 (vector-ref sc1 5))) ((e-5 arg-5) e-35))))))))))))))))))))))
(define Data-SortedMap-toList (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((0) (vector 0 )) (else (let ((e-7 (vector-ref sc0 3))) (Data-SortedMap-treeToList 'erased 'erased 'erased 'erased e-7)))))))
(define Data-SortedMap-merge3 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8) (let ((sc0 arg-4)) (case (vector-ref sc0 0) ((1) (let ((e-4 (vector-ref sc0 1))) (let ((e-5 (vector-ref sc0 2))) (let ((e-6 (vector-ref sc0 3))) (let ((sc1 arg-6)) (case (vector-ref sc1 0) ((1) (let ((e-20 (vector-ref sc1 1))) (let ((e-21 (vector-ref sc1 2))) (let ((e-22 (vector-ref sc1 3))) (Data-SortedMap-branch5 'erased 'erased 'erased 'erased e-4 e-5 e-6 arg-5 e-20 e-21 e-22 arg-7 arg-8))))) (else (let ((e-27 (vector-ref sc1 1))) (let ((e-28 (vector-ref sc1 2))) (let ((e-29 (vector-ref sc1 3))) (let ((e-30 (vector-ref sc1 4))) (let ((e-31 (vector-ref sc1 5))) (Data-SortedMap-branch6 'erased 'erased 'erased 'erased e-4 e-5 e-6 arg-5 e-27 e-28 e-29 e-30 e-31 arg-7 arg-8))))))))))))) (else (let ((e-11 (vector-ref sc0 1))) (let ((e-12 (vector-ref sc0 2))) (let ((e-13 (vector-ref sc0 3))) (let ((e-14 (vector-ref sc0 4))) (let ((e-15 (vector-ref sc0 5))) (let ((sc1 arg-6)) (case (vector-ref sc1 0) ((1) (let ((e-36 (vector-ref sc1 1))) (let ((e-37 (vector-ref sc1 2))) (let ((e-38 (vector-ref sc1 3))) (Data-SortedMap-branch6 'erased 'erased 'erased 'erased e-11 e-12 e-13 e-14 e-15 arg-5 e-36 e-37 e-38 arg-7 arg-8))))) (else (let ((e-43 (vector-ref sc1 1))) (let ((e-44 (vector-ref sc1 2))) (let ((e-45 (vector-ref sc1 3))) (let ((e-46 (vector-ref sc1 4))) (let ((e-47 (vector-ref sc1 5))) (Data-SortedMap-branch7 'erased 'erased 'erased 'erased e-11 e-12 e-13 e-14 e-15 arg-5 e-43 e-44 e-45 e-46 e-47 arg-7 arg-8)))))))))))))))))))
(define Data-SortedMap-merge2 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8) (let ((sc0 arg-4)) (case (vector-ref sc0 0) ((1) (let ((e-4 (vector-ref sc0 1))) (let ((e-5 (vector-ref sc0 2))) (let ((e-6 (vector-ref sc0 3))) (let ((sc1 arg-8)) (case (vector-ref sc1 0) ((1) (let ((e-20 (vector-ref sc1 1))) (let ((e-21 (vector-ref sc1 2))) (let ((e-22 (vector-ref sc1 3))) (Data-SortedMap-branch5 'erased 'erased 'erased 'erased e-4 e-5 e-6 arg-5 arg-6 arg-7 e-20 e-21 e-22))))) (else (let ((e-27 (vector-ref sc1 1))) (let ((e-28 (vector-ref sc1 2))) (let ((e-29 (vector-ref sc1 3))) (let ((e-30 (vector-ref sc1 4))) (let ((e-31 (vector-ref sc1 5))) (Data-SortedMap-branch6 'erased 'erased 'erased 'erased e-4 e-5 e-6 arg-5 arg-6 arg-7 e-27 e-28 e-29 e-30 e-31))))))))))))) (else (let ((e-11 (vector-ref sc0 1))) (let ((e-12 (vector-ref sc0 2))) (let ((e-13 (vector-ref sc0 3))) (let ((e-14 (vector-ref sc0 4))) (let ((e-15 (vector-ref sc0 5))) (let ((sc1 arg-8)) (case (vector-ref sc1 0) ((1) (let ((e-36 (vector-ref sc1 1))) (let ((e-37 (vector-ref sc1 2))) (let ((e-38 (vector-ref sc1 3))) (Data-SortedMap-branch6 'erased 'erased 'erased 'erased e-11 e-12 e-13 e-14 e-15 arg-5 arg-6 arg-7 e-36 e-37 e-38))))) (else (let ((e-43 (vector-ref sc1 1))) (let ((e-44 (vector-ref sc1 2))) (let ((e-45 (vector-ref sc1 3))) (let ((e-46 (vector-ref sc1 4))) (let ((e-47 (vector-ref sc1 5))) (Data-SortedMap-branch7 'erased 'erased 'erased 'erased e-11 e-12 e-13 e-14 e-15 arg-5 arg-6 arg-7 e-43 e-44 e-45 e-46 e-47)))))))))))))))))))
(define Data-SortedMap-merge1 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8) (let ((sc0 arg-6)) (case (vector-ref sc0 0) ((1) (let ((e-4 (vector-ref sc0 1))) (let ((e-5 (vector-ref sc0 2))) (let ((e-6 (vector-ref sc0 3))) (let ((sc1 arg-8)) (case (vector-ref sc1 0) ((1) (let ((e-20 (vector-ref sc1 1))) (let ((e-21 (vector-ref sc1 2))) (let ((e-22 (vector-ref sc1 3))) (Data-SortedMap-branch5 'erased 'erased 'erased 'erased arg-4 arg-5 e-4 e-5 e-6 arg-7 e-20 e-21 e-22))))) (else (let ((e-27 (vector-ref sc1 1))) (let ((e-28 (vector-ref sc1 2))) (let ((e-29 (vector-ref sc1 3))) (let ((e-30 (vector-ref sc1 4))) (let ((e-31 (vector-ref sc1 5))) (Data-SortedMap-branch6 'erased 'erased 'erased 'erased arg-4 arg-5 e-4 e-5 e-6 arg-7 e-27 e-28 e-29 e-30 e-31))))))))))))) (else (let ((e-11 (vector-ref sc0 1))) (let ((e-12 (vector-ref sc0 2))) (let ((e-13 (vector-ref sc0 3))) (let ((e-14 (vector-ref sc0 4))) (let ((e-15 (vector-ref sc0 5))) (let ((sc1 arg-8)) (case (vector-ref sc1 0) ((1) (let ((e-36 (vector-ref sc1 1))) (let ((e-37 (vector-ref sc1 2))) (let ((e-38 (vector-ref sc1 3))) (Data-SortedMap-branch6 'erased 'erased 'erased 'erased arg-4 arg-5 e-11 e-12 e-13 e-14 e-15 arg-7 e-36 e-37 e-38))))) (else (let ((e-43 (vector-ref sc1 1))) (let ((e-44 (vector-ref sc1 2))) (let ((e-45 (vector-ref sc1 3))) (let ((e-46 (vector-ref sc1 4))) (let ((e-47 (vector-ref sc1 5))) (Data-SortedMap-branch7 'erased 'erased 'erased 'erased arg-4 arg-5 e-11 e-12 e-13 e-14 e-15 arg-7 e-43 e-44 e-45 e-46 e-47)))))))))))))))))))
(define Data-SortedMap-lookup (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((0) (vector 0 )) (else (let ((e-5 (vector-ref sc0 1))) (let ((e-7 (vector-ref sc0 3))) (Data-SortedMap-treeLookup 'erased 'erased 'erased 'erased e-5 arg-2 e-7))))))))
(define Data-SortedMap-insert (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-4)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 1 e-2 0 (vector 0 arg-2 arg-3)))) (else (let ((e-5 (vector-ref sc0 1))) (let ((e-6 (vector-ref sc0 2))) (let ((e-7 (vector-ref sc0 3))) (Data-SortedMap-case--insert-3897 'erased 'erased e-5 e-6 arg-2 arg-3 e-7 (Data-SortedMap-treeInsert 'erased 'erased 'erased 'erased e-5 arg-2 arg-3 e-7))))))))))
(define Data-SortedMap-fromList (lambda (arg-0 arg-1 arg-2 arg-3) (Prelude-Types-foldl_Foldable__List 'erased 'erased (lambda (eta-0) (lambda (eta-1) (Prelude-Basics-flip 'erased 'erased 'erased (lambda (eta-2) (Prelude-Basics-uncurry 'erased 'erased 'erased (lambda (eta-3) (lambda (eta-4) (lambda (eta-5) (Data-SortedMap-insert 'erased 'erased eta-3 eta-4 eta-5)))) eta-2)) eta-0 eta-1))) (Data-SortedMap-empty 'erased 'erased arg-2) arg-3)))
(define Data-SortedMap-empty (lambda (arg-0 arg-1 arg-2) (vector 0 arg-2)))
(define Data-SortedMap-delete (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (let ((e-6 (vector-ref sc0 2))) (let ((e-7 (vector-ref sc0 3))) (let ((sc1 e-6)) (cond ((equal? sc1 0) (Data-SortedMap-case--delete-4049 'erased 'erased e-5 arg-2 e-7 (Data-SortedMap-treeDelete 'erased 'erased 'erased e-5 0 arg-2 e-7)))(else (let ((e-8 (- e-6 1))) (Data-SortedMap-case--delete-4111 'erased 'erased e-5 arg-2 e-8 e-7 (Data-SortedMap-treeDelete 'erased 'erased 'erased e-5 (+ 1 e-8) arg-2 e-7))))))))))))))
(define Data-SortedMap-branch7 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-13 arg-14 arg-15 arg-16) (vector 2 (vector 2 arg-4 arg-5 arg-6 arg-7 arg-8) arg-9 (vector 1 arg-10 arg-11 arg-12) arg-13 (vector 1 arg-14 arg-15 arg-16))))
(define Data-SortedMap-branch6 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-13 arg-14) (vector 2 (vector 1 arg-4 arg-5 arg-6) arg-7 (vector 1 arg-8 arg-9 arg-10) arg-11 (vector 1 arg-12 arg-13 arg-14))))
(define Data-SortedMap-branch5 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12) (vector 1 (vector 1 arg-4 arg-5 arg-6) arg-7 (vector 2 arg-8 arg-9 arg-10 arg-11 arg-12))))
(define Data-SortedMap-branch4 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10) (vector 1 (vector 1 arg-4 arg-5 arg-6) arg-7 (vector 1 arg-8 arg-9 arg-10))))
(define Prelude-Basics-C-124C-124 (lambda (arg-0 arg-1) (let ((sc0 arg-0)) (cond ((equal? sc0 0) 0) (else (arg-1))))))
(define Prelude-Basics-uncurry (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-4)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) ((arg-3 e-2) e-3))))))
(define Prelude-Basics-the (lambda (arg-0 arg-1) arg-1))
(define Prelude-Basics-not (lambda (arg-0) (let ((sc0 arg-0)) (cond ((equal? sc0 0) 1) (else 0)))))
(define Prelude-Basics-intToBool (lambda (arg-0) (let ((sc0 arg-0)) (cond ((equal? sc0 0) 1)(else 0)))))
(define Prelude-Basics-id (lambda (arg-0 arg-1) arg-1))
(define Prelude-Basics-flip (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) ((arg-3 arg-5) arg-4)))
(define Prelude-Basics-const (lambda (arg-0 arg-1 arg-2 ext-0) arg-2))
(define Prelude-Basics-C-46 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 ext-0) (arg-3 (arg-4 ext-0))))
(define Prelude-Basics-C-38C-38 (lambda (arg-0 arg-1) (let ((sc0 arg-0)) (cond ((equal? sc0 0) (arg-1)) (else 1)))))
(define Builtin-fromString_FromString__String (lambda (arg-0) arg-0))
(define Builtin-__Impl_FromString_String (lambda (ext-0) ext-0))
(define Builtin-sym (lambda (arg-0 arg-1 arg-2 arg-3) (vector 0 )))
(define Builtin-snd (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (let ((e-3 (vector-ref sc0 2))) e-3))))
(define Builtin-rewrite__impl (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) arg-5))
(define Builtin-fst (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (let ((e-2 (vector-ref sc0 1))) e-2))))
(define Builtin-fromString (lambda (arg-0 arg-1 ext-0) (arg-1 ext-0)))
(define Builtin-believe_me (lambda (arg-0 arg-1 ext-0) ext-0))
(define Builtin-assert_total (lambda (arg-0 arg-1) arg-1))
(define Builtin-assert_smaller (lambda (arg-0 arg-1 arg-2 arg-3) arg-3))
(define Prelude-Types-case--rangeFromThen-4707 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (cond ((equal? sc0 0) (Prelude-Types-countFrom 'erased arg-1 (lambda (eta-0) (+ (Prelude-Types-minus arg-0 arg-1) eta-0)))) (else (Prelude-Types-countFrom 'erased arg-1 (lambda (n) (Prelude-Types-minus n (Prelude-Types-minus arg-1 arg-0)))))))))
(define Prelude-Types-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32rangeFromThenTo-4659 (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (cond ((equal? sc0 0) (vector 1 arg-2 (vector 0 ))) (else (vector 0 ))))))
(define Prelude-Types-case--caseC-32blockC-32inC-32rangeFromThenTo-4645 (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (cond ((equal? sc0 0) (Prelude-Types-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32rangeFromThenTo-4659 arg-0 arg-1 arg-2 (Prelude-Types-C-61C-61_Eq__Nat arg-2 arg-0))) (else (Prelude-Types-takeBefore 'erased (lambda (arg-4) (Prelude-Types-C-60_Ord__Nat arg-4 arg-0)) (Prelude-Types-countFrom 'erased arg-2 (lambda (n) (Prelude-Types-minus n (Prelude-Types-minus arg-2 arg-1))))))))))
(define Prelude-Types-case--caseC-32blockC-32inC-32rangeFromThenTo-4605 (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (cond ((equal? sc0 0) (Prelude-Types-takeBefore 'erased (lambda (arg-4) (Prelude-Types-C-62_Ord__Nat arg-4 arg-0)) (Prelude-Types-countFrom 'erased arg-2 (lambda (eta-0) (+ (Prelude-Types-minus arg-1 arg-2) eta-0))))) (else (vector 0 ))))))
(define Prelude-Types-case--rangeFromThenTo-4591 (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (cond ((equal? sc0 0) (Prelude-Types-case--caseC-32blockC-32inC-32rangeFromThenTo-4605 arg-0 arg-1 arg-2 (Prelude-Types-C-62_Ord__Nat arg-0 arg-2))) (else (Prelude-Types-case--caseC-32blockC-32inC-32rangeFromThenTo-4645 arg-0 arg-1 arg-2 (Prelude-Types-C-61C-61_Eq__Nat arg-2 arg-1)))))))
(define Prelude-Types-case--caseC-32blockC-32inC-32rangeFromTo-4556 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (cond ((equal? sc0 0) (Prelude-Types-takeUntil 'erased (lambda (arg-3) (Prelude-Types-C-60C-61_Ord__Nat arg-3 arg-0)) (Prelude-Types-countFrom 'erased arg-1 (lambda (n) (Prelude-Types-minus n (+ 1 0)))))) (else (vector 1 arg-1 (vector 0 )))))))
(define Prelude-Types-case--rangeFromTo-4528 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (cond ((equal? sc0 0) (Prelude-Types-takeUntil 'erased (lambda (arg-3) (Prelude-Types-C-62C-61_Ord__Nat arg-3 arg-0)) (Prelude-Types-countFrom 'erased arg-1 (lambda (eta-0) (+ 1 eta-0))))) (else (Prelude-Types-case--caseC-32blockC-32inC-32rangeFromTo-4556 arg-0 arg-1 (Prelude-Types-C-62_Ord__Nat arg-1 arg-0)))))))
(define Prelude-Types-case--takeBefore-4373 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-4)) (cond ((equal? sc0 0) (vector 0 )) (else (vector 1 arg-1 (Prelude-Types-takeBefore 'erased arg-3 (arg-2))))))))
(define Prelude-Types-case--takeUntil-4322 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-4)) (cond ((equal? sc0 0) (vector 1 arg-1 (vector 0 ))) (else (vector 1 arg-1 (Prelude-Types-takeUntil 'erased arg-3 (arg-2))))))))
(define Prelude-Types-case--toLower-3757 (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (cond ((equal? sc0 0) (cast-int-char (b+ (char->integer arg-0) 32 63))) (else arg-0)))))
(define Prelude-Types-case--toUpper-3743 (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (cond ((equal? sc0 0) (cast-int-char (Prelude-Num-C-45_Neg__Int (char->integer arg-0) 32))) (else arg-0)))))
(define Prelude-Types-case--unpackC-44unpackC-39-3622 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-4)) (cond ((equal? sc0 0) arg-1) (else (Prelude-Types-n--3688-3610-unpackC-39 arg-0 (Prelude-Num-C-45_Neg__Int arg-3 1) arg-2 (vector 1 (string-ref arg-2 arg-3) arg-1)))))))
(define Prelude-Types-case--substr-3564 (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (cond ((equal? sc0 0) (string-substr (Prelude-Types-natToInteger arg-2) (Prelude-Types-natToInteger arg-1) arg-0)) (else "")))))
(define Prelude-Types-case--max-613 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (cond ((equal? sc0 0) arg-1) (else arg-0)))))
(define Prelude-Types-case--min-599 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (cond ((equal? sc0 0) arg-1) (else arg-0)))))
(define Prelude-Types-case--integerToNat-488 (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (cond ((equal? sc0 0) 0) (else (+ 1 (- arg-0 1)))))))
(define Prelude-Types-n--3688-3610-unpackC-39 (lambda (arg-0 arg-1 arg-2 arg-3) (Prelude-Types-case--unpackC-44unpackC-39-3622 arg-0 arg-3 arg-2 arg-1 (Prelude-EqOrd-C-60_Ord__Int arg-1 0))))
(define Prelude-Types-n--3862-3769-hexChars (lambda (arg-0) (vector 1 #\0 (vector 1 #\1 (vector 1 #\2 (vector 1 #\3 (vector 1 #\4 (vector 1 #\5 (vector 1 #\6 (vector 1 #\7 (vector 1 #\8 (vector 1 #\9 (vector 1 #\A (vector 1 #\B (vector 1 #\C (vector 1 #\D (vector 1 #\E (vector 1 #\F (vector 0 )))))))))))))))))))
(define Prelude-Types-traverse_Traversable__List (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-5)) (case (vector-ref sc0 0) ((0) (let ((sc1 arg-3)) (let ((e-2 (vector-ref sc1 2))) ((e-2 'erased) (vector 0 ))))) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 arg-3)) (let ((e-4 (vector-ref sc1 3))) ((((e-4 'erased) 'erased) (let ((sc2 arg-3)) (let ((e-6 (vector-ref sc2 3))) ((((e-6 'erased) 'erased) (let ((sc3 arg-3)) (let ((e-10 (vector-ref sc3 2))) ((e-10 'erased) (lambda (eta-0) (lambda (eta-1) (vector 1 eta-0 eta-1))))))) (arg-4 e-2))))) (Prelude-Types-traverse_Traversable__List 'erased 'erased 'erased arg-3 arg-4 e-3)))))))))))
(define Prelude-Types-rangeFrom_Range__Nat (lambda (arg-0) (Prelude-Types-countFrom 'erased arg-0 (lambda (eta-0) (+ 1 eta-0)))))
(define Prelude-Types-rangeFromTo_Range__Nat (lambda (arg-0 arg-1) (Prelude-Types-case--rangeFromTo-4528 arg-1 arg-0 (Prelude-Types-C-62_Ord__Nat arg-1 arg-0))))
(define Prelude-Types-rangeFromThen_Range__Nat (lambda (arg-0 arg-1) (Prelude-Types-case--rangeFromThen-4707 arg-1 arg-0 (Prelude-Types-C-62_Ord__Nat arg-1 arg-0))))
(define Prelude-Types-rangeFromThenTo_Range__Nat (lambda (arg-0 arg-1 arg-2) (Prelude-Types-case--rangeFromThenTo-4591 arg-2 arg-1 arg-0 (Prelude-Types-C-62_Ord__Nat arg-1 arg-0))))
(define Prelude-Types-pure_Applicative__Maybe (lambda (arg-0 ext-0) (vector 1 ext-0)))
(define Prelude-Types-pure_Applicative__List (lambda (arg-0 arg-1) (vector 1 arg-1 (vector 0 ))))
(define Prelude-Types-pure_Applicative__C-40EitherC-32C-36eC-41 (lambda (arg-0 arg-1 ext-0) (vector 1 ext-0)))
(define Prelude-Types-neutral_Monoid__String (lambda () ""))
(define Prelude-Types-neutral_Monoid__C-40ListC-32C-36aC-41 (lambda (arg-0) (vector 0 )))
(define Prelude-Types-min_Ord__Nat (lambda (arg-0 arg-1) (Prelude-Types-case--min-599 arg-1 arg-0 (Prelude-Types-C-60_Ord__Nat arg-0 arg-1))))
(define Prelude-Types-max_Ord__Nat (lambda (arg-0 arg-1) (Prelude-Types-case--max-613 arg-1 arg-0 (Prelude-Types-C-62_Ord__Nat arg-0 arg-1))))
(define Prelude-Types-map_Functor__Maybe (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((1) (let ((e-1 (vector-ref sc0 1))) (vector 1 (arg-2 e-1)))) (else (vector 0 ))))))
(define Prelude-Types-map_Functor__List (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((0) (vector 0 )) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (vector 1 (arg-2 e-2) (Prelude-Types-map_Functor__List 'erased 'erased arg-2 e-3)))))))))
(define Prelude-Types-map_Functor__C-40EitherC-32C-36eC-41 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-4)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (vector 1 (arg-3 e-5))))))))
(define Prelude-Types-join_Monad__Maybe (lambda (arg-0 arg-1) (Prelude-Types-C-62C-62C-61_Monad__Maybe 'erased 'erased arg-1 (lambda (eta-0) eta-0))))
(define Prelude-Types-join_Monad__List (lambda (arg-0 arg-1) (Prelude-Types-C-62C-62C-61_Monad__List 'erased 'erased arg-1 (lambda (eta-0) eta-0))))
(define Prelude-Types-join_Monad__C-40EitherC-32C-36eC-41 (lambda (arg-0 arg-1 arg-2) (Prelude-Types-C-62C-62C-61_Monad__C-40EitherC-32C-36eC-41 'erased 'erased 'erased arg-2 (lambda (eta-0) eta-0))))
(define Prelude-Types-fromInteger_Num__Nat (lambda (arg-0) arg-0))
(define Prelude-Types-foldr_Foldable__List (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-4)) (case (vector-ref sc0 0) ((0) arg-3) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) ((arg-2 e-2) (Prelude-Types-foldr_Foldable__List 'erased 'erased arg-2 arg-3 e-3)))))))))
(define Prelude-Types-foldl_Foldable__List (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-4)) (case (vector-ref sc0 0) ((0) arg-3) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (Prelude-Types-foldl_Foldable__List 'erased 'erased arg-2 ((arg-2 arg-3) e-2) e-3))))))))
(define Prelude-Types-compare_Ord__Nat (lambda (arg-0 arg-1) (let ((sc0 arg-0)) (cond ((equal? sc0 0) (let ((sc1 arg-1)) (cond ((equal? sc1 0) 1)(else 0))))(else (let ((e-0 (- arg-0 1))) (let ((sc0 arg-1)) (cond ((equal? sc0 0) 2)(else (let ((e-2 (- arg-1 1))) (Prelude-Types-compare_Ord__Nat e-0 e-2)))))))))))
(define Prelude-Types-cast_Cast__String_Integer (lambda (ext-0) (cast-string-int ext-0)))
(define Prelude-Types-cast_Cast__String_Double (lambda (ext-0) (cast-string-double ext-0)))
(define Prelude-Types-cast_Cast__Nat_Int (lambda (ext-0) (Prelude-Types-natToInteger ext-0)))
(define Prelude-Types-cast_Cast__Int_Integer (lambda (ext-0) ext-0))
(define Prelude-Types-__Impl_Traversable_List (lambda () (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-62) (Prelude-Types-map_Functor__List 'erased 'erased func arg-62))))) (vector 0 (lambda (acc) (lambda (elem) (lambda (func) (lambda (init) (lambda (input) (Prelude-Types-foldr_Foldable__List 'erased 'erased func init input)))))) (lambda (elem) (lambda (acc) (lambda (func) (lambda (init) (lambda (input) (Prelude-Types-foldl_Foldable__List 'erased 'erased func init input))))))) (lambda (b) (lambda (a) (lambda (f) (lambda (i_con-0) (lambda (arg-1032) (lambda (arg-1034) (Prelude-Types-traverse_Traversable__List 'erased 'erased 'erased i_con-0 arg-1032 arg-1034))))))))))
(define Prelude-Types-__Impl_Semigroup_String (lambda (ext-0 ext-1) (Prelude-Types-C-60C-43C-62_Semigroup__String ext-0 ext-1)))
(define Prelude-Types-__Impl_Semigroup_C-40ListC-32C-36aC-41 (lambda (arg-0 ext-0 ext-1) (Prelude-Types-C-60C-43C-62_Semigroup__C-40ListC-32C-36aC-41 'erased ext-0 ext-1)))
(define Prelude-Types-__Impl_Range_Nat (lambda () (vector 0 (lambda (arg-4409) (lambda (arg-4410) (Prelude-Types-rangeFromTo_Range__Nat arg-4409 arg-4410))) (lambda (arg-4411) (lambda (arg-4412) (lambda (arg-4413) (Prelude-Types-rangeFromThenTo_Range__Nat arg-4411 arg-4412 arg-4413)))) (lambda (arg-4414) (Prelude-Types-rangeFrom_Range__Nat arg-4414)) (lambda (arg-4415) (lambda (arg-4416) (Prelude-Types-rangeFromThen_Range__Nat arg-4415 arg-4416))))))
(define Prelude-Types-__Impl_Ord_Nat (lambda () (vector 0 (vector 0 (lambda (arg-2) (lambda (arg-3) (Prelude-Types-C-61C-61_Eq__Nat arg-2 arg-3))) (lambda (arg-4) (lambda (arg-5) (Prelude-Types-C-47C-61_Eq__Nat arg-4 arg-5)))) (lambda (arg-369) (lambda (arg-370) (Prelude-Types-compare_Ord__Nat arg-369 arg-370))) (lambda (arg-371) (lambda (arg-372) (Prelude-Types-C-60_Ord__Nat arg-371 arg-372))) (lambda (arg-373) (lambda (arg-374) (Prelude-Types-C-62_Ord__Nat arg-373 arg-374))) (lambda (arg-375) (lambda (arg-376) (Prelude-Types-C-60C-61_Ord__Nat arg-375 arg-376))) (lambda (arg-377) (lambda (arg-378) (Prelude-Types-C-62C-61_Ord__Nat arg-377 arg-378))) (lambda (arg-379) (lambda (arg-380) (Prelude-Types-max_Ord__Nat arg-379 arg-380))) (lambda (arg-381) (lambda (arg-382) (Prelude-Types-min_Ord__Nat arg-381 arg-382))))))
(define Prelude-Types-__Impl_Num_Nat (lambda () (vector 0 (lambda (arg-2) (lambda (arg-3) (Prelude-Types-C-43_Num__Nat arg-2 arg-3))) (lambda (arg-4) (lambda (arg-5) (Prelude-Types-C-42_Num__Nat arg-4 arg-5))) (lambda (arg-6) (Prelude-Types-fromInteger_Num__Nat arg-6)))))
(define Prelude-Types-__Impl_Monoid_String (lambda () (vector 0 (lambda (arg-2) (lambda (arg-3) (Prelude-Types-C-60C-43C-62_Semigroup__String arg-2 arg-3))) (Prelude-Types-neutral_Monoid__String))))
(define Prelude-Types-__Impl_Monoid_C-40ListC-32C-36aC-41 (lambda (arg-0) (vector 0 (lambda (arg-2) (lambda (arg-3) (Prelude-Types-C-60C-43C-62_Semigroup__C-40ListC-32C-36aC-41 'erased arg-2 arg-3))) (Prelude-Types-neutral_Monoid__C-40ListC-32C-36aC-41 'erased))))
(define Prelude-Types-__Impl_Monad_Maybe (lambda () (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-62) (Prelude-Types-map_Functor__Maybe 'erased 'erased func arg-62))))) (lambda (a) (lambda (arg-172) (Prelude-Types-pure_Applicative__Maybe 'erased arg-172))) (lambda (b) (lambda (a) (lambda (arg-173) (lambda (arg-175) (Prelude-Types-C-60C-42C-62_Applicative__Maybe 'erased 'erased arg-173 arg-175)))))) (lambda (b) (lambda (a) (lambda (arg-334) (lambda (arg-335) (Prelude-Types-C-62C-62C-61_Monad__Maybe 'erased 'erased arg-334 arg-335))))) (lambda (a) (lambda (arg-337) (Prelude-Types-join_Monad__Maybe 'erased arg-337))))))
(define Prelude-Types-__Impl_Monad_List (lambda () (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-62) (Prelude-Types-map_Functor__List 'erased 'erased func arg-62))))) (lambda (a) (lambda (arg-172) (Prelude-Types-pure_Applicative__List 'erased arg-172))) (lambda (b) (lambda (a) (lambda (arg-173) (lambda (arg-175) (Prelude-Types-C-60C-42C-62_Applicative__List 'erased 'erased arg-173 arg-175)))))) (lambda (b) (lambda (a) (lambda (arg-334) (lambda (arg-335) (Prelude-Types-C-62C-62C-61_Monad__List 'erased 'erased arg-334 arg-335))))) (lambda (a) (lambda (arg-337) (Prelude-Types-join_Monad__List 'erased arg-337))))))
(define Prelude-Types-__Impl_Monad_C-40EitherC-32C-36eC-41 (lambda (arg-0) (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-62) (let ((sc0 arg-62)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (vector 1 (func e-5)))))))))) (lambda (a) (lambda (arg-172) (vector 1 arg-172))) (lambda (b) (lambda (a) (lambda (arg-173) (lambda (arg-175) (let ((sc0 arg-173)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (let ((sc1 arg-175)) (case (vector-ref sc1 0) ((1) (let ((e-8 (vector-ref sc1 1))) (vector 1 (e-5 e-8)))) (else (let ((e-11 (vector-ref sc1 1))) (vector 0 e-11)))))))))))))) (lambda (b) (lambda (a) (lambda (arg-334) (lambda (arg-335) (Prelude-Types-C-62C-62C-61_Monad__C-40EitherC-32C-36eC-41 'erased 'erased 'erased arg-334 arg-335))))) (lambda (a) (lambda (arg-337) (Prelude-Types-join_Monad__C-40EitherC-32C-36eC-41 'erased 'erased arg-337))))))
(define Prelude-Types-__Impl_Functor_Maybe (lambda (ext-0 ext-1 ext-2 ext-3) (Prelude-Types-map_Functor__Maybe 'erased 'erased ext-2 ext-3)))
(define Prelude-Types-__Impl_Functor_List (lambda (ext-0 ext-1 ext-2 ext-3) (Prelude-Types-map_Functor__List 'erased 'erased ext-2 ext-3)))
(define Prelude-Types-__Impl_Functor_C-40EitherC-32C-36eC-41 (lambda (arg-0 ext-0 ext-1 ext-2 ext-3) (let ((sc0 ext-3)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (vector 1 (ext-2 e-5))))))))
(define Prelude-Types-__Impl_Foldable_List (lambda () (vector 0 (lambda (acc) (lambda (elem) (lambda (func) (lambda (init) (lambda (input) (Prelude-Types-foldr_Foldable__List 'erased 'erased func init input)))))) (lambda (elem) (lambda (acc) (lambda (func) (lambda (init) (lambda (input) (Prelude-Types-foldl_Foldable__List 'erased 'erased func init input)))))))))
(define Prelude-Types-__Impl_Eq_Nat (lambda () (vector 0 (lambda (arg-2) (lambda (arg-3) (Prelude-Types-C-61C-61_Eq__Nat arg-2 arg-3))) (lambda (arg-4) (lambda (arg-5) (Prelude-Types-C-47C-61_Eq__Nat arg-4 arg-5))))))
(define Prelude-Types-__Impl_Cast_Nat_Int (lambda (ext-0) (Prelude-Types-cast_Cast__Nat_Int ext-0)))
(define Prelude-Types-__Impl_Applicative_Maybe (lambda () (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-62) (Prelude-Types-map_Functor__Maybe 'erased 'erased func arg-62))))) (lambda (a) (lambda (arg-172) (Prelude-Types-pure_Applicative__Maybe 'erased arg-172))) (lambda (b) (lambda (a) (lambda (arg-173) (lambda (arg-175) (Prelude-Types-C-60C-42C-62_Applicative__Maybe 'erased 'erased arg-173 arg-175))))))))
(define Prelude-Types-__Impl_Applicative_List (lambda () (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-62) (Prelude-Types-map_Functor__List 'erased 'erased func arg-62))))) (lambda (a) (lambda (arg-172) (Prelude-Types-pure_Applicative__List 'erased arg-172))) (lambda (b) (lambda (a) (lambda (arg-173) (lambda (arg-175) (Prelude-Types-C-60C-42C-62_Applicative__List 'erased 'erased arg-173 arg-175))))))))
(define Prelude-Types-__Impl_Applicative_C-40EitherC-32C-36eC-41 (lambda (arg-0) (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-62) (let ((sc0 arg-62)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (vector 1 (func e-5)))))))))) (lambda (a) (lambda (arg-172) (vector 1 arg-172))) (lambda (b) (lambda (a) (lambda (arg-173) (lambda (arg-175) (let ((sc0 arg-173)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (let ((sc1 arg-175)) (case (vector-ref sc1 0) ((1) (let ((e-8 (vector-ref sc1 1))) (vector 1 (e-5 e-8)))) (else (let ((e-11 (vector-ref sc1 1))) (vector 0 e-11))))))))))))))))
(define Prelude-Types-C-62_Ord__Nat (lambda (arg-0 arg-1) (Prelude-EqOrd-C-61C-61_Eq__Ordering (Prelude-Types-compare_Ord__Nat arg-0 arg-1) 2)))
(define Prelude-Types-C-62C-62C-61_Monad__Maybe (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((0) (vector 0 )) (else (let ((e-2 (vector-ref sc0 1))) (arg-3 e-2)))))))
(define Prelude-Types-C-62C-62C-61_Monad__List (lambda (arg-0 arg-1 arg-2 arg-3) ((Prelude-Interfaces-concatMap 'erased 'erased 'erased (vector 0 (vector 0 (lambda (acc) (lambda (elem) (lambda (func) (lambda (init) (lambda (input) (Prelude-Types-foldr_Foldable__List 'erased 'erased func init input)))))) (lambda (elem) (lambda (acc) (lambda (func) (lambda (init) (lambda (input) (Prelude-Types-foldl_Foldable__List 'erased 'erased func init input))))))) (vector 0 (lambda (arg-4) (lambda (arg-5) (Prelude-Types-C-60C-43C-62_Semigroup__C-40ListC-32C-36aC-41 'erased arg-4 arg-5))) (Prelude-Types-neutral_Monoid__C-40ListC-32C-36aC-41 'erased))) arg-3) arg-2)))
(define Prelude-Types-C-62C-62C-61_Monad__C-40EitherC-32C-36eC-41 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (arg-4 e-5)))))))
(define Prelude-Types-C-62C-61_Ord__Nat (lambda (arg-0 arg-1) (Prelude-EqOrd-C-47C-61_Eq__Ordering (Prelude-Types-compare_Ord__Nat arg-0 arg-1) 0)))
(define Prelude-Types-C-61C-61_Eq__Nat (lambda (arg-0 arg-1) (let ((sc0 arg-0)) (cond ((equal? sc0 0) (let ((sc1 arg-1)) (cond ((equal? sc1 0) 0)(else 1))))(else (let ((e-0 (- arg-0 1))) (let ((sc0 arg-1)) (cond ((equal? sc0 0) 1)(else (let ((e-1 (- arg-1 1))) (Prelude-Types-C-61C-61_Eq__Nat e-0 e-1)))))))))))
(define Prelude-Types-C-60_Ord__Nat (lambda (arg-0 arg-1) (Prelude-EqOrd-C-61C-61_Eq__Ordering (Prelude-Types-compare_Ord__Nat arg-0 arg-1) 0)))
(define Prelude-Types-C-60C-61_Ord__Nat (lambda (arg-0 arg-1) (Prelude-EqOrd-C-47C-61_Eq__Ordering (Prelude-Types-compare_Ord__Nat arg-0 arg-1) 2)))
(define Prelude-Types-C-60C-43C-62_Semigroup__String (lambda (ext-0 ext-1) (Prelude-Types-Strings-C-43C-43 ext-0 ext-1)))
(define Prelude-Types-C-60C-43C-62_Semigroup__C-40ListC-32C-36aC-41 (lambda (arg-0 ext-0 ext-1) (Prelude-Types-List-C-43C-43 'erased ext-0 ext-1)))
(define Prelude-Types-C-60C-42C-62_Applicative__Maybe (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((1) (let ((e-1 (vector-ref sc0 1))) (let ((sc1 arg-3)) (case (vector-ref sc1 0) ((1) (let ((e-3 (vector-ref sc1 1))) (vector 1 (e-1 e-3))))(else (vector 0 ))))))(else (vector 0 ))))))
(define Prelude-Types-C-60C-42C-62_Applicative__List (lambda (arg-0 arg-1 arg-2 arg-3) ((Prelude-Interfaces-concatMap 'erased 'erased 'erased (vector 0 (vector 0 (lambda (acc) (lambda (elem) (lambda (func) (lambda (init) (lambda (input) (Prelude-Types-foldr_Foldable__List 'erased 'erased func init input)))))) (lambda (elem) (lambda (acc) (lambda (func) (lambda (init) (lambda (input) (Prelude-Types-foldl_Foldable__List 'erased 'erased func init input))))))) (vector 0 (lambda (arg-4) (lambda (arg-5) (Prelude-Types-C-60C-43C-62_Semigroup__C-40ListC-32C-36aC-41 'erased arg-4 arg-5))) (Prelude-Types-neutral_Monoid__C-40ListC-32C-36aC-41 'erased))) (lambda (f) (Prelude-Types-map_Functor__List 'erased 'erased f arg-3))) arg-2)))
(define Prelude-Types-C-60C-42C-62_Applicative__C-40EitherC-32C-36eC-41 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (let ((sc1 arg-4)) (case (vector-ref sc1 0) ((1) (let ((e-8 (vector-ref sc1 1))) (vector 1 (e-5 e-8)))) (else (let ((e-11 (vector-ref sc1 1))) (vector 0 e-11)))))))))))
(define Prelude-Types-C-47C-61_Eq__Nat (lambda (arg-0 arg-1) (Prelude-Basics-not (Prelude-Types-C-61C-61_Eq__Nat arg-0 arg-1))))
(define Prelude-Types-C-43_Num__Nat (lambda (ext-0 ext-1) (+ ext-0 ext-1)))
(define Prelude-Types-C-42_Num__Nat (lambda (ext-0 ext-1) (* ext-0 ext-1)))
(define Prelude-Types-unpack (lambda (arg-0) (Prelude-Types-n--3688-3610-unpackC-39 arg-0 (Prelude-Num-C-45_Neg__Int (Prelude-Types-natToInteger (Prelude-Types-Strings-length arg-0)) 1) arg-0 (vector 0 ))))
(define Prelude-Types-toUpper (lambda (arg-0) (Prelude-Types-case--toUpper-3743 arg-0 (Prelude-Types-isLower arg-0))))
(define Prelude-Types-toLower (lambda (arg-0) (Prelude-Types-case--toLower-3757 arg-0 (Prelude-Types-isUpper arg-0))))
(define Prelude-Types-takeUntil (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (let ((e-1 (vector-ref sc0 1))) (let ((e-2 (vector-ref sc0 2))) (Prelude-Types-case--takeUntil-4322 'erased e-1 e-2 arg-1 (arg-1 e-1)))))))
(define Prelude-Types-takeBefore (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (let ((e-1 (vector-ref sc0 1))) (let ((e-2 (vector-ref sc0 2))) (Prelude-Types-case--takeBefore-4373 'erased e-1 e-2 arg-1 (arg-1 e-1)))))))
(define Prelude-Types-substr (lambda (arg-0 arg-1 arg-2) (Prelude-Types-case--substr-3564 arg-2 arg-1 arg-0 (Prelude-EqOrd-C-60_Ord__Integer (Prelude-Types-natToInteger arg-0) (Prelude-Types-natToInteger (Prelude-Types-Strings-length arg-2))))))
(define Prelude-Types-strCons (lambda (ext-0 ext-1) (string-cons ext-0 ext-1)))
(define Prelude-Types-reverse (lambda (ext-0) (string-reverse ext-0)))
(define Prelude-Types-rangeFromTo (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (let ((e-1 (vector-ref sc0 1))) (lambda (arg-2) (lambda (arg-3) ((e-1 arg-2) arg-3)))))))
(define Prelude-Types-plus (lambda (arg-0 arg-1) (let ((sc0 arg-0)) (cond ((equal? sc0 0) arg-1)(else (let ((e-0 (- arg-0 1))) (+ 1 (+ e-0 arg-1))))))))
(define Prelude-Types-pack (lambda (arg-0) (let ((sc0 arg-0)) (case (vector-ref sc0 0) ((0) "") (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (Prelude-Types-strCons e-2 (Prelude-Types-pack e-3)))))))))
(define Prelude-Types-natToInteger (lambda (arg-0) (let ((sc0 arg-0)) (cond ((equal? sc0 0) 0)(else (let ((e-0 (- arg-0 1))) (+ 1 (Prelude-Types-natToInteger e-0))))))))
(define Prelude-Types-mult (lambda (arg-0 arg-1) (let ((sc0 arg-0)) (cond ((equal? sc0 0) 0)(else (let ((e-0 (- arg-0 1))) (+ arg-1 (* e-0 arg-1))))))))
(define Prelude-Types-minus (lambda (arg-0 arg-1) (let ((sc0 arg-0)) (cond ((equal? sc0 0) 0)(else (let ((sc0 arg-1)) (cond ((equal? sc0 0) arg-0)(else (let ((sc0 arg-0)) (cond ((equal? sc0 0) (blodwen-error-quit "Nat case not covered"))(else (let ((e-0 (- arg-0 1))) (let ((sc0 arg-1)) (cond ((equal? sc0 0) (blodwen-error-quit "Nat case not covered"))(else (let ((e-1 (- arg-1 1))) (Prelude-Types-minus e-0 e-1)))))))))))))))))
(define Prelude-Types-maybe (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-4)) (case (vector-ref sc0 0) ((0) (arg-2)) (else (let ((e-2 (vector-ref sc0 1))) ((arg-3) e-2)))))))
(define Prelude-Types-Strings-length (lambda (arg-0) (Prelude-Types-fromInteger_Num__Nat (string-length arg-0))))
(define Prelude-Types-List-length (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (case (vector-ref sc0 0) ((0) 0) (else (let ((e-3 (vector-ref sc0 2))) (+ 1 (Prelude-Types-List-length 'erased e-3))))))))
(define Prelude-Types-isUpper (lambda (arg-0) (Prelude-Basics-C-38C-38 (Prelude-EqOrd-C-62C-61_Ord__Char arg-0 #\A) (lambda () (Prelude-EqOrd-C-60C-61_Ord__Char arg-0 #\Z)))))
(define Prelude-Types-isSpace (lambda (arg-0) (Prelude-Basics-C-124C-124 (Prelude-EqOrd-C-61C-61_Eq__Char arg-0 #\ ) (lambda () (Prelude-Basics-C-124C-124 (Prelude-EqOrd-C-61C-61_Eq__Char arg-0 (integer->char 9)) (lambda () (Prelude-Basics-C-124C-124 (Prelude-EqOrd-C-61C-61_Eq__Char arg-0 (integer->char 13)) (lambda () (Prelude-Basics-C-124C-124 (Prelude-EqOrd-C-61C-61_Eq__Char arg-0 (integer->char 10)) (lambda () (Prelude-Basics-C-124C-124 (Prelude-EqOrd-C-61C-61_Eq__Char arg-0 (integer->char 12)) (lambda () (Prelude-Basics-C-124C-124 (Prelude-EqOrd-C-61C-61_Eq__Char arg-0 (integer->char 11)) (lambda () (Prelude-EqOrd-C-61C-61_Eq__Char arg-0 (integer->char 160))))))))))))))))
(define Prelude-Types-isOctDigit (lambda (arg-0) (Prelude-Basics-C-38C-38 (Prelude-EqOrd-C-62C-61_Ord__Char arg-0 #\0) (lambda () (Prelude-EqOrd-C-60C-61_Ord__Char arg-0 #\7)))))
(define Prelude-Types-isNL (lambda (arg-0) (Prelude-Basics-C-124C-124 (Prelude-EqOrd-C-61C-61_Eq__Char arg-0 (integer->char 13)) (lambda () (Prelude-EqOrd-C-61C-61_Eq__Char arg-0 (integer->char 10))))))
(define Prelude-Types-isLower (lambda (arg-0) (Prelude-Basics-C-38C-38 (Prelude-EqOrd-C-62C-61_Ord__Char arg-0 #\a) (lambda () (Prelude-EqOrd-C-60C-61_Ord__Char arg-0 #\z)))))
(define Prelude-Types-isHexDigit (lambda (arg-0) (Prelude-Types-elem 'erased (vector 0 (lambda (arg-2) (lambda (arg-3) (Prelude-EqOrd-C-61C-61_Eq__Char arg-2 arg-3))) (lambda (arg-4) (lambda (arg-5) (Prelude-EqOrd-C-47C-61_Eq__Char arg-4 arg-5)))) (Prelude-Types-toUpper arg-0) (Prelude-Types-n--3862-3769-hexChars arg-0))))
(define Prelude-Types-isDigit (lambda (arg-0) (Prelude-Basics-C-38C-38 (Prelude-EqOrd-C-62C-61_Ord__Char arg-0 #\0) (lambda () (Prelude-EqOrd-C-60C-61_Ord__Char arg-0 #\9)))))
(define Prelude-Types-isAlphaNum (lambda (arg-0) (Prelude-Basics-C-124C-124 (Prelude-Types-isDigit arg-0) (lambda () (Prelude-Types-isAlpha arg-0)))))
(define Prelude-Types-isAlpha (lambda (arg-0) (Prelude-Basics-C-124C-124 (Prelude-Types-isUpper arg-0) (lambda () (Prelude-Types-isLower arg-0)))))
(define Prelude-Types-integerToNat (lambda (arg-0) (Prelude-Types-case--integerToNat-488 arg-0 (let ((sc0 (or (and (<= arg-0 0) 1) 0))) (cond ((equal? sc0 0) 1)(else 0))))))
(define Prelude-Types-elem (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((0) 1) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (Prelude-Basics-C-124C-124 (let ((sc1 arg-1)) (let ((e-1 (vector-ref sc1 1))) ((e-1 arg-2) e-2))) (lambda () (Prelude-Types-elem 'erased arg-1 arg-2 e-3))))))))))
(define Prelude-Types-either (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-5)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) ((arg-3) e-2))) (else (let ((e-5 (vector-ref sc0 1))) ((arg-4) e-5)))))))
(define Prelude-Types-countFrom (lambda (arg-0 arg-1 arg-2) (vector 0 arg-1 (lambda () (Prelude-Types-countFrom 'erased (arg-2 arg-1) arg-2)))))
(define Prelude-Types-chr (lambda (ext-0) (cast-int-char ext-0)))
(define Prelude-Types-cast (lambda (arg-0 arg-1 arg-2 ext-0) (arg-2 ext-0)))
(define Prelude-Types-Strings-C-43C-43 (lambda (arg-0 arg-1) (string-append arg-0 arg-1)))
(define Prelude-Types-List-C-43C-43 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-1)) (case (vector-ref sc0 0) ((0) arg-2) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (vector 1 e-2 (Prelude-Types-List-C-43C-43 'erased e-3 arg-2)))))))))
(define Prelude-Num-fromInteger_Num__Integer (lambda (ext-0) ext-0))
(define Prelude-Num-fromInteger_Num__Int (lambda (ext-0) ext-0))
(define Prelude-Num-__Impl_Num_Int (lambda () (vector 0 (lambda (arg-2) (lambda (arg-3) (b+ arg-2 arg-3 63))) (lambda (arg-4) (lambda (arg-5) (b* arg-4 arg-5 63))) (lambda (arg-6) arg-6))))
(define Prelude-Num-C-45_Neg__Int (lambda (ext-0 ext-1) (b- ext-0 ext-1 63)))
(define Prelude-Num-C-43_Num__Integer (lambda (ext-0 ext-1) (+ ext-0 ext-1)))
(define Prelude-Num-C-43_Num__Int (lambda (ext-0 ext-1) (b+ ext-0 ext-1 63)))
(define Prelude-Num-C-42_Num__Int (lambda (ext-0 ext-1) (b* ext-0 ext-1 63)))
(define Prelude-Num-fromInteger (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (let ((e-3 (vector-ref sc0 3))) (lambda (arg-2) (e-3 arg-2))))))
(define Prelude-Num-C-43 (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (let ((e-1 (vector-ref sc0 1))) (lambda (arg-2) (lambda (arg-3) ((e-1 arg-2) arg-3)))))))
(define Prelude-EqOrd-case--caseC-32blockC-32inC-32compare-1963 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (cond ((equal? sc0 0) 1) (else 2)))))
(define Prelude-EqOrd-case--compare-1946 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (cond ((equal? sc0 0) 0) (else (Prelude-EqOrd-case--caseC-32blockC-32inC-32compare-1963 arg-0 arg-1 (Prelude-EqOrd-C-61C-61_Eq__String arg-1 arg-0)))))))
(define Prelude-EqOrd-case--max-1929 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (cond ((equal? sc0 0) arg-1) (else arg-0)))))
(define Prelude-EqOrd-case--min-1915 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (cond ((equal? sc0 0) arg-1) (else arg-0)))))
(define Prelude-EqOrd-case--caseC-32blockC-32inC-32compare-1279 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (cond ((equal? sc0 0) 1) (else 2)))))
(define Prelude-EqOrd-case--compare-1262 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (cond ((equal? sc0 0) 0) (else (Prelude-EqOrd-case--caseC-32blockC-32inC-32compare-1279 arg-0 arg-1 (Prelude-EqOrd-C-61C-61_Eq__Integer arg-1 arg-0)))))))
(define Prelude-EqOrd-case--max-1245 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (cond ((equal? sc0 0) arg-1) (else arg-0)))))
(define Prelude-EqOrd-case--min-1231 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (cond ((equal? sc0 0) arg-1) (else arg-0)))))
(define Prelude-EqOrd-case--caseC-32blockC-32inC-32compare-1165 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (cond ((equal? sc0 0) 1) (else 2)))))
(define Prelude-EqOrd-case--compare-1148 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (cond ((equal? sc0 0) 0) (else (Prelude-EqOrd-case--caseC-32blockC-32inC-32compare-1165 arg-0 arg-1 (Prelude-EqOrd-C-61C-61_Eq__Int arg-1 arg-0)))))))
(define Prelude-EqOrd-case--max-1131 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (cond ((equal? sc0 0) arg-1) (else arg-0)))))
(define Prelude-EqOrd-case--min-1117 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (cond ((equal? sc0 0) arg-1) (else arg-0)))))
(define Prelude-EqOrd-min_Ord__String (lambda (arg-0 arg-1) (Prelude-EqOrd-case--min-1915 arg-1 arg-0 (Prelude-EqOrd-C-60_Ord__String arg-0 arg-1))))
(define Prelude-EqOrd-min_Ord__Integer (lambda (arg-0 arg-1) (Prelude-EqOrd-case--min-1231 arg-1 arg-0 (Prelude-EqOrd-C-60_Ord__Integer arg-0 arg-1))))
(define Prelude-EqOrd-min_Ord__Int (lambda (arg-0 arg-1) (Prelude-EqOrd-case--min-1117 arg-1 arg-0 (Prelude-EqOrd-C-60_Ord__Int arg-0 arg-1))))
(define Prelude-EqOrd-max_Ord__String (lambda (arg-0 arg-1) (Prelude-EqOrd-case--max-1929 arg-1 arg-0 (Prelude-EqOrd-C-62_Ord__String arg-0 arg-1))))
(define Prelude-EqOrd-max_Ord__Integer (lambda (arg-0 arg-1) (Prelude-EqOrd-case--max-1245 arg-1 arg-0 (Prelude-EqOrd-C-62_Ord__Integer arg-0 arg-1))))
(define Prelude-EqOrd-max_Ord__Int (lambda (arg-0 arg-1) (Prelude-EqOrd-case--max-1131 arg-1 arg-0 (Prelude-EqOrd-C-62_Ord__Int arg-0 arg-1))))
(define Prelude-EqOrd-compare_Ord__String (lambda (arg-0 arg-1) (Prelude-EqOrd-case--compare-1946 arg-1 arg-0 (Prelude-EqOrd-C-60_Ord__String arg-0 arg-1))))
(define Prelude-EqOrd-compare_Ord__Integer (lambda (arg-0 arg-1) (Prelude-EqOrd-case--compare-1262 arg-1 arg-0 (Prelude-EqOrd-C-60_Ord__Integer arg-0 arg-1))))
(define Prelude-EqOrd-compare_Ord__Int (lambda (arg-0 arg-1) (Prelude-EqOrd-case--compare-1148 arg-1 arg-0 (Prelude-EqOrd-C-60_Ord__Int arg-0 arg-1))))
(define Prelude-EqOrd-__Ord_C-40EqC-32tyC-41 (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (let ((e-1 (vector-ref sc0 1))) e-1))))
(define Prelude-EqOrd-__Impl_Ord_String (lambda () (vector 0 (vector 0 (lambda (arg-2) (lambda (arg-3) (Prelude-EqOrd-C-61C-61_Eq__String arg-2 arg-3))) (lambda (arg-4) (lambda (arg-5) (Prelude-EqOrd-C-47C-61_Eq__String arg-4 arg-5)))) (lambda (arg-369) (lambda (arg-370) (Prelude-EqOrd-compare_Ord__String arg-369 arg-370))) (lambda (arg-371) (lambda (arg-372) (Prelude-EqOrd-C-60_Ord__String arg-371 arg-372))) (lambda (arg-373) (lambda (arg-374) (Prelude-EqOrd-C-62_Ord__String arg-373 arg-374))) (lambda (arg-375) (lambda (arg-376) (Prelude-EqOrd-C-60C-61_Ord__String arg-375 arg-376))) (lambda (arg-377) (lambda (arg-378) (Prelude-EqOrd-C-62C-61_Ord__String arg-377 arg-378))) (lambda (arg-379) (lambda (arg-380) (Prelude-EqOrd-max_Ord__String arg-379 arg-380))) (lambda (arg-381) (lambda (arg-382) (Prelude-EqOrd-min_Ord__String arg-381 arg-382))))))
(define Prelude-EqOrd-__Impl_Ord_Integer (lambda () (vector 0 (vector 0 (lambda (arg-2) (lambda (arg-3) (Prelude-EqOrd-C-61C-61_Eq__Integer arg-2 arg-3))) (lambda (arg-4) (lambda (arg-5) (Prelude-EqOrd-C-47C-61_Eq__Integer arg-4 arg-5)))) (lambda (arg-369) (lambda (arg-370) (Prelude-EqOrd-compare_Ord__Integer arg-369 arg-370))) (lambda (arg-371) (lambda (arg-372) (Prelude-EqOrd-C-60_Ord__Integer arg-371 arg-372))) (lambda (arg-373) (lambda (arg-374) (Prelude-EqOrd-C-62_Ord__Integer arg-373 arg-374))) (lambda (arg-375) (lambda (arg-376) (Prelude-EqOrd-C-60C-61_Ord__Integer arg-375 arg-376))) (lambda (arg-377) (lambda (arg-378) (Prelude-EqOrd-C-62C-61_Ord__Integer arg-377 arg-378))) (lambda (arg-379) (lambda (arg-380) (Prelude-EqOrd-max_Ord__Integer arg-379 arg-380))) (lambda (arg-381) (lambda (arg-382) (Prelude-EqOrd-min_Ord__Integer arg-381 arg-382))))))
(define Prelude-EqOrd-__Impl_Ord_Int (lambda () (vector 0 (vector 0 (lambda (arg-2) (lambda (arg-3) (Prelude-EqOrd-C-61C-61_Eq__Int arg-2 arg-3))) (lambda (arg-4) (lambda (arg-5) (Prelude-EqOrd-C-47C-61_Eq__Int arg-4 arg-5)))) (lambda (arg-369) (lambda (arg-370) (Prelude-EqOrd-compare_Ord__Int arg-369 arg-370))) (lambda (arg-371) (lambda (arg-372) (Prelude-EqOrd-C-60_Ord__Int arg-371 arg-372))) (lambda (arg-373) (lambda (arg-374) (Prelude-EqOrd-C-62_Ord__Int arg-373 arg-374))) (lambda (arg-375) (lambda (arg-376) (Prelude-EqOrd-C-60C-61_Ord__Int arg-375 arg-376))) (lambda (arg-377) (lambda (arg-378) (Prelude-EqOrd-C-62C-61_Ord__Int arg-377 arg-378))) (lambda (arg-379) (lambda (arg-380) (Prelude-EqOrd-max_Ord__Int arg-379 arg-380))) (lambda (arg-381) (lambda (arg-382) (Prelude-EqOrd-min_Ord__Int arg-381 arg-382))))))
(define Prelude-EqOrd-__Impl_Eq_String (lambda () (vector 0 (lambda (arg-2) (lambda (arg-3) (Prelude-EqOrd-C-61C-61_Eq__String arg-2 arg-3))) (lambda (arg-4) (lambda (arg-5) (Prelude-EqOrd-C-47C-61_Eq__String arg-4 arg-5))))))
(define Prelude-EqOrd-__Impl_Eq_Ordering (lambda () (vector 0 (lambda (arg-2) (lambda (arg-3) (Prelude-EqOrd-C-61C-61_Eq__Ordering arg-2 arg-3))) (lambda (arg-4) (lambda (arg-5) (Prelude-EqOrd-C-47C-61_Eq__Ordering arg-4 arg-5))))))
(define Prelude-EqOrd-__Impl_Eq_Integer (lambda () (vector 0 (lambda (arg-2) (lambda (arg-3) (Prelude-EqOrd-C-61C-61_Eq__Integer arg-2 arg-3))) (lambda (arg-4) (lambda (arg-5) (Prelude-EqOrd-C-47C-61_Eq__Integer arg-4 arg-5))))))
(define Prelude-EqOrd-__Impl_Eq_Int (lambda () (vector 0 (lambda (arg-2) (lambda (arg-3) (Prelude-EqOrd-C-61C-61_Eq__Int arg-2 arg-3))) (lambda (arg-4) (lambda (arg-5) (Prelude-EqOrd-C-47C-61_Eq__Int arg-4 arg-5))))))
(define Prelude-EqOrd-__Impl_Eq_Char (lambda () (vector 0 (lambda (arg-2) (lambda (arg-3) (Prelude-EqOrd-C-61C-61_Eq__Char arg-2 arg-3))) (lambda (arg-4) (lambda (arg-5) (Prelude-EqOrd-C-47C-61_Eq__Char arg-4 arg-5))))))
(define Prelude-EqOrd-__Impl_Eq_Bool (lambda () (vector 0 (lambda (arg-2) (lambda (arg-3) (Prelude-EqOrd-C-61C-61_Eq__Bool arg-2 arg-3))) (lambda (arg-4) (lambda (arg-5) (Prelude-EqOrd-C-47C-61_Eq__Bool arg-4 arg-5))))))
(define Prelude-EqOrd-C-62_Ord__String (lambda (arg-0 arg-1) (let ((sc0 (or (and (string>? arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 1)(else 0)))))
(define Prelude-EqOrd-C-62_Ord__Integer (lambda (arg-0 arg-1) (let ((sc0 (or (and (> arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 1)(else 0)))))
(define Prelude-EqOrd-C-62_Ord__Int (lambda (arg-0 arg-1) (let ((sc0 (or (and (> arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 1)(else 0)))))
(define Prelude-EqOrd-C-62_Ord__Char (lambda (arg-0 arg-1) (let ((sc0 (or (and (char>? arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 1)(else 0)))))
(define Prelude-EqOrd-C-62C-61_Ord__String (lambda (arg-0 arg-1) (let ((sc0 (or (and (string>=? arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 1)(else 0)))))
(define Prelude-EqOrd-C-62C-61_Ord__Integer (lambda (arg-0 arg-1) (let ((sc0 (or (and (>= arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 1)(else 0)))))
(define Prelude-EqOrd-C-62C-61_Ord__Int (lambda (arg-0 arg-1) (let ((sc0 (or (and (>= arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 1)(else 0)))))
(define Prelude-EqOrd-C-62C-61_Ord__Char (lambda (arg-0 arg-1) (let ((sc0 (or (and (char>=? arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 1)(else 0)))))
(define Prelude-EqOrd-C-61C-61_Eq__String (lambda (arg-0 arg-1) (let ((sc0 (or (and (string=? arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 1)(else 0)))))
(define Prelude-EqOrd-C-61C-61_Eq__Ordering (lambda (arg-0 arg-1) (let ((sc0 arg-0)) (cond ((equal? sc0 0) (let ((sc1 arg-1)) (cond ((equal? sc1 0) 0)(else 1)))) ((equal? sc0 1) (let ((sc1 arg-1)) (cond ((equal? sc1 1) 0)(else 1)))) ((equal? sc0 2) (let ((sc1 arg-1)) (cond ((equal? sc1 2) 0)(else 1))))(else 1)))))
(define Prelude-EqOrd-C-61C-61_Eq__Integer (lambda (arg-0 arg-1) (let ((sc0 (or (and (= arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 1)(else 0)))))
(define Prelude-EqOrd-C-61C-61_Eq__Int (lambda (arg-0 arg-1) (let ((sc0 (or (and (= arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 1)(else 0)))))
(define Prelude-EqOrd-C-61C-61_Eq__Char (lambda (arg-0 arg-1) (let ((sc0 (or (and (char=? arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 1)(else 0)))))
(define Prelude-EqOrd-C-61C-61_Eq__Bool (lambda (arg-0 arg-1) (let ((sc0 arg-0)) (cond ((equal? sc0 0) (let ((sc1 arg-1)) (cond ((equal? sc1 0) 0)(else 1)))) ((equal? sc0 1) (let ((sc1 arg-1)) (cond ((equal? sc1 1) 0)(else 1))))(else 1)))))
(define Prelude-EqOrd-C-60_Ord__String (lambda (arg-0 arg-1) (let ((sc0 (or (and (string<? arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 1)(else 0)))))
(define Prelude-EqOrd-C-60_Ord__Integer (lambda (arg-0 arg-1) (let ((sc0 (or (and (< arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 1)(else 0)))))
(define Prelude-EqOrd-C-60_Ord__Int (lambda (arg-0 arg-1) (let ((sc0 (or (and (< arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 1)(else 0)))))
(define Prelude-EqOrd-C-60C-61_Ord__String (lambda (arg-0 arg-1) (let ((sc0 (or (and (string<=? arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 1)(else 0)))))
(define Prelude-EqOrd-C-60C-61_Ord__Integer (lambda (arg-0 arg-1) (let ((sc0 (or (and (<= arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 1)(else 0)))))
(define Prelude-EqOrd-C-60C-61_Ord__Int (lambda (arg-0 arg-1) (let ((sc0 (or (and (<= arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 1)(else 0)))))
(define Prelude-EqOrd-C-60C-61_Ord__Char (lambda (arg-0 arg-1) (let ((sc0 (or (and (char<=? arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 1)(else 0)))))
(define Prelude-EqOrd-C-47C-61_Eq__String (lambda (arg-0 arg-1) (Prelude-Basics-not (Prelude-EqOrd-C-61C-61_Eq__String arg-0 arg-1))))
(define Prelude-EqOrd-C-47C-61_Eq__Ordering (lambda (arg-0 arg-1) (Prelude-Basics-not (Prelude-EqOrd-C-61C-61_Eq__Ordering arg-0 arg-1))))
(define Prelude-EqOrd-C-47C-61_Eq__Integer (lambda (arg-0 arg-1) (Prelude-Basics-not (Prelude-EqOrd-C-61C-61_Eq__Integer arg-0 arg-1))))
(define Prelude-EqOrd-C-47C-61_Eq__Int (lambda (arg-0 arg-1) (Prelude-Basics-not (Prelude-EqOrd-C-61C-61_Eq__Int arg-0 arg-1))))
(define Prelude-EqOrd-C-47C-61_Eq__Char (lambda (arg-0 arg-1) (Prelude-Basics-not (Prelude-EqOrd-C-61C-61_Eq__Char arg-0 arg-1))))
(define Prelude-EqOrd-C-47C-61_Eq__Bool (lambda (arg-0 arg-1) (Prelude-Basics-not (Prelude-EqOrd-C-61C-61_Eq__Bool arg-0 arg-1))))
(define Prelude-EqOrd-compare (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (let ((e-2 (vector-ref sc0 2))) (lambda (arg-2) (lambda (arg-3) ((e-2 arg-2) arg-3)))))))
(define Prelude-EqOrd-C-62 (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (let ((e-4 (vector-ref sc0 4))) (lambda (arg-2) (lambda (arg-3) ((e-4 arg-2) arg-3)))))))
(define Prelude-EqOrd-C-61C-61 (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (let ((e-1 (vector-ref sc0 1))) (lambda (arg-2) (lambda (arg-3) ((e-1 arg-2) arg-3)))))))
(define Prelude-EqOrd-C-60C-61 (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (let ((e-5 (vector-ref sc0 5))) (lambda (arg-2) (lambda (arg-3) ((e-5 arg-2) arg-3)))))))
(define Prelude-EqOrd-C-60 (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (let ((e-3 (vector-ref sc0 3))) (lambda (arg-2) (lambda (arg-3) ((e-3 arg-2) arg-3)))))))
(define Prelude-EqOrd-C-47C-61 (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (let ((e-2 (vector-ref sc0 2))) (lambda (arg-2) (lambda (arg-3) ((e-2 arg-2) arg-3)))))))
(define Prelude-Interfaces-__Monoid_C-40SemigroupC-32tyC-41 (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (let ((e-1 (vector-ref sc0 1))) e-1))))
(define Prelude-Interfaces-__Monad_C-40ApplicativeC-32mC-41 (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (let ((e-1 (vector-ref sc0 1))) e-1))))
(define Prelude-Interfaces-traverse (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-5)) (let ((e-3 (vector-ref sc0 3))) (lambda (arg-6) (lambda (arg-7) ((((((e-3 'erased) 'erased) 'erased) arg-4) arg-6) arg-7)))))))
(define Prelude-Interfaces-sum (lambda (arg-0 arg-1 arg-2) (let ((sc0 (Builtin-fst 'erased 'erased arg-2))) (let ((e-1 (vector-ref sc0 1))) (lambda (arg-3) (((((e-1 'erased) 'erased) (let ((sc1 (Builtin-snd 'erased 'erased arg-2))) (let ((e-5 (vector-ref sc1 1))) (lambda (arg-4) (lambda (arg-5) ((e-5 arg-4) arg-5)))))) (let ((sc1 (Builtin-snd 'erased 'erased arg-2))) (let ((e-3 (vector-ref sc1 3))) (e-3 0)))) arg-3))))))
(define Prelude-Interfaces-pure (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (let ((e-2 (vector-ref sc0 2))) (lambda (arg-3) ((e-2 'erased) arg-3))))))
(define Prelude-Interfaces-neutral (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (let ((e-2 (vector-ref sc0 2))) e-2))))
(define Prelude-Interfaces-map (lambda (arg-0 arg-1 arg-2 arg-3 ext-0 ext-1) ((((arg-3 'erased) 'erased) ext-0) ext-1)))
(define Prelude-Interfaces-foldr (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (let ((e-1 (vector-ref sc0 1))) (lambda (arg-4) (lambda (arg-5) (lambda (arg-6) (((((e-1 'erased) 'erased) arg-4) arg-5) arg-6))))))))
(define Prelude-Interfaces-foldl (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (let ((e-2 (vector-ref sc0 2))) (lambda (arg-4) (lambda (arg-5) (lambda (arg-6) (((((e-2 'erased) 'erased) arg-4) arg-5) arg-6))))))))
(define Prelude-Interfaces-concatMap (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 (Builtin-fst 'erased 'erased arg-3))) (let ((e-1 (vector-ref sc0 1))) (lambda (arg-5) (((((e-1 'erased) 'erased) (lambda (eta-0) (lambda (arg-6) (let ((sc1 (Builtin-snd 'erased 'erased arg-3))) (let ((e-4 (vector-ref sc1 1))) ((e-4 (arg-4 eta-0)) arg-6)))))) (let ((sc1 (Builtin-snd 'erased 'erased arg-3))) (let ((e-3 (vector-ref sc1 2))) e-3))) arg-5))))))
(define Prelude-Interfaces-concat (lambda (arg-0 arg-1 arg-2) (let ((sc0 (Builtin-fst 'erased 'erased arg-2))) (let ((e-1 (vector-ref sc0 1))) (lambda (arg-3) (((((e-1 'erased) 'erased) (lambda (arg-4) (lambda (arg-5) (let ((sc1 (Builtin-snd 'erased 'erased arg-2))) (let ((e-4 (vector-ref sc1 1))) ((e-4 arg-4) arg-5)))))) (let ((sc1 (Builtin-snd 'erased 'erased arg-2))) (let ((e-3 (vector-ref sc1 2))) e-3))) arg-3))))))
(define Prelude-Interfaces-any (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-2)) (let ((e-2 (vector-ref sc0 2))) (lambda (arg-4) (((((e-2 'erased) 'erased) (lambda (x) (lambda (y) (Prelude-Basics-C-124C-124 x (lambda () (arg-3 y)))))) 1) arg-4))))))
(define Prelude-Interfaces-C-62C-62C-61 (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (let ((e-2 (vector-ref sc0 2))) (lambda (arg-4) (lambda (arg-5) ((((e-2 'erased) 'erased) arg-4) arg-5)))))))
(define Prelude-Interfaces-C-60C-43C-62 (lambda (arg-0 arg-1 ext-0 ext-1) ((arg-1 ext-0) ext-1)))
(define Prelude-Interfaces-C-60C-42C-62 (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (let ((e-3 (vector-ref sc0 3))) (lambda (arg-4) (lambda (arg-5) ((((e-3 'erased) 'erased) arg-4) arg-5)))))))
(define Prelude-Interfaces-C-60C-36C-62 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) ((((arg-3 'erased) 'erased) arg-4) arg-5)))
(define PrimIO-case--unsafePerformIO-405 (lambda (arg-0 arg-1 arg-2 arg-3) (PrimIO-unsafeDestroyWorld 'erased 'erased arg-3)))
(define PrimIO-case--caseC-32blockC-32inC-32io_bind-326 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (arg-7 arg-6)))
(define PrimIO-case--io_bind-304 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (PrimIO-case--caseC-32blockC-32inC-32io_bind-326 'erased 'erased 'erased 'erased 'erased arg-5 'erased (arg-3 arg-5))))
(define PrimIO-unsafePerformIO (lambda (arg-0 arg-1) (PrimIO-unsafeCreateWorld 'erased (lambda (w) (PrimIO-case--unsafePerformIO-405 'erased 'erased 'erased (arg-1 w))))))
(define PrimIO-unsafeDestroyWorld (lambda (arg-0 arg-1 arg-2) arg-2))
(define PrimIO-unsafeCreateWorld (lambda (arg-0 arg-1) (arg-1 #f)))
(define PrimIO-prim__nullPtr (lambda (arg-0 arg-1) (PrimIO-prim__nullAnyPtr (PrimIO-prim__forgetPtr 'erased arg-1))))
(define PrimIO-prim__forgetPtr (lambda (arg-0 ext-0) (Builtin-believe_me 'erased 'erased ext-0)))
(define PrimIO-io_pure (lambda (arg-0 arg-1 ext-0) arg-1))
(define PrimIO-io_bind (lambda (arg-0 arg-1 arg-2 arg-3 ext-0) (PrimIO-case--io_bind-304 'erased 'erased 'erased arg-3 'erased (arg-2 ext-0))))
(define PrimIO-fromPrim (lambda (arg-0 arg-1) arg-1))
(define Prelude-Show-case--caseC-32blockC-32inC-32showLitChar-5784 (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (cond ((equal? sc0 0) (lambda (eta-0) (Prelude-Types-strCons #\\ (Prelude-Show-protectEsc (lambda (eta-1) (Prelude-Types-isDigit eta-1)) (Prelude-Show-show_Show__Int (char->integer arg-0)) eta-0)))) (else (lambda (eta-0) (Prelude-Types-strCons arg-0 eta-0)))))))
(define Prelude-Show-case--showLitChar-5761 (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (case (vector-ref sc0 0) ((1) (let ((e-1 (vector-ref sc0 1))) (lambda (eta-0) (Prelude-Types-strCons #\\ (Prelude-Types-Strings-C-43C-43 e-1 eta-0))))) (else (Prelude-Show-case--caseC-32blockC-32inC-32showLitChar-5784 arg-0 (Prelude-EqOrd-C-62_Ord__Char arg-0 (integer->char 127))))))))
(define Prelude-Show-case--protectEsc-5508 (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (cond ((equal? sc0 0) "\\&") (else "")))))
(define Prelude-Show-case--max-5250 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (cond ((equal? sc0 0) arg-1) (else arg-0)))))
(define Prelude-Show-case--min-5236 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (cond ((equal? sc0 0) arg-1) (else arg-0)))))
(define Prelude-Show-n--2142-6071-showC-39 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-4)) (case (vector-ref sc0 0) ((0) arg-3) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 e-3)) (case (vector-ref sc1 0) ((0) (Prelude-Types-Strings-C-43C-43 arg-3 (let ((sc2 arg-1)) (let ((e-1 (vector-ref sc2 1))) (e-1 e-2)))))(else (Prelude-Show-n--2142-6071-showC-39 'erased arg-1 arg-2 (Prelude-Types-Strings-C-43C-43 arg-3 (Prelude-Types-Strings-C-43C-43 (let ((sc1 arg-1)) (let ((e-1 (vector-ref sc1 1))) (e-1 e-2))) ", ")) e-3)))))))))))
(define Prelude-Show-n--1611-5578-getAt (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-1)) (cond ((equal? sc0 0) (let ((sc1 arg-2)) (case (vector-ref sc1 0) ((1) (let ((e-3 (vector-ref sc1 1))) (vector 1 e-3)))(else (let ((sc1 arg-2)) (vector 0 ))))))(else (let ((e-1 (- arg-1 1))) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((1) (let ((e-7 (vector-ref sc0 2))) (Prelude-Show-n--1611-5578-getAt arg-0 e-1 e-7)))(else (let ((sc0 arg-2)) (vector 0 )))))))))))
(define Prelude-Show-n--1611-5577-asciiTab (lambda (arg-0) (vector 1 "NUL" (vector 1 "SOH" (vector 1 "STX" (vector 1 "ETX" (vector 1 "EOT" (vector 1 "ENQ" (vector 1 "ACK" (vector 1 "BEL" (vector 1 "BS" (vector 1 "HT" (vector 1 "LF" (vector 1 "VT" (vector 1 "FF" (vector 1 "CR" (vector 1 "SO" (vector 1 "SI" (vector 1 "DLE" (vector 1 "DC1" (vector 1 "DC2" (vector 1 "DC3" (vector 1 "DC4" (vector 1 "NAK" (vector 1 "SYN" (vector 1 "ETB" (vector 1 "CAN" (vector 1 "EM" (vector 1 "SUB" (vector 1 "ESC" (vector 1 "FS" (vector 1 "GS" (vector 1 "RS" (vector 1 "US" (vector 0 )))))))))))))))))))))))))))))))))))
(define Prelude-Show-show_Show__String (lambda (arg-0) (Prelude-Types-strCons #\" ((Prelude-Show-showLitString (Prelude-Types-unpack arg-0)) "\""))))
(define Prelude-Show-show_Show__Nat (lambda (arg-0) (Prelude-Show-show_Show__Integer (Prelude-Types-natToInteger arg-0))))
(define Prelude-Show-show_Show__Integer (lambda (arg-0) (Prelude-Show-showPrec_Show__Integer (vector 0 ) arg-0)))
(define Prelude-Show-show_Show__Int (lambda (arg-0) (Prelude-Show-showPrec_Show__Int (vector 0 ) arg-0)))
(define Prelude-Show-show_Show__Double (lambda (arg-0) (Prelude-Show-showPrec_Show__Double (vector 0 ) arg-0)))
(define Prelude-Show-show_Show__C-40C-124C-40C-40BuiltinC-46PairC-32C-36aC-41C-32C-36bC-41C-44C-40C-40BuiltinC-46MkPairC-32C-36aC-41C-32C-36bC-41C-124C-41 (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (Prelude-Types-Strings-C-43C-43 "(" (Prelude-Types-Strings-C-43C-43 (let ((sc1 (Builtin-fst 'erased 'erased arg-2))) (let ((e-1 (vector-ref sc1 1))) (e-1 e-2))) (Prelude-Types-Strings-C-43C-43 ", " (Prelude-Types-Strings-C-43C-43 (let ((sc1 (Builtin-snd 'erased 'erased arg-2))) (let ((e-1 (vector-ref sc1 1))) (e-1 e-3))) ")")))))))))
(define Prelude-Show-show_Show__C-40ListC-32C-36aC-41 (lambda (arg-0 arg-1 arg-2) (Prelude-Types-Strings-C-43C-43 "[" (Prelude-Types-Strings-C-43C-43 (Prelude-Show-n--2142-6071-showC-39 'erased arg-1 arg-2 "" arg-2) "]"))))
(define Prelude-Show-showPrec_Show__String (lambda (arg-0 arg-1) (Prelude-Show-show_Show__String arg-1)))
(define Prelude-Show-showPrec_Show__Nat (lambda (arg-0 arg-1) (Prelude-Show-show_Show__Nat arg-1)))
(define Prelude-Show-showPrec_Show__Integer (lambda (ext-0 ext-1) (Prelude-Show-primNumShow 'erased (lambda (eta-0) (number->string eta-0)) ext-0 ext-1)))
(define Prelude-Show-showPrec_Show__Int (lambda (ext-0 ext-1) (Prelude-Show-primNumShow 'erased (lambda (eta-0) (number->string eta-0)) ext-0 ext-1)))
(define Prelude-Show-showPrec_Show__Double (lambda (ext-0 ext-1) (Prelude-Show-primNumShow 'erased (lambda (eta-0) (number->string eta-0)) ext-0 ext-1)))
(define Prelude-Show-showPrec_Show__C-40C-124C-40C-40BuiltinC-46PairC-32C-36aC-41C-32C-36bC-41C-44C-40C-40BuiltinC-46MkPairC-32C-36aC-41C-32C-36bC-41C-124C-41 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (Prelude-Show-show_Show__C-40C-124C-40C-40BuiltinC-46PairC-32C-36aC-41C-32C-36bC-41C-44C-40C-40BuiltinC-46MkPairC-32C-36aC-41C-32C-36bC-41C-124C-41 'erased 'erased arg-2 arg-4)))
(define Prelude-Show-showPrec_Show__C-40ListC-32C-36aC-41 (lambda (arg-0 arg-1 arg-2 arg-3) (Prelude-Show-show_Show__C-40ListC-32C-36aC-41 'erased arg-1 arg-3)))
(define Prelude-Show-min_Ord__Prec (lambda (arg-0 arg-1) (Prelude-Show-case--min-5236 arg-1 arg-0 (Prelude-Show-C-60_Ord__Prec arg-0 arg-1))))
(define Prelude-Show-max_Ord__Prec (lambda (arg-0 arg-1) (Prelude-Show-case--max-5250 arg-1 arg-0 (Prelude-Show-C-62_Ord__Prec arg-0 arg-1))))
(define Prelude-Show-compare_Ord__Prec (lambda (arg-0 arg-1) (let ((sc0 arg-0)) (case (vector-ref sc0 0) ((4) (let ((e-0 (vector-ref sc0 1))) (let ((sc1 arg-1)) (case (vector-ref sc1 0) ((4) (let ((e-1 (vector-ref sc1 1))) (Prelude-Types-compare_Ord__Nat e-0 e-1)))(else (Prelude-EqOrd-compare_Ord__Integer (Prelude-Show-precCon arg-0) (Prelude-Show-precCon arg-1)))))))(else (Prelude-EqOrd-compare_Ord__Integer (Prelude-Show-precCon arg-0) (Prelude-Show-precCon arg-1)))))))
(define Prelude-Show-__Impl_Show_String (lambda () (vector 0 (lambda (x) (Prelude-Show-show_Show__String x)) (lambda (d) (lambda (x) (Prelude-Show-showPrec_Show__String d x))))))
(define Prelude-Show-__Impl_Show_Nat (lambda () (vector 0 (lambda (x) (Prelude-Show-show_Show__Nat x)) (lambda (d) (lambda (x) (Prelude-Show-showPrec_Show__Nat d x))))))
(define Prelude-Show-__Impl_Show_Integer (lambda () (vector 0 (lambda (x) (Prelude-Show-show_Show__Integer x)) (lambda (d) (lambda (x) (Prelude-Show-showPrec_Show__Integer d x))))))
(define Prelude-Show-__Impl_Show_Int (lambda () (vector 0 (lambda (x) (Prelude-Show-show_Show__Int x)) (lambda (d) (lambda (x) (Prelude-Show-showPrec_Show__Int d x))))))
(define Prelude-Show-__Impl_Show_Double (lambda () (vector 0 (lambda (x) (Prelude-Show-show_Show__Double x)) (lambda (d) (lambda (x) (Prelude-Show-showPrec_Show__Double d x))))))
(define Prelude-Show-__Impl_Show_C-40C-124C-40C-40BuiltinC-46PairC-32C-36aC-41C-32C-36bC-41C-44C-40C-40BuiltinC-46MkPairC-32C-36aC-41C-32C-36bC-41C-124C-41 (lambda (arg-0 arg-1 arg-2) (vector 0 (lambda (x) (Prelude-Show-show_Show__C-40C-124C-40C-40BuiltinC-46PairC-32C-36aC-41C-32C-36bC-41C-44C-40C-40BuiltinC-46MkPairC-32C-36aC-41C-32C-36bC-41C-124C-41 'erased 'erased arg-2 x)) (lambda (d) (lambda (x) (Prelude-Show-showPrec_Show__C-40C-124C-40C-40BuiltinC-46PairC-32C-36aC-41C-32C-36bC-41C-44C-40C-40BuiltinC-46MkPairC-32C-36aC-41C-32C-36bC-41C-124C-41 'erased 'erased arg-2 d x))))))
(define Prelude-Show-__Impl_Show_C-40ListC-32C-36aC-41 (lambda (arg-0 arg-1) (vector 0 (lambda (x) (Prelude-Show-show_Show__C-40ListC-32C-36aC-41 'erased arg-1 x)) (lambda (d) (lambda (x) (Prelude-Show-showPrec_Show__C-40ListC-32C-36aC-41 'erased arg-1 d x))))))
(define Prelude-Show-__Impl_Ord_Prec (lambda () (vector 0 (vector 0 (lambda (arg-2) (lambda (arg-3) (Prelude-Show-C-61C-61_Eq__Prec arg-2 arg-3))) (lambda (arg-4) (lambda (arg-5) (Prelude-Show-C-47C-61_Eq__Prec arg-4 arg-5)))) (lambda (arg-369) (lambda (arg-370) (Prelude-Show-compare_Ord__Prec arg-369 arg-370))) (lambda (arg-371) (lambda (arg-372) (Prelude-Show-C-60_Ord__Prec arg-371 arg-372))) (lambda (arg-373) (lambda (arg-374) (Prelude-Show-C-62_Ord__Prec arg-373 arg-374))) (lambda (arg-375) (lambda (arg-376) (Prelude-Show-C-60C-61_Ord__Prec arg-375 arg-376))) (lambda (arg-377) (lambda (arg-378) (Prelude-Show-C-62C-61_Ord__Prec arg-377 arg-378))) (lambda (arg-379) (lambda (arg-380) (Prelude-Show-max_Ord__Prec arg-379 arg-380))) (lambda (arg-381) (lambda (arg-382) (Prelude-Show-min_Ord__Prec arg-381 arg-382))))))
(define Prelude-Show-__Impl_Eq_Prec (lambda () (vector 0 (lambda (arg-2) (lambda (arg-3) (Prelude-Show-C-61C-61_Eq__Prec arg-2 arg-3))) (lambda (arg-4) (lambda (arg-5) (Prelude-Show-C-47C-61_Eq__Prec arg-4 arg-5))))))
(define Prelude-Show-C-62_Ord__Prec (lambda (arg-0 arg-1) (Prelude-EqOrd-C-61C-61_Eq__Ordering (Prelude-Show-compare_Ord__Prec arg-0 arg-1) 2)))
(define Prelude-Show-C-62C-61_Ord__Prec (lambda (arg-0 arg-1) (Prelude-EqOrd-C-47C-61_Eq__Ordering (Prelude-Show-compare_Ord__Prec arg-0 arg-1) 0)))
(define Prelude-Show-C-61C-61_Eq__Prec (lambda (arg-0 arg-1) (let ((sc0 arg-0)) (case (vector-ref sc0 0) ((4) (let ((e-0 (vector-ref sc0 1))) (let ((sc1 arg-1)) (case (vector-ref sc1 0) ((4) (let ((e-1 (vector-ref sc1 1))) (Prelude-Types-C-61C-61_Eq__Nat e-0 e-1)))(else (Prelude-EqOrd-C-61C-61_Eq__Integer (Prelude-Show-precCon arg-0) (Prelude-Show-precCon arg-1)))))))(else (Prelude-EqOrd-C-61C-61_Eq__Integer (Prelude-Show-precCon arg-0) (Prelude-Show-precCon arg-1)))))))
(define Prelude-Show-C-60_Ord__Prec (lambda (arg-0 arg-1) (Prelude-EqOrd-C-61C-61_Eq__Ordering (Prelude-Show-compare_Ord__Prec arg-0 arg-1) 0)))
(define Prelude-Show-C-60C-61_Ord__Prec (lambda (arg-0 arg-1) (Prelude-EqOrd-C-47C-61_Eq__Ordering (Prelude-Show-compare_Ord__Prec arg-0 arg-1) 2)))
(define Prelude-Show-C-47C-61_Eq__Prec (lambda (arg-0 arg-1) (Prelude-Basics-not (Prelude-Show-C-61C-61_Eq__Prec arg-0 arg-1))))
(define Prelude-Show-showPrec (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (let ((e-2 (vector-ref sc0 2))) (lambda (arg-2) (lambda (arg-3) ((e-2 arg-2) arg-3)))))))
(define Prelude-Show-showParens (lambda (arg-0 arg-1) (let ((sc0 arg-0)) (cond ((equal? sc0 1) arg-1) (else (Prelude-Types-Strings-C-43C-43 "(" (Prelude-Types-Strings-C-43C-43 arg-1 ")")))))))
(define Prelude-Show-showLitString (lambda (arg-0) (let ((sc0 arg-0)) (case (vector-ref sc0 0) ((0) (lambda (eta-0) eta-0)) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 e-2)) (cond ((equal? sc1 #\") (lambda (eta-0) (Prelude-Types-Strings-C-43C-43 "\\\"" ((Prelude-Show-showLitString e-3) eta-0))))(else (lambda (eta-0) ((Prelude-Show-showLitChar e-2) ((Prelude-Show-showLitString e-3) eta-0)))))))))))))
(define Prelude-Show-showLitChar (lambda (arg-0) (let ((sc0 arg-0)) (cond ((equal? sc0 (integer->char 7)) (lambda (arg-1) (Prelude-Types-Strings-C-43C-43 "\\a" arg-1))) ((equal? sc0 (integer->char 8)) (lambda (arg-1) (Prelude-Types-Strings-C-43C-43 "\\b" arg-1))) ((equal? sc0 (integer->char 12)) (lambda (arg-1) (Prelude-Types-Strings-C-43C-43 "\\f" arg-1))) ((equal? sc0 (integer->char 10)) (lambda (arg-1) (Prelude-Types-Strings-C-43C-43 "\\n" arg-1))) ((equal? sc0 (integer->char 13)) (lambda (arg-1) (Prelude-Types-Strings-C-43C-43 "\\r" arg-1))) ((equal? sc0 (integer->char 9)) (lambda (arg-1) (Prelude-Types-Strings-C-43C-43 "\\t" arg-1))) ((equal? sc0 (integer->char 11)) (lambda (arg-1) (Prelude-Types-Strings-C-43C-43 "\\v" arg-1))) ((equal? sc0 (integer->char 14)) (lambda (eta-0) (Prelude-Show-protectEsc (lambda (arg-1) (Prelude-EqOrd-C-61C-61_Eq__Char arg-1 #\H)) "\\SO" eta-0))) ((equal? sc0 (integer->char 127)) (lambda (arg-1) (Prelude-Types-Strings-C-43C-43 "\\DEL" arg-1))) ((equal? sc0 #\\) (lambda (arg-1) (Prelude-Types-Strings-C-43C-43 "\\\\" arg-1)))(else (Prelude-Show-case--showLitChar-5761 arg-0 (Prelude-Show-n--1611-5578-getAt arg-0 (Prelude-Types-fromInteger_Num__Nat (char->integer arg-0)) (Prelude-Show-n--1611-5577-asciiTab arg-0))))))))
(define Prelude-Show-show (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (let ((e-1 (vector-ref sc0 1))) (lambda (arg-2) (e-1 arg-2))))))
(define Prelude-Show-protectEsc (lambda (arg-0 arg-1 arg-2) (Prelude-Types-Strings-C-43C-43 arg-1 (Prelude-Types-Strings-C-43C-43 (Prelude-Show-case--protectEsc-5508 arg-2 arg-1 arg-0 (Prelude-Show-firstCharIs arg-0 arg-2)) arg-2))))
(define Prelude-Show-primNumShow (lambda (arg-0 arg-1 arg-2 arg-3) (let ((str (arg-1 arg-3))) (Prelude-Show-showParens (Prelude-Basics-C-38C-38 (Prelude-Show-C-62C-61_Ord__Prec arg-2 (vector 5 )) (lambda () (Prelude-Show-firstCharIs (lambda (arg-4) (Prelude-EqOrd-C-61C-61_Eq__Char arg-4 #\-)) str))) str))))
(define Prelude-Show-precCon (lambda (arg-0) (let ((sc0 arg-0)) (case (vector-ref sc0 0) ((0) 0) ((1) 1) ((2) 2) ((3) 3) ((4) 4) ((5) 5) (else 6)))))
(define Prelude-Show-firstCharIs (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (cond ((equal? sc0 "") 1)(else (arg-0 (string-ref arg-1 0)))))))
(define Prelude-IO-pure_Applicative__IO (lambda (arg-0 arg-1 ext-0) arg-1))
(define Prelude-IO-map_Functor__IO (lambda (arg-0 arg-1 arg-2 arg-3 ext-0) (let ((act-3 (arg-3 ext-0))) (arg-2 act-3))))
(define Prelude-IO-liftIO_HasIO__IO (lambda (arg-0 arg-1) arg-1))
(define Prelude-IO-join_Monad__IO (lambda (arg-0 arg-1 ext-0) (let ((act-2 (arg-1 ext-0))) (act-2 ext-0))))
(define Prelude-IO-__Impl_Monad_IO (lambda () (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-62) (lambda (eta-0) (Prelude-IO-map_Functor__IO 'erased 'erased func arg-62 eta-0)))))) (lambda (a) (lambda (arg-172) (lambda (eta-0) arg-172))) (lambda (b) (lambda (a) (lambda (arg-173) (lambda (arg-175) (lambda (eta-0) (let ((act-17 (arg-173 eta-0))) (let ((act-16 (arg-175 eta-0))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-334) (lambda (arg-335) (lambda (eta-0) (let ((act-24 (arg-334 eta-0))) ((arg-335 act-24) eta-0))))))) (lambda (a) (lambda (arg-337) (lambda (eta-0) (let ((act-29 (arg-337 eta-0))) (act-29 eta-0))))))))
(define Prelude-IO-__Impl_HasIO_IO (lambda () (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-62) (lambda (eta-0) (Prelude-IO-map_Functor__IO 'erased 'erased func arg-62 eta-0)))))) (lambda (a) (lambda (arg-172) (lambda (eta-0) arg-172))) (lambda (b) (lambda (a) (lambda (arg-173) (lambda (arg-175) (lambda (eta-0) (let ((act-17 (arg-173 eta-0))) (let ((act-16 (arg-175 eta-0))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-334) (lambda (arg-335) (lambda (eta-0) (let ((act-24 (arg-334 eta-0))) ((arg-335 act-24) eta-0))))))) (lambda (a) (lambda (arg-337) (lambda (eta-0) (let ((act-51 (arg-337 eta-0))) (act-51 eta-0)))))) (lambda (a) (lambda (arg-6366) arg-6366)))))
(define Prelude-IO-__Impl_Functor_IO (lambda (ext-4 ext-1 ext-2 ext-3 ext-0) (Prelude-IO-map_Functor__IO 'erased 'erased ext-2 ext-3 ext-0)))
(define Prelude-IO-__Impl_Applicative_IO (lambda () (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-62) (lambda (eta-0) (Prelude-IO-map_Functor__IO 'erased 'erased func arg-62 eta-0)))))) (lambda (a) (lambda (arg-172) (lambda (eta-0) arg-172))) (lambda (b) (lambda (a) (lambda (arg-173) (lambda (arg-175) (lambda (eta-0) (let ((act-17 (arg-173 eta-0))) (let ((act-16 (arg-175 eta-0))) (act-17 act-16)))))))))))
(define Prelude-IO-__HasIO_C-40MonadC-32ioC-41 (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (let ((e-1 (vector-ref sc0 1))) e-1))))
(define Prelude-IO-C-62C-62C-61_Monad__IO (lambda (arg-0 arg-1 arg-2 arg-3 ext-0) (let ((act-1 (arg-2 ext-0))) ((arg-3 act-1) ext-0))))
(define Prelude-IO-C-60C-42C-62_Applicative__IO (lambda (arg-0 arg-1 arg-2 arg-3 ext-0) (let ((act-6 (arg-2 ext-0))) (let ((act-5 (arg-3 ext-0))) (act-6 act-5)))))
(define Prelude-IO-putStrLn (lambda (arg-0 arg-1 arg-2) (Prelude-IO-putStr 'erased arg-1 (string-append arg-2 "\xa;"))))
(define Prelude-IO-putStr (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-1)) (let ((e-2 (vector-ref sc0 2))) ((e-2 'erased) (lambda (eta-0) (Prelude-IO-prim__putStr arg-2 eta-0)))))))
(define Prelude-IO-printLn (lambda (arg-0 arg-1 arg-2 arg-3) (Prelude-IO-putStrLn 'erased (Builtin-fst 'erased 'erased arg-2) (let ((sc0 (Builtin-snd 'erased 'erased arg-2))) (let ((e-1 (vector-ref sc0 1))) (e-1 arg-3))))))
(define Prelude-IO-primIO (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-2)) (let ((e-2 (vector-ref sc0 2))) ((e-2 'erased) arg-3)))))
(define Prelude-IO-liftIO (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (let ((e-2 (vector-ref sc0 2))) (lambda (arg-3) ((e-2 'erased) arg-3))))))
(define Prelude-IO-getLine (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (let ((e-2 (vector-ref sc0 2))) ((e-2 'erased) (lambda (eta-0) (Prelude-IO-prim__getStr eta-0)))))))
(define Data-List-case--mapMaybe-2792 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-5)) (case (vector-ref sc0 0) ((0) (Data-List-mapMaybe 'erased 'erased arg-4 arg-3)) (else (let ((e-2 (vector-ref sc0 1))) (vector 1 e-2 (Data-List-mapMaybe 'erased 'erased arg-4 arg-3))))))))
(define Data-List-case--split-1893 (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 e-3)) (case (vector-ref sc1 0) ((0) (vector 0 e-2 (vector 0 ))) (else (let ((e-7 (vector-ref sc1 2))) (vector 0 e-2 (Data-List1-toList 'erased (Data-List-split 'erased arg-2 e-7))))))))))))
(define Data-List-case--caseC-32blockC-32inC-32span-1819 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-4)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (vector 0 (vector 1 arg-3 e-2) e-3))))))
(define Data-List-case--span-1799 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-4)) (cond ((equal? sc0 0) (Data-List-case--caseC-32blockC-32inC-32span-1819 'erased arg-2 arg-3 arg-1 (Data-List-span 'erased arg-3 arg-2))) (else (vector 0 (vector 0 ) (vector 1 arg-1 arg-2)))))))
(define Data-List-case--deleteBy-1680 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-5)) (cond ((equal? sc0 0) arg-3) (else (vector 1 arg-2 (Data-List-deleteBy 'erased arg-4 arg-1 arg-3)))))))
(define Data-List-case--nubByC-44nubByC-39-1597 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-5)) (cond ((equal? sc0 0) (Data-List-n--2600-1579-nubByC-39 'erased arg-4 arg-3 arg-2)) (else (vector 1 arg-1 (Data-List-n--2600-1579-nubByC-39 'erased (vector 1 arg-1 arg-4) arg-3 arg-2)))))))
(define Data-List-case--lookupBy-1476 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (let ((sc0 arg-7)) (cond ((equal? sc0 0) (vector 1 arg-4)) (else (Data-List-lookupBy 'erased 'erased arg-6 arg-2 arg-5))))))
(define Data-List-case--filter-1351 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-4)) (cond ((equal? sc0 0) (vector 1 arg-1 (Data-List-filter 'erased arg-3 arg-2))) (else (Data-List-filter 'erased arg-3 arg-2))))))
(define Data-List-n--2600-1579-nubByC-39 (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((0) (vector 0 )) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (Data-List-case--nubByC-44nubByC-39-1597 'erased e-2 e-3 arg-2 arg-1 (Data-List-elemBy 'erased arg-2 e-2 arg-1)))))))))
(define Data-List-zipWith (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-4)) (case (vector-ref sc0 0) ((0) (vector 0 ))(else (let ((sc0 arg-5)) (case (vector-ref sc0 0) ((0) (vector 0 ))(else (let ((sc0 arg-4)) (let ((e-1 (vector-ref sc0 1))) (let ((e-2 (vector-ref sc0 2))) (let ((sc1 arg-5)) (let ((e-4 (vector-ref sc1 1))) (let ((e-5 (vector-ref sc1 2))) (vector 1 ((arg-3 e-1) e-4) (Data-List-zipWith 'erased 'erased 'erased arg-3 e-2 e-5))))))))))))))))
(define Data-List-zip (lambda (arg-0 arg-1 ext-0 ext-1) (Data-List-zipWith 'erased 'erased 'erased (lambda (x) (lambda (y) (vector 0 x y))) ext-0 ext-1)))
(define Data-List-unionBy (lambda (arg-0 arg-1 arg-2 arg-3) (Prelude-Types-List-C-43C-43 'erased arg-2 (Prelude-Types-foldl_Foldable__List 'erased 'erased (lambda (eta-0) (lambda (eta-1) (Prelude-Basics-flip 'erased 'erased 'erased (lambda (eta-2) (lambda (eta-3) (Data-List-deleteBy 'erased arg-1 eta-2 eta-3))) eta-0 eta-1))) (Data-List-nubBy 'erased arg-1 arg-3) arg-2))))
(define Data-List-union (lambda (arg-0 arg-1 ext-0 ext-1) (Data-List-unionBy 'erased (let ((sc0 arg-1)) (let ((e-1 (vector-ref sc0 1))) (lambda (arg-2) (lambda (arg-3) ((e-1 arg-2) arg-3))))) ext-0 ext-1)))
(define Data-List-take (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-1)) (cond ((equal? sc0 0) (vector 0 ))(else (let ((e-0 (- arg-1 1))) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((1) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (vector 1 e-2 (Data-List-take 'erased e-0 e-3)))))(else (vector 0 ))))))))))
(define Data-List-split (lambda (arg-0 arg-1 arg-2) (Data-List-case--split-1893 'erased arg-2 arg-1 (Data-List-break 'erased arg-1 arg-2))))
(define Data-List-span (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((0) (vector 0 (vector 0 ) (vector 0 ))) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (Data-List-case--span-1799 'erased e-2 e-3 arg-1 (arg-1 e-2)))))))))
(define Data-List-reverseOnto (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((0) arg-1) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (Data-List-reverseOnto 'erased (vector 1 e-2 arg-1) e-3))))))))
(define Data-List-reverse (lambda (arg-0 ext-0) (Data-List-reverseOnto 'erased (vector 0 ) ext-0)))
(define Data-List-replicate (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-1)) (cond ((equal? sc0 0) (vector 0 ))(else (let ((e-0 (- arg-1 1))) (vector 1 arg-2 (Data-List-replicate 'erased e-0 arg-2))))))))
(define Data-List-nubBy (lambda (arg-0 ext-0 ext-1) (Data-List-n--2600-1579-nubByC-39 'erased (vector 0 ) ext-0 ext-1)))
(define Data-List-mergeReplicate (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((0) (vector 0 )) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (vector 1 arg-1 (vector 1 e-2 (Data-List-mergeReplicate 'erased arg-1 e-3))))))))))
(define Data-List-mapMaybe (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((0) (vector 0 )) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (Data-List-case--mapMaybe-2792 'erased 'erased e-2 e-3 arg-2 (arg-2 e-2)))))))))
(define Data-List-lookupBy (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-4)) (case (vector-ref sc0 0) ((0) (vector 0 )) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 e-2)) (let ((e-6 (vector-ref sc1 1))) (let ((e-7 (vector-ref sc1 2))) (Data-List-case--lookupBy-1476 'erased 'erased arg-3 e-6 e-7 e-3 arg-2 ((arg-2 arg-3) e-6))))))))))))
(define Data-List-lookup (lambda (arg-0 arg-1 arg-2 ext-0 ext-1) (Data-List-lookupBy 'erased 'erased (let ((sc0 arg-2)) (let ((e-1 (vector-ref sc0 1))) (lambda (arg-3) (lambda (arg-4) ((e-1 arg-3) arg-4))))) ext-0 ext-1)))
(define Data-List-isSuffixOfBy (lambda (arg-0 arg-1 arg-2 arg-3) (Data-List-isPrefixOfBy 'erased arg-1 (Data-List-reverse 'erased arg-2) (Data-List-reverse 'erased arg-3))))
(define Data-List-isSuffixOf (lambda (arg-0 arg-1 ext-0 ext-1) (Data-List-isSuffixOfBy 'erased (let ((sc0 arg-1)) (let ((e-1 (vector-ref sc0 1))) (lambda (arg-2) (lambda (arg-3) ((e-1 arg-2) arg-3))))) ext-0 ext-1)))
(define Data-List-isPrefixOfBy (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((0) 0)(else (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((0) 1)(else (let ((sc0 arg-2)) (let ((e-1 (vector-ref sc0 1))) (let ((e-2 (vector-ref sc0 2))) (let ((sc1 arg-3)) (let ((e-4 (vector-ref sc1 1))) (let ((e-5 (vector-ref sc1 2))) (Prelude-Basics-C-38C-38 ((arg-1 e-1) e-4) (lambda () (Data-List-isPrefixOfBy 'erased arg-1 e-2 e-5)))))))))))))))))
(define Data-List-isPrefixOf (lambda (arg-0 arg-1 ext-0 ext-1) (Data-List-isPrefixOfBy 'erased (let ((sc0 arg-1)) (let ((e-1 (vector-ref sc0 1))) (lambda (arg-2) (lambda (arg-3) ((e-1 arg-2) arg-3))))) ext-0 ext-1)))
(define Data-List-intersperse (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((0) (vector 0 )) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (vector 1 e-2 (Data-List-mergeReplicate 'erased arg-1 e-3)))))))))
(define Data-List-filter (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((0) (vector 0 )) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (Data-List-case--filter-1351 'erased e-2 e-3 arg-1 (arg-1 e-2)))))))))
(define Data-List-elemBy (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((0) 1) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (Prelude-Basics-C-124C-124 ((arg-1 arg-2) e-2) (lambda () (Data-List-elemBy 'erased arg-1 arg-2 e-3))))))))))
(define Data-List-drop (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-1)) (cond ((equal? sc0 0) arg-2)(else (let ((e-0 (- arg-1 1))) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((0) (vector 0 )) (else (let ((e-4 (vector-ref sc0 2))) (Data-List-drop 'erased e-0 e-4)))))))))))
(define Data-List-deleteBy (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((0) (vector 0 )) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (Data-List-case--deleteBy-1680 'erased arg-2 e-2 e-3 arg-1 ((arg-1 arg-2) e-2)))))))))
(define Data-List-break (lambda (arg-0 arg-1 arg-2) (Data-List-span 'erased (lambda (eta-0) (Prelude-Basics-not (arg-1 eta-0))) arg-2)))
(define Data-List-appendNilRightNeutral (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (case (vector-ref sc0 0) ((0) (vector 0 )) (else (vector 0 ))))))
(define Data-List-appendAssociative (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-1)) (case (vector-ref sc0 0) ((0) (vector 0 )) (else (vector 0 ))))))
(define Data-List1-map_Functor__List1 (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (let ((e-1 (vector-ref sc0 1))) (let ((e-2 (vector-ref sc0 2))) (vector 0 (arg-2 e-1) (Prelude-Types-map_Functor__List 'erased 'erased arg-2 e-2)))))))
(define Data-List1-toList (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (let ((e-1 (vector-ref sc0 1))) (let ((e-2 (vector-ref sc0 2))) (vector 1 e-1 e-2))))))
(define Data-List1-reverseOnto (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((0) arg-1) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (Data-List1-reverseOnto 'erased (vector 0 e-2 (Data-List1-toList 'erased arg-1)) e-3))))))))
(define Data-List1-reverse (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (let ((e-1 (vector-ref sc0 1))) (let ((e-2 (vector-ref sc0 2))) (Data-List1-reverseOnto 'erased (vector 0 e-1 (vector 0 )) e-2))))))
(define Data-Strings-case--span-1223 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (vector 0 (Prelude-Types-pack e-2) (Prelude-Types-pack e-3)))))))
(define Data-Strings-case--ltrimC-44ltrimChars-1178 (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (cond ((equal? sc0 0) (Data-Strings-n--2176-1168-ltrimChars arg-0 arg-2)) (else (vector 1 arg-1 arg-2))))))
(define Data-Strings-case--caseC-32blockC-32inC-32linesC-39-1116 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((0) (vector 0 )) (else (let ((e-3 (vector-ref sc0 2))) (Data-Strings-linesC-39 e-3)))))))
(define Data-Strings-case--linesC-39-1102 (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (vector 1 e-2 (let ((sc1 e-3)) (case (vector-ref sc1 0) ((0) (vector 0 )) (else (let ((e-4 (vector-ref sc1 2))) (Data-Strings-linesC-39 e-4)))))))))))
(define Data-Strings-n--2176-1168-ltrimChars (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (case (vector-ref sc0 0) ((0) (vector 0 )) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (Data-Strings-case--ltrimC-44ltrimChars-1178 arg-0 e-2 e-3 (Prelude-Types-isSpace e-2)))))))))
(define Data-Strings-unlinesC-39 (lambda (arg-0) (let ((sc0 arg-0)) (case (vector-ref sc0 0) ((0) (vector 0 )) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (Prelude-Types-List-C-43C-43 'erased e-2 (vector 1 (integer->char 10) (Data-Strings-unlinesC-39 e-3))))))))))
(define Data-Strings-unlines (lambda (ext-0) (Prelude-Types-pack (Data-Strings-unlinesC-39 (Prelude-Types-map_Functor__List 'erased 'erased (lambda (eta-0) (Prelude-Types-unpack eta-0)) ext-0)))))
(define Data-Strings-trim (lambda (ext-0) (Data-Strings-ltrim (Prelude-Types-reverse (Data-Strings-ltrim (Prelude-Types-reverse ext-0))))))
(define Data-Strings-strTail (lambda (ext-0) (substring ext-0 1 (string-length ext-0))))
(define Data-Strings-strSubstr (lambda (ext-0 ext-1 ext-2) (string-substr ext-0 ext-1 ext-2)))
(define Data-Strings-strLength (lambda (ext-0) (string-length ext-0)))
(define Data-Strings-split (lambda (arg-0 arg-1) (Data-List1-map_Functor__List1 'erased 'erased (lambda (eta-0) (Prelude-Types-pack eta-0)) (Data-List-split 'erased arg-0 (Prelude-Types-unpack arg-1)))))
(define Data-Strings-span (lambda (arg-0 arg-1) (Data-Strings-case--span-1223 arg-1 arg-0 (Data-List-span 'erased arg-0 (Prelude-Types-unpack arg-1)))))
(define Data-Strings-ltrim (lambda (arg-0) (Prelude-Types-pack (Data-Strings-n--2176-1168-ltrimChars arg-0 (Prelude-Types-unpack arg-0)))))
(define Data-Strings-linesC-39 (lambda (arg-0) (let ((sc0 arg-0)) (case (vector-ref sc0 0) ((0) (vector 0 ))(else (Data-Strings-case--linesC-39-1102 arg-0 (Data-List-break 'erased (lambda (eta-0) (Prelude-Types-isNL eta-0)) arg-0)))))))
(define Data-Strings-lines (lambda (arg-0) (Prelude-Types-map_Functor__List 'erased 'erased (lambda (eta-0) (Prelude-Types-pack eta-0)) (Data-Strings-linesC-39 (Prelude-Types-unpack arg-0)))))
(define Data-Strings-isSuffixOf (lambda (arg-0 arg-1) (Data-List-isSuffixOf 'erased (vector 0 (lambda (arg-2) (lambda (arg-3) (Prelude-EqOrd-C-61C-61_Eq__Char arg-2 arg-3))) (lambda (arg-4) (lambda (arg-5) (Prelude-EqOrd-C-47C-61_Eq__Char arg-4 arg-5)))) (Prelude-Types-unpack arg-0) (Prelude-Types-unpack arg-1))))
(define Data-Strings-isPrefixOf (lambda (arg-0 arg-1) (Data-List-isPrefixOf 'erased (vector 0 (lambda (arg-2) (lambda (arg-3) (Prelude-EqOrd-C-61C-61_Eq__Char arg-2 arg-3))) (lambda (arg-4) (lambda (arg-5) (Prelude-EqOrd-C-47C-61_Eq__Char arg-4 arg-5)))) (Prelude-Types-unpack arg-0) (Prelude-Types-unpack arg-1))))
(define Data-Strings-fastAppend (lambda (ext-0) (Data-Strings-fastConcat ext-0)))
(define Data-Strings-break (lambda (arg-0 ext-0) (Data-Strings-span (lambda (eta-0) (Prelude-Basics-not (arg-0 eta-0))) ext-0)))
(define System-File-case--caseC-32blockC-32inC-32readFile-1600 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-5)) (case (vector-ref sc0 0) ((1) (let ((e-2 (vector-ref sc0 1))) (let ((sc1 (let ((sc2 arg-1)) (let ((e-1 (vector-ref sc2 1))) e-1)))) (let ((e-4 (vector-ref sc1 2))) ((((e-4 'erased) 'erased) (System-File-closeFile 'erased arg-1 arg-3)) (lambda (_-1622) (let ((sc2 (let ((sc3 (let ((sc4 arg-1)) (let ((e-6 (vector-ref sc4 1))) e-6)))) (let ((e-7 (vector-ref sc3 1))) e-7)))) (let ((e-6 (vector-ref sc2 2))) ((e-6 'erased) (vector 1 (Data-Strings-fastAppend e-2))))))))))) (else (let ((sc1 (let ((sc2 arg-1)) (let ((e-1 (vector-ref sc2 1))) e-1)))) (let ((e-2 (vector-ref sc1 2))) ((((e-2 'erased) 'erased) (System-File-closeFile 'erased arg-1 arg-3)) (lambda (_-1660) (System-File-returnError 'erased 'erased arg-1))))))))))
(define System-File-case--readFile-1576 (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((1) (let ((e-2 (vector-ref sc0 1))) (let ((sc1 (let ((sc2 arg-1)) (let ((e-1 (vector-ref sc2 1))) e-1)))) (let ((e-4 (vector-ref sc1 2))) ((((e-4 'erased) 'erased) (System-File-n--3198-1458-read 'erased arg-1 arg-2 (vector 0 ) e-2)) (lambda (_-0) (let ((sc2 _-0)) (case (vector-ref sc2 0) ((1) (let ((e-5 (vector-ref sc2 1))) (let ((sc3 (let ((sc4 arg-1)) (let ((e-7 (vector-ref sc4 1))) e-7)))) (let ((e-7 (vector-ref sc3 2))) ((((e-7 'erased) 'erased) (System-File-closeFile 'erased arg-1 e-2)) (lambda (_-1622) (let ((sc4 (let ((sc5 (let ((sc6 arg-1)) (let ((e-10 (vector-ref sc6 1))) e-10)))) (let ((e-11 (vector-ref sc5 1))) e-11)))) (let ((e-10 (vector-ref sc4 2))) ((e-10 'erased) (vector 1 (Data-Strings-fastAppend e-5))))))))))) (else (let ((sc3 (let ((sc4 arg-1)) (let ((e-7 (vector-ref sc4 1))) e-7)))) (let ((e-7 (vector-ref sc3 2))) ((((e-7 'erased) 'erased) (System-File-closeFile 'erased arg-1 e-2)) (lambda (_-1660) (System-File-returnError 'erased 'erased arg-1)))))))))))))) (else (System-File-returnError 'erased 'erased arg-1))))))
(define System-File-case--caseC-32blockC-32inC-32readFileC-44read-1522 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (let ((sc0 arg-6)) (case (vector-ref sc0 0) ((1) (let ((e-2 (vector-ref sc0 1))) (System-File-n--3198-1458-read 'erased arg-1 arg-2 (vector 1 e-2 arg-4) arg-3))) (else (System-File-returnError 'erased 'erased arg-1))))))
(define System-File-case--readFileC-44read-1473 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-5)) (cond ((equal? sc0 0) (let ((sc1 (let ((sc2 (let ((sc3 arg-1)) (let ((e-1 (vector-ref sc3 1))) e-1)))) (let ((e-1 (vector-ref sc2 1))) e-1)))) (let ((e-2 (vector-ref sc1 2))) ((e-2 'erased) (vector 1 (Data-List-reverse 'erased arg-4)))))) (else (let ((sc1 (let ((sc2 arg-1)) (let ((e-1 (vector-ref sc2 1))) e-1)))) (let ((e-2 (vector-ref sc1 2))) ((((e-2 'erased) 'erased) (System-File-fGetLine 'erased arg-1 arg-3)) (lambda (_-0) (let ((sc2 _-0)) (case (vector-ref sc2 0) ((1) (let ((e-4 (vector-ref sc2 1))) (System-File-n--3198-1458-read 'erased arg-1 arg-2 (vector 1 e-4 arg-4) arg-3))) (else (System-File-returnError 'erased 'erased arg-1)))))))))))))
(define System-File-case--fGetLine-760 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-4)) (cond ((equal? sc0 0) (System-File-returnError 'erased 'erased arg-1)) (else (System-File-ok 'erased 'erased arg-1 (Prelude-IO-prim__getString arg-3)))))))
(define System-File-case--openFile-653 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-5)) (cond ((equal? sc0 0) (System-File-returnError 'erased 'erased arg-1)) (else (System-File-ok 'erased 'erased arg-1 arg-4))))))
(define System-File-case--returnError-445 (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (cond ((equal? sc0 0) (let ((sc1 (let ((sc2 (let ((sc3 arg-2)) (let ((e-1 (vector-ref sc3 1))) e-1)))) (let ((e-1 (vector-ref sc2 1))) e-1)))) (let ((e-2 (vector-ref sc1 2))) ((e-2 'erased) (vector 0 (vector 1 )))))) ((equal? sc0 1) (let ((sc1 (let ((sc2 (let ((sc3 arg-2)) (let ((e-1 (vector-ref sc3 1))) e-1)))) (let ((e-1 (vector-ref sc2 1))) e-1)))) (let ((e-2 (vector-ref sc1 2))) ((e-2 'erased) (vector 0 (vector 2 )))))) ((equal? sc0 2) (let ((sc1 (let ((sc2 (let ((sc3 arg-2)) (let ((e-1 (vector-ref sc3 1))) e-1)))) (let ((e-1 (vector-ref sc2 1))) e-1)))) (let ((e-2 (vector-ref sc1 2))) ((e-2 'erased) (vector 0 (vector 3 )))))) ((equal? sc0 3) (let ((sc1 (let ((sc2 (let ((sc3 arg-2)) (let ((e-1 (vector-ref sc3 1))) e-1)))) (let ((e-1 (vector-ref sc2 1))) e-1)))) (let ((e-2 (vector-ref sc1 2))) ((e-2 'erased) (vector 0 (vector 4 )))))) ((equal? sc0 4) (let ((sc1 (let ((sc2 (let ((sc3 arg-2)) (let ((e-1 (vector-ref sc3 1))) e-1)))) (let ((e-1 (vector-ref sc2 1))) e-1)))) (let ((e-2 (vector-ref sc1 2))) ((e-2 'erased) (vector 0 (vector 5 ))))))(else (let ((sc0 (let ((sc1 (let ((sc2 arg-2)) (let ((e-1 (vector-ref sc2 1))) e-1)))) (let ((e-1 (vector-ref sc1 1))) e-1)))) (let ((e-2 (vector-ref sc0 2))) ((e-2 'erased) (vector 0 (vector 0 (Prelude-Num-C-45_Neg__Int arg-3 5)))))))))))
(define System-File-case--modeStr-414 (lambda (arg-0) (let ((sc0 arg-0)) (cond ((equal? sc0 0) "ab+") (else "a+")))))
(define System-File-case--modeStr-404 (lambda (arg-0) (let ((sc0 arg-0)) (cond ((equal? sc0 0) "wb+") (else "w+")))))
(define System-File-case--modeStr-394 (lambda (arg-0) (let ((sc0 arg-0)) (cond ((equal? sc0 0) "rb+") (else "r+")))))
(define System-File-case--modeStr-384 (lambda (arg-0) (let ((sc0 arg-0)) (cond ((equal? sc0 0) "ab") (else "a")))))
(define System-File-case--modeStr-374 (lambda (arg-0) (let ((sc0 arg-0)) (cond ((equal? sc0 0) "wb") (else "w")))))
(define System-File-case--modeStr-364 (lambda (arg-0) (let ((sc0 arg-0)) (cond ((equal? sc0 0) "rb") (else "r")))))
(define System-File-n--3198-1458-read (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 (let ((sc1 arg-1)) (let ((e-1 (vector-ref sc1 1))) e-1)))) (let ((e-2 (vector-ref sc0 2))) ((((e-2 'erased) 'erased) (System-File-fEOF 'erased arg-1 arg-4)) (lambda (eof) (let ((sc1 eof)) (cond ((equal? sc1 0) (let ((sc2 (let ((sc3 (let ((sc4 arg-1)) (let ((e-5 (vector-ref sc4 1))) e-5)))) (let ((e-6 (vector-ref sc3 1))) e-6)))) (let ((e-5 (vector-ref sc2 2))) ((e-5 'erased) (vector 1 (Data-List-reverse 'erased arg-3)))))) (else (let ((sc2 (let ((sc3 arg-1)) (let ((e-5 (vector-ref sc3 1))) e-5)))) (let ((e-5 (vector-ref sc2 2))) ((((e-5 'erased) 'erased) (System-File-fGetLine 'erased arg-1 arg-4)) (lambda (_-0) (let ((sc3 _-0)) (case (vector-ref sc3 0) ((1) (let ((e-7 (vector-ref sc3 1))) (System-File-n--3198-1458-read 'erased arg-1 arg-2 (vector 1 e-7 arg-3) arg-4))) (else (System-File-returnError 'erased 'erased arg-1)))))))))))))))))
(define System-File-show_Show__FileError (lambda (arg-0) (let ((sc0 arg-0)) (case (vector-ref sc0 0) ((0) (let ((e-0 (vector-ref sc0 1))) (Prelude-Types-Strings-C-43C-43 "File error: " (Prelude-Show-show_Show__Int e-0)))) ((1) "File Read Error") ((2) "File Write Error") ((3) "File Not Found") ((4) "Permission Denied") (else "File Exists")))))
(define System-File-returnError (lambda (arg-0 arg-1 arg-2) (let ((sc0 (let ((sc1 arg-2)) (let ((e-1 (vector-ref sc1 1))) e-1)))) (let ((e-2 (vector-ref sc0 2))) ((((e-2 'erased) 'erased) (let ((sc1 arg-2)) (let ((e-4 (vector-ref sc1 2))) ((e-4 'erased) (lambda (eta-0) (System-File-prim__fileErrno eta-0)))))) (lambda (err) (let ((sc1 err)) (cond ((equal? sc1 0) (let ((sc2 (let ((sc3 (let ((sc4 arg-2)) (let ((e-5 (vector-ref sc4 1))) e-5)))) (let ((e-6 (vector-ref sc3 1))) e-6)))) (let ((e-5 (vector-ref sc2 2))) ((e-5 'erased) (vector 0 (vector 1 )))))) ((equal? sc1 1) (let ((sc2 (let ((sc3 (let ((sc4 arg-2)) (let ((e-5 (vector-ref sc4 1))) e-5)))) (let ((e-6 (vector-ref sc3 1))) e-6)))) (let ((e-5 (vector-ref sc2 2))) ((e-5 'erased) (vector 0 (vector 2 )))))) ((equal? sc1 2) (let ((sc2 (let ((sc3 (let ((sc4 arg-2)) (let ((e-5 (vector-ref sc4 1))) e-5)))) (let ((e-6 (vector-ref sc3 1))) e-6)))) (let ((e-5 (vector-ref sc2 2))) ((e-5 'erased) (vector 0 (vector 3 )))))) ((equal? sc1 3) (let ((sc2 (let ((sc3 (let ((sc4 arg-2)) (let ((e-5 (vector-ref sc4 1))) e-5)))) (let ((e-6 (vector-ref sc3 1))) e-6)))) (let ((e-5 (vector-ref sc2 2))) ((e-5 'erased) (vector 0 (vector 4 )))))) ((equal? sc1 4) (let ((sc2 (let ((sc3 (let ((sc4 arg-2)) (let ((e-5 (vector-ref sc4 1))) e-5)))) (let ((e-6 (vector-ref sc3 1))) e-6)))) (let ((e-5 (vector-ref sc2 2))) ((e-5 'erased) (vector 0 (vector 5 ))))))(else (let ((sc1 (let ((sc2 (let ((sc3 arg-2)) (let ((e-5 (vector-ref sc3 1))) e-5)))) (let ((e-6 (vector-ref sc2 1))) e-6)))) (let ((e-5 (vector-ref sc1 2))) ((e-5 'erased) (vector 0 (vector 0 (Prelude-Num-C-45_Neg__Int err 5)))))))))))))))
(define System-File-readFile (lambda (arg-0 arg-1 arg-2) (let ((sc0 (let ((sc1 arg-1)) (let ((e-1 (vector-ref sc1 1))) e-1)))) (let ((e-2 (vector-ref sc0 2))) ((((e-2 'erased) 'erased) (System-File-openFile 'erased arg-1 arg-2 (vector 0 ))) (lambda (_-0) (let ((sc1 _-0)) (case (vector-ref sc1 0) ((1) (let ((e-4 (vector-ref sc1 1))) (let ((sc2 (let ((sc3 arg-1)) (let ((e-6 (vector-ref sc3 1))) e-6)))) (let ((e-6 (vector-ref sc2 2))) ((((e-6 'erased) 'erased) (System-File-n--3198-1458-read 'erased arg-1 arg-2 (vector 0 ) e-4)) (lambda (_-1) (let ((sc3 _-1)) (case (vector-ref sc3 0) ((1) (let ((e-8 (vector-ref sc3 1))) (let ((sc4 (let ((sc5 arg-1)) (let ((e-10 (vector-ref sc5 1))) e-10)))) (let ((e-10 (vector-ref sc4 2))) ((((e-10 'erased) 'erased) (System-File-closeFile 'erased arg-1 e-4)) (lambda (_-1622) (let ((sc5 (let ((sc6 (let ((sc7 arg-1)) (let ((e-13 (vector-ref sc7 1))) e-13)))) (let ((e-14 (vector-ref sc6 1))) e-14)))) (let ((e-13 (vector-ref sc5 2))) ((e-13 'erased) (vector 1 (Data-Strings-fastAppend e-8))))))))))) (else (let ((sc4 (let ((sc5 arg-1)) (let ((e-10 (vector-ref sc5 1))) e-10)))) (let ((e-10 (vector-ref sc4 2))) ((((e-10 'erased) 'erased) (System-File-closeFile 'erased arg-1 e-4)) (lambda (_-1660) (System-File-returnError 'erased 'erased arg-1)))))))))))))) (else (System-File-returnError 'erased 'erased arg-1))))))))))
(define System-File-openFile (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 (let ((sc1 arg-1)) (let ((e-1 (vector-ref sc1 1))) e-1)))) (let ((e-2 (vector-ref sc0 2))) ((((e-2 'erased) 'erased) (let ((sc1 arg-1)) (let ((e-4 (vector-ref sc1 2))) ((e-4 'erased) (lambda (eta-0) (System-File-prim__open arg-2 (System-File-modeStr arg-3) eta-0)))))) (lambda (res) (System-File-case--openFile-653 'erased arg-1 arg-3 arg-2 res (Prelude-EqOrd-C-47C-61_Eq__Int (PrimIO-prim__nullAnyPtr res) 0))))))))
(define System-File-ok (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 (let ((sc1 (let ((sc2 arg-2)) (let ((e-1 (vector-ref sc2 1))) e-1)))) (let ((e-1 (vector-ref sc1 1))) e-1)))) (let ((e-2 (vector-ref sc0 2))) ((e-2 'erased) (vector 1 arg-3))))))
(define System-File-modeStr (lambda (arg-0) (let ((sc0 arg-0)) (case (vector-ref sc0 0) ((0) (System-File-case--modeStr-364 (System-Info-isWindows))) ((1) (System-File-case--modeStr-374 (System-Info-isWindows))) ((2) (System-File-case--modeStr-384 (System-Info-isWindows))) ((3) (System-File-case--modeStr-394 (System-Info-isWindows))) ((4) (System-File-case--modeStr-404 (System-Info-isWindows))) (else (System-File-case--modeStr-414 (System-Info-isWindows)))))))
(define System-File-fGetLine (lambda (arg-0 arg-1 arg-2) (let ((sc0 (let ((sc1 arg-1)) (let ((e-1 (vector-ref sc1 1))) e-1)))) (let ((e-2 (vector-ref sc0 2))) ((((e-2 'erased) 'erased) (let ((sc1 arg-1)) (let ((e-4 (vector-ref sc1 2))) ((e-4 'erased) (lambda (eta-0) (System-File-prim__readLine arg-2 eta-0)))))) (lambda (res) (System-File-case--fGetLine-760 'erased arg-1 arg-2 res (Prelude-EqOrd-C-47C-61_Eq__Int (PrimIO-prim__nullAnyPtr (PrimIO-prim__forgetPtr 'erased res)) 0))))))))
(define System-File-fEOF (lambda (arg-0 arg-1 arg-2) (let ((sc0 (let ((sc1 arg-1)) (let ((e-1 (vector-ref sc1 1))) e-1)))) (let ((e-2 (vector-ref sc0 2))) ((((e-2 'erased) 'erased) (let ((sc1 arg-1)) (let ((e-4 (vector-ref sc1 2))) ((e-4 'erased) (lambda (eta-0) (System-File-prim__eof arg-2 eta-0)))))) (lambda (res) (let ((sc1 (let ((sc2 (let ((sc3 arg-1)) (let ((e-5 (vector-ref sc3 1))) e-5)))) (let ((e-6 (vector-ref sc2 1))) e-6)))) (let ((e-5 (vector-ref sc1 2))) ((e-5 'erased) (Prelude-EqOrd-C-47C-61_Eq__Int res 0))))))))))
(define System-File-closeFile (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-1)) (let ((e-2 (vector-ref sc0 2))) ((e-2 'erased) (lambda (eta-0) (System-File-prim__close arg-2 eta-0)))))))
(define System-Info-prim__os (lambda () (blodwen-os)))
(define System-Info-os (lambda () (blodwen-os)))
(define System-Info-isWindows (lambda () (Prelude-Types-elem 'erased (vector 0 (lambda (arg-2) (lambda (arg-3) (Prelude-EqOrd-C-61C-61_Eq__String arg-2 arg-3))) (lambda (arg-4) (lambda (arg-5) (Prelude-EqOrd-C-47C-61_Eq__String arg-4 arg-5)))) (System-Info-os) (vector 1 "windows" (vector 1 "mingw32" (vector 1 "cygwin32" (vector 0 )))))))
(define System-getArgs (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (let ((e-2 (vector-ref sc0 2))) ((e-2 'erased) (lambda (eta-0) (System-prim__getArgs eta-0)))))))
(define Synthesis-Test-case--testOne-4276 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-5)) (case (vector-ref sc0 0) ((1) (let ((e-1 (vector-ref sc0 1))) (lambda (eta-0) (let ((act-24 ((Synthesis-Test-test arg-3 arg-2 arg-1 (vector 0 arg-0 e-1)) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (vector 1 (vector 0 )))))))))(else (lambda (eta-0) (Core-Core-log "Name not in context" eta-0)))))))
(define Synthesis-Test-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32caseC-32blockC-32inC-32test-4086 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-13 arg-14 arg-15 arg-16) (let ((sc0 arg-16)) (cond ((equal? sc0 0) (lambda (eta-0) (vector 1 (+ 1 0)))) (else (lambda (eta-0) (vector 1 0)))))))
(define Synthesis-Test-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32caseC-32blockC-32inC-32test-3996 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-13 arg-14) (let ((sc0 arg-14)) (cond ((equal? sc0 0) "Success") (else "Fail")))))
(define Synthesis-Test-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32test-3958 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11) (let ((sc0 arg-11)) (case (vector-ref sc0 0) ((1) (let ((e-1 (vector-ref sc0 1))) (lambda (eta-0) (let ((act-24 (Synthesis-Synthesize-run arg-4 arg-3 (vector 0 arg-0) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc1 1))) (let ((result (let ((_-0 (vector 1 e-1))) (Synthesis-Test-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32caseC-32blockC-32inC-32test-3996 arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 e-1 _-0 e-5 (Prelude-EqOrd-C-61C-61_Eq__String e-5 e-1))))) (let ((act-25 (Core-Core-log (Prelude-Types-Strings-C-43C-43 "Test: " (Prelude-Types-Strings-C-43C-43 arg-0 (Prelude-Types-Strings-C-43C-43 " | Result " (Prelude-Types-Strings-C-43C-43 result (Prelude-Types-Strings-C-43C-43 " | Expected: " (Prelude-Types-Strings-C-43C-43 e-1 (Prelude-Types-Strings-C-43C-43 " | Actual: " e-5))))))) eta-0))) (let ((sc2 act-25)) (case (vector-ref sc2 0) ((0) (let ((e-2 (vector-ref sc2 1))) (vector 0 e-2))) (else (let ((e-6 (vector-ref sc2 1))) (let ((_-0 (vector 1 e-1))) ((Synthesis-Test-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32caseC-32blockC-32inC-32test-4086 arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 e-1 _-0 e-5 result e-6 (Prelude-EqOrd-C-61C-61_Eq__String e-5 e-1)) eta-0))))))))))))))))(else (lambda (eta-0) (let ((act-24 (Core-Core-log "no answer" eta-0))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (vector 1 0)))))))))))
(define Synthesis-Test-case--caseC-32blockC-32inC-32test-3931 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8) (let ((sc0 arg-8)) (case (vector-ref sc0 0) ((5) (let ((e-0 (vector-ref sc0 1))) (let ((e-1 (vector-ref sc0 2))) (let ((e-2 (vector-ref sc0 3))) (lambda (eta-0) (let ((act-24 (Synthesis-Test-lookupAnswer arg-2 arg-0 eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-3 (vector-ref sc1 1))) (vector 0 e-3))) (else (let ((e-5 (vector-ref sc1 1))) (let ((sc2 e-5)) (case (vector-ref sc2 0) ((1) (let ((e-3 (vector-ref sc2 1))) (let ((act-25 (Synthesis-Synthesize-run arg-4 arg-3 (vector 0 arg-0) eta-0))) (let ((sc3 act-25)) (case (vector-ref sc3 0) ((0) (let ((e-4 (vector-ref sc3 1))) (vector 0 e-4))) (else (let ((e-6 (vector-ref sc3 1))) (let ((result (let ((_-0 (vector 1 e-3))) (Synthesis-Test-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32caseC-32blockC-32inC-32test-3996 arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 e-0 e-2 e-1 e-3 _-0 e-6 (Prelude-EqOrd-C-61C-61_Eq__String e-6 e-3))))) (let ((act-26 (Core-Core-log (Prelude-Types-Strings-C-43C-43 "Test: " (Prelude-Types-Strings-C-43C-43 arg-0 (Prelude-Types-Strings-C-43C-43 " | Result " (Prelude-Types-Strings-C-43C-43 result (Prelude-Types-Strings-C-43C-43 " | Expected: " (Prelude-Types-Strings-C-43C-43 e-3 (Prelude-Types-Strings-C-43C-43 " | Actual: " e-6))))))) eta-0))) (let ((sc4 act-26)) (case (vector-ref sc4 0) ((0) (let ((e-4 (vector-ref sc4 1))) (vector 0 e-4))) (else (let ((e-7 (vector-ref sc4 1))) (let ((_-0 (vector 1 e-3))) ((Synthesis-Test-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32caseC-32blockC-32inC-32test-4086 arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 e-0 e-2 e-1 e-3 _-0 e-6 result e-7 (Prelude-EqOrd-C-61C-61_Eq__String e-6 e-3)) eta-0)))))))))))))))(else (let ((act-25 (Core-Core-log "no answer" eta-0))) (let ((sc2 act-25)) (case (vector-ref sc2 0) ((0) (let ((e-3 (vector-ref sc2 1))) (vector 0 e-3))) (else (vector 1 0))))))))))))))))))(else (lambda (eta-0) (vector 1 0)))))))
(define Synthesis-Test-case--test-3914 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (let ((sc0 arg-6)) (case (vector-ref sc0 0) ((1) (let ((e-1 (vector-ref sc0 1))) (let ((_-0 (vector 1 e-1))) (Synthesis-Test-case--caseC-32blockC-32inC-32test-3931 arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 e-1 _-0 (let ((sc1 e-1)) (let ((e-2 (vector-ref sc1 2))) e-2))))))(else (lambda (eta-0) (let ((act-24 (Core-Core-log "Name not in context" eta-0))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (vector 1 0)))))))))))
(define Synthesis-Test-case--caseC-32blockC-32inC-32parseAnswers-3856 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-4)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((bC-39 (Prelude-Types-pack (Data-List-drop 'erased (+ 1 0) (Prelude-Types-unpack e-3))))) (vector 0 (Data-Strings-trim e-2) (Data-Strings-trim bC-39))))))))
(define Synthesis-Test-case--parseAnswers-3826 (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (case (vector-ref sc0 0) ((1) (let ((e-2 (vector-ref sc0 1))) (lambda (eta-0) (vector 1 (Data-SortedMap-fromList 'erased 'erased (vector 0 (vector 0 (lambda (arg-2) (lambda (arg-3) (Prelude-EqOrd-C-61C-61_Eq__String arg-2 arg-3))) (lambda (arg-4) (lambda (arg-5) (Prelude-EqOrd-C-47C-61_Eq__String arg-4 arg-5)))) (lambda (arg-369) (lambda (arg-370) (Prelude-EqOrd-compare_Ord__String arg-369 arg-370))) (lambda (arg-371) (lambda (arg-372) (Prelude-EqOrd-C-60_Ord__String arg-371 arg-372))) (lambda (arg-373) (lambda (arg-374) (Prelude-EqOrd-C-62_Ord__String arg-373 arg-374))) (lambda (arg-375) (lambda (arg-376) (Prelude-EqOrd-C-60C-61_Ord__String arg-375 arg-376))) (lambda (arg-377) (lambda (arg-378) (Prelude-EqOrd-C-62C-61_Ord__String arg-377 arg-378))) (lambda (arg-379) (lambda (arg-380) (Prelude-EqOrd-max_Ord__String arg-379 arg-380))) (lambda (arg-381) (lambda (arg-382) (Prelude-EqOrd-min_Ord__String arg-381 arg-382)))) (Prelude-Types-map_Functor__List 'erased 'erased (lambda (s) (let ((_-0 (vector 1 e-2))) (Synthesis-Test-case--caseC-32blockC-32inC-32parseAnswers-3856 arg-0 e-2 _-0 s (Data-Strings-break (lambda (c) (Prelude-EqOrd-C-61C-61_Eq__Char c #\!)) s)))) (Data-Strings-lines e-2))))))) (else (let ((e-5 (vector-ref sc0 1))) (lambda (eta-0) (vector 0 e-5))))))))
(define Synthesis-Test-case--getAnswerFile-3799 (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (let ((e-2 (vector-ref sc0 1))) (Prelude-Types-Strings-C-43C-43 "Test/AnswerFiles/" (Prelude-Types-Strings-C-43C-43 (Prelude-Types-pack e-2) ".ans"))))))
(define Synthesis-Test-testOne (lambda (arg-0 arg-1 arg-2 arg-3 ext-0) (let ((act-24 (let ((act-24 (unbox arg-0))) (vector 1 act-24)))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (let ((act-25 (Core-Context-lookupDef arg-3 e-5 ext-0))) (let ((sc1 act-25)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-6 (vector-ref sc1 1))) (let ((sc2 e-6)) (case (vector-ref sc2 0) ((1) (let ((e-1 (vector-ref sc2 1))) (let ((act-26 ((Synthesis-Test-test arg-0 arg-1 arg-2 (vector 0 arg-3 e-1)) ext-0))) (let ((sc3 act-26)) (case (vector-ref sc3 0) ((0) (let ((e-2 (vector-ref sc3 1))) (vector 0 e-2))) (else (vector 1 (vector 0 ))))))))(else (Core-Core-log "Name not in context" ext-0))))))))))))))))
(define Synthesis-Test-test (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 e-2)) (case (vector-ref sc1 0) ((0) (let ((e-4 (vector-ref sc1 1))) (lambda (eta-0) (let ((act-24 (let ((act-24 (unbox arg-0))) (vector 1 act-24)))) (let ((sc2 act-24)) (case (vector-ref sc2 0) ((0) (let ((e-5 (vector-ref sc2 1))) (vector 0 e-5))) (else (let ((e-5 (vector-ref sc2 1))) (let ((act-25 (Core-Context-lookupDef (vector 0 e-4) e-5 eta-0))) (let ((sc3 act-25)) (case (vector-ref sc3 0) ((0) (let ((e-6 (vector-ref sc3 1))) (vector 0 e-6))) (else (let ((e-6 (vector-ref sc3 1))) (let ((sc4 e-6)) (case (vector-ref sc4 0) ((1) (let ((e-1 (vector-ref sc4 1))) (let ((_-0 (vector 1 e-1))) ((Synthesis-Test-case--caseC-32blockC-32inC-32test-3931 e-4 e-3 arg-2 arg-1 arg-0 e-5 e-1 _-0 (let ((sc5 e-1)) (let ((e-7 (vector-ref sc5 2))) e-7))) eta-0))))(else (let ((act-26 (Core-Core-log "Name not in context" eta-0))) (let ((sc4 act-26)) (case (vector-ref sc4 0) ((0) (let ((e-7 (vector-ref sc4 1))) (vector 0 e-7))) (else (vector 1 0)))))))))))))))))))))(else (lambda (eta-0) (vector 1 0))))))))))
(define Synthesis-Test-runTests (lambda (arg-0 arg-1 arg-2 ext-0) (let ((act-24 (Core-Context-mapDefsC-39 'erased arg-0 (lambda (eta-0) (Synthesis-Test-test arg-0 arg-1 arg-2 eta-0)) ext-0))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (let ((act-25 ((Core-Core-traverse 'erased 'erased (lambda (eta-0) eta-0) e-5) ext-0))) (let ((sc1 act-25)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-6 (vector-ref sc1 1))) (Core-Core-log (Prelude-Types-Strings-C-43C-43 "Total successes " (Prelude-Show-show_Show__Nat ((Prelude-Interfaces-sum 'erased 'erased (vector 0 (vector 0 (lambda (acc) (lambda (elem) (lambda (func) (lambda (init) (lambda (input) (Prelude-Types-foldr_Foldable__List 'erased 'erased func init input)))))) (lambda (elem) (lambda (acc) (lambda (func) (lambda (init) (lambda (input) (Prelude-Types-foldl_Foldable__List 'erased 'erased func init input))))))) (vector 0 (lambda (arg-3) (lambda (arg-4) (Prelude-Types-C-43_Num__Nat arg-3 arg-4))) (lambda (arg-4) (lambda (arg-5) (Prelude-Types-C-42_Num__Nat arg-4 arg-5))) (lambda (arg-6) (Prelude-Types-fromInteger_Num__Nat arg-6))))) e-6))) ext-0)))))))))))))
(define Synthesis-Test-parseAnswers (lambda (arg-0 ext-0) (let ((act-24 ((System-File-readFile 'erased (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-62) (lambda (eta-0) (Prelude-IO-map_Functor__IO 'erased 'erased func arg-62 eta-0)))))) (lambda (a) (lambda (arg-172) (lambda (eta-0) arg-172))) (lambda (b) (lambda (a) (lambda (arg-173) (lambda (arg-175) (lambda (eta-0) (let ((act-17 (arg-173 eta-0))) (let ((act-16 (arg-175 eta-0))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-334) (lambda (arg-335) (lambda (eta-0) (let ((act-24 (arg-334 eta-0))) ((arg-335 act-24) eta-0))))))) (lambda (a) (lambda (arg-337) (lambda (eta-0) (let ((act-51 (arg-337 eta-0))) (act-51 eta-0)))))) (lambda (a) (lambda (arg-6366) arg-6366))) arg-0) ext-0))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((1) (let ((e-2 (vector-ref sc0 1))) (vector 1 (Data-SortedMap-fromList 'erased 'erased (vector 0 (vector 0 (lambda (arg-2) (lambda (arg-3) (Prelude-EqOrd-C-61C-61_Eq__String arg-2 arg-3))) (lambda (arg-4) (lambda (arg-5) (Prelude-EqOrd-C-47C-61_Eq__String arg-4 arg-5)))) (lambda (arg-369) (lambda (arg-370) (Prelude-EqOrd-compare_Ord__String arg-369 arg-370))) (lambda (arg-371) (lambda (arg-372) (Prelude-EqOrd-C-60_Ord__String arg-371 arg-372))) (lambda (arg-373) (lambda (arg-374) (Prelude-EqOrd-C-62_Ord__String arg-373 arg-374))) (lambda (arg-375) (lambda (arg-376) (Prelude-EqOrd-C-60C-61_Ord__String arg-375 arg-376))) (lambda (arg-377) (lambda (arg-378) (Prelude-EqOrd-C-62C-61_Ord__String arg-377 arg-378))) (lambda (arg-379) (lambda (arg-380) (Prelude-EqOrd-max_Ord__String arg-379 arg-380))) (lambda (arg-381) (lambda (arg-382) (Prelude-EqOrd-min_Ord__String arg-381 arg-382)))) (Prelude-Types-map_Functor__List 'erased 'erased (lambda (s) (let ((_-0 (vector 1 e-2))) (Synthesis-Test-case--caseC-32blockC-32inC-32parseAnswers-3856 arg-0 e-2 _-0 s (Data-Strings-break (lambda (c) (Prelude-EqOrd-C-61C-61_Eq__Char c #\!)) s)))) (Data-Strings-lines e-2)))))) (else (let ((e-5 (vector-ref sc0 1))) (vector 0 e-5))))))))
(define Synthesis-Test-lookupAnswer (lambda (arg-0 arg-1 ext-0) (let ((act-24 (let ((act-24 (unbox arg-0))) (vector 1 act-24)))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (vector 1 (Data-SortedMap-lookup 'erased 'erased arg-1 e-5)))))))))
(define Synthesis-Test-getAnswerFile (lambda (arg-0) (Synthesis-Test-case--getAnswerFile-3799 arg-0 (Data-List-break 'erased (lambda (c) (Prelude-EqOrd-C-61C-61_Eq__Char c #\.)) (Data-List-drop 'erased (+ 1 (+ 1 (+ 1 (+ 1 (+ 1 (+ 1 (+ 1 (+ 1 (+ 1 (+ 1 (+ 1 (+ 1 (+ 1 (+ 1 (+ 1 0))))))))))))))) (Prelude-Types-unpack arg-0))))))
(define Synthesis-Test-Sheet (lambda () (vector "Data.SortedMap.SortedMap" (vector "String" ) (vector "String" ))))
(define Core-UnifyState-case--genVarName-6016 (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (let ((e-0 (vector-ref sc0 1))) (let ((e-1 (vector-ref sc0 2))) (let ((e-2 (vector-ref sc0 3))) (let ((e-3 (vector-ref sc0 4))) (let ((e-4 (vector-ref sc0 5))) (vector 0 e-0 e-1 e-2 (b+ e-3 1 63) e-4)))))))))
(define Core-UnifyState-case--deleteConstraint-5723 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (let ((e-0 (vector-ref sc0 1))) (let ((e-1 (vector-ref sc0 2))) (let ((e-2 (vector-ref sc0 3))) (let ((e-3 (vector-ref sc0 4))) (let ((e-4 (vector-ref sc0 5))) (vector 0 e-0 e-1 (Data-SortedMap-delete 'erased 'erased arg-0 e-2) e-3 e-4)))))))))
(define Core-UnifyState-case--addConstraint-5683 (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-2)) (let ((e-0 (vector-ref sc0 1))) (let ((e-1 (vector-ref sc0 2))) (let ((e-2 (vector-ref sc0 3))) (let ((e-3 (vector-ref sc0 4))) (vector 0 e-0 e-1 (Data-SortedMap-insert 'erased 'erased arg-3 arg-0 e-2) e-3 (b+ arg-3 1 63)))))))))
(define Core-UnifyState-case--removeHole-5643 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (let ((e-0 (vector-ref sc0 1))) (let ((e-1 (vector-ref sc0 2))) (let ((e-2 (vector-ref sc0 3))) (let ((e-3 (vector-ref sc0 4))) (let ((e-4 (vector-ref sc0 5))) (vector 0 (Data-SortedSet-delete 'erased arg-0 e-0) e-1 e-2 e-3 e-4)))))))))
(define Core-UnifyState-case--addGuessName-5611 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (let ((e-0 (vector-ref sc0 1))) (let ((e-1 (vector-ref sc0 2))) (let ((e-2 (vector-ref sc0 3))) (let ((e-3 (vector-ref sc0 4))) (let ((e-4 (vector-ref sc0 5))) (vector 0 e-0 (Data-SortedSet-insert 'erased arg-0 e-1) e-2 e-3 e-4)))))))))
(define Core-UnifyState-case--addHoleName-5579 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (let ((e-0 (vector-ref sc0 1))) (let ((e-1 (vector-ref sc0 2))) (let ((e-2 (vector-ref sc0 3))) (let ((e-3 (vector-ref sc0 4))) (let ((e-4 (vector-ref sc0 5))) (vector 0 (Data-SortedSet-insert 'erased arg-0 e-0) e-1 e-2 e-3 e-4)))))))))
(define Core-UnifyState-case--genName-5544 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (let ((e-0 (vector-ref sc0 1))) (let ((e-1 (vector-ref sc0 2))) (let ((e-2 (vector-ref sc0 3))) (let ((e-3 (vector-ref sc0 4))) (let ((e-4 (vector-ref sc0 5))) (vector 0 e-0 e-1 e-2 (b+ e-3 1 63) e-4)))))))))
(define Core-UnifyState-n--3558-5935-envArgs (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (let ((args (Data-List-reverse 'erased (Core-UnifyState-mkConstantAppArgs 'erased arg-1 arg-4 (vector 0 ))))) args)))
(define Core-UnifyState-n--3486-5864-envArgs (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (let ((args (Data-List-reverse 'erased (Core-UnifyState-mkConstantAppArgs 'erased arg-1 arg-4 (vector 0 ))))) args)))
(define Core-UnifyState-removeHole (lambda (arg-0 arg-1 ext-0) (let ((act-24 (let ((act-24 (unbox arg-0))) (vector 1 act-24)))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (let ((act-25 (set-box! arg-0 (let ((sc1 e-5)) (let ((e-0 (vector-ref sc1 1))) (let ((e-1 (vector-ref sc1 2))) (let ((e-2 (vector-ref sc1 3))) (let ((e-3 (vector-ref sc1 4))) (let ((e-4 (vector-ref sc1 5))) (vector 0 (Data-SortedSet-delete 'erased arg-1 e-0) e-1 e-2 e-3 e-4)))))))))) (vector 1 act-25)))))))))
(define Core-UnifyState-UState-nextName (lambda (arg-0) (let ((sc0 arg-0)) (let ((e-3 (vector-ref sc0 4))) e-3))))
(define Core-UnifyState-UState-nextConstraint (lambda (arg-0) (let ((sc0 arg-0)) (let ((e-4 (vector-ref sc0 5))) e-4))))
(define Core-UnifyState-newMeta (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (let ((hty (Core-UnifyState-abstractEnvType arg-0 arg-3 arg-5))) (let ((hole (Core-Context-newDef hty arg-6))) (lambda (eta-0) (let ((act-24 (Core-Context-addDef arg-1 arg-4 hole eta-0))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((act-25 (Core-UnifyState-addHoleName arg-2 arg-4 eta-0))) (let ((sc1 act-25)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (vector 1 (vector 2 arg-4 (Core-UnifyState-n--3486-5864-envArgs arg-6 arg-0 arg-5 arg-4 arg-3 arg-2 arg-1))))))))))))))))
(define Core-UnifyState-newConstant (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (let ((def (Core-UnifyState-mkConstant arg-0 arg-3 arg-4))) (let ((defty (Core-UnifyState-abstractEnvType arg-0 arg-3 arg-5))) (lambda (eta-0) (let ((act-24 (Core-UnifyState-genName arg-1 "postpone" eta-0))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (let ((guess (Core-Context-newDef defty (vector 6 def arg-6)))) (let ((act-25 (Core-Context-addDef arg-2 e-5 guess eta-0))) (let ((sc1 act-25)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((act-26 (Core-UnifyState-addGuessName arg-1 e-5 eta-0))) (let ((sc2 act-26)) (case (vector-ref sc2 0) ((0) (let ((e-2 (vector-ref sc2 1))) (vector 0 e-2))) (else (vector 1 (vector 2 e-5 (Core-UnifyState-n--3558-5935-envArgs arg-6 arg-0 arg-5 arg-4 arg-3 arg-2 arg-1))))))))))))))))))))))
(define Core-UnifyState-mkConstantAppArgs (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-1)) (case (vector-ref sc0 0) ((0) (let ((sc1 arg-2)) (vector 0 ))) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 arg-2)) (let ((e-9 (vector-ref sc1 2))) (let ((rec (Core-UnifyState-mkConstantAppArgs 'erased e-3 e-9 (Prelude-Types-List-C-43C-43 'erased arg-3 (vector 1 e-2 (vector 0 )))))) (vector 1 (vector 0 (Prelude-Types-List-length 'erased arg-3)) rec)))))))))))
(define Core-UnifyState-mkConstant (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-0)) (case (vector-ref sc0 0) ((0) (let ((sc1 arg-1)) arg-2)) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 arg-1)) (let ((e-8 (vector-ref sc1 1))) (let ((e-9 (vector-ref sc1 2))) (let ((ty (Core-TT-binderType 'erased e-8))) (Core-UnifyState-mkConstant e-3 e-9 (vector 3 e-2 (vector 0 (vector 1 "_" 0) (vector 1 ) ty) arg-2)))))))))))))
(define Core-UnifyState-initUState (lambda () (vector 0 (Data-SortedSet-empty 'erased (vector 0 (vector 0 (lambda (arg-2) (lambda (arg-3) (Core-TT-C-61C-61_Eq__Name arg-2 arg-3))) (lambda (arg-4) (lambda (arg-5) (Core-TT-C-47C-61_Eq__Name arg-4 arg-5)))) (lambda (arg-369) (lambda (arg-370) (Core-TT-compare_Ord__Name arg-369 arg-370))) (lambda (arg-371) (lambda (arg-372) (Core-TT-C-60_Ord__Name arg-371 arg-372))) (lambda (arg-373) (lambda (arg-374) (Core-TT-C-62_Ord__Name arg-373 arg-374))) (lambda (arg-375) (lambda (arg-376) (Core-TT-C-60C-61_Ord__Name arg-375 arg-376))) (lambda (arg-377) (lambda (arg-378) (Core-TT-C-62C-61_Ord__Name arg-377 arg-378))) (lambda (arg-379) (lambda (arg-380) (Core-TT-max_Ord__Name arg-379 arg-380))) (lambda (arg-381) (lambda (arg-382) (Core-TT-min_Ord__Name arg-381 arg-382))))) (Data-SortedSet-empty 'erased (vector 0 (vector 0 (lambda (arg-2) (lambda (arg-3) (Core-TT-C-61C-61_Eq__Name arg-2 arg-3))) (lambda (arg-4) (lambda (arg-5) (Core-TT-C-47C-61_Eq__Name arg-4 arg-5)))) (lambda (arg-369) (lambda (arg-370) (Core-TT-compare_Ord__Name arg-369 arg-370))) (lambda (arg-371) (lambda (arg-372) (Core-TT-C-60_Ord__Name arg-371 arg-372))) (lambda (arg-373) (lambda (arg-374) (Core-TT-C-62_Ord__Name arg-373 arg-374))) (lambda (arg-375) (lambda (arg-376) (Core-TT-C-60C-61_Ord__Name arg-375 arg-376))) (lambda (arg-377) (lambda (arg-378) (Core-TT-C-62C-61_Ord__Name arg-377 arg-378))) (lambda (arg-379) (lambda (arg-380) (Core-TT-max_Ord__Name arg-379 arg-380))) (lambda (arg-381) (lambda (arg-382) (Core-TT-min_Ord__Name arg-381 arg-382))))) (Data-SortedMap-empty 'erased 'erased (vector 0 (vector 0 (lambda (arg-2) (lambda (arg-3) (Prelude-EqOrd-C-61C-61_Eq__Int arg-2 arg-3))) (lambda (arg-4) (lambda (arg-5) (Prelude-EqOrd-C-47C-61_Eq__Int arg-4 arg-5)))) (lambda (arg-369) (lambda (arg-370) (Prelude-EqOrd-compare_Ord__Int arg-369 arg-370))) (lambda (arg-371) (lambda (arg-372) (Prelude-EqOrd-C-60_Ord__Int arg-371 arg-372))) (lambda (arg-373) (lambda (arg-374) (Prelude-EqOrd-C-62_Ord__Int arg-373 arg-374))) (lambda (arg-375) (lambda (arg-376) (Prelude-EqOrd-C-60C-61_Ord__Int arg-375 arg-376))) (lambda (arg-377) (lambda (arg-378) (Prelude-EqOrd-C-62C-61_Ord__Int arg-377 arg-378))) (lambda (arg-379) (lambda (arg-380) (Prelude-EqOrd-max_Ord__Int arg-379 arg-380))) (lambda (arg-381) (lambda (arg-382) (Prelude-EqOrd-min_Ord__Int arg-381 arg-382))))) 0 0)))
(define Core-UnifyState-UState-guesses (lambda (arg-0) (let ((sc0 arg-0)) (let ((e-1 (vector-ref sc0 2))) e-1))))
(define Core-UnifyState-genVarName (lambda (arg-0 arg-1 arg-2 ext-0) (let ((act-24 (let ((act-24 (unbox arg-1))) (vector 1 act-24)))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (let ((act-25 (let ((act-25 (set-box! arg-1 (let ((sc1 e-5)) (let ((e-0 (vector-ref sc1 1))) (let ((e-1 (vector-ref sc1 2))) (let ((e-2 (vector-ref sc1 3))) (let ((e-3 (vector-ref sc1 4))) (let ((e-4 (vector-ref sc1 5))) (vector 0 e-0 e-1 e-2 (b+ e-3 1 63) e-4)))))))))) (vector 1 act-25)))) (let ((sc1 act-25)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (vector 1 (vector 1 arg-2 (let ((sc2 e-5)) (let ((e-3 (vector-ref sc2 4))) e-3)))))))))))))))
(define Core-UnifyState-genName (lambda (arg-0 arg-1 ext-0) (let ((act-24 (let ((act-24 (unbox arg-0))) (vector 1 act-24)))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (let ((act-25 (let ((act-25 (set-box! arg-0 (let ((sc1 e-5)) (let ((e-0 (vector-ref sc1 1))) (let ((e-1 (vector-ref sc1 2))) (let ((e-2 (vector-ref sc1 3))) (let ((e-3 (vector-ref sc1 4))) (let ((e-4 (vector-ref sc1 5))) (vector 0 e-0 e-1 e-2 (b+ e-3 1 63) e-4)))))))))) (vector 1 act-25)))) (let ((sc1 act-25)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (vector 1 (vector 1 arg-1 (let ((sc2 e-5)) (let ((e-3 (vector-ref sc2 4))) e-3)))))))))))))))
(define Core-UnifyState-deleteConstraint (lambda (arg-0 arg-1 ext-0) (let ((act-24 (let ((act-24 (unbox arg-0))) (vector 1 act-24)))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (let ((act-25 (set-box! arg-0 (let ((sc1 e-5)) (let ((e-0 (vector-ref sc1 1))) (let ((e-1 (vector-ref sc1 2))) (let ((e-2 (vector-ref sc1 3))) (let ((e-3 (vector-ref sc1 4))) (let ((e-4 (vector-ref sc1 5))) (vector 0 e-0 e-1 (Data-SortedMap-delete 'erased 'erased arg-1 e-2) e-3 e-4)))))))))) (vector 1 act-25)))))))))
(define Core-UnifyState-UState-constraints (lambda (arg-0) (let ((sc0 arg-0)) (let ((e-2 (vector-ref sc0 3))) e-2))))
(define Core-UnifyState-addHoleName (lambda (arg-0 arg-1 ext-0) (let ((act-24 (let ((act-24 (unbox arg-0))) (vector 1 act-24)))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (let ((act-25 (set-box! arg-0 (let ((sc1 e-5)) (let ((e-0 (vector-ref sc1 1))) (let ((e-1 (vector-ref sc1 2))) (let ((e-2 (vector-ref sc1 3))) (let ((e-3 (vector-ref sc1 4))) (let ((e-4 (vector-ref sc1 5))) (vector 0 (Data-SortedSet-insert 'erased arg-1 e-0) e-1 e-2 e-3 e-4)))))))))) (vector 1 act-25)))))))))
(define Core-UnifyState-addGuessName (lambda (arg-0 arg-1 ext-0) (let ((act-24 (let ((act-24 (unbox arg-0))) (vector 1 act-24)))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (let ((act-25 (set-box! arg-0 (let ((sc1 e-5)) (let ((e-0 (vector-ref sc1 1))) (let ((e-1 (vector-ref sc1 2))) (let ((e-2 (vector-ref sc1 3))) (let ((e-3 (vector-ref sc1 4))) (let ((e-4 (vector-ref sc1 5))) (vector 0 e-0 (Data-SortedSet-insert 'erased arg-1 e-1) e-2 e-3 e-4)))))))))) (vector 1 act-25)))))))))
(define Core-UnifyState-addConstraint (lambda (arg-0 arg-1 ext-0) (let ((act-24 (let ((act-24 (unbox arg-0))) (vector 1 act-24)))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (let ((cid (let ((sc1 e-5)) (let ((e-4 (vector-ref sc1 5))) e-4)))) (let ((act-25 (let ((act-25 (set-box! arg-0 (let ((sc1 e-5)) (let ((e-0 (vector-ref sc1 1))) (let ((e-1 (vector-ref sc1 2))) (let ((e-2 (vector-ref sc1 3))) (let ((e-3 (vector-ref sc1 4))) (vector 0 e-0 e-1 (Data-SortedMap-insert 'erased 'erased cid arg-1 e-2) e-3 (b+ cid 1 63)))))))))) (vector 1 act-25)))) (let ((sc1 act-25)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (vector 1 cid)))))))))))))
(define Core-UnifyState-abstractEnvType (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-0)) (case (vector-ref sc0 0) ((0) (let ((sc1 arg-1)) arg-2)) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 arg-1)) (let ((e-8 (vector-ref sc1 1))) (let ((e-9 (vector-ref sc1 2))) (let ((sc2 e-8)) (case (vector-ref sc2 0) ((1) (let ((e-11 (vector-ref sc2 1))) (let ((e-12 (vector-ref sc2 2))) (let ((e-13 (vector-ref sc2 3))) (Core-UnifyState-abstractEnvType e-3 e-9 (vector 3 e-2 (vector 1 e-11 e-12 e-13) arg-2))))))(else (Core-UnifyState-abstractEnvType e-3 e-9 (vector 3 e-2 (vector 1 (vector 1 "_" 0) (vector 1 ) (Core-TT-binderType 'erased e-8)) arg-2)))))))))))))))
(define Data-SortedSet-case--toList-5203 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (let ((e-2 (vector-ref sc0 1))) e-2))))
(define Data-SortedSet-toList (lambda (arg-0 arg-1) (Prelude-Types-map_Functor__List 'erased 'erased (lambda (lamc-0) (let ((sc0 lamc-0)) (let ((e-2 (vector-ref sc0 1))) e-2))) (Data-SortedMap-toList 'erased 'erased arg-1))))
(define Data-SortedSet-insert (lambda (arg-0 arg-1 arg-2) (Data-SortedMap-insert 'erased 'erased arg-1 (vector 0 ) arg-2)))
(define Data-SortedSet-empty (lambda (arg-0 arg-1) (Data-SortedMap-empty 'erased 'erased arg-1)))
(define Data-SortedSet-delete (lambda (arg-0 arg-1 arg-2) (Data-SortedMap-delete 'erased 'erased arg-1 arg-2)))
(define Data-Maybe-isJust (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (case (vector-ref sc0 0) ((0) 1) (else 0)))))
(define Data-Maybe-fromMaybe (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((0) (arg-1)) (else (let ((e-2 (vector-ref sc0 1))) e-2))))))
(define Core-TT-with--withC-32blockC-32inC-32nameEq-2403 (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((0) (let ((e-1 (vector-ref sc0 1))) (let ((sc1 e-1)) (vector 1 (vector 0 ))))) (else (vector 0 ))))))
(define Core-TT-with--nameEq-2388 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((0) (let ((e-1 (vector-ref sc0 1))) (let ((sc1 e-1)) (Core-TT-with--withC-32blockC-32inC-32nameEq-2403 arg-4 arg-3 (Decidable-Equality-decEq_DecEq__Int arg-3 arg-4) arg-0)))) (else (vector 0 ))))))
(define Core-TT-with--nameEq-2361 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((0) (let ((e-1 (vector-ref sc0 1))) (let ((sc1 e-1)) (vector 1 (vector 0 ))))) (else (vector 0 ))))))
(define Core-TT-case--show-5338 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (Core-TT-n--5107-5057-showApp arg-0 arg-1 arg-0 e-2 e-3))))))
(define Core-TT-case--shrinkTerm-4814 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (let ((sc0 arg-6)) (case (vector-ref sc0 0) ((0) (vector 0 )) (else (let ((e-2 (vector-ref sc0 1))) (vector 1 (vector 0 e-2))))))))
(define Core-TT-case--subElem-4606 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10) (vector 1 (+ 1 arg-10))))
(define Core-TT-case--subElem-4524 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9) (vector 1 arg-9)))
(define Core-TT-case--substName-4318 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-5)) (case (vector-ref sc0 0) ((0) (vector 1 arg-2 arg-1)) (else (let ((e-2 (vector-ref sc0 1))) (let ((sc1 e-2)) arg-3)))))))
(define Core-TT-case--resolveNames-3969 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((1) (let ((e-1 (vector-ref sc0 1))) (vector 0 e-1)))(else (vector 1 (vector 1 ) arg-0))))))
(define Core-TT-case--mkLocals-3793 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (vector 0 arg-7)))
(define Core-TT-case--caseC-32blockC-32inC-32resolveRef-3683 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11) (vector 1 (vector 0 arg-11))))
(define Core-TT-case--resolveRef-3633 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9) (let ((sc0 arg-9)) (cond ((equal? sc0 0) (Core-TT-case--caseC-32blockC-32inC-32resolveRef-3683 'erased arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 'erased 'erased 'erased 'erased (Core-TT-weakenNVar 'erased 'erased (Prelude-Types-List-C-43C-43 'erased arg-6 arg-5) 0 'erased))) (else (Core-TT-resolveRef 'erased 'erased arg-6 (Prelude-Types-List-C-43C-43 'erased arg-5 (vector 1 arg-3 (vector 0 ))) arg-1 arg-4))))))
(define Core-TT-case--addVars-3577 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9) (+ 1 arg-9)))
(define Core-TT-case--insertNames-3282 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (vector 0 arg-6)))
(define Core-TT-case--insertNVarNames-3229 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (+ 1 arg-7)))
(define Core-TT-case--caseC-32blockC-32inC-32isVar-3118 (lambda (arg-0 arg-1 arg-2 arg-3) (Prelude-Types-pure_Applicative__Maybe 'erased (+ 1 arg-3))))
(define Core-TT-case--isVar-3099 (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((0) (Prelude-Types-C-62C-62C-61_Monad__Maybe 'erased 'erased (Core-TT-isVar arg-2 arg-1) (lambda (_-0) (Prelude-Types-pure_Applicative__Maybe 'erased (+ 1 _-0))))) (else (let ((e-2 (vector-ref sc0 1))) (let ((sc1 e-2)) (Prelude-Types-pure_Applicative__Maybe 'erased 0))))))))
(define Core-TT-case--weakenNVar-2797 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (+ 1 arg-6)))
(define Core-TT-case--compare-2584 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-4)) (cond ((equal? sc0 1) (Prelude-EqOrd-compare_Ord__Int arg-0 arg-2))(else arg-4)))))
(define Core-TT-case--max-2539 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (cond ((equal? sc0 0) arg-1) (else arg-0)))))
(define Core-TT-case--min-2525 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (cond ((equal? sc0 0) arg-1) (else arg-0)))))
(define Core-TT-n--5107-5057-showApp (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((0) (let ((e-3 (vector-ref sc0 1))) (let ((sc1 arg-4)) (case (vector-ref sc1 0) ((0) (Prelude-Types-Strings-C-43C-43 (Core-TT-show_Show__Name (Core-TT-nameAt 'erased arg-2 e-3 'erased)) (Prelude-Types-Strings-C-43C-43 "[" (Prelude-Types-Strings-C-43C-43 (Prelude-Show-show_Show__Nat e-3) "]"))))(else (let ((sc1 arg-4)) (case (vector-ref sc1 0) ((0) "???")(else (Prelude-Types-Strings-C-43C-43 "(" (Prelude-Types-Strings-C-43C-43 (Core-TT-show_Show__C-40TermC-32C-36varsC-41 arg-2 arg-3) (Prelude-Types-Strings-C-43C-43 " " (Prelude-Types-Strings-C-43C-43 (Core-TT-showSep " " (Prelude-Types-map_Functor__List 'erased 'erased (lambda (arg-5) (Core-TT-show_Show__C-40TermC-32C-36varsC-41 arg-2 arg-5)) arg-4)) ")")))))))))))) ((1) (let ((e-7 (vector-ref sc0 2))) (let ((sc1 arg-4)) (case (vector-ref sc1 0) ((0) (Core-TT-show_Show__Name e-7))(else (let ((sc1 arg-4)) (case (vector-ref sc1 0) ((0) "???")(else (Prelude-Types-Strings-C-43C-43 "(" (Prelude-Types-Strings-C-43C-43 (Core-TT-show_Show__C-40TermC-32C-36varsC-41 arg-2 arg-3) (Prelude-Types-Strings-C-43C-43 " " (Prelude-Types-Strings-C-43C-43 (Core-TT-showSep " " (Prelude-Types-map_Functor__List 'erased 'erased (lambda (arg-5) (Core-TT-show_Show__C-40TermC-32C-36varsC-41 arg-2 arg-5)) arg-4)) ")")))))))))))) ((2) (let ((e-9 (vector-ref sc0 1))) (let ((e-10 (vector-ref sc0 2))) (let ((sc1 arg-4)) (case (vector-ref sc1 0) ((0) (Prelude-Types-Strings-C-43C-43 "?" (Prelude-Types-Strings-C-43C-43 (Core-TT-show_Show__Name e-9) (Prelude-Types-Strings-C-43C-43 "_" (Prelude-Show-show_Show__C-40ListC-32C-36aC-41 'erased (vector 0 (lambda (x) (Core-TT-show_Show__C-40TermC-32C-36varsC-41 arg-2 x)) (lambda (d) (lambda (x) (Core-TT-showPrec_Show__C-40TermC-32C-36varsC-41 arg-2 d x)))) e-10)))))(else (let ((sc1 arg-4)) (case (vector-ref sc1 0) ((0) "???")(else (Prelude-Types-Strings-C-43C-43 "(" (Prelude-Types-Strings-C-43C-43 (Core-TT-show_Show__C-40TermC-32C-36varsC-41 arg-2 arg-3) (Prelude-Types-Strings-C-43C-43 " " (Prelude-Types-Strings-C-43C-43 (Core-TT-showSep " " (Prelude-Types-map_Functor__List 'erased 'erased (lambda (arg-5) (Core-TT-show_Show__C-40TermC-32C-36varsC-41 arg-2 arg-5)) arg-4)) ")"))))))))))))) ((3) (let ((e-12 (vector-ref sc0 1))) (let ((e-13 (vector-ref sc0 2))) (let ((e-14 (vector-ref sc0 3))) (let ((sc1 e-13)) (case (vector-ref sc1 0) ((0) (let ((e-26 (vector-ref sc1 3))) (let ((sc2 arg-4)) (case (vector-ref sc2 0) ((0) (Prelude-Types-Strings-C-43C-43 "Bind " (Prelude-Types-Strings-C-43C-43 (Core-TT-show_Show__Name e-12) (Prelude-Types-Strings-C-43C-43 " lam " (Prelude-Types-Strings-C-43C-43 " " (Prelude-Types-Strings-C-43C-43 (Core-TT-show_Show__C-40TermC-32C-36varsC-41 arg-2 e-26) (Prelude-Types-Strings-C-43C-43 " => " (Core-TT-show_Show__C-40TermC-32C-36varsC-41 (vector 1 e-12 arg-2) e-14))))))))(else (let ((sc2 arg-4)) (case (vector-ref sc2 0) ((0) "???")(else (Prelude-Types-Strings-C-43C-43 "(" (Prelude-Types-Strings-C-43C-43 (Core-TT-show_Show__C-40TermC-32C-36varsC-41 arg-2 arg-3) (Prelude-Types-Strings-C-43C-43 " " (Prelude-Types-Strings-C-43C-43 (Core-TT-showSep " " (Prelude-Types-map_Functor__List 'erased 'erased (lambda (arg-5) (Core-TT-show_Show__C-40TermC-32C-36varsC-41 arg-2 arg-5)) arg-4)) ")")))))))))))) ((1) (let ((e-29 (vector-ref sc1 2))) (let ((e-30 (vector-ref sc1 3))) (let ((sc2 e-29)) (case (vector-ref sc2 0) ((1) (let ((sc3 arg-4)) (case (vector-ref sc3 0) ((0) (Prelude-Types-Strings-C-43C-43 "(bind " (Prelude-Types-Strings-C-43C-43 (Core-TT-show_Show__Name e-12) (Prelude-Types-Strings-C-43C-43 " (pi exp " (Prelude-Types-Strings-C-43C-43 (Core-TT-show_Show__C-40TermC-32C-36varsC-41 arg-2 e-30) (Prelude-Types-Strings-C-43C-43 ") -> " (Prelude-Types-Strings-C-43C-43 (Core-TT-show_Show__C-40TermC-32C-36varsC-41 (vector 1 e-12 arg-2) e-14) ")")))))))(else (let ((sc3 arg-4)) (case (vector-ref sc3 0) ((0) "???")(else (Prelude-Types-Strings-C-43C-43 "(" (Prelude-Types-Strings-C-43C-43 (Core-TT-show_Show__C-40TermC-32C-36varsC-41 arg-2 arg-3) (Prelude-Types-Strings-C-43C-43 " " (Prelude-Types-Strings-C-43C-43 (Core-TT-showSep " " (Prelude-Types-map_Functor__List 'erased 'erased (lambda (arg-5) (Core-TT-show_Show__C-40TermC-32C-36varsC-41 arg-2 arg-5)) arg-4)) ")"))))))))))) ((0) (let ((sc3 arg-4)) (case (vector-ref sc3 0) ((0) (Prelude-Types-Strings-C-43C-43 "{bind" (Prelude-Types-Strings-C-43C-43 (Core-TT-show_Show__Name e-12) (Prelude-Types-Strings-C-43C-43 " pi imp " (Prelude-Types-Strings-C-43C-43 (Core-TT-show_Show__C-40TermC-32C-36varsC-41 arg-2 e-30) (Prelude-Types-Strings-C-43C-43 "} -> " (Core-TT-show_Show__C-40TermC-32C-36varsC-41 (vector 1 e-12 arg-2) e-14)))))))(else (let ((sc3 arg-4)) (case (vector-ref sc3 0) ((0) "???")(else (Prelude-Types-Strings-C-43C-43 "(" (Prelude-Types-Strings-C-43C-43 (Core-TT-show_Show__C-40TermC-32C-36varsC-41 arg-2 arg-3) (Prelude-Types-Strings-C-43C-43 " " (Prelude-Types-Strings-C-43C-43 (Core-TT-showSep " " (Prelude-Types-map_Functor__List 'erased 'erased (lambda (arg-5) (Core-TT-show_Show__C-40TermC-32C-36varsC-41 arg-2 arg-5)) arg-4)) ")")))))))))))(else (let ((sc2 arg-4)) (case (vector-ref sc2 0) ((0) "???")(else (Prelude-Types-Strings-C-43C-43 "(" (Prelude-Types-Strings-C-43C-43 (Core-TT-show_Show__C-40TermC-32C-36varsC-41 arg-2 arg-3) (Prelude-Types-Strings-C-43C-43 " " (Prelude-Types-Strings-C-43C-43 (Core-TT-showSep " " (Prelude-Types-map_Functor__List 'erased 'erased (lambda (arg-5) (Core-TT-show_Show__C-40TermC-32C-36varsC-41 arg-2 arg-5)) arg-4)) ")"))))))))))))) ((2) (let ((e-33 (vector-ref sc1 2))) (let ((sc2 arg-4)) (case (vector-ref sc2 0) ((0) (Prelude-Types-Strings-C-43C-43 "bind pat " (Prelude-Types-Strings-C-43C-43 (Core-TT-show_Show__Name e-12) (Prelude-Types-Strings-C-43C-43 " pvar " (Prelude-Types-Strings-C-43C-43 (Core-TT-show_Show__C-40TermC-32C-36varsC-41 arg-2 e-33) (Prelude-Types-Strings-C-43C-43 " => " (Core-TT-show_Show__C-40TermC-32C-36varsC-41 (vector 1 e-12 arg-2) e-14)))))))(else (let ((sc2 arg-4)) (case (vector-ref sc2 0) ((0) "???")(else (Prelude-Types-Strings-C-43C-43 "(" (Prelude-Types-Strings-C-43C-43 (Core-TT-show_Show__C-40TermC-32C-36varsC-41 arg-2 arg-3) (Prelude-Types-Strings-C-43C-43 " " (Prelude-Types-Strings-C-43C-43 (Core-TT-showSep " " (Prelude-Types-map_Functor__List 'erased 'erased (lambda (arg-5) (Core-TT-show_Show__C-40TermC-32C-36varsC-41 arg-2 arg-5)) arg-4)) ")")))))))))))) ((3) (let ((e-35 (vector-ref sc1 1))) (let ((sc2 arg-4)) (case (vector-ref sc2 0) ((0) (Prelude-Types-Strings-C-43C-43 "bind pty " (Prelude-Types-Strings-C-43C-43 (Core-TT-show_Show__Name e-12) (Prelude-Types-Strings-C-43C-43 " pty " (Prelude-Types-Strings-C-43C-43 (Core-TT-show_Show__C-40TermC-32C-36varsC-41 arg-2 e-35) (Prelude-Types-Strings-C-43C-43 " => " (Core-TT-show_Show__C-40TermC-32C-36varsC-41 (vector 1 e-12 arg-2) e-14)))))))(else (let ((sc2 arg-4)) (case (vector-ref sc2 0) ((0) "???")(else (Prelude-Types-Strings-C-43C-43 "(" (Prelude-Types-Strings-C-43C-43 (Core-TT-show_Show__C-40TermC-32C-36varsC-41 arg-2 arg-3) (Prelude-Types-Strings-C-43C-43 " " (Prelude-Types-Strings-C-43C-43 (Core-TT-showSep " " (Prelude-Types-map_Functor__List 'erased 'erased (lambda (arg-5) (Core-TT-show_Show__C-40TermC-32C-36varsC-41 arg-2 arg-5)) arg-4)) ")"))))))))))))(else (let ((sc1 arg-4)) (case (vector-ref sc1 0) ((0) "???")(else (Prelude-Types-Strings-C-43C-43 "(" (Prelude-Types-Strings-C-43C-43 (Core-TT-show_Show__C-40TermC-32C-36varsC-41 arg-2 arg-3) (Prelude-Types-Strings-C-43C-43 " " (Prelude-Types-Strings-C-43C-43 (Core-TT-showSep " " (Prelude-Types-map_Functor__List 'erased 'erased (lambda (arg-5) (Core-TT-show_Show__C-40TermC-32C-36varsC-41 arg-2 arg-5)) arg-4)) ")")))))))))))))) ((4) (let ((sc1 arg-4)) (case (vector-ref sc1 0) ((0) "[can't happen]")(else (let ((sc1 arg-4)) (case (vector-ref sc1 0) ((0) "???")(else (Prelude-Types-Strings-C-43C-43 "(" (Prelude-Types-Strings-C-43C-43 (Core-TT-show_Show__C-40TermC-32C-36varsC-41 arg-2 arg-3) (Prelude-Types-Strings-C-43C-43 " " (Prelude-Types-Strings-C-43C-43 (Core-TT-showSep " " (Prelude-Types-map_Functor__List 'erased 'erased (lambda (arg-5) (Core-TT-show_Show__C-40TermC-32C-36varsC-41 arg-2 arg-5)) arg-4)) ")"))))))))))) ((5) (let ((sc1 arg-4)) (case (vector-ref sc1 0) ((0) "Type")(else (let ((sc1 arg-4)) (case (vector-ref sc1 0) ((0) "???")(else (Prelude-Types-Strings-C-43C-43 "(" (Prelude-Types-Strings-C-43C-43 (Core-TT-show_Show__C-40TermC-32C-36varsC-41 arg-2 arg-3) (Prelude-Types-Strings-C-43C-43 " " (Prelude-Types-Strings-C-43C-43 (Core-TT-showSep " " (Prelude-Types-map_Functor__List 'erased 'erased (lambda (arg-5) (Core-TT-show_Show__C-40TermC-32C-36varsC-41 arg-2 arg-5)) arg-4)) ")"))))))))))) ((6) (let ((sc1 arg-4)) (case (vector-ref sc1 0) ((0) "[_]")(else (let ((sc1 arg-4)) (case (vector-ref sc1 0) ((0) "???")(else (Prelude-Types-Strings-C-43C-43 "(" (Prelude-Types-Strings-C-43C-43 (Core-TT-show_Show__C-40TermC-32C-36varsC-41 arg-2 arg-3) (Prelude-Types-Strings-C-43C-43 " " (Prelude-Types-Strings-C-43C-43 (Core-TT-showSep " " (Prelude-Types-map_Functor__List 'erased 'erased (lambda (arg-5) (Core-TT-show_Show__C-40TermC-32C-36varsC-41 arg-2 arg-5)) arg-4)) ")")))))))))))(else (let ((sc0 arg-4)) (case (vector-ref sc0 0) ((0) "???")(else (Prelude-Types-Strings-C-43C-43 "(" (Prelude-Types-Strings-C-43C-43 (Core-TT-show_Show__C-40TermC-32C-36varsC-41 arg-2 arg-3) (Prelude-Types-Strings-C-43C-43 " " (Prelude-Types-Strings-C-43C-43 (Core-TT-showSep " " (Prelude-Types-map_Functor__List 'erased 'erased (lambda (arg-5) (Core-TT-show_Show__C-40TermC-32C-36varsC-41 arg-2 arg-5)) arg-4)) ")"))))))))))))
(define Core-TT-n--2898-3076-getFA (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((4) (let ((e-1 (vector-ref sc0 1))) (let ((e-2 (vector-ref sc0 2))) (Core-TT-n--2898-3076-getFA 'erased arg-1 (vector 1 e-2 arg-2) e-1))))(else (vector 0 arg-3 arg-2))))))
(define Core-TT-weaken_Weaken__Var (lambda (arg-0 arg-1 arg-2) (+ 1 arg-2)))
(define Core-TT-weaken_Weaken__Term (lambda (arg-0 arg-1 ext-0) (Core-TT-weakenNs_Weaken__Term arg-1 (vector 1 arg-0 (vector 0 )) ext-0)))
(define Core-TT-weakenNs_Weaken__Var (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-1)) (case (vector-ref sc0 0) ((0) arg-2) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (Core-TT-weaken_Weaken__Var e-2 (Prelude-Types-List-C-43C-43 'erased e-3 arg-0) (Core-TT-weakenNs_Weaken__Var arg-0 e-3 arg-2)))))))))
(define Core-TT-weakenNs_Weaken__Term (lambda (arg-0 arg-1 arg-2) (Core-TT-insertNames (vector 0 ) arg-0 arg-1 arg-2)))
(define Core-TT-show_Show__NameType (lambda (arg-0) (let ((sc0 arg-0)) (case (vector-ref sc0 0) ((0) "Func") ((2) (let ((e-0 (vector-ref sc0 1))) (let ((e-1 (vector-ref sc0 2))) (Prelude-Types-Strings-C-43C-43 "DataCon " (Prelude-Show-show_Show__C-40C-124C-40C-40BuiltinC-46PairC-32C-36aC-41C-32C-36bC-41C-44C-40C-40BuiltinC-46MkPairC-32C-36aC-41C-32C-36bC-41C-124C-41 'erased 'erased (vector 0 (vector 0 (lambda (x) (Prelude-Show-show_Show__Int x)) (lambda (d) (lambda (x) (Prelude-Show-showPrec_Show__Int d x)))) (vector 0 (lambda (x) (Prelude-Show-show_Show__Nat x)) (lambda (d) (lambda (x) (Prelude-Show-showPrec_Show__Nat d x))))) (vector 0 e-0 e-1)))))) ((3) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (Prelude-Types-Strings-C-43C-43 "TyCon " (Prelude-Show-show_Show__C-40C-124C-40C-40BuiltinC-46PairC-32C-36aC-41C-32C-36bC-41C-44C-40C-40BuiltinC-46MkPairC-32C-36aC-41C-32C-36bC-41C-124C-41 'erased 'erased (vector 0 (vector 0 (lambda (x) (Prelude-Show-show_Show__Int x)) (lambda (d) (lambda (x) (Prelude-Show-showPrec_Show__Int d x)))) (vector 0 (lambda (x) (Prelude-Show-show_Show__Nat x)) (lambda (d) (lambda (x) (Prelude-Show-showPrec_Show__Nat d x))))) (vector 0 e-2 e-3)))))) (else "Bound")))))
(define Core-TT-show_Show__Name (lambda (arg-0) (let ((sc0 arg-0)) (case (vector-ref sc0 0) ((0) (let ((e-0 (vector-ref sc0 1))) e-0)) (else (let ((e-1 (vector-ref sc0 1))) (let ((e-2 (vector-ref sc0 2))) (Prelude-Types-Strings-C-43C-43 "{" (Prelude-Types-Strings-C-43C-43 e-1 (Prelude-Types-Strings-C-43C-43 ":" (Prelude-Types-Strings-C-43C-43 (Prelude-Show-show_Show__Int e-2) "}")))))))))))
(define Core-TT-show_Show__C-40TermC-32C-36varsC-41 (lambda (arg-0 arg-1) (Core-TT-case--show-5338 arg-0 arg-1 (Core-TT-getFnArgs 'erased arg-1))))
(define Core-TT-showPrec_Show__NameType (lambda (arg-0 arg-1) (Core-TT-show_Show__NameType arg-1)))
(define Core-TT-showPrec_Show__Name (lambda (arg-0 arg-1) (Core-TT-show_Show__Name arg-1)))
(define Core-TT-showPrec_Show__C-40TermC-32C-36varsC-41 (lambda (arg-0 arg-1 arg-2) (Core-TT-show_Show__C-40TermC-32C-36varsC-41 arg-0 arg-2)))
(define Core-TT-min_Ord__Name (lambda (arg-0 arg-1) (Core-TT-case--min-2525 arg-1 arg-0 (Core-TT-C-60_Ord__Name arg-0 arg-1))))
(define Core-TT-max_Ord__Name (lambda (arg-0 arg-1) (Core-TT-case--max-2539 arg-1 arg-0 (Core-TT-C-62_Ord__Name arg-0 arg-1))))
(define Core-TT-map_Functor__Binder (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((0) (let ((e-1 (vector-ref sc0 1))) (let ((e-2 (vector-ref sc0 2))) (let ((e-3 (vector-ref sc0 3))) (vector 0 e-1 e-2 (arg-2 e-3)))))) ((1) (let ((e-5 (vector-ref sc0 1))) (let ((e-6 (vector-ref sc0 2))) (let ((e-7 (vector-ref sc0 3))) (vector 1 e-5 e-6 (arg-2 e-7)))))) ((2) (let ((e-9 (vector-ref sc0 1))) (let ((e-10 (vector-ref sc0 2))) (vector 2 e-9 (arg-2 e-10))))) (else (let ((e-12 (vector-ref sc0 1))) (vector 3 (arg-2 e-12))))))))
(define Core-TT-compare_Ord__Name (lambda (arg-0 arg-1) (let ((sc0 arg-0)) (case (vector-ref sc0 0) ((0) (let ((e-0 (vector-ref sc0 1))) (let ((sc1 arg-1)) (case (vector-ref sc1 0) ((0) (let ((e-3 (vector-ref sc1 1))) (Prelude-EqOrd-compare_Ord__String e-0 e-3)))(else (Prelude-EqOrd-compare_Ord__Int (Core-TT-nameTag arg-0) (Core-TT-nameTag arg-1))))))) ((1) (let ((e-1 (vector-ref sc0 1))) (let ((e-2 (vector-ref sc0 2))) (let ((sc1 arg-1)) (case (vector-ref sc1 0) ((1) (let ((e-4 (vector-ref sc1 1))) (let ((e-5 (vector-ref sc1 2))) (Core-TT-case--compare-2584 e-2 e-1 e-5 e-4 (Prelude-EqOrd-compare_Ord__String e-1 e-4)))))(else (Prelude-EqOrd-compare_Ord__Int (Core-TT-nameTag arg-0) (Core-TT-nameTag arg-1))))))))(else (Prelude-EqOrd-compare_Ord__Int (Core-TT-nameTag arg-0) (Core-TT-nameTag arg-1)))))))
(define Core-TT-__Impl_Weaken_Var (lambda () (vector 0 (lambda (n) (lambda (vars) (lambda (arg-2952) (Core-TT-weaken_Weaken__Var n vars arg-2952)))) (lambda (vars) (lambda (ns) (lambda (arg-2956) (Core-TT-weakenNs_Weaken__Var vars ns arg-2956)))))))
(define Core-TT-__Impl_Weaken_Term (lambda () (vector 0 (lambda (n) (lambda (vars) (lambda (arg-2952) (Core-TT-weaken_Weaken__Term n vars arg-2952)))) (lambda (vars) (lambda (ns) (lambda (arg-2956) (Core-TT-weakenNs_Weaken__Term vars ns arg-2956)))))))
(define Core-TT-__Impl_Show_NameType (lambda () (vector 0 (lambda (x) (Core-TT-show_Show__NameType x)) (lambda (d) (lambda (x) (Core-TT-showPrec_Show__NameType d x))))))
(define Core-TT-__Impl_Show_Name (lambda () (vector 0 (lambda (x) (Core-TT-show_Show__Name x)) (lambda (d) (lambda (x) (Core-TT-showPrec_Show__Name d x))))))
(define Core-TT-__Impl_Show_C-40TermC-32C-36varsC-41 (lambda (arg-0) (vector 0 (lambda (x) (Core-TT-show_Show__C-40TermC-32C-36varsC-41 arg-0 x)) (lambda (d) (lambda (x) (Core-TT-showPrec_Show__C-40TermC-32C-36varsC-41 arg-0 d x))))))
(define Core-TT-__Impl_Ord_Name (lambda () (vector 0 (vector 0 (lambda (arg-2) (lambda (arg-3) (Core-TT-C-61C-61_Eq__Name arg-2 arg-3))) (lambda (arg-4) (lambda (arg-5) (Core-TT-C-47C-61_Eq__Name arg-4 arg-5)))) (lambda (arg-369) (lambda (arg-370) (Core-TT-compare_Ord__Name arg-369 arg-370))) (lambda (arg-371) (lambda (arg-372) (Core-TT-C-60_Ord__Name arg-371 arg-372))) (lambda (arg-373) (lambda (arg-374) (Core-TT-C-62_Ord__Name arg-373 arg-374))) (lambda (arg-375) (lambda (arg-376) (Core-TT-C-60C-61_Ord__Name arg-375 arg-376))) (lambda (arg-377) (lambda (arg-378) (Core-TT-C-62C-61_Ord__Name arg-377 arg-378))) (lambda (arg-379) (lambda (arg-380) (Core-TT-max_Ord__Name arg-379 arg-380))) (lambda (arg-381) (lambda (arg-382) (Core-TT-min_Ord__Name arg-381 arg-382))))))
(define Core-TT-__Impl_Functor_Binder (lambda (ext-0 ext-1 ext-2 ext-3) (Core-TT-map_Functor__Binder 'erased 'erased ext-2 ext-3)))
(define Core-TT-__Impl_Eq_Name (lambda () (vector 0 (lambda (arg-2) (lambda (arg-3) (Core-TT-C-61C-61_Eq__Name arg-2 arg-3))) (lambda (arg-4) (lambda (arg-5) (Core-TT-C-47C-61_Eq__Name arg-4 arg-5))))))
(define Core-TT-C-62_Ord__Name (lambda (arg-0 arg-1) (Prelude-EqOrd-C-61C-61_Eq__Ordering (Core-TT-compare_Ord__Name arg-0 arg-1) 2)))
(define Core-TT-C-62C-61_Ord__Name (lambda (arg-0 arg-1) (Prelude-EqOrd-C-47C-61_Eq__Ordering (Core-TT-compare_Ord__Name arg-0 arg-1) 0)))
(define Core-TT-C-61C-61_Eq__Name (lambda (arg-0 arg-1) (let ((sc0 arg-0)) (case (vector-ref sc0 0) ((0) (let ((e-0 (vector-ref sc0 1))) (let ((sc1 arg-1)) (case (vector-ref sc1 0) ((0) (let ((e-3 (vector-ref sc1 1))) (Prelude-EqOrd-C-61C-61_Eq__String e-0 e-3)))(else 1))))) ((1) (let ((e-1 (vector-ref sc0 1))) (let ((e-2 (vector-ref sc0 2))) (let ((sc1 arg-1)) (case (vector-ref sc1 0) ((1) (let ((e-4 (vector-ref sc1 1))) (let ((e-5 (vector-ref sc1 2))) (Prelude-Basics-C-38C-38 (Prelude-EqOrd-C-61C-61_Eq__Int e-2 e-5) (lambda () (Prelude-EqOrd-C-61C-61_Eq__String e-1 e-4))))))(else 1))))))(else 1)))))
(define Core-TT-C-60_Ord__Name (lambda (arg-0 arg-1) (Prelude-EqOrd-C-61C-61_Eq__Ordering (Core-TT-compare_Ord__Name arg-0 arg-1) 0)))
(define Core-TT-C-60C-61_Ord__Name (lambda (arg-0 arg-1) (Prelude-EqOrd-C-47C-61_Eq__Ordering (Core-TT-compare_Ord__Name arg-0 arg-1) 2)))
(define Core-TT-C-47C-61_Eq__Name (lambda (arg-0 arg-1) (Prelude-Basics-not (Core-TT-C-61C-61_Eq__Name arg-0 arg-1))))
(define Core-TT-weakenNs (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (let ((e-2 (vector-ref sc0 2))) (lambda (arg-3) (lambda (arg-4) (((e-2 arg-1) arg-3) arg-4)))))))
(define Core-TT-weakenNVar (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((0) arg-3) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (Core-TT-case--weakenNVar-2797 'erased 'erased arg-3 e-2 e-3 'erased (Core-TT-weakenNVar 'erased 'erased e-3 arg-3 'erased)))))))))
(define Core-TT-weaken (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (let ((e-1 (vector-ref sc0 1))) (lambda (arg-4) (((e-1 arg-1) arg-2) arg-4))))))
(define Core-TT-SubstEnv-substs (lambda (arg-0 arg-1 arg-2 arg-3) (Core-TT-SubstEnv-substEnv arg-0 arg-1 (vector 0 ) arg-2 arg-3)))
(define Core-TT-substName (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((1) (let ((e-1 (vector-ref sc0 1))) (let ((e-2 (vector-ref sc0 2))) (Core-TT-case--substName-4318 arg-0 e-2 e-1 arg-2 arg-1 (Core-TT-nameEq arg-1 e-2))))) ((2) (let ((e-4 (vector-ref sc0 1))) (let ((e-5 (vector-ref sc0 2))) (vector 2 e-4 (Prelude-Types-map_Functor__List 'erased 'erased (lambda (eta-0) (Core-TT-substName arg-0 arg-1 arg-2 eta-0)) e-5))))) ((3) (let ((e-7 (vector-ref sc0 1))) (let ((e-8 (vector-ref sc0 2))) (let ((e-9 (vector-ref sc0 3))) (vector 3 e-7 (Core-TT-map_Functor__Binder 'erased 'erased (lambda (eta-0) (Core-TT-substName arg-0 arg-1 arg-2 eta-0)) e-8) (Core-TT-substName (vector 1 e-7 arg-0) arg-1 (Core-TT-weaken_Weaken__Term e-7 arg-0 arg-2) e-9)))))) ((4) (let ((e-11 (vector-ref sc0 1))) (let ((e-12 (vector-ref sc0 2))) (vector 4 (Core-TT-substName arg-0 arg-1 arg-2 e-11) (Core-TT-substName arg-0 arg-1 arg-2 e-12)))))(else arg-3)))))
(define Core-TT-SubstEnv-substEnv (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-4)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (Core-TT-SubstEnv-find 'erased arg-0 arg-1 arg-2 e-2 'erased arg-3))) ((1) (let ((e-5 (vector-ref sc0 1))) (let ((e-6 (vector-ref sc0 2))) (vector 1 e-5 e-6)))) ((2) (let ((e-8 (vector-ref sc0 1))) (let ((e-9 (vector-ref sc0 2))) (vector 2 e-8 (Prelude-Types-map_Functor__List 'erased 'erased (lambda (eta-0) (Core-TT-SubstEnv-substEnv arg-0 arg-1 arg-2 arg-3 eta-0)) e-9))))) ((3) (let ((e-11 (vector-ref sc0 1))) (let ((e-12 (vector-ref sc0 2))) (let ((e-13 (vector-ref sc0 3))) (vector 3 e-11 (Core-TT-map_Functor__Binder 'erased 'erased (lambda (eta-0) (Core-TT-SubstEnv-substEnv arg-0 arg-1 arg-2 arg-3 eta-0)) e-12) (Core-TT-SubstEnv-substEnv arg-0 arg-1 (vector 1 e-11 arg-2) arg-3 e-13)))))) ((4) (let ((e-15 (vector-ref sc0 1))) (let ((e-16 (vector-ref sc0 2))) (vector 4 (Core-TT-SubstEnv-substEnv arg-0 arg-1 arg-2 arg-3 e-15) (Core-TT-SubstEnv-substEnv arg-0 arg-1 arg-2 arg-3 e-16))))) ((6) (vector 6 )) (else (vector 5 ))))))
(define Core-TT-subElem (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-5)) (case (vector-ref sc0 0) ((0) (vector 1 arg-3))(else (let ((sc0 arg-3)) (cond ((equal? sc0 0) (let ((sc1 arg-5)) (case (vector-ref sc1 0) ((1) (vector 0 )) (else (vector 1 0)))))(else (let ((e-0 (- arg-3 1))) (let ((sc0 arg-5)) (case (vector-ref sc0 0) ((1) (let ((e-12 (vector-ref sc0 1))) (Prelude-Types-C-62C-62C-61_Monad__Maybe 'erased 'erased (Core-TT-subElem 'erased 'erased 'erased e-0 'erased e-12) (lambda (_-0) (vector 1 _-0))))) (else (let ((e-16 (vector-ref sc0 1))) (Prelude-Types-C-62C-62C-61_Monad__Maybe 'erased 'erased (Core-TT-subElem 'erased 'erased 'erased e-0 'erased e-16) (lambda (_-0) (vector 1 (+ 1 _-0)))))))))))))))))
(define Core-TT-shrinkTerm (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (Core-TT-case--shrinkTerm-4814 'erased 'erased 'erased e-2 'erased arg-3 (Core-TT-subElem 'erased 'erased 'erased e-2 'erased arg-3)))) ((1) (let ((e-5 (vector-ref sc0 1))) (let ((e-6 (vector-ref sc0 2))) (vector 1 (vector 1 e-5 e-6))))) ((2) (let ((e-8 (vector-ref sc0 1))) (let ((e-9 (vector-ref sc0 2))) (Prelude-Types-C-62C-62C-61_Monad__Maybe 'erased 'erased (Prelude-Types-traverse_Traversable__List 'erased 'erased 'erased (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-62) (Prelude-Types-map_Functor__Maybe 'erased 'erased func arg-62))))) (lambda (a) (lambda (arg-172) (Prelude-Types-pure_Applicative__Maybe 'erased arg-172))) (lambda (b) (lambda (a) (lambda (arg-173) (lambda (arg-175) (Prelude-Types-C-60C-42C-62_Applicative__Maybe 'erased 'erased arg-173 arg-175)))))) (lambda (x) (Core-TT-shrinkTerm 'erased 'erased x arg-3)) e-9) (lambda (xsC-39) (vector 1 (vector 2 e-8 xsC-39))))))) ((3) (let ((e-11 (vector-ref sc0 1))) (let ((e-12 (vector-ref sc0 2))) (let ((e-13 (vector-ref sc0 3))) (Prelude-Types-C-62C-62C-61_Monad__Maybe 'erased 'erased (Core-TT-shrinkBinder 'erased 'erased e-12 arg-3) (lambda (bind-0) (Prelude-Types-C-62C-62C-61_Monad__Maybe 'erased 'erased (Core-TT-shrinkTerm 'erased 'erased e-13 (vector 2 arg-3)) (lambda (bind-1) (vector 1 (vector 3 e-11 bind-0 bind-1)))))))))) ((4) (let ((e-15 (vector-ref sc0 1))) (let ((e-16 (vector-ref sc0 2))) (Prelude-Types-C-62C-62C-61_Monad__Maybe 'erased 'erased (Core-TT-shrinkTerm 'erased 'erased e-15 arg-3) (lambda (bind-0) (Prelude-Types-C-62C-62C-61_Monad__Maybe 'erased 'erased (Core-TT-shrinkTerm 'erased 'erased e-16 arg-3) (lambda (bind-1) (vector 1 (vector 4 bind-0 bind-1))))))))) ((6) (vector 1 (vector 6 ))) (else (vector 1 (vector 5 )))))))
(define Core-TT-shrinkBinder (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((0) (let ((e-1 (vector-ref sc0 1))) (let ((e-2 (vector-ref sc0 2))) (let ((e-3 (vector-ref sc0 3))) (Prelude-Types-C-62C-62C-61_Monad__Maybe 'erased 'erased (Core-TT-shrinkTerm 'erased 'erased e-3 arg-3) (lambda (bind-0) (vector 1 (vector 0 e-1 e-2 bind-0)))))))) ((1) (let ((e-5 (vector-ref sc0 1))) (let ((e-6 (vector-ref sc0 2))) (let ((e-7 (vector-ref sc0 3))) (Prelude-Types-C-62C-62C-61_Monad__Maybe 'erased 'erased (Core-TT-shrinkTerm 'erased 'erased e-7 arg-3) (lambda (bind-0) (vector 1 (vector 1 e-5 e-6 bind-0)))))))) ((2) (let ((e-9 (vector-ref sc0 1))) (let ((e-10 (vector-ref sc0 2))) (Prelude-Types-C-62C-62C-61_Monad__Maybe 'erased 'erased (Core-TT-shrinkTerm 'erased 'erased e-10 arg-3) (lambda (bind-0) (vector 1 (vector 2 e-9 bind-0))))))) (else (let ((e-12 (vector-ref sc0 1))) (Prelude-Types-C-62C-62C-61_Monad__Maybe 'erased 'erased (Core-TT-shrinkTerm 'erased 'erased e-12 arg-3) (lambda (bind-0) (vector 1 (vector 3 bind-0))))))))))
(define Core-TT-showSep (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (case (vector-ref sc0 0) ((0) "") (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 e-3)) (case (vector-ref sc1 0) ((0) e-2)(else (Prelude-Types-Strings-C-43C-43 e-2 (Prelude-Types-Strings-C-43C-43 arg-0 (Core-TT-showSep arg-0 e-3)))))))))))))
(define Core-TT-resolveRef (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-4)) (case (vector-ref sc0 0) ((0) (vector 0 )) (else (let ((e-1 (vector-ref sc0 1))) (let ((e-2 (vector-ref sc0 2))) (let ((e-3 (vector-ref sc0 3))) (Core-TT-case--resolveRef-3633 'erased e-3 e-2 e-1 arg-5 arg-3 arg-2 'erased 'erased (Core-TT-C-61C-61_Eq__Name arg-5 e-2))))))))))
(define Core-TT-resolveNames (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (case (vector-ref sc0 0) ((1) (let ((e-1 (vector-ref sc0 1))) (let ((e-2 (vector-ref sc0 2))) (let ((sc1 e-1)) (case (vector-ref sc1 0) ((1) (Core-TT-case--resolveNames-3969 e-2 arg-0 (Core-TT-isVar e-2 arg-0)))(else arg-1)))))) ((2) (let ((e-4 (vector-ref sc0 1))) (let ((e-5 (vector-ref sc0 2))) (vector 2 e-4 (Prelude-Types-map_Functor__List 'erased 'erased (lambda (eta-0) (Core-TT-resolveNames arg-0 eta-0)) e-5))))) ((3) (let ((e-7 (vector-ref sc0 1))) (let ((e-8 (vector-ref sc0 2))) (let ((e-9 (vector-ref sc0 3))) (vector 3 e-7 (Core-TT-map_Functor__Binder 'erased 'erased (lambda (eta-0) (Core-TT-resolveNames arg-0 eta-0)) e-8) (Core-TT-resolveNames (vector 1 e-7 arg-0) e-9)))))) ((4) (let ((e-11 (vector-ref sc0 1))) (let ((e-12 (vector-ref sc0 2))) (vector 4 (Core-TT-resolveNames arg-0 e-11) (Core-TT-resolveNames arg-0 e-12)))))(else arg-1)))))
(define Core-TT-renameVars (lambda (arg-0 arg-1 arg-2 arg-3) (Builtin-believe_me 'erased 'erased arg-3)))
(define Core-TT-renameTop (lambda (arg-0 arg-1 arg-2 arg-3) (Core-TT-renameVars 'erased 'erased (vector 1 (vector 0 )) arg-3)))
(define Core-TT-refsToLocals (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-1)) (case (vector-ref sc0 0) ((0) (let ((sc1 arg-2)) (case (vector-ref sc1 0) ((0) arg-3)(else (Core-TT-mkLocals 'erased (vector 0 ) arg-1 arg-2 arg-3)))))(else (Core-TT-mkLocals 'erased (vector 0 ) arg-1 arg-2 arg-3))))))
(define Core-TT-nameTag (lambda (arg-0) (let ((sc0 arg-0)) (case (vector-ref sc0 0) ((0) 0) (else 1)))))
(define Core-TT-nameEq (lambda (arg-0 arg-1) (let ((sc0 arg-0)) (case (vector-ref sc0 0) ((0) (let ((e-0 (vector-ref sc0 1))) (let ((sc1 arg-1)) (case (vector-ref sc1 0) ((0) (let ((e-3 (vector-ref sc1 1))) (Core-TT-with--nameEq-2361 e-0 e-3 (Decidable-Equality-decEq_DecEq__String e-0 e-3))))(else (vector 0 )))))) ((1) (let ((e-1 (vector-ref sc0 1))) (let ((e-2 (vector-ref sc0 2))) (let ((sc1 arg-1)) (case (vector-ref sc1 0) ((1) (let ((e-4 (vector-ref sc1 1))) (let ((e-5 (vector-ref sc1 2))) (Core-TT-with--nameEq-2388 e-1 e-4 (Decidable-Equality-decEq_DecEq__String e-1 e-4) e-2 e-5))))(else (vector 0 )))))))(else (vector 0 ))))))
(define Core-TT-nameAt (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-1)) (let ((e-1 (vector-ref sc0 1))) (let ((e-2 (vector-ref sc0 2))) (let ((sc1 arg-2)) (cond ((equal? sc1 0) e-1)(else (let ((e-3 (- arg-2 1))) (Core-TT-nameAt 'erased e-2 e-3 'erased))))))))))
(define Core-TT-mkLocals (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-4)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (Core-TT-case--mkLocals-3793 'erased arg-1 arg-2 'erased e-2 'erased arg-3 (Core-TT-addVars 'erased 'erased arg-1 arg-2 e-2 arg-3 'erased)))) ((1) (let ((e-5 (vector-ref sc0 1))) (let ((e-6 (vector-ref sc0 2))) (let ((sc1 e-5)) (case (vector-ref sc1 0) ((1) (Prelude-Types-maybe 'erased 'erased (lambda () (vector 1 (vector 1 ) e-6)) (lambda () (lambda (eta-0) eta-0)) (Core-TT-resolveRef 'erased 'erased arg-1 (vector 0 ) arg-3 e-6)))(else (vector 1 e-5 e-6))))))) ((2) (let ((e-8 (vector-ref sc0 1))) (let ((e-9 (vector-ref sc0 2))) (Prelude-Types-maybe 'erased 'erased (lambda () (vector 2 e-8 (Prelude-Types-map_Functor__List 'erased 'erased (lambda (eta-0) (Core-TT-mkLocals 'erased arg-1 arg-2 arg-3 eta-0)) e-9))) (lambda () (lambda (eta-0) eta-0)) (Core-TT-resolveRef 'erased 'erased arg-1 (vector 0 ) arg-3 e-8))))) ((3) (let ((e-11 (vector-ref sc0 1))) (let ((e-12 (vector-ref sc0 2))) (let ((e-13 (vector-ref sc0 3))) (vector 3 e-11 (Core-TT-map_Functor__Binder 'erased 'erased (lambda (eta-0) (Core-TT-mkLocals 'erased arg-1 arg-2 arg-3 eta-0)) e-12) (Core-TT-mkLocals 'erased (vector 1 e-11 arg-1) arg-2 arg-3 e-13)))))) ((4) (let ((e-15 (vector-ref sc0 1))) (let ((e-16 (vector-ref sc0 2))) (vector 4 (Core-TT-mkLocals 'erased arg-1 arg-2 arg-3 e-15) (Core-TT-mkLocals 'erased arg-1 arg-2 arg-3 e-16))))) ((6) (vector 6 )) (else (vector 5 ))))))
(define Core-TT-isVar (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (case (vector-ref sc0 0) ((0) (vector 0 )) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (Core-TT-case--isVar-3099 e-2 e-3 arg-0 (Core-TT-nameEq arg-0 e-2)))))))))
(define Core-TT-insertNames (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (Core-TT-case--insertNames-3282 arg-0 arg-1 'erased e-2 'erased arg-2 (Core-TT-insertNVarNames 'erased 'erased arg-0 arg-2 e-2 'erased)))) ((1) (let ((e-5 (vector-ref sc0 1))) (let ((e-6 (vector-ref sc0 2))) (vector 1 e-5 e-6)))) ((2) (let ((e-8 (vector-ref sc0 1))) (let ((e-9 (vector-ref sc0 2))) (vector 2 e-8 (Prelude-Types-map_Functor__List 'erased 'erased (lambda (eta-0) (Core-TT-insertNames arg-0 arg-1 arg-2 eta-0)) e-9))))) ((3) (let ((e-11 (vector-ref sc0 1))) (let ((e-12 (vector-ref sc0 2))) (let ((e-13 (vector-ref sc0 3))) (vector 3 e-11 (Core-TT-map_Functor__Binder 'erased 'erased (lambda (eta-0) (Core-TT-insertNames arg-0 arg-1 arg-2 eta-0)) e-12) (Core-TT-insertNames (vector 1 e-11 arg-0) arg-1 arg-2 e-13)))))) ((4) (let ((e-15 (vector-ref sc0 1))) (let ((e-16 (vector-ref sc0 2))) (vector 4 (Core-TT-insertNames arg-0 arg-1 arg-2 e-15) (Core-TT-insertNames arg-0 arg-1 arg-2 e-16))))) ((6) (vector 6 )) (else (vector 5 ))))))
(define Core-TT-insertNVarNames (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((0) (Core-TT-weakenNVar 'erased 'erased arg-3 arg-4 'erased)) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 arg-4)) (cond ((equal? sc1 0) 0)(else (let ((e-4 (- arg-4 1))) (Core-TT-case--insertNVarNames-3229 'erased 'erased e-2 e-3 e-4 'erased arg-3 (Core-TT-insertNVarNames 'erased 'erased e-3 arg-3 e-4 'erased)))))))))))))
(define Core-TT-getFnArgs (lambda (arg-0 arg-1) (Core-TT-n--2898-3076-getFA 'erased arg-1 (vector 0 ) arg-1)))
(define Core-TT-SubstEnv-findDrop (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((0) (vector 0 arg-3)) (else (let ((e-3 (vector-ref sc0 2))) (let ((sc1 arg-3)) (cond ((equal? sc1 0) (let ((sc2 arg-5)) (let ((e-8 (vector-ref sc2 1))) e-8)))(else (let ((e-4 (- arg-3 1))) (let ((sc1 arg-5)) (let ((e-14 (vector-ref sc1 2))) (Core-TT-SubstEnv-findDrop 'erased 'erased e-3 e-4 'erased e-14)))))))))))))
(define Core-TT-SubstEnv-find (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((0) (Core-TT-SubstEnv-findDrop 'erased 'erased arg-1 arg-4 'erased arg-6)) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 arg-4)) (cond ((equal? sc1 0) (vector 0 0))(else (let ((e-4 (- arg-4 1))) (Core-TT-weaken_Weaken__Term e-2 (Prelude-Types-List-C-43C-43 'erased e-3 arg-2) (Core-TT-SubstEnv-find 'erased arg-1 arg-2 e-3 e-4 'erased arg-6)))))))))))))
(define Core-TT-embed (lambda (arg-0 arg-1 arg-2) (Builtin-believe_me 'erased 'erased arg-2)))
(define Core-TT-dropVar (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-1)) (let ((e-1 (vector-ref sc0 1))) (let ((e-2 (vector-ref sc0 2))) (let ((sc1 arg-2)) (cond ((equal? sc1 0) e-2)(else (let ((e-3 (- arg-2 1))) (vector 1 e-1 (Core-TT-dropVar 'erased e-2 e-3 'erased)))))))))))
(define Core-TT-dropFirst (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((0) (vector 0 )) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 e-2)) (cond ((equal? sc1 0) (Core-TT-dropFirst 'erased 'erased e-3))(else (let ((e-8 (- e-2 1))) (vector 1 e-8 (Core-TT-dropFirst 'erased 'erased e-3)))))))))))))
(define Core-TT-binderType (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (case (vector-ref sc0 0) ((0) (let ((e-3 (vector-ref sc0 3))) e-3)) ((1) (let ((e-7 (vector-ref sc0 3))) e-7)) ((2) (let ((e-10 (vector-ref sc0 2))) e-10)) (else (let ((e-12 (vector-ref sc0 1))) e-12))))))
(define Core-TT-apply (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((0) arg-1) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (Core-TT-apply 'erased (vector 4 arg-1 e-2) e-3))))))))
(define Core-TT-addVars (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((0) (Core-TT-weakenNVar 'erased 'erased arg-3 arg-4 'erased)) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 arg-4)) (cond ((equal? sc1 0) 0)(else (let ((e-4 (- arg-4 1))) (let ((idx (+ 1 e-4))) (Core-TT-case--addVars-3577 'erased 'erased arg-3 e-4 e-2 e-3 'erased arg-5 idx (Core-TT-addVars 'erased 'erased e-3 arg-3 e-4 arg-5 'erased))))))))))))))
(define Decidable-Equality-case--decEq-2328 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (cond ((equal? sc0 0) (vector 0 (Decidable-Equality-n--3684-2292-primitiveEq arg-0 arg-1 'erased 'erased 'erased))) (else (vector 1 (lambda (eta-0) (Decidable-Equality-n--3684-2293-primitiveNotEq arg-0 arg-1 'erased 'erased 'erased eta-0))))))))
(define Decidable-Equality-case--decEq-2136 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (cond ((equal? sc0 0) (vector 0 (Decidable-Equality-n--3480-2100-primitiveEq arg-0 arg-1 'erased 'erased 'erased))) (else (vector 1 (lambda (eta-0) (Decidable-Equality-n--3480-2101-primitiveNotEq arg-0 arg-1 'erased 'erased 'erased eta-0))))))))
(define Decidable-Equality-n--3684-2293-primitiveNotEq (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (Builtin-believe_me 'erased 'erased (vector 0 ))))
(define Decidable-Equality-n--3480-2101-primitiveNotEq (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (Builtin-believe_me 'erased 'erased (vector 0 ))))
(define Decidable-Equality-n--3684-2292-primitiveEq (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (Builtin-believe_me 'erased 'erased (vector 0 ))))
(define Decidable-Equality-n--3480-2100-primitiveEq (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (Builtin-believe_me 'erased 'erased (vector 0 ))))
(define Decidable-Equality-decEq_DecEq__String (lambda (arg-0 arg-1) (Decidable-Equality-case--decEq-2328 arg-1 arg-0 (Prelude-EqOrd-C-61C-61_Eq__String arg-0 arg-1))))
(define Decidable-Equality-decEq_DecEq__Int (lambda (arg-0 arg-1) (Decidable-Equality-case--decEq-2136 arg-1 arg-0 (Prelude-EqOrd-C-61C-61_Eq__Int arg-0 arg-1))))
(define Core-Env-case--caseC-32blockC-32inC-32defined-4102 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (Prelude-Types-pure_Applicative__Maybe 'erased (+ 1 arg-5))))
(define Core-Env-case--defined-4077 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-5)) (case (vector-ref sc0 0) ((0) (Prelude-Types-C-62C-62C-61_Monad__Maybe 'erased 'erased (Core-Env-defined arg-1 arg-4 arg-2) (lambda (_-0) (Prelude-Types-pure_Applicative__Maybe 'erased (+ 1 _-0))))) (else (let ((e-2 (vector-ref sc0 1))) (let ((sc1 e-2)) (vector 1 0))))))))
(define Core-Env-revOnto (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((0) (vector 0 )) (else (vector 0 ))))))
(define Core-Env-mkEnv (lambda (arg-0) (let ((sc0 arg-0)) (case (vector-ref sc0 0) ((0) (vector 0 )) (else (let ((e-3 (vector-ref sc0 2))) (vector 1 (vector 2 (vector 1 "_" 0) (vector 6 )) (Core-Env-mkEnv e-3))))))))
(define Core-Env-getBinderUnder (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (let ((sc0 arg-3)) (let ((e-1 (vector-ref sc0 1))) (let ((e-2 (vector-ref sc0 2))) (let ((sc1 arg-4)) (cond ((equal? sc1 0) (let ((sc2 arg-7)) (let ((e-7 (vector-ref sc2 1))) (Core-TT-map_Functor__Binder 'erased 'erased (let ((sc3 arg-2)) (let ((e-3 (vector-ref sc3 2))) (lambda (arg-8) (((e-3 e-2) (Data-List-reverse 'erased (vector 1 e-1 arg-5))) arg-8)))) e-7))))(else (let ((e-3 (- arg-4 1))) (let ((sc1 arg-7)) (let ((e-13 (vector-ref sc1 2))) (Core-Env-getBinderUnder 'erased 'erased arg-2 e-2 e-3 (vector 1 e-1 arg-5) 'erased e-13))))))))))))
(define Core-Env-getBinder (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (Core-Env-getBinderUnder 'erased 'erased arg-2 arg-3 arg-4 (vector 0 ) 'erased arg-6)))
(define Core-Env-defined (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-0)) (case (vector-ref sc0 0) ((0) (let ((sc1 arg-2)) (vector 0 ))) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 arg-2)) (let ((e-8 (vector-ref sc1 1))) (let ((e-9 (vector-ref sc1 2))) (Core-Env-case--defined-4077 e-2 e-3 e-9 e-8 arg-1 (Core-TT-nameEq arg-1 e-2))))))))))))
(define Core-Core-case--caseC-32blockC-32inC-32catch-2509 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) arg-5))
(define Core-Core-case--catch-2495 (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (let ((pC-39 (vector 0 e-2))) (Core-Core-case--caseC-32blockC-32inC-32catch-2509 'erased arg-1 arg-2 e-2 pC-39 (arg-2 e-2))))) (else (let ((e-5 (vector-ref sc0 1))) (lambda (eta-0) (vector 1 e-5))))))))
(define Core-Core-case--C-62C-62C-61-2306 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-4)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (lambda (eta-0) (vector 0 e-2)))) (else (let ((e-5 (vector-ref sc0 1))) (arg-3 e-5)))))))
(define Core-Core-throw_Catchable__Core_Error (lambda (arg-0 ext-1 ext-0) (Core-Core-coreFail 'erased ext-1 ext-0)))
(define Core-Core-show_Show__Error (lambda (arg-0) (let ((sc0 arg-0)) (case (vector-ref sc0 0) ((0) (let ((e-0 (vector-ref sc0 1))) (let ((e-2 (vector-ref sc0 3))) (let ((e-3 (vector-ref sc0 4))) (Prelude-Types-Strings-C-43C-43 "Type mismatch: " (Prelude-Types-Strings-C-43C-43 (Core-TT-show_Show__C-40TermC-32C-36varsC-41 e-0 e-2) (Prelude-Types-Strings-C-43C-43 " and " (Core-TT-show_Show__C-40TermC-32C-36varsC-41 e-0 e-3)))))))) ((1) (let ((e-4 (vector-ref sc0 1))) (Prelude-Types-Strings-C-43C-43 "Undefined name " (Core-TT-show_Show__Name e-4)))) ((3) (let ((e-5 (vector-ref sc0 1))) e-5)) ((2) (let ((e-6 (vector-ref sc0 1))) (let ((e-7 (vector-ref sc0 2))) (let ((sc1 e-7)) (case (vector-ref sc1 0) ((0) (Prelude-Types-Strings-C-43C-43 "Patterns for " (Prelude-Types-Strings-C-43C-43 (Core-TT-show_Show__Name e-6) " have different numbers of arguments"))) ((1) (Prelude-Types-Strings-C-43C-43 "Patterns for " (Prelude-Types-Strings-C-43C-43 (Core-TT-show_Show__Name e-6) " require matching on different types"))) ((4) (Prelude-Types-Strings-C-43C-43 "Can't infer type to match in " (Core-TT-show_Show__Name e-6))) ((2) (let ((e-10 (vector-ref sc1 1))) (let ((sc2 e-10)) (let ((e-14 (vector-ref sc2 1))) (let ((e-15 (vector-ref sc2 2))) (let ((sc3 e-15)) (let ((e-19 (vector-ref sc3 2))) (Prelude-Types-Strings-C-43C-43 "Attempt to match on erased argument " (Prelude-Types-Strings-C-43C-43 (Core-TT-show_Show__C-40TermC-32C-36varsC-41 e-14 e-19) (Prelude-Types-Strings-C-43C-43 " in " (Core-TT-show_Show__Name e-6))))))))))) (else (let ((e-11 (vector-ref sc1 1))) (Prelude-Types-Strings-C-43C-43 "Constructor " (Prelude-Types-Strings-C-43C-43 (Core-TT-show_Show__Name e-11) " is not fully applied"))))))))) (else (let ((e-8 (vector-ref sc0 1))) (let ((e-9 (vector-ref sc0 2))) (Prelude-Types-Strings-C-43C-43 "File error (" (Prelude-Types-Strings-C-43C-43 e-8 (Prelude-Types-Strings-C-43C-43 "): " (System-File-show_Show__FileError e-9)))))))))))
(define Core-Core-showPrec_Show__Error (lambda (arg-0 arg-1) (Core-Core-show_Show__Error arg-1)))
(define Core-Core-catch_Catchable__Core_Error (lambda (arg-0 arg-1 arg-2 ext-0) (let ((act-24 (arg-1 ext-0))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (let ((pC-39 (vector 0 e-2))) ((Core-Core-case--caseC-32blockC-32inC-32catch-2509 'erased arg-1 arg-2 e-2 pC-39 (arg-2 e-2)) ext-0)))) (else (let ((e-5 (vector-ref sc0 1))) (vector 1 e-5))))))))
(define Core-Core-__Impl_Show_Error (lambda () (vector 0 (lambda (x) (Core-Core-show_Show__Error x)) (lambda (d) (lambda (x) (Core-Core-showPrec_Show__Error d x))))))
(define Core-Core-__Impl_Catchable_Core_Error (lambda () (vector 0 (lambda (a) (lambda (arg-2409) (lambda (eta-0) (Core-Core-throw_Catchable__Core_Error 'erased arg-2409 eta-0)))) (lambda (a) (lambda (arg-2410) (lambda (arg-2411) (lambda (eta-0) (Core-Core-catch_Catchable__Core_Error 'erased arg-2410 arg-2411 eta-0))))))))
(define Core-Core-when (lambda (arg-0 arg-1) (let ((sc0 arg-0)) (cond ((equal? sc0 0) (arg-1)) (else (lambda (eta-0) (vector 1 (vector 0 ))))))))
(define Core-Core-traverse_ (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((0) (lambda (eta-0) (vector 1 (vector 0 )))) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (lambda (eta-0) (let ((act-24 ((arg-2 e-2) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-4 (vector-ref sc1 1))) (vector 0 e-4))) (else ((Core-Core-traverse_ 'erased 'erased arg-2 e-3) eta-0)))))))))))))
(define Core-Core-traverseC-39 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((0) (lambda (eta-0) (vector 1 (Data-List-reverse 'erased arg-4)))) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (lambda (eta-0) (let ((act-24 ((arg-2 e-2) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-4 (vector-ref sc1 1))) (vector 0 e-4))) (else (let ((e-5 (vector-ref sc1 1))) ((Core-Core-traverseC-39 'erased 'erased arg-2 e-3 (vector 1 e-5 arg-4)) eta-0))))))))))))))
(define Core-Core-traverse (lambda (arg-0 arg-1 arg-2 arg-3) (Core-Core-traverseC-39 'erased 'erased arg-2 arg-3 (vector 0 ))))
(define Core-Core-Binder-traverse (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((0) (let ((e-1 (vector-ref sc0 1))) (let ((e-2 (vector-ref sc0 2))) (let ((e-3 (vector-ref sc0 3))) (lambda (eta-0) (let ((act-24 ((arg-2 e-3) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-4 (vector-ref sc1 1))) (vector 0 e-4))) (else (let ((e-5 (vector-ref sc1 1))) (vector 1 (vector 0 e-1 e-2 e-5)))))))))))) ((1) (let ((e-5 (vector-ref sc0 1))) (let ((e-6 (vector-ref sc0 2))) (let ((e-7 (vector-ref sc0 3))) (lambda (eta-0) (let ((act-24 ((arg-2 e-7) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-8 (vector-ref sc1 1))) (vector 1 (vector 1 e-5 e-6 e-8)))))))))))) ((2) (let ((e-9 (vector-ref sc0 1))) (let ((e-10 (vector-ref sc0 2))) (lambda (eta-0) (let ((act-24 ((arg-2 e-10) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc1 1))) (vector 1 (vector 2 e-9 e-5))))))))))) (else (let ((e-12 (vector-ref sc0 1))) (lambda (eta-0) (let ((act-24 ((arg-2 e-12) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc1 1))) (vector 1 (vector 3 e-5))))))))))))))
(define Core-Core-throw (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (let ((e-2 (vector-ref sc0 1))) (lambda (arg-4) ((e-2 'erased) arg-4))))))
(define Core-Core-Core-runCore (lambda (arg-0 arg-1) arg-1))
(define Core-Core-put (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 ext-0) (let ((act-24 (set-box! arg-3 arg-4))) (vector 1 act-24))))
(define Core-Core-pure (lambda (arg-0 arg-1 ext-0) (vector 1 arg-1)))
(define Core-Core-newRef (lambda (arg-0 arg-1 arg-2 arg-3 ext-0) (let ((act-24 (let ((act-24 ((Data-IORef-newIORef 'erased 'erased (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-62) (lambda (eta-0) (Prelude-IO-map_Functor__IO 'erased 'erased func arg-62 eta-0)))))) (lambda (a) (lambda (arg-172) (lambda (eta-0) arg-172))) (lambda (b) (lambda (a) (lambda (arg-173) (lambda (arg-175) (lambda (eta-0) (let ((act-17 (arg-173 eta-0))) (let ((act-16 (arg-175 eta-0))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-334) (lambda (arg-335) (lambda (eta-0) (let ((act-24 (arg-334 eta-0))) ((arg-335 act-24) eta-0))))))) (lambda (a) (lambda (arg-337) (lambda (eta-0) (let ((act-51 (arg-337 eta-0))) (act-51 eta-0)))))) (lambda (a) (lambda (arg-6366) arg-6366))) arg-3) ext-0))) (vector 1 act-24)))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (vector 1 e-5))))))))
(define Core-Core-log (lambda (ext-0 ext-1) (let ((act-24 ((Prelude-IO-putStrLn 'erased (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-62) (lambda (eta-0) (Prelude-IO-map_Functor__IO 'erased 'erased func arg-62 eta-0)))))) (lambda (a) (lambda (arg-172) (lambda (eta-0) arg-172))) (lambda (b) (lambda (a) (lambda (arg-173) (lambda (arg-175) (lambda (eta-0) (let ((act-17 (arg-173 eta-0))) (let ((act-16 (arg-175 eta-0))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-334) (lambda (arg-335) (lambda (eta-0) (let ((act-24 (arg-334 eta-0))) ((arg-335 act-24) eta-0))))))) (lambda (a) (lambda (arg-337) (lambda (eta-0) (let ((act-51 (arg-337 eta-0))) (act-51 eta-0)))))) (lambda (a) (lambda (arg-6366) arg-6366))) ext-0) ext-1))) (vector 1 act-24))))
(define Core-Core-get (lambda (arg-0 arg-1 arg-2 arg-3 ext-0) (let ((act-24 (unbox arg-3))) (vector 1 act-24))))
(define Core-Core-coreRun (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 ext-0) (let ((act-24 (arg-2 ext-0))) ((Prelude-Types-either 'erased 'erased 'erased (lambda () arg-3) (lambda () arg-4) act-24) ext-0))))
(define Core-Core-coreLift (lambda (arg-0 arg-1 ext-0) (let ((act-24 (arg-1 ext-0))) (vector 1 act-24))))
(define Core-Core-coreFail (lambda (arg-0 arg-1 ext-0) (vector 0 arg-1)))
(define Core-Core-C-62C-62C-61 (lambda (arg-0 arg-1 arg-2 arg-3 ext-0) (let ((act-24 (arg-2 ext-0))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) ((arg-3 e-5) ext-0))))))))
(define Data-IORef-writeIORef (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-2)) (let ((e-2 (vector-ref sc0 2))) ((e-2 'erased) (lambda (eta-0) (set-box! arg-3 arg-4)))))))
(define Data-IORef-readIORef (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-2)) (let ((e-2 (vector-ref sc0 2))) ((e-2 'erased) (lambda (eta-0) (unbox arg-3)))))))
(define Data-IORef-prim__writeIORef (lambda (arg-0 arg-1 arg-2 arg-3) (set-box! arg-1 arg-2)))
(define Data-IORef-prim__readIORef (lambda (arg-0 arg-1 arg-2) (unbox arg-1)))
(define Data-IORef-prim__newIORef (lambda (arg-0 arg-1 arg-2) (box arg-1)))
(define Data-IORef-newIORef (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 (let ((sc1 arg-2)) (let ((e-1 (vector-ref sc1 1))) e-1)))) (let ((e-2 (vector-ref sc0 2))) ((((e-2 'erased) 'erased) (let ((sc1 arg-2)) (let ((e-4 (vector-ref sc1 2))) ((e-4 'erased) (lambda (eta-0) (box arg-3)))))) (lambda (m) (let ((sc1 (let ((sc2 (let ((sc3 arg-2)) (let ((e-5 (vector-ref sc3 1))) e-5)))) (let ((e-6 (vector-ref sc2 1))) e-6)))) (let ((e-5 (vector-ref sc1 2))) ((e-5 'erased) m)))))))))
(define Core-Context-case--updateDef-5212 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-4)) (case (vector-ref sc0 0) ((1) (let ((e-1 (vector-ref sc0 1))) (lambda (eta-0) (Core-Context-addDef arg-2 arg-1 (arg-0 e-1) eta-0)))) (else (lambda (eta-0) (Core-Core-throw_Catchable__Core_Error 'erased (vector 1 arg-1) eta-0)))))))
(define Core-Context-updateDef (lambda (arg-0 arg-1 arg-2 ext-0) (let ((act-24 (let ((act-24 (unbox arg-0))) (vector 1 act-24)))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (let ((act-25 (Core-Context-lookupDef arg-1 e-5 ext-0))) (let ((sc1 act-25)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-6 (vector-ref sc1 1))) (let ((sc2 e-6)) (case (vector-ref sc2 0) ((1) (let ((e-1 (vector-ref sc2 1))) (Core-Context-addDef arg-0 arg-1 (arg-2 e-1) ext-0))) (else (Core-Core-throw_Catchable__Core_Error 'erased (vector 1 arg-1) ext-0))))))))))))))))
(define Core-Context-GlobalDef-type (lambda (arg-0) (let ((sc0 arg-0)) (let ((e-0 (vector-ref sc0 1))) e-0))))
(define Core-Context-newDef (lambda (arg-0 arg-1) (vector 0 arg-0 arg-1)))
(define Core-Context-mapDefsC-39 (lambda (arg-0 arg-1 arg-2 ext-0) (let ((act-24 (let ((act-24 (unbox arg-1))) (vector 1 act-24)))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (vector 1 (Prelude-Types-map_Functor__List 'erased 'erased arg-2 (Data-SortedMap-toList 'erased 'erased e-5))))))))))
(define Core-Context-lookupDef (lambda (arg-0 arg-1 ext-0) (vector 1 (Data-SortedMap-lookup 'erased 'erased arg-0 arg-1))))
(define Core-Context-initDefs (lambda (ext-0) (vector 1 (Data-SortedMap-empty 'erased 'erased (vector 0 (vector 0 (lambda (arg-2) (lambda (arg-3) (Core-TT-C-61C-61_Eq__Name arg-2 arg-3))) (lambda (arg-4) (lambda (arg-5) (Core-TT-C-47C-61_Eq__Name arg-4 arg-5)))) (lambda (arg-369) (lambda (arg-370) (Core-TT-compare_Ord__Name arg-369 arg-370))) (lambda (arg-371) (lambda (arg-372) (Core-TT-C-60_Ord__Name arg-371 arg-372))) (lambda (arg-373) (lambda (arg-374) (Core-TT-C-62_Ord__Name arg-373 arg-374))) (lambda (arg-375) (lambda (arg-376) (Core-TT-C-60C-61_Ord__Name arg-375 arg-376))) (lambda (arg-377) (lambda (arg-378) (Core-TT-C-62C-61_Ord__Name arg-377 arg-378))) (lambda (arg-379) (lambda (arg-380) (Core-TT-max_Ord__Name arg-379 arg-380))) (lambda (arg-381) (lambda (arg-382) (Core-TT-min_Ord__Name arg-381 arg-382))))))))
(define Core-Context-GlobalDef-definition (lambda (arg-0) (let ((sc0 arg-0)) (let ((e-1 (vector-ref sc0 2))) e-1))))
(define Core-Context-clearDefs (lambda (arg-0 ext-0) (vector 1 (Data-SortedMap-empty 'erased 'erased (vector 0 (vector 0 (lambda (arg-2) (lambda (arg-3) (Core-TT-C-61C-61_Eq__Name arg-2 arg-3))) (lambda (arg-4) (lambda (arg-5) (Core-TT-C-47C-61_Eq__Name arg-4 arg-5)))) (lambda (arg-369) (lambda (arg-370) (Core-TT-compare_Ord__Name arg-369 arg-370))) (lambda (arg-371) (lambda (arg-372) (Core-TT-C-60_Ord__Name arg-371 arg-372))) (lambda (arg-373) (lambda (arg-374) (Core-TT-C-62_Ord__Name arg-373 arg-374))) (lambda (arg-375) (lambda (arg-376) (Core-TT-C-60C-61_Ord__Name arg-375 arg-376))) (lambda (arg-377) (lambda (arg-378) (Core-TT-C-62C-61_Ord__Name arg-377 arg-378))) (lambda (arg-379) (lambda (arg-380) (Core-TT-max_Ord__Name arg-379 arg-380))) (lambda (arg-381) (lambda (arg-382) (Core-TT-min_Ord__Name arg-381 arg-382))))))))
(define Core-Context-addDef (lambda (arg-0 arg-1 arg-2 ext-0) (let ((act-24 (let ((act-24 (unbox arg-0))) (vector 1 act-24)))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (let ((act-25 (set-box! arg-0 (Data-SortedMap-insert 'erased 'erased arg-1 arg-2 e-5)))) (vector 1 act-25)))))))))
(define Core-Context-Defs (lambda () (vector "Data.SortedMap.SortedMap" (vector "Core.TT.Name" ) (vector "Core.Context.GlobalDef" ))))
(define Core-CaseTree-case--mkTerm-4057 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((1) (let ((e-1 (vector-ref sc0 1))) (vector 0 e-1)))(else (vector 1 (vector 1 ) arg-0))))))
(define Core-CaseTree-case--insertCaseNames-3809 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8) (vector 0 arg-0 (Prelude-Types-List-C-43C-43 'erased arg-2 (Prelude-Types-List-C-43C-43 'erased arg-7 arg-1)) arg-8 (Core-TT-insertNames arg-2 arg-1 arg-7 arg-4) (Prelude-Types-map_Functor__List 'erased 'erased (lambda (eta-0) (Core-CaseTree-insertCaseAltNames arg-2 arg-1 arg-7 eta-0)) arg-3))))
(define Core-CaseTree-weaken_Weaken__CaseTree (lambda (arg-0 arg-1 ext-0) (Core-CaseTree-weakenNs_Weaken__CaseTree arg-1 (vector 1 arg-0 (vector 0 )) ext-0)))
(define Core-CaseTree-weakenNs_Weaken__CaseTree (lambda (arg-0 arg-1 arg-2) (Core-CaseTree-insertCaseNames (vector 0 ) arg-0 arg-1 arg-2)))
(define Core-CaseTree-__Impl_Weaken_CaseTree (lambda () (vector 0 (lambda (n) (lambda (vars) (lambda (arg-2952) (Core-CaseTree-weaken_Weaken__CaseTree n vars arg-2952)))) (lambda (vars) (lambda (ns) (lambda (arg-2956) (Core-CaseTree-weakenNs_Weaken__CaseTree vars ns arg-2956)))))))
(define Core-CaseTree-mkTerm (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (case (vector-ref sc0 0) ((0) (let ((e-0 (vector-ref sc0 1))) (let ((e-1 (vector-ref sc0 2))) (let ((e-2 (vector-ref sc0 3))) (let ((e-3 (vector-ref sc0 4))) (Core-TT-apply 'erased (vector 1 (vector 2 e-1 e-2) e-0) (Prelude-Types-map_Functor__List 'erased 'erased (lambda (eta-0) (Core-CaseTree-mkTerm arg-0 eta-0)) e-3))))))) ((1) (let ((e-4 (vector-ref sc0 1))) (Core-CaseTree-case--mkTerm-4057 e-4 arg-0 (Core-TT-isVar e-4 arg-0)))) (else (let ((e-5 (vector-ref sc0 1))) (Core-TT-embed 'erased 'erased e-5)))))))
(define Core-CaseTree-mkPatC-39 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((1) (let ((e-1 (vector-ref sc0 1))) (let ((e-2 (vector-ref sc0 2))) (let ((sc1 e-1)) (case (vector-ref sc1 0) ((1) (vector 1 e-2)) ((2) (let ((e-6 (vector-ref sc1 1))) (let ((e-7 (vector-ref sc1 2))) (vector 0 e-2 e-6 e-7 arg-0))))(else (vector 2 arg-1))))))) ((4) (let ((e-4 (vector-ref sc0 1))) (let ((e-5 (vector-ref sc0 2))) (let ((parg (Core-CaseTree-mkPatC-39 (vector 0 ) e-5 e-5))) (Core-CaseTree-mkPatC-39 (vector 1 parg arg-0) arg-1 e-4)))))(else (vector 2 arg-1))))))
(define Core-CaseTree-insertCaseNames (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((0) (let ((e-0 (vector-ref sc0 1))) (let ((e-2 (vector-ref sc0 3))) (let ((e-4 (vector-ref sc0 4))) (let ((e-5 (vector-ref sc0 5))) (Core-CaseTree-case--insertCaseNames-3809 e-0 arg-1 arg-0 e-5 e-4 e-2 'erased arg-2 (Core-TT-insertNVarNames 'erased 'erased arg-0 arg-2 e-2 'erased))))))) ((1) (let ((e-7 (vector-ref sc0 1))) (vector 1 (Core-TT-insertNames arg-0 arg-1 arg-2 e-7)))) ((2) (let ((e-9 (vector-ref sc0 1))) (vector 2 e-9))) (else (vector 3 ))))))
(define Core-CaseTree-insertCaseAltNames (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((0) (let ((e-1 (vector-ref sc0 1))) (let ((e-2 (vector-ref sc0 2))) (let ((e-3 (vector-ref sc0 3))) (let ((e-4 (vector-ref sc0 4))) (vector 0 e-1 e-2 e-3 (Core-CaseTree-insertCaseNames (Prelude-Types-List-C-43C-43 'erased e-3 arg-0) arg-1 arg-2 e-4))))))) (else (let ((e-6 (vector-ref sc0 1))) (vector 1 (Core-CaseTree-insertCaseNames arg-0 arg-1 arg-2 e-6))))))))
(define Core-CaseTree-argToPat (lambda (arg-0) (Core-CaseTree-mkPatC-39 (vector 0 ) arg-0 arg-0)))
(define Synthesis-Synthesize-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32run-7600 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12) (let ((sc0 arg-12)) (case (vector-ref sc0 0) ((1) (let ((e-1 (vector-ref sc0 1))) (lambda (eta-0) (vector 1 (Synthesis-Resugar-resugarTop (Synthesis-Unelab-unelab arg-5 arg-2 arg-7 (Builtin-fst 'erased 'erased e-1)))))))(else (lambda (eta-0) (vector 1 "No result")))))))
(define Synthesis-Synthesize-case--caseC-32blockC-32inC-32run-7547 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-5)) (case (vector-ref sc0 0) ((5) (let ((e-0 (vector-ref sc0 1))) (let ((e-1 (vector-ref sc0 2))) (let ((e-2 (vector-ref sc0 3))) (lambda (eta-0) (let ((act-24 ((Synthesis-Synthesize-synthesiseTerm e-0 arg-2 arg-1 (+ 1 (+ 1 (+ 1 (+ 1 0)))) e-1 e-2) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-3 (vector-ref sc1 1))) (vector 0 e-3))) (else (let ((e-5 (vector-ref sc1 1))) (let ((act-25 ((Synthesis-Synthesize-filterResults e-0 arg-2 arg-1 e-5) eta-0))) (let ((sc2 act-25)) (case (vector-ref sc2 0) ((0) (let ((e-3 (vector-ref sc2 1))) (vector 0 e-3))) (else (let ((e-6 (vector-ref sc2 1))) (let ((act-26 (Core-Core-log (Prelude-Types-Strings-C-43C-43 "Synthesising for " (Core-TT-show_Show__C-40TermC-32C-36varsC-41 e-0 e-2)) eta-0))) (let ((sc3 act-26)) (case (vector-ref sc3 0) ((0) (let ((e-3 (vector-ref sc3 1))) (vector 0 e-3))) (else (let ((e-7 (vector-ref sc3 1))) (let ((act-27 ((Synthesis-Synthesize-printFinals e-0 arg-2 e-1 e-6) eta-0))) (let ((sc4 act-27)) (case (vector-ref sc4 0) ((0) (let ((e-3 (vector-ref sc4 1))) (vector 0 e-3))) (else (let ((e-8 (vector-ref sc4 1))) ((Synthesis-Synthesize-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32run-7600 arg-0 arg-1 arg-2 arg-3 arg-4 e-0 e-2 e-1 e-5 e-6 e-7 e-8 (Synthesis-Synthesize-first 'erased e-5)) eta-0))))))))))))))))))))))))))(else (lambda (eta-0) (vector 1 "Invalid Name")))))))
(define Synthesis-Synthesize-case--run-7536 (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((1) (let ((e-1 (vector-ref sc0 1))) (let ((_-0 (vector 1 e-1))) (Synthesis-Synthesize-case--caseC-32blockC-32inC-32run-7547 arg-0 arg-1 arg-2 e-1 _-0 (let ((sc1 e-1)) (let ((e-2 (vector-ref sc1 2))) e-2))))))(else (lambda (eta-0) (vector 1 "Invalid Name")))))))
(define Synthesis-Synthesize-case--caseC-32blockC-32inC-32synthesiseTerm-7450 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9) (let ((sc0 arg-6)) (case (vector-ref sc0 0) ((1) (let ((e-1 (vector-ref sc0 1))) (let ((e-2 (vector-ref sc0 2))) (let ((sc1 e-1)) (case (vector-ref sc1 0) ((3) (Synthesis-Synthesize-tryConstructor arg-0 arg-5 arg-4 arg-3 arg-2 arg-1 e-2))(else (lambda (eta-0) (vector 1 (vector 0 )))))))))(else (lambda (eta-0) (vector 1 (vector 0 ))))))))
(define Synthesis-Synthesize-case--synthesiseTerm-7390 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (let ((sc0 arg-6)) (let ((e-2 (vector-ref sc0 1))) (lambda (eta-0) (let ((act-24 ((Synthesis-Synthesize-checkLocals arg-0 arg-5 arg-4 arg-2 (Synthesis-Rescope-getUsableEnv arg-0 (vector 0 ) arg-2) arg-1) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-4 (vector-ref sc1 1))) (vector 0 e-4))) (else (let ((e-5 (vector-ref sc1 1))) (let ((localsC-39 (Prelude-Types-map_Functor__List 'erased 'erased (lambda (eta-1) (Synthesis-Monad-map_Functor__Search 'erased 'erased (lambda (x) (vector 0 x (vector 0 ))) eta-1)) e-5))) (let ((act-25 (let ((sc2 e-2)) (case (vector-ref sc2 0) ((1) (let ((e-1 (vector-ref sc2 1))) (let ((e-4 (vector-ref sc2 2))) (let ((sc3 e-1)) (case (vector-ref sc3 0) ((3) ((Synthesis-Synthesize-tryConstructor arg-0 arg-5 arg-4 arg-3 arg-2 arg-1 e-4) eta-0))(else (vector 1 (vector 0 ))))))))(else (vector 1 (vector 0 ))))))) (let ((sc2 act-25)) (case (vector-ref sc2 0) ((0) (let ((e-4 (vector-ref sc2 1))) (vector 0 e-4))) (else (let ((e-6 (vector-ref sc2 1))) (let ((act-26 ((Synthesis-Synthesize-searchFunctions arg-0 arg-5 arg-4 arg-3 arg-2 arg-1) eta-0))) (let ((sc3 act-26)) (case (vector-ref sc3 0) ((0) (let ((e-4 (vector-ref sc3 1))) (vector 0 e-4))) (else (let ((e-7 (vector-ref sc3 1))) (vector 1 (Prelude-Types-List-C-43C-43 'erased localsC-39 (Prelude-Types-List-C-43C-43 'erased e-6 e-7))))))))))))))))))))))))
(define Synthesis-Synthesize-case--synthesiseTerm-7346 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-13) (let ((sc0 arg-13)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (vector 0 (vector 3 arg-4 (vector 0 arg-3 arg-2 arg-1) e-2) e-3))))))
(define Synthesis-Synthesize-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32caseC-32blockC-32inC-32tryConstructor-7059 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-13 arg-14 arg-15 arg-16 arg-17) (let ((sc0 arg-17)) (case (vector-ref sc0 0) ((1) (lambda (eta-0) (let ((act-24 ((Core-Normalise-nf arg-0 arg-7 arg-4 (Core-TT-weakenNs_Weaken__Term (vector 0 ) arg-0 (let ((sc1 arg-8)) (let ((e-0 (vector-ref sc1 1))) e-0)))) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc1 1))) ((Synthesis-Synthesize-synthBinderArgs arg-0 arg-6 arg-5 arg-1 arg-4 arg-3 (vector 0 arg-2 (vector 2 arg-11 arg-10)) e-5) eta-0))))))))(else (lambda (eta-0) (vector 1 (vector 0 ))))))))
(define Synthesis-Synthesize-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32tryConstructor-6996 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12) (let ((sc0 arg-12)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 e-3)) (let ((e-6 (vector-ref sc1 1))) (let ((e-7 (vector-ref sc1 2))) (let ((sc2 e-7)) (let ((e-11 (vector-ref sc2 2))) (lambda (eta-0) (let ((act-24 (Synthesis-Synthesize-tryUnify (Prelude-Types-List-C-43C-43 'erased e-2 (Prelude-Types-List-C-43C-43 'erased arg-0 (vector 0 ))) arg-6 arg-5 e-11 (Core-TT-weakenNs_Weaken__Term arg-0 e-2 arg-3) e-6 eta-0))) (let ((sc3 act-24)) (case (vector-ref sc3 0) ((0) (let ((e-4 (vector-ref sc3 1))) (vector 0 e-4))) (else (let ((e-5 (vector-ref sc3 1))) (let ((sc4 e-5)) (case (vector-ref sc4 0) ((1) (let ((act-25 ((Core-Normalise-nf arg-0 arg-7 arg-4 (Core-TT-weakenNs_Weaken__Term (vector 0 ) arg-0 (let ((sc5 arg-8)) (let ((e-0 (vector-ref sc5 1))) e-0)))) eta-0))) (let ((sc5 act-25)) (case (vector-ref sc5 0) ((0) (let ((e-4 (vector-ref sc5 1))) (vector 0 e-4))) (else (let ((e-8 (vector-ref sc5 1))) ((Synthesis-Synthesize-synthBinderArgs arg-0 arg-6 arg-5 arg-1 arg-4 arg-3 (vector 0 arg-2 (vector 2 arg-11 arg-10)) e-8) eta-0)))))))(else (vector 1 (vector 0 )))))))))))))))))))))
(define Synthesis-Synthesize-case--caseC-32blockC-32inC-32tryConstructor-6950 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10) (let ((sc0 arg-10)) (case (vector-ref sc0 0) ((2) (let ((e-0 (vector-ref sc0 1))) (let ((e-1 (vector-ref sc0 2))) (lambda (eta-0) (let ((act-24 ((Synthesis-Synthesize-fillMetas (Prelude-Types-List-C-43C-43 'erased arg-0 (vector 0 )) arg-6 arg-5 (Core-TT-weakenNs_Weaken__Term (vector 0 ) arg-0 (let ((sc1 arg-8)) (let ((e-3 (vector-ref sc1 1))) e-3))) arg-4) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc1 1))) (let ((sc2 e-5)) (let ((e-2 (vector-ref sc2 1))) (let ((e-3 (vector-ref sc2 2))) (let ((sc3 e-3)) (let ((e-6 (vector-ref sc3 1))) (let ((e-7 (vector-ref sc3 2))) (let ((sc4 e-7)) (let ((e-11 (vector-ref sc4 2))) (let ((act-25 (Synthesis-Synthesize-tryUnify (Prelude-Types-List-C-43C-43 'erased e-2 (Prelude-Types-List-C-43C-43 'erased arg-0 (vector 0 ))) arg-6 arg-5 e-11 (Core-TT-weakenNs_Weaken__Term arg-0 e-2 arg-3) e-6 eta-0))) (let ((sc5 act-25)) (case (vector-ref sc5 0) ((0) (let ((e-4 (vector-ref sc5 1))) (vector 0 e-4))) (else (let ((e-8 (vector-ref sc5 1))) (let ((sc6 e-8)) (case (vector-ref sc6 0) ((1) (let ((act-26 ((Core-Normalise-nf arg-0 arg-7 arg-4 (Core-TT-weakenNs_Weaken__Term (vector 0 ) arg-0 (let ((sc7 arg-8)) (let ((e-12 (vector-ref sc7 1))) e-12)))) eta-0))) (let ((sc7 act-26)) (case (vector-ref sc7 0) ((0) (let ((e-9 (vector-ref sc7 1))) (vector 0 e-9))) (else (let ((e-9 (vector-ref sc7 1))) ((Synthesis-Synthesize-synthBinderArgs arg-0 arg-6 arg-5 arg-1 arg-4 arg-3 (vector 0 arg-2 (vector 2 e-0 e-1)) e-9) eta-0)))))))(else (vector 1 (vector 0 ))))))))))))))))))))))))))) ((3) (let ((e-4 (vector-ref sc0 3))) (lambda (eta-0) (let ((act-24 ((Core-Core-traverse 'erased 'erased (lambda (eta-1) eta-1) (Prelude-Types-map_Functor__List 'erased 'erased (lambda (d) (Synthesis-Synthesize-tryConstructor arg-0 arg-6 arg-5 arg-1 arg-4 arg-3 d)) e-4)) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-5 (vector-ref sc1 1))) (vector 0 e-5))) (else (let ((e-5 (vector-ref sc1 1))) (vector 1 ((Prelude-Interfaces-concat 'erased 'erased (vector 0 (vector 0 (lambda (acc) (lambda (elem) (lambda (func) (lambda (init) (lambda (input) (Prelude-Types-foldr_Foldable__List 'erased 'erased func init input)))))) (lambda (elem) (lambda (acc) (lambda (func) (lambda (init) (lambda (input) (Prelude-Types-foldl_Foldable__List 'erased 'erased func init input))))))) (vector 0 (lambda (arg-11) (lambda (arg-12) (Prelude-Types-C-60C-43C-62_Semigroup__C-40ListC-32C-36aC-41 'erased arg-11 arg-12))) (Prelude-Types-neutral_Monoid__C-40ListC-32C-36aC-41 'erased)))) e-5))))))))))(else (lambda (eta-0) (vector 1 (vector 0 ))))))))
(define Synthesis-Synthesize-case--tryConstructor-6929 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8) (let ((sc0 arg-8)) (case (vector-ref sc0 0) ((1) (let ((e-1 (vector-ref sc0 1))) (let ((_-0 (vector 1 e-1))) (Synthesis-Synthesize-case--caseC-32blockC-32inC-32tryConstructor-6950 arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 e-1 _-0 (let ((sc1 e-1)) (let ((e-2 (vector-ref sc1 2))) e-2))))))(else (lambda (eta-0) (vector 1 (vector 0 ))))))))
(define Synthesis-Synthesize-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32caseC-32blockC-32inC-32searchFunctions-6762 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-13 arg-14 arg-15 arg-16 arg-17) (let ((sc0 arg-17)) (case (vector-ref sc0 0) ((1) (lambda (eta-0) (let ((act-24 ((Core-Normalise-nf arg-0 arg-9 arg-3 (Core-TT-weakenNs_Weaken__Term (vector 0 ) arg-0 (let ((sc1 arg-7)) (let ((e-0 (vector-ref sc1 1))) e-0)))) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc1 1))) ((Synthesis-Synthesize-synthBinderArgs arg-0 arg-5 arg-4 arg-1 arg-3 arg-2 (vector 0 arg-6 (vector 0 )) e-5) eta-0))))))))(else (lambda (eta-0) (vector 1 (vector 0 ))))))))
(define Synthesis-Synthesize-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32searchFunctions-6699 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12) (let ((sc0 arg-12)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 e-3)) (let ((e-6 (vector-ref sc1 1))) (let ((e-7 (vector-ref sc1 2))) (let ((sc2 e-7)) (let ((e-11 (vector-ref sc2 2))) (lambda (eta-0) (let ((act-24 (Synthesis-Synthesize-tryUnify (Prelude-Types-List-C-43C-43 'erased e-2 (Prelude-Types-List-C-43C-43 'erased arg-0 (vector 0 ))) arg-5 arg-4 e-11 (Core-TT-weakenNs_Weaken__Term arg-0 e-2 arg-2) e-6 eta-0))) (let ((sc3 act-24)) (case (vector-ref sc3 0) ((0) (let ((e-4 (vector-ref sc3 1))) (vector 0 e-4))) (else (let ((e-5 (vector-ref sc3 1))) (let ((sc4 e-5)) (case (vector-ref sc4 0) ((1) (let ((act-25 ((Core-Normalise-nf arg-0 arg-9 arg-3 (Core-TT-weakenNs_Weaken__Term (vector 0 ) arg-0 (let ((sc5 arg-7)) (let ((e-0 (vector-ref sc5 1))) e-0)))) eta-0))) (let ((sc5 act-25)) (case (vector-ref sc5 0) ((0) (let ((e-4 (vector-ref sc5 1))) (vector 0 e-4))) (else (let ((e-8 (vector-ref sc5 1))) ((Synthesis-Synthesize-synthBinderArgs arg-0 arg-5 arg-4 arg-1 arg-3 arg-2 (vector 0 arg-6 (vector 0 )) e-8) eta-0)))))))(else (vector 1 (vector 0 )))))))))))))))))))))
(define Synthesis-Synthesize-case--caseC-32blockC-32inC-32searchFunctions-6653 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10) (let ((sc0 arg-10)) (case (vector-ref sc0 0) ((1) (lambda (eta-0) (let ((act-24 ((Synthesis-Synthesize-fillMetas (Prelude-Types-List-C-43C-43 'erased arg-0 (vector 0 )) arg-5 arg-4 (Core-TT-weakenNs_Weaken__Term (vector 0 ) arg-0 (let ((sc1 arg-7)) (let ((e-3 (vector-ref sc1 1))) e-3))) arg-3) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc1 1))) (let ((sc2 e-5)) (let ((e-2 (vector-ref sc2 1))) (let ((e-3 (vector-ref sc2 2))) (let ((sc3 e-3)) (let ((e-6 (vector-ref sc3 1))) (let ((e-7 (vector-ref sc3 2))) (let ((sc4 e-7)) (let ((e-11 (vector-ref sc4 2))) (let ((act-25 (Synthesis-Synthesize-tryUnify (Prelude-Types-List-C-43C-43 'erased e-2 (Prelude-Types-List-C-43C-43 'erased arg-0 (vector 0 ))) arg-5 arg-4 e-11 (Core-TT-weakenNs_Weaken__Term arg-0 e-2 arg-2) e-6 eta-0))) (let ((sc5 act-25)) (case (vector-ref sc5 0) ((0) (let ((e-4 (vector-ref sc5 1))) (vector 0 e-4))) (else (let ((e-8 (vector-ref sc5 1))) (let ((sc6 e-8)) (case (vector-ref sc6 0) ((1) (let ((act-26 ((Core-Normalise-nf arg-0 arg-9 arg-3 (Core-TT-weakenNs_Weaken__Term (vector 0 ) arg-0 (let ((sc7 arg-7)) (let ((e-12 (vector-ref sc7 1))) e-12)))) eta-0))) (let ((sc7 act-26)) (case (vector-ref sc7 0) ((0) (let ((e-9 (vector-ref sc7 1))) (vector 0 e-9))) (else (let ((e-9 (vector-ref sc7 1))) ((Synthesis-Synthesize-synthBinderArgs arg-0 arg-5 arg-4 arg-1 arg-3 arg-2 (vector 0 arg-6 (vector 0 )) e-9) eta-0)))))))(else (vector 1 (vector 0 )))))))))))))))))))))))))(else (lambda (eta-0) (vector 1 (vector 0 ))))))))
(define Synthesis-Synthesize-case--searchFunctions-6626 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (let ((sc0 arg-6)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (lambda (eta-0) (let ((act-24 (let ((act-24 (unbox arg-5))) (vector 1 act-24)))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-4 (vector-ref sc1 1))) (vector 0 e-4))) (else (let ((e-5 (vector-ref sc1 1))) (let ((lamc-0 (vector 0 e-2 e-3))) ((Synthesis-Synthesize-case--caseC-32blockC-32inC-32searchFunctions-6653 arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 e-2 e-3 lamc-0 e-5 (let ((sc2 e-3)) (let ((e-1 (vector-ref sc2 2))) e-1))) eta-0)))))))))))))
(define Synthesis-Synthesize-case--checkLocals-6490 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9) (let ((sc0 arg-9)) (case (vector-ref sc0 0) ((1) (let ((e-1 (vector-ref sc0 1))) (let ((sc1 e-1)) (case (vector-ref sc1 0) ((0) (lambda (eta-0) (let ((act-24 ((Synthesis-Synthesize-checkLocals arg-0 arg-8 arg-7 arg-6 arg-4 arg-5) eta-0))) (let ((sc2 act-24)) (case (vector-ref sc2 0) ((0) (let ((e-2 (vector-ref sc2 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc2 1))) (vector 1 (vector 1 (vector 1 (vector 0 arg-2)) e-5)))))))))(else (Synthesis-Synthesize-checkLocals arg-0 arg-8 arg-7 arg-6 arg-4 arg-5))))))(else (Synthesis-Synthesize-checkLocals arg-0 arg-8 arg-7 arg-6 arg-4 arg-5))))))
(define Synthesis-Synthesize-case--tryUnifyInScope-6027 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10) (let ((sc0 arg-10)) (case (vector-ref sc0 0) ((1) (lambda (eta-0) (let ((act-24 ((Synthesis-Synthesize-tryUnifyInScope arg-0 arg-8 arg-7 arg-6 arg-5 arg-3 arg-4) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc1 1))) (vector 1 (vector 1 (vector 1 (vector 0 arg-1 arg-2)) e-5)))))))))(else (Synthesis-Synthesize-tryUnifyInScope arg-0 arg-8 arg-7 arg-6 arg-5 arg-3 arg-4))))))
(define Synthesis-Synthesize-case--fillMetas-5789 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10) (let ((sc0 arg-10)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 e-3)) (let ((e-6 (vector-ref sc1 1))) (let ((e-7 (vector-ref sc1 2))) (let ((sc2 e-7)) (let ((e-10 (vector-ref sc2 1))) (let ((e-11 (vector-ref sc2 2))) (lambda (eta-0) (vector 1 (vector 0 (Prelude-Types-List-C-43C-43 'erased e-2 (vector 1 arg-4 (vector 0 ))) (vector 0 e-6 (vector 0 (vector 1 (Core-TT-weakenNs_Weaken__Term (vector 1 arg-4 arg-0) e-2 (Core-TT-weaken_Weaken__Term arg-4 arg-0 arg-1)) e-10) e-11))))))))))))))))
(define Synthesis-Synthesize-case--filterResults-5706 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (let ((sc0 arg-6)) (case (vector-ref sc0 0) ((0) (lambda (eta-0) (let ((act-24 ((Synthesis-Synthesize-filterResults arg-0 arg-5 arg-4 arg-3) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc1 1))) (vector 1 (vector 1 (vector 1 arg-1) e-5)))))))))(else (Synthesis-Synthesize-filterResults arg-0 arg-5 arg-4 arg-3))))))
(define Synthesis-Synthesize-case--caseC-32blockC-32inC-32tryUnify-5617 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10) (let ((sc0 arg-10)) (cond ((equal? sc0 0) (lambda (eta-0) (vector 1 (vector 0 )))) (else (lambda (eta-0) (vector 1 (vector 1 arg-8))))))))
(define Synthesis-Synthesize-case--tryUnify-5592 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (let ((sc0 arg-7)) (let ((e-0 (vector-ref sc0 1))) (lambda (eta-0) (let ((act-24 (let ((act-24 (unbox arg-6))) (vector 1 act-24)))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc1 1))) (let ((sc2 e-5)) (cond ((equal? sc2 0) (vector 1 (vector 0 ))) (else (vector 1 (vector 1 e-0)))))))))))))))
(define Synthesis-Synthesize-tryUnifyInScope (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (let ((sc0 arg-5)) (case (vector-ref sc0 0) ((1) (let ((e-1 (vector-ref sc0 1))) (let ((e-2 (vector-ref sc0 2))) (let ((sc1 e-1)) (case (vector-ref sc1 0) ((1) (let ((e-5 (vector-ref sc1 1))) (let ((sc2 e-5)) (let ((e-9 (vector-ref sc2 1))) (let ((e-10 (vector-ref sc2 2))) (lambda (eta-0) (let ((act-24 (let ((act-24 (unbox arg-1))) (vector 1 act-24)))) (let ((sc3 act-24)) (case (vector-ref sc3 0) ((0) (let ((e-3 (vector-ref sc3 1))) (vector 0 e-3))) (else (let ((e-6 (vector-ref sc3 1))) (let ((act-25 (let ((act-25 (((arg-6 e-6) (Core-Normalise-toClosure 'erased arg-3 e-9)) eta-0))) (let ((sc4 act-25)) (case (vector-ref sc4 0) ((0) (let ((e-3 (vector-ref sc4 1))) (vector 0 e-3))) (else (let ((e-7 (vector-ref sc4 1))) (let ((act-26 (Core-Normalise-quote_Quote__NF arg-0 e-6 arg-3 e-7 eta-0))) (let ((sc5 act-26)) (case (vector-ref sc5 0) ((0) (let ((e-3 (vector-ref sc5 1))) (vector 0 e-3))) (else (let ((e-8 (vector-ref sc5 1))) (Synthesis-Synthesize-tryUnify arg-0 arg-1 arg-2 arg-3 arg-4 e-8 eta-0))))))))))))) (let ((sc4 act-25)) (case (vector-ref sc4 0) ((0) (let ((e-3 (vector-ref sc4 1))) (vector 0 e-3))) (else (let ((e-7 (vector-ref sc4 1))) (let ((sc5 e-7)) (case (vector-ref sc5 0) ((1) (let ((act-26 ((Synthesis-Synthesize-tryUnifyInScope arg-0 arg-1 arg-2 arg-3 arg-4 e-2 arg-6) eta-0))) (let ((sc6 act-26)) (case (vector-ref sc6 0) ((0) (let ((e-4 (vector-ref sc6 1))) (vector 0 e-4))) (else (let ((e-8 (vector-ref sc6 1))) (vector 1 (vector 1 (vector 1 (vector 0 e-9 e-10)) e-8))))))))(else ((Synthesis-Synthesize-tryUnifyInScope arg-0 arg-1 arg-2 arg-3 arg-4 e-2 arg-6) eta-0)))))))))))))))))))) (else (Synthesis-Synthesize-tryUnifyInScope arg-0 arg-1 arg-2 arg-3 arg-4 e-2 arg-6))))))) (else (lambda (eta-0) (vector 1 (vector 0 ))))))))
(define Synthesis-Synthesize-tryUnify (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 ext-0) (let ((act-24 (Core-Core-newRef 'erased 'erased (vector "Synthesis.Synthesize.UFail" ) 1 ext-0))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (let ((act-25 (Core-Core-catch_Catchable__Core_Error 'erased (lambda (eta-0) (Core-Unify-unify_Unify__Term arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 eta-0)) (lambda (_-5571) (lambda (eta-0) (let ((act-25 (let ((act-25 (set-box! e-5 0))) (vector 1 act-25)))) (let ((sc1 act-25)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (vector 1 (vector 0 (vector 0 ) 1)))))))) ext-0))) (let ((sc1 act-25)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-6 (vector-ref sc1 1))) (let ((sc2 e-6)) (let ((e-0 (vector-ref sc2 1))) (let ((act-26 (let ((act-26 (unbox e-5))) (vector 1 act-26)))) (let ((sc3 act-26)) (case (vector-ref sc3 0) ((0) (let ((e-2 (vector-ref sc3 1))) (vector 0 e-2))) (else (let ((e-7 (vector-ref sc3 1))) (let ((sc4 e-7)) (cond ((equal? sc4 0) (vector 1 (vector 0 ))) (else (vector 1 (vector 1 e-0))))))))))))))))))))))))
(define Synthesis-Synthesize-tryConstructor (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (let ((sc0 arg-3)) (cond ((equal? sc0 0) (lambda (eta-0) (vector 1 (vector 0 ))))(else (let ((e-0 (- arg-3 1))) (lambda (eta-0) (let ((act-24 (let ((act-24 (unbox arg-1))) (vector 1 act-24)))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (let ((act-25 (Core-Context-lookupDef arg-6 e-5 eta-0))) (let ((sc1 act-25)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-6 (vector-ref sc1 1))) (let ((sc2 e-6)) (case (vector-ref sc2 0) ((1) (let ((e-1 (vector-ref sc2 1))) (let ((_-0 (vector 1 e-1))) ((Synthesis-Synthesize-case--caseC-32blockC-32inC-32tryConstructor-6950 arg-0 e-0 arg-6 arg-5 arg-4 arg-2 arg-1 e-5 e-1 _-0 (let ((sc3 e-1)) (let ((e-2 (vector-ref sc3 2))) e-2))) eta-0))))(else (vector 1 (vector 0 ))))))))))))))))))))))
(define Synthesis-Synthesize-synthesiseTerm (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-3)) (cond ((equal? sc0 0) (lambda (eta-0) (let ((act-24 ((Synthesis-Synthesize-checkLocals arg-0 arg-1 arg-2 arg-4 (Synthesis-Rescope-getUsableEnv arg-0 (vector 0 ) arg-4) arg-5) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc1 1))) (vector 1 (Prelude-Types-map_Functor__List 'erased 'erased (lambda (eta-1) (Synthesis-Monad-map_Functor__Search 'erased 'erased (lambda (x) (vector 0 x (vector 0 ))) eta-1)) e-5)))))))))(else (let ((sc0 arg-5)) (case (vector-ref sc0 0) ((3) (let ((e-1 (vector-ref sc0 1))) (let ((e-2 (vector-ref sc0 2))) (let ((e-3 (vector-ref sc0 3))) (let ((sc1 e-2)) (case (vector-ref sc1 0) ((1) (let ((e-5 (vector-ref sc1 1))) (let ((e-6 (vector-ref sc1 2))) (let ((e-7 (vector-ref sc1 3))) (let ((envC-39 (vector 1 (vector 0 e-5 e-6 e-7) arg-4))) (lambda (eta-0) (let ((act-24 ((Synthesis-Synthesize-synthesiseTerm (vector 1 e-1 arg-0) arg-1 arg-2 arg-3 envC-39 e-3) eta-0))) (let ((sc2 act-24)) (case (vector-ref sc2 0) ((0) (let ((e-4 (vector-ref sc2 1))) (vector 0 e-4))) (else (let ((e-8 (vector-ref sc2 1))) (vector 1 (Prelude-Types-map_Functor__List 'erased 'erased (lambda (res) (Synthesis-Monad-map_Functor__Search 'erased 'erased (lambda (lamc-0) (let ((sc3 lamc-0)) (let ((e-9 (vector-ref sc3 1))) (let ((e-4 (vector-ref sc3 2))) (vector 0 (vector 3 e-1 (vector 0 e-5 e-6 e-7) e-9) e-4))))) res)) e-8)))))))))))))(else (Synthesis-Synthesize-case--synthesiseTerm-7390 arg-0 arg-5 arg-4 arg-3 arg-2 arg-1 (Core-TT-getFnArgs 'erased arg-5)))))))))(else (Synthesis-Synthesize-case--synthesiseTerm-7390 arg-0 arg-5 arg-4 arg-3 arg-2 arg-1 (Core-TT-getFnArgs 'erased arg-5))))))))))
(define Synthesis-Synthesize-synthBinderArgsC-39 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8) (let ((sc0 arg-6)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 arg-8)) (case (vector-ref sc1 0) ((1) (let ((e-5 (vector-ref sc1 1))) (let ((sc2 e-5)) (case (vector-ref sc2 0) ((0) (let ((e-8 (vector-ref sc2 1))) (let ((e-9 (vector-ref sc2 2))) (lambda (eta-0) (let ((act-24 (let ((act-24 (unbox arg-1))) (vector 1 act-24)))) (let ((sc3 act-24)) (case (vector-ref sc3 0) ((0) (let ((e-4 (vector-ref sc3 1))) (vector 0 e-4))) (else (let ((e-6 (vector-ref sc3 1))) (let ((act-25 (let ((act-25 (((arg-7 e-6) (Core-Normalise-toClosure 'erased arg-4 e-8)) eta-0))) (let ((sc4 act-25)) (case (vector-ref sc4 0) ((0) (let ((e-4 (vector-ref sc4 1))) (vector 0 e-4))) (else (let ((e-7 (vector-ref sc4 1))) ((Synthesis-Synthesize-synthBinderArgs arg-0 arg-1 arg-2 (+ 1 arg-3) arg-4 arg-5 (vector 0 e-2 e-3) e-7) eta-0)))))))) (let ((sc4 act-25)) (case (vector-ref sc4 0) ((0) (let ((e-4 (vector-ref sc4 1))) (vector 0 e-4))) (else (let ((e-7 (vector-ref sc4 1))) (vector 1 (Prelude-Types-map_Functor__List 'erased 'erased (lambda (eta-1) (Synthesis-Monad-map_Functor__Search 'erased 'erased (lambda (eta-2) (Synthesis-Synthesize-extendApp arg-0 e-8 e-9 eta-2)) eta-1)) e-7))))))))))))))))(else (lambda (eta-0) (vector 1 (vector 0 ))))))))(else (lambda (eta-0) (vector 1 (vector 0 )))))))))(else (lambda (eta-0) (vector 1 (vector 0 ))))))))
(define Synthesis-Synthesize-synthBinderArgs (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (let ((sc0 arg-3)) (cond ((equal? sc0 0) (let ((sc1 arg-6)) (case (vector-ref sc1 0) ((0) (let ((sc2 arg-7)) (case (vector-ref sc2 0) ((0) (let ((e-23 (vector-ref sc2 2))) (let ((sc3 e-23)) (case (vector-ref sc3 0) ((1) (lambda (eta-0) (vector 1 (vector 0 ))))(else (let ((sc3 arg-6)) (let ((e-2 (vector-ref sc3 1))) (let ((e-3 (vector-ref sc3 2))) (lambda (eta-0) (vector 1 (vector 1 (vector 1 (vector 0 (vector 1 e-3 e-2) (vector 0 ))) (vector 0 ))))))))))))(else (let ((sc2 arg-6)) (let ((e-2 (vector-ref sc2 1))) (let ((e-3 (vector-ref sc2 2))) (lambda (eta-0) (vector 1 (vector 1 (vector 1 (vector 0 (vector 1 e-3 e-2) (vector 0 ))) (vector 0 )))))))))))(else (let ((sc1 arg-6)) (let ((e-2 (vector-ref sc1 1))) (let ((e-3 (vector-ref sc1 2))) (lambda (eta-0) (vector 1 (vector 1 (vector 1 (vector 0 (vector 1 e-3 e-2) (vector 0 ))) (vector 0 )))))))))))(else (let ((e-4 (- arg-3 1))) (let ((sc0 arg-6)) (case (vector-ref sc0 0) ((0) (let ((e-7 (vector-ref sc0 1))) (let ((e-8 (vector-ref sc0 2))) (let ((sc1 arg-7)) (case (vector-ref sc1 0) ((0) (let ((e-11 (vector-ref sc1 2))) (let ((e-12 (vector-ref sc1 3))) (let ((sc2 e-11)) (case (vector-ref sc2 0) ((1) (let ((e-16 (vector-ref sc2 3))) (lambda (eta-0) (let ((act-24 (let ((act-24 (unbox arg-1))) (vector 1 act-24)))) (let ((sc3 act-24)) (case (vector-ref sc3 0) ((0) (let ((e-2 (vector-ref sc3 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc3 1))) (let ((act-25 (let ((act-25 (Core-Normalise-quote_Quote__NF arg-0 e-5 arg-4 e-16 eta-0))) (let ((sc4 act-25)) (case (vector-ref sc4 0) ((0) (let ((e-2 (vector-ref sc4 1))) (vector 0 e-2))) (else (let ((e-6 (vector-ref sc4 1))) ((Synthesis-Synthesize-synthesiseTerm arg-0 arg-1 arg-2 e-4 arg-4 e-6) eta-0)))))))) (let ((sc4 act-25)) (case (vector-ref sc4 0) ((0) (let ((e-2 (vector-ref sc4 1))) (vector 0 e-2))) (else (let ((e-6 (vector-ref sc4 1))) (let ((act-26 ((Synthesis-Synthesize-tryUnifyInScope arg-0 arg-1 arg-2 arg-4 arg-5 e-6 e-12) eta-0))) (let ((sc5 act-26)) (case (vector-ref sc5 0) ((0) (let ((e-2 (vector-ref sc5 1))) (vector 0 e-2))) (else (let ((e-9 (vector-ref sc5 1))) (let ((act-27 ((Core-Core-traverse 'erased 'erased (lambda (eta-1) eta-1) (Prelude-Types-map_Functor__List 'erased 'erased (lambda (eta-1) (Synthesis-Synthesize-synthBinderArgsC-39 arg-0 arg-1 arg-2 e-4 arg-4 arg-5 (vector 0 e-7 e-8) e-12 eta-1)) e-9)) eta-0))) (let ((sc6 act-27)) (case (vector-ref sc6 0) ((0) (let ((e-2 (vector-ref sc6 1))) (vector 0 e-2))) (else (let ((e-13 (vector-ref sc6 1))) (vector 1 ((Prelude-Interfaces-concat 'erased 'erased (vector 0 (vector 0 (lambda (acc) (lambda (elem) (lambda (func) (lambda (init) (lambda (input) (Prelude-Types-foldr_Foldable__List 'erased 'erased func init input)))))) (lambda (elem) (lambda (acc) (lambda (func) (lambda (init) (lambda (input) (Prelude-Types-foldl_Foldable__List 'erased 'erased func init input))))))) (vector 0 (lambda (arg-8) (lambda (arg-9) (Prelude-Types-C-60C-43C-62_Semigroup__C-40ListC-32C-36aC-41 'erased arg-8 arg-9))) (Prelude-Types-neutral_Monoid__C-40ListC-32C-36aC-41 'erased)))) e-13)))))))))))))))))))))))))(else (let ((sc2 arg-6)) (let ((e-2 (vector-ref sc2 1))) (let ((e-3 (vector-ref sc2 2))) (lambda (eta-0) (vector 1 (vector 1 (vector 1 (vector 0 (vector 1 e-3 e-2) (vector 0 ))) (vector 0 )))))))))))))(else (let ((sc1 arg-6)) (let ((e-2 (vector-ref sc1 1))) (let ((e-3 (vector-ref sc1 2))) (lambda (eta-0) (vector 1 (vector 1 (vector 1 (vector 0 (vector 1 e-3 e-2) (vector 0 ))) (vector 0 )))))))))))))(else (let ((sc0 arg-6)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (lambda (eta-0) (vector 1 (vector 1 (vector 1 (vector 0 (vector 1 e-3 e-2) (vector 0 ))) (vector 0 ))))))))))))))))
(define Synthesis-Synthesize-searchFunctions (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-3)) (cond ((equal? sc0 0) (lambda (eta-0) (vector 1 (vector 0 ))))(else (let ((e-0 (- arg-3 1))) (lambda (eta-0) (let ((act-24 (Core-Context-mapDefsC-39 'erased arg-1 (lambda (lamc-0) (let ((sc0 lamc-0)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (lambda (eta-1) (let ((act-24 (let ((act-24 (unbox arg-1))) (vector 1 act-24)))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-4 (vector-ref sc1 1))) (vector 0 e-4))) (else (let ((e-5 (vector-ref sc1 1))) (let ((lamc-1 (vector 0 e-2 e-3))) ((Synthesis-Synthesize-case--caseC-32blockC-32inC-32searchFunctions-6653 arg-0 e-0 arg-5 arg-4 arg-2 arg-1 e-2 e-3 lamc-1 e-5 (let ((sc2 e-3)) (let ((e-1 (vector-ref sc2 2))) e-1))) eta-1)))))))))))) eta-0))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (let ((act-25 ((Core-Core-traverse 'erased 'erased (lambda (eta-1) eta-1) e-5) eta-0))) (let ((sc1 act-25)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-6 (vector-ref sc1 1))) (vector 1 ((Prelude-Interfaces-concat 'erased 'erased (vector 0 (vector 0 (lambda (acc) (lambda (elem) (lambda (func) (lambda (init) (lambda (input) (Prelude-Types-foldr_Foldable__List 'erased 'erased func init input)))))) (lambda (elem) (lambda (acc) (lambda (func) (lambda (init) (lambda (input) (Prelude-Types-foldl_Foldable__List 'erased 'erased func init input))))))) (vector 0 (lambda (arg-6) (lambda (arg-7) (Prelude-Types-C-60C-43C-62_Semigroup__C-40ListC-32C-36aC-41 'erased arg-6 arg-7))) (Prelude-Types-neutral_Monoid__C-40ListC-32C-36aC-41 'erased)))) e-6)))))))))))))))))))
(define Synthesis-Synthesize-run (lambda (arg-0 arg-1 arg-2 ext-0) (let ((act-24 (let ((act-24 (let ((act-24 (unbox arg-0))) (vector 1 act-24)))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (Core-Context-lookupDef arg-2 e-5 ext-0)))))))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (let ((sc1 e-5)) (case (vector-ref sc1 0) ((1) (let ((e-1 (vector-ref sc1 1))) (let ((_-0 (vector 1 e-1))) ((Synthesis-Synthesize-case--caseC-32blockC-32inC-32run-7547 arg-2 arg-1 arg-0 e-1 _-0 (let ((sc2 e-1)) (let ((e-2 (vector-ref sc2 2))) e-2))) ext-0))))(else (vector 1 "Invalid Name")))))))))))
(define Synthesis-Synthesize-printFinals (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((0) (lambda (eta-0) (vector 1 (vector 0 )))) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 e-2)) (case (vector-ref sc1 0) ((0) (Synthesis-Synthesize-printFinals arg-0 arg-1 arg-2 e-3)) (else (let ((e-6 (vector-ref sc1 1))) (lambda (eta-0) (let ((act-24 (Core-Core-log (Synthesis-Resugar-resugarTop (Synthesis-Unelab-unelab arg-0 arg-1 arg-2 e-6)) eta-0))) (let ((sc2 act-24)) (case (vector-ref sc2 0) ((0) (let ((e-4 (vector-ref sc2 1))) (vector 0 e-4))) (else ((Synthesis-Synthesize-printFinals arg-0 arg-1 arg-2 e-3) eta-0)))))))))))))))))
(define Synthesis-Synthesize-first (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (case (vector-ref sc0 0) ((0) (vector 0 )) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 e-2)) (case (vector-ref sc1 0) ((0) (Synthesis-Synthesize-first 'erased e-3)) (else (let ((e-6 (vector-ref sc1 1))) (vector 1 e-6))))))))))))
(define Synthesis-Synthesize-filterResults (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((0) (lambda (eta-0) (vector 1 (vector 0 )))) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 e-2)) (case (vector-ref sc1 0) ((0) (Synthesis-Synthesize-filterResults arg-0 arg-1 arg-2 e-3)) (else (let ((e-6 (vector-ref sc1 1))) (let ((sc2 e-6)) (let ((e-9 (vector-ref sc2 1))) (let ((e-10 (vector-ref sc2 2))) (lambda (eta-0) (let ((act-24 ((Core-Unify-retryInts arg-1 arg-2 e-10) eta-0))) (let ((sc3 act-24)) (case (vector-ref sc3 0) ((0) (let ((e-4 (vector-ref sc3 1))) (vector 0 e-4))) (else (let ((e-5 (vector-ref sc3 1))) (let ((sc4 e-5)) (case (vector-ref sc4 0) ((0) (let ((act-25 ((Synthesis-Synthesize-filterResults arg-0 arg-1 arg-2 e-3) eta-0))) (let ((sc5 act-25)) (case (vector-ref sc5 0) ((0) (let ((e-4 (vector-ref sc5 1))) (vector 0 e-4))) (else (let ((e-7 (vector-ref sc5 1))) (vector 1 (vector 1 (vector 1 e-9) e-7))))))))(else ((Synthesis-Synthesize-filterResults arg-0 arg-1 arg-2 e-3) eta-0))))))))))))))))))))))))
(define Synthesis-Synthesize-fillMetas (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((3) (let ((e-1 (vector-ref sc0 1))) (let ((e-2 (vector-ref sc0 2))) (let ((e-3 (vector-ref sc0 3))) (let ((sc1 e-2)) (case (vector-ref sc1 0) ((1) (let ((e-5 (vector-ref sc1 1))) (let ((e-6 (vector-ref sc1 2))) (let ((e-7 (vector-ref sc1 3))) (let ((envC-39 (vector 1 (vector 1 e-5 e-6 e-7) arg-4))) (lambda (eta-0) (let ((act-24 ((Synthesis-Synthesize-fillMetas (vector 1 e-1 arg-0) arg-1 arg-2 e-3 envC-39) eta-0))) (let ((sc2 act-24)) (case (vector-ref sc2 0) ((0) (let ((e-4 (vector-ref sc2 1))) (vector 0 e-4))) (else (let ((e-8 (vector-ref sc2 1))) (let ((sc3 e-8)) (let ((e-9 (vector-ref sc3 1))) (let ((e-4 (vector-ref sc3 2))) (let ((sc4 e-4)) (let ((e-11 (vector-ref sc4 1))) (let ((e-10 (vector-ref sc4 2))) (let ((sc5 e-10)) (let ((e-13 (vector-ref sc5 1))) (let ((e-12 (vector-ref sc5 2))) (vector 1 (vector 0 (Prelude-Types-List-C-43C-43 'erased e-9 (vector 1 e-1 (vector 0 ))) (vector 0 e-11 (vector 0 (vector 1 (Core-TT-weakenNs_Weaken__Term (vector 1 e-1 arg-0) e-9 (Core-TT-weaken_Weaken__Term e-1 arg-0 e-7)) e-13) e-12))))))))))))))))))))))))(else (lambda (eta-0) (vector 1 (vector 0 (vector 0 ) (vector 0 arg-3 (vector 0 (vector 0 ) arg-4))))))))))))(else (lambda (eta-0) (vector 1 (vector 0 (vector 0 ) (vector 0 arg-3 (vector 0 (vector 0 ) arg-4))))))))))
(define Synthesis-Synthesize-extendApp (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (vector 0 (vector 4 e-2 arg-1) (Prelude-Types-List-C-43C-43 'erased arg-2 e-3)))))))
(define Synthesis-Synthesize-checkLocals (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-4)) (case (vector-ref sc0 0) ((1) (let ((e-1 (vector-ref sc0 1))) (let ((e-2 (vector-ref sc0 2))) (let ((sc1 e-1)) (case (vector-ref sc1 0) ((0) (let ((e-6 (vector-ref sc1 1))) (lambda (eta-0) (let ((act-24 (Synthesis-Synthesize-tryUnify arg-0 arg-1 arg-2 arg-3 arg-5 (Core-TT-binderType 'erased (Core-Env-getBinder 'erased 'erased (vector 0 (lambda (n) (lambda (vars) (lambda (arg-2952) (Core-TT-weaken_Weaken__Term n vars arg-2952)))) (lambda (vars) (lambda (ns) (lambda (arg-2956) (Core-TT-weakenNs_Weaken__Term vars ns arg-2956))))) arg-0 e-6 'erased arg-3)) eta-0))) (let ((sc2 act-24)) (case (vector-ref sc2 0) ((0) (let ((e-3 (vector-ref sc2 1))) (vector 0 e-3))) (else (let ((e-5 (vector-ref sc2 1))) (let ((sc3 e-5)) (case (vector-ref sc3 0) ((1) (let ((e-3 (vector-ref sc3 1))) (let ((sc4 e-3)) (case (vector-ref sc4 0) ((0) (let ((act-25 ((Synthesis-Synthesize-checkLocals arg-0 arg-1 arg-2 arg-3 e-2 arg-5) eta-0))) (let ((sc5 act-25)) (case (vector-ref sc5 0) ((0) (let ((e-4 (vector-ref sc5 1))) (vector 0 e-4))) (else (let ((e-7 (vector-ref sc5 1))) (vector 1 (vector 1 (vector 1 (vector 0 e-6)) e-7))))))))(else ((Synthesis-Synthesize-checkLocals arg-0 arg-1 arg-2 arg-3 e-2 arg-5) eta-0))))))(else ((Synthesis-Synthesize-checkLocals arg-0 arg-1 arg-2 arg-3 e-2 arg-5) eta-0))))))))))))(else (Synthesis-Synthesize-checkLocals arg-0 arg-1 arg-2 arg-3 e-2 arg-5))))))) (else (lambda (eta-0) (vector 1 (vector 0 ))))))))
(define Synthesis-Monad-map_Functor__Search (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((0) (vector 0 )) (else (let ((e-2 (vector-ref sc0 1))) (vector 1 (arg-2 e-2))))))))
(define Synthesis-Resugar-case--resugarTop-4011 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (Prelude-Types-Strings-C-43C-43 (Synthesis-Resugar-resugar e-2) (Prelude-Types-Strings-C-43C-43 " " (Prelude-Types-Strings-C-43C-43 (Synthesis-Resugar-resugar arg-0) (Prelude-Types-Strings-C-43C-43 " " ((Prelude-Interfaces-concat 'erased 'erased (vector 0 (vector 0 (lambda (acc) (lambda (elem) (lambda (func) (lambda (init) (lambda (input) (Prelude-Types-foldr_Foldable__List 'erased 'erased func init input)))))) (lambda (elem) (lambda (acc) (lambda (func) (lambda (init) (lambda (input) (Prelude-Types-foldl_Foldable__List 'erased 'erased func init input))))))) (vector 0 (lambda (arg-3) (lambda (arg-4) (Prelude-Types-C-60C-43C-62_Semigroup__String arg-3 arg-4))) (Prelude-Types-neutral_Monoid__String)))) (Data-List-intersperse 'erased " " (Prelude-Types-map_Functor__List 'erased 'erased (lambda (eta-0) (Synthesis-Resugar-resugar eta-0)) e-3))))))))))))
(define Synthesis-Resugar-case--resugarTopC-44getFnArgs-3983 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-4)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (vector 0 e-2 (vector 1 arg-2 e-3)))))))
(define Synthesis-Resugar-case--resugar-3923 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (Prelude-Types-Strings-C-43C-43 "(" (Prelude-Types-Strings-C-43C-43 (Synthesis-Resugar-resugar e-2) (Prelude-Types-Strings-C-43C-43 " " (Prelude-Types-Strings-C-43C-43 (Synthesis-Resugar-resugar arg-0) (Prelude-Types-Strings-C-43C-43 " " (Prelude-Types-Strings-C-43C-43 ((Prelude-Interfaces-concat 'erased 'erased (vector 0 (vector 0 (lambda (acc) (lambda (elem) (lambda (func) (lambda (init) (lambda (input) (Prelude-Types-foldr_Foldable__List 'erased 'erased func init input)))))) (lambda (elem) (lambda (acc) (lambda (func) (lambda (init) (lambda (input) (Prelude-Types-foldl_Foldable__List 'erased 'erased func init input))))))) (vector 0 (lambda (arg-3) (lambda (arg-4) (Prelude-Types-C-60C-43C-62_Semigroup__String arg-3 arg-4))) (Prelude-Types-neutral_Monoid__String)))) (Data-List-intersperse 'erased " " (Prelude-Types-map_Functor__List 'erased 'erased (lambda (eta-0) (Synthesis-Resugar-resugar eta-0)) e-3))) ")")))))))))))
(define Synthesis-Resugar-case--resugarC-44getFnArgs-3895 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-4)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (vector 0 e-2 (vector 1 arg-2 e-3)))))))
(define Synthesis-Resugar-n--2466-3977-getFnArgs (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((4) (let ((e-0 (vector-ref sc0 1))) (let ((e-1 (vector-ref sc0 2))) (Synthesis-Resugar-case--resugarTopC-44getFnArgs-3983 arg-0 arg-1 e-1 e-0 (Synthesis-Resugar-n--2466-3977-getFnArgs arg-0 arg-1 e-0)))))(else (vector 0 arg-2 (vector 0 )))))))
(define Synthesis-Resugar-n--2465-3889-getFnArgs (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((4) (let ((e-0 (vector-ref sc0 1))) (let ((e-1 (vector-ref sc0 2))) (Synthesis-Resugar-case--resugarC-44getFnArgs-3895 arg-0 arg-1 e-1 e-0 (Synthesis-Resugar-n--2465-3889-getFnArgs arg-0 arg-1 e-0)))))(else (vector 0 arg-2 (vector 0 )))))))
(define Synthesis-Resugar-resugarTop (lambda (arg-0) (let ((sc0 arg-0)) (case (vector-ref sc0 0) ((4) (let ((e-0 (vector-ref sc0 1))) (let ((e-1 (vector-ref sc0 2))) (Synthesis-Resugar-case--resugarTop-4011 e-1 e-0 (Synthesis-Resugar-n--2466-3977-getFnArgs e-1 e-0 e-0)))))(else (Synthesis-Resugar-resugar arg-0))))))
(define Synthesis-Resugar-resugarPat (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (cond ((equal? sc0 0) (Prelude-Types-Strings-C-43C-43 "pat " (Synthesis-Resugar-resugarPat arg-0 arg-1 arg-2 1)))(else (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((3) (let ((e-0 (vector-ref sc0 1))) (let ((e-1 (vector-ref sc0 2))) (let ((e-2 (vector-ref sc0 3))) (let ((sc1 arg-3)) (cond ((equal? sc1 1) (Prelude-Types-Strings-C-43C-43 (Core-TT-show_Show__Name arg-0) (Prelude-Types-Strings-C-43C-43 " : " (Prelude-Types-Strings-C-43C-43 (Synthesis-Resugar-resugar arg-1) (Prelude-Types-Strings-C-43C-43 " , " (Synthesis-Resugar-resugarPat e-0 e-1 e-2 1))))))(else (let ((sc1 arg-3)) (cond (else (Prelude-Types-Strings-C-43C-43 (Core-TT-show_Show__Name arg-0) (Prelude-Types-Strings-C-43C-43 " : " (Prelude-Types-Strings-C-43C-43 (Synthesis-Resugar-resugar arg-1) (Prelude-Types-Strings-C-43C-43 " => " (Synthesis-Resugar-resugar arg-2)))))))))))))))(else (let ((sc0 arg-3)) (cond (else (Prelude-Types-Strings-C-43C-43 (Core-TT-show_Show__Name arg-0) (Prelude-Types-Strings-C-43C-43 " : " (Prelude-Types-Strings-C-43C-43 (Synthesis-Resugar-resugar arg-1) (Prelude-Types-Strings-C-43C-43 " => " (Synthesis-Resugar-resugar arg-2))))))))))))))))
(define Synthesis-Resugar-resugarLam (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-0)) (cond ((equal? sc0 0) (Prelude-Types-Strings-C-43C-43 "lam " (Synthesis-Resugar-resugarLam 1 arg-1 arg-2))) (else (let ((sc1 arg-1)) (case (vector-ref sc1 0) ((0) (let ((sc2 arg-2)) (case (vector-ref sc2 0) ((2) (let ((e-4 (vector-ref sc2 2))) (let ((e-6 (vector-ref sc2 4))) (Prelude-Types-Strings-C-43C-43 " _ " (Synthesis-Resugar-resugarLam 1 e-4 e-6)))))(else (Prelude-Types-Strings-C-43C-43 " _ => " (Synthesis-Resugar-resugar arg-2)))))) (else (let ((e-2 (vector-ref sc1 1))) (let ((sc2 e-2)) (case (vector-ref sc2 0) ((0) (let ((e-7 (vector-ref sc2 1))) (let ((sc3 arg-2)) (case (vector-ref sc3 0) ((2) (let ((e-11 (vector-ref sc3 2))) (let ((e-13 (vector-ref sc3 4))) (Prelude-Types-Strings-C-43C-43 e-7 (Prelude-Types-Strings-C-43C-43 " " (Synthesis-Resugar-resugarLam 1 e-11 e-13))))))(else (Prelude-Types-Strings-C-43C-43 e-7 (Prelude-Types-Strings-C-43C-43 " => " (Synthesis-Resugar-resugar arg-2)))))))) (else (let ((sc3 arg-2)) (case (vector-ref sc3 0) ((2) (let ((e-15 (vector-ref sc3 2))) (let ((e-17 (vector-ref sc3 4))) (Prelude-Types-Strings-C-43C-43 "_ " (Prelude-Types-Strings-C-43C-43 " " (Synthesis-Resugar-resugarLam 1 e-15 e-17))))))(else (Prelude-Types-Strings-C-43C-43 "_ " (Prelude-Types-Strings-C-43C-43 " => " (Synthesis-Resugar-resugar arg-2))))))))))))))))))
(define Synthesis-Resugar-resugar (lambda (arg-0) (let ((sc0 arg-0)) (case (vector-ref sc0 0) ((0) (let ((e-0 (vector-ref sc0 1))) (let ((sc1 e-0)) (case (vector-ref sc1 0) ((0) (let ((e-15 (vector-ref sc1 1))) e-15)) (else "_"))))) ((1) (let ((e-2 (vector-ref sc0 2))) (let ((e-3 (vector-ref sc0 3))) (let ((e-4 (vector-ref sc0 4))) (let ((sc1 e-2)) (case (vector-ref sc1 0) ((0) (Prelude-Types-Strings-C-43C-43 " ( _ : " (Prelude-Types-Strings-C-43C-43 (Synthesis-Resugar-resugar e-3) (Prelude-Types-Strings-C-43C-43 ") -> " (Synthesis-Resugar-resugar e-4))))) (else (let ((e-20 (vector-ref sc1 1))) (let ((sc2 e-20)) (case (vector-ref sc2 0) ((0) (let ((e-21 (vector-ref sc2 1))) (Prelude-Types-Strings-C-43C-43 " ( " (Prelude-Types-Strings-C-43C-43 e-21 (Prelude-Types-Strings-C-43C-43 " : " (Prelude-Types-Strings-C-43C-43 (Synthesis-Resugar-resugar e-3) (Prelude-Types-Strings-C-43C-43 " ) -> " (Synthesis-Resugar-resugar e-4)))))))) (else (Prelude-Types-Strings-C-43C-43 " ( _ : " (Prelude-Types-Strings-C-43C-43 (Synthesis-Resugar-resugar e-3) (Prelude-Types-Strings-C-43C-43 " ) -> " (Synthesis-Resugar-resugar e-4))))))))))))))) ((2) (let ((e-6 (vector-ref sc0 2))) (let ((e-8 (vector-ref sc0 4))) (Synthesis-Resugar-resugarLam 0 e-6 e-8)))) ((3) (let ((e-9 (vector-ref sc0 1))) (let ((e-10 (vector-ref sc0 2))) (let ((e-11 (vector-ref sc0 3))) (Synthesis-Resugar-resugarPat e-9 e-10 e-11 0))))) ((4) (let ((e-12 (vector-ref sc0 1))) (let ((e-13 (vector-ref sc0 2))) (Synthesis-Resugar-case--resugar-3923 e-13 e-12 (Synthesis-Resugar-n--2465-3889-getFnArgs e-13 e-12 e-12))))) ((5) (let ((e-14 (vector-ref sc0 1))) (let ((sc1 e-14)) (case (vector-ref sc1 0) ((0) (let ((e-24 (vector-ref sc1 1))) (Prelude-Types-Strings-C-43C-43 "?" e-24))) (else "?_"))))) ((6) "_") (else " : ")))))
(define TTImp-TTImp-apply (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (case (vector-ref sc0 0) ((0) arg-0) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (TTImp-TTImp-apply (vector 4 arg-0 e-2) e-3))))))))
(define Synthesis-Unelab-unelab (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 (Core-TT-nameAt 'erased arg-0 e-2 'erased)))) ((1) (let ((e-6 (vector-ref sc0 2))) (vector 0 e-6))) ((2) (let ((e-8 (vector-ref sc0 1))) (vector 5 e-8))) ((3) (let ((e-11 (vector-ref sc0 1))) (let ((e-12 (vector-ref sc0 2))) (let ((e-13 (vector-ref sc0 3))) (let ((sc1 e-12)) (case (vector-ref sc1 0) ((0) (let ((e-20 (vector-ref sc1 1))) (let ((e-21 (vector-ref sc1 2))) (let ((e-22 (vector-ref sc1 3))) (vector 2 e-21 (vector 1 e-11) (Synthesis-Unelab-unelab arg-0 arg-1 arg-2 e-22) (Synthesis-Unelab-unelab (vector 1 e-11 arg-0) arg-1 (vector 1 (vector 0 e-20 e-21 e-22) arg-2) e-13)))))) ((1) (let ((e-24 (vector-ref sc1 1))) (let ((e-25 (vector-ref sc1 2))) (let ((e-26 (vector-ref sc1 3))) (let ((sc2 e-25)) (case (vector-ref sc2 0) ((0) (vector 6 )) (else (vector 1 (vector 1 ) (vector 1 e-11) (Synthesis-Unelab-unelab arg-0 arg-1 arg-2 e-26) (Synthesis-Unelab-unelab (vector 1 e-11 arg-0) arg-1 (vector 1 (vector 1 e-24 (vector 1 ) e-26) arg-2) e-13))))))))) ((2) (let ((e-28 (vector-ref sc1 1))) (let ((e-29 (vector-ref sc1 2))) (vector 3 e-11 (Synthesis-Unelab-unelab arg-0 arg-1 arg-2 e-29) (Synthesis-Unelab-unelab (vector 1 e-11 arg-0) arg-1 (vector 1 (vector 2 e-28 e-29) arg-2) e-13))))) (else (vector 7 )))))))) ((4) (let ((e-15 (vector-ref sc0 1))) (let ((e-16 (vector-ref sc0 2))) (vector 4 (Synthesis-Unelab-unelab arg-0 arg-1 arg-2 e-15) (Synthesis-Unelab-unelab arg-0 arg-1 arg-2 e-16))))) ((5) (vector 7 )) (else (vector 6 ))))))
(define Synthesis-Rescope-case--caseC-32blockC-32inC-32getUsableEnv-4014 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10) (let ((sc0 arg-10)) (cond ((equal? sc0 0) (vector 1 (vector 0 arg-8) arg-6)) (else arg-6)))))
(define Synthesis-Rescope-case--getUsableEnv-3991 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (Synthesis-Rescope-case--caseC-32blockC-32inC-32getUsableEnv-4014 arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 'erased arg-7 'erased (Synthesis-Rescope-givenName arg-0))))
(define Synthesis-Rescope-case--caseC-32blockC-32inC-32getUsableEnv-3884 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11) (let ((sc0 arg-11)) (cond ((equal? sc0 0) (vector 1 (vector 0 arg-9) arg-7)) (else arg-7)))))
(define Synthesis-Rescope-case--getUsableEnv-3859 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8) (Synthesis-Rescope-case--caseC-32blockC-32inC-32getUsableEnv-3884 arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 'erased arg-8 'erased (Synthesis-Rescope-givenName arg-0))))
(define Synthesis-Rescope-weakenNS (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-1)) (case (vector-ref sc0 0) ((0) arg-2) (else (let ((e-3 (vector-ref sc0 2))) (+ 1 (+ (Prelude-Types-List-length 'erased e-3) arg-2))))))))
(define Synthesis-Rescope-givenName (lambda (arg-0) (let ((sc0 arg-0)) (case (vector-ref sc0 0) ((0) 0)(else 1)))))
(define Synthesis-Rescope-getUsableEnv (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-0)) (case (vector-ref sc0 0) ((1) (let ((e-1 (vector-ref sc0 1))) (let ((e-2 (vector-ref sc0 2))) (let ((sc1 arg-2)) (let ((e-7 (vector-ref sc1 1))) (let ((e-8 (vector-ref sc1 2))) (let ((sc2 e-7)) (case (vector-ref sc2 0) ((0) (let ((e-10 (vector-ref sc2 1))) (let ((e-11 (vector-ref sc2 2))) (let ((e-12 (vector-ref sc2 3))) (let ((rest (Synthesis-Rescope-getUsableEnv e-2 (Prelude-Types-List-C-43C-43 'erased arg-1 (vector 1 e-1 (vector 0 ))) e-8))) (Synthesis-Rescope-case--getUsableEnv-3859 e-1 e-2 e-12 e-11 e-10 e-8 arg-1 rest (Synthesis-Rescope-weakenNS 'erased arg-1 0))))))) ((2) (let ((e-14 (vector-ref sc2 1))) (let ((e-15 (vector-ref sc2 2))) (let ((rest (Synthesis-Rescope-getUsableEnv e-2 (Prelude-Types-List-C-43C-43 'erased arg-1 (vector 1 e-1 (vector 0 ))) e-8))) (Synthesis-Rescope-case--getUsableEnv-3991 e-1 e-2 e-15 e-14 e-8 arg-1 rest (Synthesis-Rescope-weakenNS 'erased arg-1 0))))))(else (Synthesis-Rescope-getUsableEnv e-2 (Prelude-Types-List-C-43C-43 'erased arg-1 (vector 1 e-1 (vector 0 ))) e-8)))))))))) (else (let ((sc1 arg-2)) (vector 0 )))))))
(define TTImp-Elab-Term-case--checkTerm-1744 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (let ((sc0 arg-7)) (case (vector-ref sc0 0) ((0) (lambda (eta-0) (let ((act-24 ((Core-Normalise-getTerm 'erased arg-2) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc1 1))) (let ((act-25 ((Core-UnifyState-newMeta arg-0 arg-5 arg-4 arg-3 arg-1 e-5 (vector 5 arg-0 arg-3 e-5)) eta-0))) (let ((sc2 act-25)) (case (vector-ref sc2 0) ((0) (let ((e-2 (vector-ref sc2 1))) (vector 0 e-2))) (else (let ((e-6 (vector-ref sc2 1))) (vector 1 (vector 0 e-6 arg-2))))))))))))))(else (lambda (eta-0) (Core-Core-throw_Catchable__Core_Error 'erased (vector 3 (Prelude-Types-Strings-C-43C-43 (Core-TT-show_Show__Name arg-1) " already defined")) eta-0)))))))
(define TTImp-Elab-Term-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32checkTerm-1424 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11) (let ((sc0 arg-10)) (case (vector-ref sc0 0) ((0) (let ((e-1 (vector-ref sc0 1))) (lambda (eta-0) (Core-Core-log (Core-TT-show_Show__Name e-1) eta-0)))) ((1) (let ((e-5 (vector-ref sc0 1))) (let ((sc1 e-5)) (case (vector-ref sc1 0) ((0) (let ((e-21 (vector-ref sc1 1))) (lambda (eta-0) (Core-Core-log (Prelude-Types-Strings-C-43C-43 "loc" (Prelude-Show-show_Show__Nat e-21)) eta-0)))) ((1) (let ((e-24 (vector-ref sc1 1))) (let ((e-25 (vector-ref sc1 2))) (lambda (eta-0) (Core-Core-log (Prelude-Types-Strings-C-43C-43 "ref" (Prelude-Types-Strings-C-43C-43 (Core-TT-show_Show__NameType e-24) (Prelude-Types-Strings-C-43C-43 " " (Core-TT-show_Show__Name e-25)))) eta-0))))) (else (let ((e-27 (vector-ref sc1 1))) (lambda (eta-0) (Core-Core-log (Prelude-Types-Strings-C-43C-43 "Meta" (Core-TT-show_Show__Name e-27)) eta-0)))))))) ((2) (let ((e-8 (vector-ref sc0 1))) (lambda (eta-0) (Core-Core-log (Prelude-Types-Strings-C-43C-43 "data " (Core-TT-show_Show__Name e-8)) eta-0)))) ((3) (let ((e-13 (vector-ref sc0 1))) (lambda (eta-0) (Core-Core-log (Prelude-Types-Strings-C-43C-43 "typeC " (Core-TT-show_Show__Name e-13)) eta-0)))) ((4) (lambda (eta-0) (Core-Core-log "NTY" eta-0))) (else (lambda (eta-0) (Core-Core-log "erased" eta-0)))))))
(define TTImp-Elab-Term-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32checkTerm-1337 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-13 arg-14 arg-15 arg-16 arg-17) (let ((sc0 arg-17)) (let ((e-2 (vector-ref sc0 1))) (lambda (eta-0) (let ((act-24 (((arg-13 arg-16) (Core-Normalise-toClosure 'erased arg-4 e-2)) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-4 (vector-ref sc1 1))) (vector 0 e-4))) (else (let ((e-5 (vector-ref sc1 1))) ((TTImp-Elab-Term-checkExp arg-0 arg-6 arg-5 arg-4 (vector 4 arg-7 e-2) (Core-Normalise-glueBack arg-0 arg-16 arg-4 e-5) arg-3) eta-0)))))))))))
(define TTImp-Elab-Term-case--caseC-32blockC-32inC-32checkTerm-1284 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10) (let ((sc0 arg-10)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 2))) (let ((e-3 (vector-ref sc0 3))) (let ((sc1 e-2)) (case (vector-ref sc1 0) ((1) (let ((e-7 (vector-ref sc1 3))) (lambda (eta-0) (let ((act-24 (let ((act-24 (unbox arg-6))) (vector 1 act-24)))) (let ((sc2 act-24)) (case (vector-ref sc2 0) ((0) (let ((e-4 (vector-ref sc2 1))) (vector 0 e-4))) (else (let ((e-8 (vector-ref sc2 1))) (let ((act-25 ((TTImp-Elab-Term-checkTerm arg-0 arg-6 arg-5 arg-4 arg-1 (vector 1 (Core-Normalise-glueBack arg-0 e-8 arg-4 e-7))) eta-0))) (let ((sc3 act-25)) (case (vector-ref sc3 0) ((0) (let ((e-4 (vector-ref sc3 1))) (vector 0 e-4))) (else (let ((e-9 (vector-ref sc3 1))) (let ((sc4 e-9)) (let ((e-10 (vector-ref sc4 1))) (let ((act-26 (((e-3 e-8) (Core-Normalise-toClosure 'erased arg-4 e-10)) eta-0))) (let ((sc5 act-26)) (case (vector-ref sc5 0) ((0) (let ((e-11 (vector-ref sc5 1))) (vector 0 e-11))) (else (let ((e-11 (vector-ref sc5 1))) ((TTImp-Elab-Term-checkExp arg-0 arg-6 arg-5 arg-4 (vector 4 arg-7 e-10) (Core-Normalise-glueBack arg-0 e-8 arg-4 e-11) arg-3) eta-0)))))))))))))))))))))(else (lambda (eta-0) (let ((act-24 (let ((sc1 arg-10)) (case (vector-ref sc1 0) ((0) (let ((e-6 (vector-ref sc1 1))) (Core-Core-log (Core-TT-show_Show__Name e-6) eta-0))) ((1) (let ((e-5 (vector-ref sc1 1))) (let ((sc2 e-5)) (case (vector-ref sc2 0) ((0) (let ((e-21 (vector-ref sc2 1))) (Core-Core-log (Prelude-Types-Strings-C-43C-43 "loc" (Prelude-Show-show_Show__Nat e-21)) eta-0))) ((1) (let ((e-24 (vector-ref sc2 1))) (let ((e-25 (vector-ref sc2 2))) (Core-Core-log (Prelude-Types-Strings-C-43C-43 "ref" (Prelude-Types-Strings-C-43C-43 (Core-TT-show_Show__NameType e-24) (Prelude-Types-Strings-C-43C-43 " " (Core-TT-show_Show__Name e-25)))) eta-0)))) (else (let ((e-27 (vector-ref sc2 1))) (Core-Core-log (Prelude-Types-Strings-C-43C-43 "Meta" (Core-TT-show_Show__Name e-27)) eta-0))))))) ((2) (let ((e-8 (vector-ref sc1 1))) (Core-Core-log (Prelude-Types-Strings-C-43C-43 "data " (Core-TT-show_Show__Name e-8)) eta-0))) ((3) (let ((e-13 (vector-ref sc1 1))) (Core-Core-log (Prelude-Types-Strings-C-43C-43 "typeC " (Core-TT-show_Show__Name e-13)) eta-0))) ((4) (Core-Core-log "NTY" eta-0)) (else (Core-Core-log "erased" eta-0)))))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-4 (vector-ref sc1 1))) (vector 0 e-4))) (else (Core-Core-throw_Catchable__Core_Error 'erased (vector 3 "Not a function type") eta-0))))))))))))(else (lambda (eta-0) (let ((act-24 (let ((sc0 arg-10)) (case (vector-ref sc0 0) ((0) (let ((e-1 (vector-ref sc0 1))) (Core-Core-log (Core-TT-show_Show__Name e-1) eta-0))) ((1) (let ((e-5 (vector-ref sc0 1))) (let ((sc1 e-5)) (case (vector-ref sc1 0) ((0) (let ((e-21 (vector-ref sc1 1))) (Core-Core-log (Prelude-Types-Strings-C-43C-43 "loc" (Prelude-Show-show_Show__Nat e-21)) eta-0))) ((1) (let ((e-24 (vector-ref sc1 1))) (let ((e-25 (vector-ref sc1 2))) (Core-Core-log (Prelude-Types-Strings-C-43C-43 "ref" (Prelude-Types-Strings-C-43C-43 (Core-TT-show_Show__NameType e-24) (Prelude-Types-Strings-C-43C-43 " " (Core-TT-show_Show__Name e-25)))) eta-0)))) (else (let ((e-27 (vector-ref sc1 1))) (Core-Core-log (Prelude-Types-Strings-C-43C-43 "Meta" (Core-TT-show_Show__Name e-27)) eta-0))))))) ((2) (let ((e-8 (vector-ref sc0 1))) (Core-Core-log (Prelude-Types-Strings-C-43C-43 "data " (Core-TT-show_Show__Name e-8)) eta-0))) ((3) (let ((e-13 (vector-ref sc0 1))) (Core-Core-log (Prelude-Types-Strings-C-43C-43 "typeC " (Core-TT-show_Show__Name e-13)) eta-0))) ((4) (Core-Core-log "NTY" eta-0)) (else (Core-Core-log "erased" eta-0)))))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (Core-Core-throw_Catchable__Core_Error 'erased (vector 3 "Not a function type") eta-0)))))))))))
(define TTImp-Elab-Term-case--checkTerm-1255 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (let ((sc0 arg-7)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (lambda (eta-0) (let ((act-24 ((Core-Normalise-getNF 'erased arg-6 e-3) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-4 (vector-ref sc1 1))) (vector 0 e-4))) (else (let ((e-5 (vector-ref sc1 1))) (let ((sc2 e-5)) (case (vector-ref sc2 0) ((0) (let ((e-6 (vector-ref sc2 2))) (let ((e-4 (vector-ref sc2 3))) (let ((sc3 e-6)) (case (vector-ref sc3 0) ((1) (let ((e-7 (vector-ref sc3 3))) (let ((act-25 (let ((act-25 (unbox arg-6))) (vector 1 act-25)))) (let ((sc4 act-25)) (case (vector-ref sc4 0) ((0) (let ((e-10 (vector-ref sc4 1))) (vector 0 e-10))) (else (let ((e-10 (vector-ref sc4 1))) (let ((act-26 ((TTImp-Elab-Term-checkTerm arg-0 arg-6 arg-5 arg-4 arg-1 (vector 1 (Core-Normalise-glueBack arg-0 e-10 arg-4 e-7))) eta-0))) (let ((sc5 act-26)) (case (vector-ref sc5 0) ((0) (let ((e-11 (vector-ref sc5 1))) (vector 0 e-11))) (else (let ((e-11 (vector-ref sc5 1))) (let ((sc6 e-11)) (let ((e-13 (vector-ref sc6 1))) (let ((act-27 (((e-4 e-10) (Core-Normalise-toClosure 'erased arg-4 e-13)) eta-0))) (let ((sc7 act-27)) (case (vector-ref sc7 0) ((0) (let ((e-14 (vector-ref sc7 1))) (vector 0 e-14))) (else (let ((e-14 (vector-ref sc7 1))) ((TTImp-Elab-Term-checkExp arg-0 arg-6 arg-5 arg-4 (vector 4 e-2 e-13) (Core-Normalise-glueBack arg-0 e-10 arg-4 e-14) arg-3) eta-0))))))))))))))))))))(else (let ((act-25 (let ((sc3 e-5)) (case (vector-ref sc3 0) ((0) (let ((e-9 (vector-ref sc3 1))) (Core-Core-log (Core-TT-show_Show__Name e-9) eta-0))) ((1) (let ((e-8 (vector-ref sc3 1))) (let ((sc4 e-8)) (case (vector-ref sc4 0) ((0) (let ((e-21 (vector-ref sc4 1))) (Core-Core-log (Prelude-Types-Strings-C-43C-43 "loc" (Prelude-Show-show_Show__Nat e-21)) eta-0))) ((1) (let ((e-24 (vector-ref sc4 1))) (let ((e-25 (vector-ref sc4 2))) (Core-Core-log (Prelude-Types-Strings-C-43C-43 "ref" (Prelude-Types-Strings-C-43C-43 (Core-TT-show_Show__NameType e-24) (Prelude-Types-Strings-C-43C-43 " " (Core-TT-show_Show__Name e-25)))) eta-0)))) (else (let ((e-27 (vector-ref sc4 1))) (Core-Core-log (Prelude-Types-Strings-C-43C-43 "Meta" (Core-TT-show_Show__Name e-27)) eta-0))))))) ((2) (let ((e-8 (vector-ref sc3 1))) (Core-Core-log (Prelude-Types-Strings-C-43C-43 "data " (Core-TT-show_Show__Name e-8)) eta-0))) ((3) (let ((e-13 (vector-ref sc3 1))) (Core-Core-log (Prelude-Types-Strings-C-43C-43 "typeC " (Core-TT-show_Show__Name e-13)) eta-0))) ((4) (Core-Core-log "NTY" eta-0)) (else (Core-Core-log "erased" eta-0)))))) (let ((sc3 act-25)) (case (vector-ref sc3 0) ((0) (let ((e-7 (vector-ref sc3 1))) (vector 0 e-7))) (else (Core-Core-throw_Catchable__Core_Error 'erased (vector 3 "Not a function type") eta-0)))))))))))(else (let ((act-25 (let ((sc2 e-5)) (case (vector-ref sc2 0) ((0) (let ((e-1 (vector-ref sc2 1))) (Core-Core-log (Core-TT-show_Show__Name e-1) eta-0))) ((1) (let ((e-7 (vector-ref sc2 1))) (let ((sc3 e-7)) (case (vector-ref sc3 0) ((0) (let ((e-21 (vector-ref sc3 1))) (Core-Core-log (Prelude-Types-Strings-C-43C-43 "loc" (Prelude-Show-show_Show__Nat e-21)) eta-0))) ((1) (let ((e-24 (vector-ref sc3 1))) (let ((e-25 (vector-ref sc3 2))) (Core-Core-log (Prelude-Types-Strings-C-43C-43 "ref" (Prelude-Types-Strings-C-43C-43 (Core-TT-show_Show__NameType e-24) (Prelude-Types-Strings-C-43C-43 " " (Core-TT-show_Show__Name e-25)))) eta-0)))) (else (let ((e-27 (vector-ref sc3 1))) (Core-Core-log (Prelude-Types-Strings-C-43C-43 "Meta" (Core-TT-show_Show__Name e-27)) eta-0))))))) ((2) (let ((e-8 (vector-ref sc2 1))) (Core-Core-log (Prelude-Types-Strings-C-43C-43 "data " (Core-TT-show_Show__Name e-8)) eta-0))) ((3) (let ((e-13 (vector-ref sc2 1))) (Core-Core-log (Prelude-Types-Strings-C-43C-43 "typeC " (Core-TT-show_Show__Name e-13)) eta-0))) ((4) (Core-Core-log "NTY" eta-0)) (else (Core-Core-log "erased" eta-0)))))) (let ((sc2 act-25)) (case (vector-ref sc2 0) ((0) (let ((e-4 (vector-ref sc2 1))) (vector 0 e-4))) (else (Core-Core-throw_Catchable__Core_Error 'erased (vector 3 "Not a function type") eta-0)))))))))))))))))))
(define TTImp-Elab-Term-case--caseC-32blockC-32inC-32checkTerm-1195 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12) (let ((sc0 arg-12)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (lambda (eta-0) (let ((act-24 ((Core-Normalise-getTerm 'erased e-3) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-4 (vector-ref sc1 1))) (vector 0 e-4))) (else (let ((e-5 (vector-ref sc1 1))) ((TTImp-Elab-Term-checkExp arg-0 arg-7 arg-6 arg-5 (vector 3 arg-3 (vector 2 arg-3 arg-8) e-2) (Core-Normalise-gnf arg-0 arg-5 (vector 3 arg-3 (vector 3 arg-8) e-5)) arg-4) eta-0))))))))))))
(define TTImp-Elab-Term-case--checkTerm-1153 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8) (let ((sc0 arg-8)) (let ((e-2 (vector-ref sc0 1))) (let ((envC-39 (vector 1 (vector 2 arg-3 e-2) arg-5))) (lambda (eta-0) (let ((act-24 ((TTImp-Elab-Term-checkTerm (vector 1 arg-3 arg-0) arg-7 arg-6 envC-39 arg-1 (vector 0 )) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-4 (vector-ref sc1 1))) (vector 0 e-4))) (else (let ((e-5 (vector-ref sc1 1))) (let ((sc2 e-5)) (let ((e-6 (vector-ref sc2 1))) (let ((e-4 (vector-ref sc2 2))) (let ((act-25 ((Core-Normalise-getTerm 'erased e-4) eta-0))) (let ((sc3 act-25)) (case (vector-ref sc3 0) ((0) (let ((e-7 (vector-ref sc3 1))) (vector 0 e-7))) (else (let ((e-7 (vector-ref sc3 1))) ((TTImp-Elab-Term-checkExp arg-0 arg-7 arg-6 arg-5 (vector 3 arg-3 (vector 2 arg-3 e-2) e-6) (Core-Normalise-gnf arg-0 arg-5 (vector 3 arg-3 (vector 3 e-2) e-7)) arg-4) eta-0))))))))))))))))))))
(define TTImp-Elab-Term-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32checkTerm-1025 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-13 arg-14 arg-15 arg-16 arg-17 arg-18 arg-19 arg-20 arg-21 arg-22 arg-23 arg-24) (let ((sc0 arg-24)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (lambda (eta-0) (let ((act-24 ((Core-Normalise-getTerm 'erased e-3) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-4 (vector-ref sc1 1))) (vector 0 e-4))) (else (let ((e-5 (vector-ref sc1 1))) ((TTImp-Elab-Term-checkExp arg-0 arg-8 arg-7 arg-6 (vector 3 arg-9 (vector 0 arg-9 arg-4 arg-10) e-2) (Core-Normalise-gnf arg-0 arg-6 (vector 3 arg-9 (vector 1 arg-9 arg-4 arg-10) e-5)) (vector 1 arg-5)) eta-0))))))))))))
(define TTImp-Elab-Term-case--caseC-32blockC-32inC-32checkTerm-956 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-13 arg-14 arg-15 arg-16) (let ((sc0 arg-16)) (case (vector-ref sc0 0) ((3) (let ((e-2 (vector-ref sc0 2))) (let ((e-3 (vector-ref sc0 3))) (let ((sc1 e-2)) (case (vector-ref sc1 0) ((1) (let ((envC-39 (vector 1 (vector 0 arg-9 arg-4 arg-10) arg-6))) (let ((scty (Core-TT-renameTop 'erased 'erased arg-9 e-3))) (lambda (eta-0) (let ((act-24 ((TTImp-Elab-Term-checkTerm (vector 1 arg-9 arg-0) arg-8 arg-7 envC-39 arg-1 (vector 1 (Core-Normalise-gnf (vector 1 arg-9 arg-0) envC-39 scty))) eta-0))) (let ((sc2 act-24)) (case (vector-ref sc2 0) ((0) (let ((e-4 (vector-ref sc2 1))) (vector 0 e-4))) (else (let ((e-8 (vector-ref sc2 1))) (let ((sc3 e-8)) (let ((e-9 (vector-ref sc3 1))) (let ((e-4 (vector-ref sc3 2))) (let ((act-25 ((Core-Normalise-getTerm 'erased e-4) eta-0))) (let ((sc4 act-25)) (case (vector-ref sc4 0) ((0) (let ((e-10 (vector-ref sc4 1))) (vector 0 e-10))) (else (let ((e-10 (vector-ref sc4 1))) ((TTImp-Elab-Term-checkExp arg-0 arg-8 arg-7 arg-6 (vector 3 arg-9 (vector 0 arg-9 arg-4 arg-10) e-9) (Core-Normalise-gnf arg-0 arg-6 (vector 3 arg-9 (vector 1 arg-9 arg-4 arg-10) e-10)) (vector 1 arg-5)) eta-0))))))))))))))))))(else (lambda (eta-0) (Core-Core-throw_Catchable__Core_Error 'erased (vector 3 "Lambda must have a function type") eta-0))))))))(else (lambda (eta-0) (Core-Core-throw_Catchable__Core_Error 'erased (vector 3 "Lambda must have a function type") eta-0)))))))
(define TTImp-Elab-Term-case--checkTerm-894 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10) (let ((sc0 arg-10)) (let ((e-2 (vector-ref sc0 1))) (lambda (eta-0) (let ((act-24 ((Core-Normalise-getNF 'erased arg-8 arg-5) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-4 (vector-ref sc1 1))) (vector 0 e-4))) (else (let ((e-5 (vector-ref sc1 1))) (let ((act-25 (let ((act-25 (unbox arg-8))) (vector 1 act-25)))) (let ((sc2 act-25)) (case (vector-ref sc2 0) ((0) (let ((e-4 (vector-ref sc2 1))) (vector 0 e-4))) (else (let ((e-6 (vector-ref sc2 1))) (let ((act-26 (Core-Normalise-quote_Quote__NF arg-0 e-6 arg-6 e-5 eta-0))) (let ((sc3 act-26)) (case (vector-ref sc3 0) ((0) (let ((e-4 (vector-ref sc3 1))) (vector 0 e-4))) (else (let ((e-7 (vector-ref sc3 1))) (let ((sc4 e-7)) (case (vector-ref sc4 0) ((3) (let ((e-8 (vector-ref sc4 2))) (let ((e-4 (vector-ref sc4 3))) (let ((sc5 e-8)) (case (vector-ref sc5 0) ((1) (let ((envC-39 (vector 1 (vector 0 arg-9 arg-4 e-2) arg-6))) (let ((scty (Core-TT-renameTop 'erased 'erased arg-9 e-4))) (let ((act-27 ((TTImp-Elab-Term-checkTerm (vector 1 arg-9 arg-0) arg-8 arg-7 envC-39 arg-1 (vector 1 (Core-Normalise-gnf (vector 1 arg-9 arg-0) envC-39 scty))) eta-0))) (let ((sc6 act-27)) (case (vector-ref sc6 0) ((0) (let ((e-12 (vector-ref sc6 1))) (vector 0 e-12))) (else (let ((e-12 (vector-ref sc6 1))) (let ((sc7 e-12)) (let ((e-14 (vector-ref sc7 1))) (let ((e-13 (vector-ref sc7 2))) (let ((act-28 ((Core-Normalise-getTerm 'erased e-13) eta-0))) (let ((sc8 act-28)) (case (vector-ref sc8 0) ((0) (let ((e-15 (vector-ref sc8 1))) (vector 0 e-15))) (else (let ((e-15 (vector-ref sc8 1))) ((TTImp-Elab-Term-checkExp arg-0 arg-8 arg-7 arg-6 (vector 3 arg-9 (vector 0 arg-9 arg-4 e-2) e-14) (Core-Normalise-gnf arg-0 arg-6 (vector 3 arg-9 (vector 1 arg-9 arg-4 e-2) e-15)) (vector 1 arg-5)) eta-0)))))))))))))))))(else (Core-Core-throw_Catchable__Core_Error 'erased (vector 3 "Lambda must have a function type") eta-0)))))))(else (Core-Core-throw_Catchable__Core_Error 'erased (vector 3 "Lambda must have a function type") eta-0))))))))))))))))))))))))
(define TTImp-Elab-Term-case--caseC-32blockC-32inC-32checkTerm-817 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-13 arg-14) (let ((sc0 arg-14)) (let ((e-2 (vector-ref sc0 1))) (TTImp-Elab-Term-checkExp arg-0 arg-8 arg-7 arg-6 (vector 3 arg-9 (vector 1 arg-9 arg-4 arg-10) e-2) (Core-Normalise-gType 'erased) arg-5)))))
(define TTImp-Elab-Term-case--checkTerm-769 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10) (let ((sc0 arg-10)) (let ((e-2 (vector-ref sc0 1))) (let ((envC-39 (vector 1 (vector 1 arg-9 arg-4 e-2) arg-6))) (lambda (eta-0) (let ((act-24 ((TTImp-Elab-Term-checkTerm (vector 1 arg-9 arg-0) arg-8 arg-7 envC-39 arg-1 (vector 1 (Core-Normalise-gType 'erased))) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-4 (vector-ref sc1 1))) (vector 0 e-4))) (else (let ((e-5 (vector-ref sc1 1))) (let ((sc2 e-5)) (let ((e-6 (vector-ref sc2 1))) ((TTImp-Elab-Term-checkExp arg-0 arg-8 arg-7 arg-6 (vector 3 arg-9 (vector 1 arg-9 arg-4 e-2) e-6) (Core-Normalise-gType 'erased) arg-5) eta-0))))))))))))))
(define TTImp-Elab-Term-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32checkTerm-658 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9) (let ((sc0 arg-9)) (case (vector-ref sc0 0) ((2) (let ((e-0 (vector-ref sc0 1))) (let ((e-1 (vector-ref sc0 2))) (vector 2 e-0 e-1)))) ((3) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (vector 3 e-2 e-3))))(else (vector 0 ))))))
(define TTImp-Elab-Term-case--caseC-32blockC-32inC-32checkTerm-638 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (let ((sc0 arg-7)) (case (vector-ref sc0 0) ((1) (let ((e-1 (vector-ref sc0 1))) (let ((nt (let ((_-0 (vector 1 e-1))) (TTImp-Elab-Term-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32checkTerm-658 arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 e-1 _-0 (let ((sc1 e-1)) (let ((e-2 (vector-ref sc1 2))) e-2)))))) (TTImp-Elab-Term-checkExp arg-0 arg-5 arg-4 arg-3 (vector 1 nt arg-1) (Core-Normalise-gnf arg-0 arg-3 (Core-TT-embed 'erased 'erased (let ((sc1 e-1)) (let ((e-0 (vector-ref sc1 1))) e-0)))) arg-2)))) (else (lambda (eta-0) (Core-Core-throw_Catchable__Core_Error 'erased (vector 1 arg-1) eta-0)))))))
(define TTImp-Elab-Term-case--checkTerm-573 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (let ((sc0 arg-6)) (case (vector-ref sc0 0) ((1) (let ((e-1 (vector-ref sc0 1))) (let ((binder (Core-Env-getBinder 'erased 'erased (vector 0 (lambda (n) (lambda (vars) (lambda (arg-2952) (Core-TT-weaken_Weaken__Term n vars arg-2952)))) (lambda (vars) (lambda (ns) (lambda (arg-2956) (Core-TT-weakenNs_Weaken__Term vars ns arg-2956))))) arg-0 e-1 'erased arg-3))) (TTImp-Elab-Term-checkExp arg-0 arg-5 arg-4 arg-3 (vector 0 e-1) (Core-Normalise-gnf arg-0 arg-3 (Core-TT-binderType 'erased binder)) arg-2)))) (else (lambda (eta-0) (let ((act-24 (let ((act-24 (unbox arg-5))) (vector 1 act-24)))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc1 1))) (let ((act-25 (Core-Context-lookupDef arg-1 e-5 eta-0))) (let ((sc2 act-25)) (case (vector-ref sc2 0) ((0) (let ((e-2 (vector-ref sc2 1))) (vector 0 e-2))) (else (let ((e-6 (vector-ref sc2 1))) (let ((sc3 e-6)) (case (vector-ref sc3 0) ((1) (let ((e-1 (vector-ref sc3 1))) (let ((nt (let ((_-0 (vector 1 e-1))) (TTImp-Elab-Term-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32checkTerm-658 arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 e-5 e-1 _-0 (let ((sc4 e-1)) (let ((e-2 (vector-ref sc4 2))) e-2)))))) ((TTImp-Elab-Term-checkExp arg-0 arg-5 arg-4 arg-3 (vector 1 nt arg-1) (Core-Normalise-gnf arg-0 arg-3 (Core-TT-embed 'erased 'erased (let ((sc4 e-1)) (let ((e-0 (vector-ref sc4 1))) e-0)))) arg-2) eta-0)))) (else (Core-Core-throw_Catchable__Core_Error 'erased (vector 1 arg-1) eta-0))))))))))))))))))))
(define TTImp-Elab-Term-case--checkExp-483 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9) (let ((sc0 arg-9)) (case (vector-ref sc0 0) ((0) (lambda (eta-0) (let ((act-24 (let ((sc1 (let ((sc2 arg-8)) (let ((e-1 (vector-ref sc2 2))) e-1)))) (cond ((equal? sc1 0) (Core-Unify-solveConstraints arg-6 arg-5 eta-0)) (else (vector 1 (vector 0 ))))))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (vector 1 (vector 0 arg-3 arg-1))))))))(else (lambda (eta-0) (let ((act-24 ((Core-Normalise-getTerm 'erased arg-1) eta-0))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (let ((act-25 ((Core-UnifyState-newConstant arg-0 arg-5 arg-6 arg-4 arg-3 e-5 arg-9) eta-0))) (let ((sc1 act-25)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-6 (vector-ref sc1 1))) (vector 1 (vector 0 e-6 arg-2))))))))))))))))))
(define (TTImp-Elab-Term-fdsfd . any-args) (blodwen-error-quit "Encountered unimplemented hole TTImp.Elab.Term.fdsfd"))
(define TTImp-Elab-Term-checkTerm (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-4)) (case (vector-ref sc0 0) ((0) (let ((e-0 (vector-ref sc0 1))) (TTImp-Elab-Term-case--checkTerm-573 arg-0 e-0 arg-5 arg-3 arg-2 arg-1 (Core-Env-defined arg-0 e-0 arg-3)))) ((1) (let ((e-1 (vector-ref sc0 1))) (let ((e-2 (vector-ref sc0 2))) (let ((e-3 (vector-ref sc0 3))) (let ((e-4 (vector-ref sc0 4))) (let ((n (Data-Maybe-fromMaybe 'erased (lambda () (vector 1 "_" 0)) e-2))) (lambda (eta-0) (let ((act-24 ((TTImp-Elab-Term-checkTerm arg-0 arg-1 arg-2 arg-3 e-3 (vector 1 (Core-Normalise-gType 'erased))) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-5 (vector-ref sc1 1))) (vector 0 e-5))) (else (let ((e-5 (vector-ref sc1 1))) (let ((sc2 e-5)) (let ((e-7 (vector-ref sc2 1))) (let ((envC-39 (vector 1 (vector 1 n e-1 e-7) arg-3))) (let ((act-25 ((TTImp-Elab-Term-checkTerm (vector 1 n arg-0) arg-1 arg-2 envC-39 e-4 (vector 1 (Core-Normalise-gType 'erased))) eta-0))) (let ((sc3 act-25)) (case (vector-ref sc3 0) ((0) (let ((e-8 (vector-ref sc3 1))) (vector 0 e-8))) (else (let ((e-8 (vector-ref sc3 1))) (let ((sc4 e-8)) (let ((e-10 (vector-ref sc4 1))) ((TTImp-Elab-Term-checkExp arg-0 arg-1 arg-2 arg-3 (vector 3 n (vector 1 n e-1 e-7) e-10) (Core-Normalise-gType 'erased) arg-5) eta-0))))))))))))))))))))))) ((2) (let ((e-5 (vector-ref sc0 1))) (let ((e-6 (vector-ref sc0 2))) (let ((e-7 (vector-ref sc0 3))) (let ((e-8 (vector-ref sc0 4))) (let ((sc1 arg-5)) (case (vector-ref sc1 0) ((0) (lambda (eta-0) (Core-Core-throw_Catchable__Core_Error 'erased (vector 3 "Can't infer type for lambda") eta-0))) (else (let ((e-17 (vector-ref sc1 1))) (let ((n (Data-Maybe-fromMaybe 'erased (lambda () (vector 1 "_" 0)) e-6))) (lambda (eta-0) (let ((act-24 ((TTImp-Elab-Term-checkTerm arg-0 arg-1 arg-2 arg-3 e-7 (vector 1 (Core-Normalise-gType 'erased))) eta-0))) (let ((sc2 act-24)) (case (vector-ref sc2 0) ((0) (let ((e-2 (vector-ref sc2 1))) (vector 0 e-2))) (else (let ((e-9 (vector-ref sc2 1))) (let ((sc3 e-9)) (let ((e-2 (vector-ref sc3 1))) (let ((act-25 ((Core-Normalise-getNF 'erased arg-1 e-17) eta-0))) (let ((sc4 act-25)) (case (vector-ref sc4 0) ((0) (let ((e-4 (vector-ref sc4 1))) (vector 0 e-4))) (else (let ((e-10 (vector-ref sc4 1))) (let ((act-26 (let ((act-26 (unbox arg-1))) (vector 1 act-26)))) (let ((sc5 act-26)) (case (vector-ref sc5 0) ((0) (let ((e-4 (vector-ref sc5 1))) (vector 0 e-4))) (else (let ((e-11 (vector-ref sc5 1))) (let ((act-27 (Core-Normalise-quote_Quote__NF arg-0 e-11 arg-3 e-10 eta-0))) (let ((sc6 act-27)) (case (vector-ref sc6 0) ((0) (let ((e-4 (vector-ref sc6 1))) (vector 0 e-4))) (else (let ((e-12 (vector-ref sc6 1))) (let ((sc7 e-12)) (case (vector-ref sc7 0) ((3) (let ((e-13 (vector-ref sc7 2))) (let ((e-4 (vector-ref sc7 3))) (let ((sc8 e-13)) (case (vector-ref sc8 0) ((1) (let ((envC-39 (vector 1 (vector 0 n e-5 e-2) arg-3))) (let ((scty (Core-TT-renameTop 'erased 'erased n e-4))) (let ((act-28 ((TTImp-Elab-Term-checkTerm (vector 1 n arg-0) arg-1 arg-2 envC-39 e-8 (vector 1 (Core-Normalise-gnf (vector 1 n arg-0) envC-39 scty))) eta-0))) (let ((sc9 act-28)) (case (vector-ref sc9 0) ((0) (let ((e-18 (vector-ref sc9 1))) (vector 0 e-18))) (else (let ((e-18 (vector-ref sc9 1))) (let ((sc10 e-18)) (let ((e-20 (vector-ref sc10 1))) (let ((e-19 (vector-ref sc10 2))) (let ((act-29 ((Core-Normalise-getTerm 'erased e-19) eta-0))) (let ((sc11 act-29)) (case (vector-ref sc11 0) ((0) (let ((e-21 (vector-ref sc11 1))) (vector 0 e-21))) (else (let ((e-21 (vector-ref sc11 1))) ((TTImp-Elab-Term-checkExp arg-0 arg-1 arg-2 arg-3 (vector 3 n (vector 0 n e-5 e-2) e-20) (Core-Normalise-gnf arg-0 arg-3 (vector 3 n (vector 1 n e-5 e-2) e-21)) (vector 1 e-17)) eta-0)))))))))))))))))(else (Core-Core-throw_Catchable__Core_Error 'erased (vector 3 "Lambda must have a function type") eta-0)))))))(else (Core-Core-throw_Catchable__Core_Error 'erased (vector 3 "Lambda must have a function type") eta-0))))))))))))))))))))))))))))))))))))) ((3) (let ((e-9 (vector-ref sc0 1))) (let ((e-10 (vector-ref sc0 2))) (let ((e-11 (vector-ref sc0 3))) (lambda (eta-0) (let ((act-24 ((TTImp-Elab-Term-checkTerm arg-0 arg-1 arg-2 arg-3 e-10 (vector 1 (Core-Normalise-gType 'erased))) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc1 1))) (let ((sc2 e-5)) (let ((e-2 (vector-ref sc2 1))) (let ((envC-39 (vector 1 (vector 2 e-9 e-2) arg-3))) (let ((act-25 ((TTImp-Elab-Term-checkTerm (vector 1 e-9 arg-0) arg-1 arg-2 envC-39 e-11 (vector 0 )) eta-0))) (let ((sc3 act-25)) (case (vector-ref sc3 0) ((0) (let ((e-4 (vector-ref sc3 1))) (vector 0 e-4))) (else (let ((e-6 (vector-ref sc3 1))) (let ((sc4 e-6)) (let ((e-7 (vector-ref sc4 1))) (let ((e-4 (vector-ref sc4 2))) (let ((act-26 ((Core-Normalise-getTerm 'erased e-4) eta-0))) (let ((sc5 act-26)) (case (vector-ref sc5 0) ((0) (let ((e-8 (vector-ref sc5 1))) (vector 0 e-8))) (else (let ((e-8 (vector-ref sc5 1))) ((TTImp-Elab-Term-checkExp arg-0 arg-1 arg-2 arg-3 (vector 3 e-9 (vector 2 e-9 e-2) e-7) (Core-Normalise-gnf arg-0 arg-3 (vector 3 e-9 (vector 3 e-2) e-8)) arg-5) eta-0))))))))))))))))))))))))))) ((4) (let ((e-12 (vector-ref sc0 1))) (let ((e-13 (vector-ref sc0 2))) (lambda (eta-0) (let ((act-24 ((TTImp-Elab-Term-checkTerm arg-0 arg-1 arg-2 arg-3 e-12 (vector 0 )) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc1 1))) (let ((sc2 e-5)) (let ((e-2 (vector-ref sc2 1))) (let ((e-3 (vector-ref sc2 2))) (let ((act-25 ((Core-Normalise-getNF 'erased arg-1 e-3) eta-0))) (let ((sc3 act-25)) (case (vector-ref sc3 0) ((0) (let ((e-4 (vector-ref sc3 1))) (vector 0 e-4))) (else (let ((e-6 (vector-ref sc3 1))) (let ((sc4 e-6)) (case (vector-ref sc4 0) ((0) (let ((e-7 (vector-ref sc4 2))) (let ((e-4 (vector-ref sc4 3))) (let ((sc5 e-7)) (case (vector-ref sc5 0) ((1) (let ((e-8 (vector-ref sc5 3))) (let ((act-26 (let ((act-26 (unbox arg-1))) (vector 1 act-26)))) (let ((sc6 act-26)) (case (vector-ref sc6 0) ((0) (let ((e-11 (vector-ref sc6 1))) (vector 0 e-11))) (else (let ((e-11 (vector-ref sc6 1))) (let ((act-27 ((TTImp-Elab-Term-checkTerm arg-0 arg-1 arg-2 arg-3 e-13 (vector 1 (Core-Normalise-glueBack arg-0 e-11 arg-3 e-8))) eta-0))) (let ((sc7 act-27)) (case (vector-ref sc7 0) ((0) (let ((e-14 (vector-ref sc7 1))) (vector 0 e-14))) (else (let ((e-14 (vector-ref sc7 1))) (let ((sc8 e-14)) (let ((e-16 (vector-ref sc8 1))) (let ((act-28 (((e-4 e-11) (Core-Normalise-toClosure 'erased arg-3 e-16)) eta-0))) (let ((sc9 act-28)) (case (vector-ref sc9 0) ((0) (let ((e-17 (vector-ref sc9 1))) (vector 0 e-17))) (else (let ((e-17 (vector-ref sc9 1))) ((TTImp-Elab-Term-checkExp arg-0 arg-1 arg-2 arg-3 (vector 4 e-2 e-16) (Core-Normalise-glueBack arg-0 e-11 arg-3 e-17) arg-5) eta-0))))))))))))))))))))(else (let ((act-26 (let ((sc5 e-6)) (case (vector-ref sc5 0) ((0) (let ((e-10 (vector-ref sc5 1))) (Core-Core-log (Core-TT-show_Show__Name e-10) eta-0))) ((1) (let ((e-9 (vector-ref sc5 1))) (let ((sc6 e-9)) (case (vector-ref sc6 0) ((0) (let ((e-21 (vector-ref sc6 1))) (Core-Core-log (Prelude-Types-Strings-C-43C-43 "loc" (Prelude-Show-show_Show__Nat e-21)) eta-0))) ((1) (let ((e-24 (vector-ref sc6 1))) (let ((e-25 (vector-ref sc6 2))) (Core-Core-log (Prelude-Types-Strings-C-43C-43 "ref" (Prelude-Types-Strings-C-43C-43 (Core-TT-show_Show__NameType e-24) (Prelude-Types-Strings-C-43C-43 " " (Core-TT-show_Show__Name e-25)))) eta-0)))) (else (let ((e-27 (vector-ref sc6 1))) (Core-Core-log (Prelude-Types-Strings-C-43C-43 "Meta" (Core-TT-show_Show__Name e-27)) eta-0))))))) ((2) (let ((e-8 (vector-ref sc5 1))) (Core-Core-log (Prelude-Types-Strings-C-43C-43 "data " (Core-TT-show_Show__Name e-8)) eta-0))) ((3) (let ((e-17 (vector-ref sc5 1))) (Core-Core-log (Prelude-Types-Strings-C-43C-43 "typeC " (Core-TT-show_Show__Name e-17)) eta-0))) ((4) (Core-Core-log "NTY" eta-0)) (else (Core-Core-log "erased" eta-0)))))) (let ((sc5 act-26)) (case (vector-ref sc5 0) ((0) (let ((e-8 (vector-ref sc5 1))) (vector 0 e-8))) (else (Core-Core-throw_Catchable__Core_Error 'erased (vector 3 "Not a function type") eta-0)))))))))))(else (let ((act-26 (let ((sc4 e-6)) (case (vector-ref sc4 0) ((0) (let ((e-1 (vector-ref sc4 1))) (Core-Core-log (Core-TT-show_Show__Name e-1) eta-0))) ((1) (let ((e-8 (vector-ref sc4 1))) (let ((sc5 e-8)) (case (vector-ref sc5 0) ((0) (let ((e-21 (vector-ref sc5 1))) (Core-Core-log (Prelude-Types-Strings-C-43C-43 "loc" (Prelude-Show-show_Show__Nat e-21)) eta-0))) ((1) (let ((e-24 (vector-ref sc5 1))) (let ((e-25 (vector-ref sc5 2))) (Core-Core-log (Prelude-Types-Strings-C-43C-43 "ref" (Prelude-Types-Strings-C-43C-43 (Core-TT-show_Show__NameType e-24) (Prelude-Types-Strings-C-43C-43 " " (Core-TT-show_Show__Name e-25)))) eta-0)))) (else (let ((e-27 (vector-ref sc5 1))) (Core-Core-log (Prelude-Types-Strings-C-43C-43 "Meta" (Core-TT-show_Show__Name e-27)) eta-0))))))) ((2) (let ((e-8 (vector-ref sc4 1))) (Core-Core-log (Prelude-Types-Strings-C-43C-43 "data " (Core-TT-show_Show__Name e-8)) eta-0))) ((3) (let ((e-17 (vector-ref sc4 1))) (Core-Core-log (Prelude-Types-Strings-C-43C-43 "typeC " (Core-TT-show_Show__Name e-17)) eta-0))) ((4) (Core-Core-log "NTY" eta-0)) (else (Core-Core-log "erased" eta-0)))))) (let ((sc4 act-26)) (case (vector-ref sc4 0) ((0) (let ((e-4 (vector-ref sc4 1))) (vector 0 e-4))) (else (Core-Core-throw_Catchable__Core_Error 'erased (vector 3 "Not a function type") eta-0))))))))))))))))))))))))) ((6) (let ((sc1 arg-5)) (case (vector-ref sc1 0) ((0) (lambda (eta-0) (Core-Core-throw_Catchable__Core_Error 'erased (vector 3 "Unknown type for implicit") eta-0))) (else (let ((e-20 (vector-ref sc1 1))) (lambda (eta-0) (let ((act-24 ((Core-Normalise-getTerm 'erased e-20) eta-0))) (let ((sc2 act-24)) (case (vector-ref sc2 0) ((0) (let ((e-2 (vector-ref sc2 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc2 1))) (let ((act-25 (Core-UnifyState-genName arg-2 "_" eta-0))) (let ((sc3 act-25)) (case (vector-ref sc3 0) ((0) (let ((e-2 (vector-ref sc3 1))) (vector 0 e-2))) (else (let ((e-6 (vector-ref sc3 1))) (let ((act-26 ((Core-UnifyState-newMeta arg-0 arg-1 arg-2 arg-3 e-6 e-5 (vector 4 )) eta-0))) (let ((sc4 act-26)) (case (vector-ref sc4 0) ((0) (let ((e-2 (vector-ref sc4 1))) (vector 0 e-2))) (else (let ((e-7 (vector-ref sc4 1))) (vector 1 (vector 0 e-7 e-20))))))))))))))))))))))) ((7) (TTImp-Elab-Term-checkExp arg-0 arg-1 arg-2 arg-3 (vector 5 ) (Core-Normalise-gType 'erased) arg-5)) (else (let ((e-14 (vector-ref sc0 1))) (let ((sc1 arg-5)) (case (vector-ref sc1 0) ((0) ((((((TTImp-Elab-Term-fdsfd) 'erased) 'erased) 'erased) 'erased) 'erased)) (else (let ((e-23 (vector-ref sc1 1))) (lambda (eta-0) (let ((act-24 (let ((act-24 (unbox arg-1))) (vector 1 act-24)))) (let ((sc2 act-24)) (case (vector-ref sc2 0) ((0) (let ((e-2 (vector-ref sc2 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc2 1))) (let ((act-25 (Core-Context-lookupDef e-14 e-5 eta-0))) (let ((sc3 act-25)) (case (vector-ref sc3 0) ((0) (let ((e-2 (vector-ref sc3 1))) (vector 0 e-2))) (else (let ((e-6 (vector-ref sc3 1))) (let ((sc4 e-6)) (case (vector-ref sc4 0) ((0) (let ((act-26 ((Core-Normalise-getTerm 'erased e-23) eta-0))) (let ((sc5 act-26)) (case (vector-ref sc5 0) ((0) (let ((e-2 (vector-ref sc5 1))) (vector 0 e-2))) (else (let ((e-7 (vector-ref sc5 1))) (let ((act-27 ((Core-UnifyState-newMeta arg-0 arg-1 arg-2 arg-3 e-14 e-7 (vector 5 arg-0 arg-3 e-7)) eta-0))) (let ((sc6 act-27)) (case (vector-ref sc6 0) ((0) (let ((e-2 (vector-ref sc6 1))) (vector 0 e-2))) (else (let ((e-8 (vector-ref sc6 1))) (vector 1 (vector 0 e-8 e-23)))))))))))))(else (Core-Core-throw_Catchable__Core_Error 'erased (vector 3 (Prelude-Types-Strings-C-43C-43 (Core-TT-show_Show__Name e-14) " already defined")) eta-0)))))))))))))))))))))))))
(define TTImp-Elab-Term-checkExp (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (let ((sc0 arg-6)) (case (vector-ref sc0 0) ((0) (lambda (eta-0) (vector 1 (vector 0 arg-4 arg-5)))) (else (let ((e-2 (vector-ref sc0 1))) (lambda (eta-0) (let ((act-24 (let ((act-24 (unbox arg-1))) (vector 1 act-24)))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-3 (vector-ref sc1 1))) (vector 0 e-3))) (else (let ((e-5 (vector-ref sc1 1))) (let ((act-25 (let ((act-25 ((Core-Normalise-getNF 'erased arg-1 arg-5) eta-0))) (let ((sc2 act-25)) (case (vector-ref sc2 0) ((0) (let ((e-3 (vector-ref sc2 1))) (vector 0 e-3))) (else (let ((e-6 (vector-ref sc2 1))) (let ((act-26 ((Core-Normalise-getNF 'erased arg-1 e-2) eta-0))) (let ((sc3 act-26)) (case (vector-ref sc3 0) ((0) (let ((e-3 (vector-ref sc3 1))) (vector 0 e-3))) (else (let ((e-7 (vector-ref sc3 1))) ((Core-Unify-unify_Unify__NF arg-0 arg-1 arg-2 arg-3 e-6 e-7) eta-0))))))))))))) (let ((sc2 act-25)) (case (vector-ref sc2 0) ((0) (let ((e-3 (vector-ref sc2 1))) (vector 0 e-3))) (else (let ((e-6 (vector-ref sc2 1))) ((TTImp-Elab-Term-case--checkExp-483 arg-0 e-2 arg-5 arg-4 arg-3 arg-2 arg-1 e-5 e-6 (let ((sc3 e-6)) (let ((e-0 (vector-ref sc3 1))) e-0))) eta-0))))))))))))))))))
(define Core-Unify-case--retryInts-8711 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-5)) (case (vector-ref sc0 0) ((0) (Core-Unify-retryInts arg-0 arg-3 arg-2)) (else (let ((e-2 (vector-ref sc0 1))) (lambda (eta-0) (let ((act-24 ((Core-Unify-retryInts arg-0 arg-3 arg-2) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-4 (vector-ref sc1 1))) (vector 0 e-4))) (else (let ((e-5 (vector-ref sc1 1))) (vector 1 (vector 1 e-2 e-5))))))))))))))
(define Core-Unify-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32caseC-32blockC-32inC-32retryGuess-8629 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10) (let ((sc0 arg-4)) (let ((e-0 (vector-ref sc0 1))) (vector 0 e-0 (vector 6 arg-7 arg-10))))))
(define Core-Unify-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32caseC-32blockC-32inC-32retryGuess-8568 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9) (let ((sc0 arg-4)) (let ((e-0 (vector-ref sc0 1))) (vector 0 e-0 (vector 1 (vector 0 ) (vector 1 arg-7)))))))
(define Core-Unify-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32retryGuess-8527 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10) (let ((sc0 arg-10)) (case (vector-ref sc0 0) ((0) (let ((gdef (let ((sc1 arg-4)) (let ((e-0 (vector-ref sc1 1))) (vector 0 e-0 (vector 1 (vector 0 ) (vector 1 arg-7))))))) (lambda (eta-0) (let ((act-24 (Core-Context-updateDef arg-2 arg-0 (lambda (eta-1) gdef) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (vector 1 0))))))))(else (let ((gdef (let ((sc0 arg-4)) (let ((e-0 (vector-ref sc0 1))) (vector 0 e-0 (vector 6 arg-7 arg-10)))))) (lambda (eta-0) (let ((act-24 (Core-Context-updateDef arg-2 arg-0 (lambda (eta-1) gdef) eta-0))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (vector 1 1))))))))))))
(define Core-Unify-case--caseC-32blockC-32inC-32retryGuess-8499 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (let ((sc0 arg-6)) (case (vector-ref sc0 0) ((6) (let ((e-0 (vector-ref sc0 1))) (let ((e-1 (vector-ref sc0 2))) (lambda (eta-0) (let ((act-24 ((Core-Core-traverse 'erased 'erased (lambda (eta-1) (lambda (eta-2) (Core-Unify-retry arg-2 arg-1 eta-1 eta-2))) e-1) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc1 1))) (let ((csAll (Core-Unify-unionAll e-5))) ((Core-Unify-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32retryGuess-8527 arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 e-1 e-0 e-5 csAll (let ((sc2 csAll)) (let ((e-3 (vector-ref sc2 1))) e-3))) eta-0)))))))))))(else (lambda (eta-0) (vector 1 1)))))))
(define Core-Unify-case--retryGuess-8475 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-4)) (case (vector-ref sc0 0) ((0) (lambda (eta-0) (vector 1 1))) (else (let ((e-2 (vector-ref sc0 1))) (let ((bind-0 (vector 1 e-2))) (Core-Unify-case--caseC-32blockC-32inC-32retryGuess-8499 arg-0 arg-1 arg-2 arg-3 e-2 bind-0 (let ((sc1 e-2)) (let ((e-1 (vector-ref sc1 2))) e-1))))))))))
(define Core-Unify-case--caseC-32blockC-32inC-32retry-8406 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9) (let ((sc0 arg-9)) (case (vector-ref sc0 0) ((0) (lambda (eta-0) (let ((act-24 (Core-UnifyState-deleteConstraint arg-2 arg-1 eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (vector 1 arg-8)))))))(else (lambda (eta-0) (vector 1 arg-8)))))))
(define Core-Unify-case--caseC-32blockC-32inC-32retry-8326 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9) (let ((sc0 arg-9)) (case (vector-ref sc0 0) ((0) (lambda (eta-0) (let ((act-24 (Core-UnifyState-deleteConstraint arg-2 arg-1 eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (vector 1 arg-8)))))))(else (lambda (eta-0) (vector 1 arg-8)))))))
(define Core-Unify-case--retry-8273 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-4)) (case (vector-ref sc0 0) ((0) (lambda (eta-0) (vector 1 (Core-Unify-success)))) (else (let ((e-2 (vector-ref sc0 1))) (let ((sc1 e-2)) (case (vector-ref sc1 0) ((2) (lambda (eta-0) (vector 1 (Core-Unify-success)))) ((0) (let ((e-3 (vector-ref sc1 1))) (let ((e-4 (vector-ref sc1 2))) (let ((e-5 (vector-ref sc1 3))) (let ((e-6 (vector-ref sc1 4))) (lambda (eta-0) (let ((act-24 (Core-Unify-unify_Unify__Term e-3 arg-0 arg-2 e-4 e-5 e-6 eta-0))) (let ((sc2 act-24)) (case (vector-ref sc2 0) ((0) (let ((e-7 (vector-ref sc2 1))) (vector 0 e-7))) (else (let ((e-7 (vector-ref sc2 1))) ((Core-Unify-case--caseC-32blockC-32inC-32retry-8326 arg-0 arg-1 arg-2 arg-3 e-3 e-6 e-5 e-4 e-7 (let ((sc3 e-7)) (let ((e-0 (vector-ref sc3 1))) e-0))) eta-0)))))))))))) (else (let ((e-7 (vector-ref sc1 1))) (let ((e-8 (vector-ref sc1 2))) (let ((e-9 (vector-ref sc1 3))) (let ((e-10 (vector-ref sc1 4))) (lambda (eta-0) (let ((act-24 ((Core-Unify-unifyArgs 'erased (vector 0 (lambda (vars) (lambda (c) (lambda (u) (lambda (arg-5433) (lambda (arg-5435) (lambda (arg-5436) (lambda (eta-1) (Core-Unify-unify_Unify__Term vars c u arg-5433 arg-5435 arg-5436 eta-1)))))))) (vector 0 (lambda (vars) (lambda (arg-1506) (lambda (arg-1507) (lambda (arg-1509) (lambda (eta-1) (Core-Normalise-quote_Quote__Term vars arg-1506 arg-1507 arg-1509 eta-1)))))) (lambda (vars) (lambda (arg-1511) (lambda (arg-1513) (lambda (arg-1514) (lambda (arg-1516) (lambda (eta-1) (Core-Normalise-quoteGen_Quote__Term vars arg-1511 arg-1513 arg-1514 arg-1516 eta-1))))))))) e-7 arg-0 arg-2 e-8 e-9 e-10) eta-0))) (let ((sc2 act-24)) (case (vector-ref sc2 0) ((0) (let ((e-3 (vector-ref sc2 1))) (vector 0 e-3))) (else (let ((e-5 (vector-ref sc2 1))) ((Core-Unify-case--caseC-32blockC-32inC-32retry-8406 arg-0 arg-1 arg-2 arg-3 e-7 e-10 e-9 e-8 e-5 (let ((sc3 e-5)) (let ((e-0 (vector-ref sc3 1))) e-0))) eta-0))))))))))))))))))))
(define Core-Unify-case--unify-8010 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-13 arg-14) (let ((sc0 arg-14)) (cond ((equal? sc0 0) (Core-Unify-unifyArgs 'erased (vector 0 (lambda (vars) (lambda (c) (lambda (u) (lambda (arg-5433) (lambda (arg-5435) (lambda (arg-5436) (lambda (eta-0) (Core-Unify-unify_Unify__Closure vars c u arg-5433 arg-5435 arg-5436 eta-0)))))))) (vector 0 (lambda (vars) (lambda (arg-1506) (lambda (arg-1507) (lambda (arg-1509) (lambda (eta-0) (Core-Normalise-quote_Quote__Closure vars arg-1506 arg-1507 arg-1509 eta-0)))))) (lambda (vars) (lambda (arg-1511) (lambda (arg-1513) (lambda (arg-1514) (lambda (arg-1516) (lambda (eta-0) (Core-Normalise-quoteGen_Quote__Closure vars arg-1511 arg-1513 arg-1514 arg-1516 eta-0))))))))) arg-0 arg-13 arg-12 arg-11 arg-6 arg-1)) (else (lambda (eta-0) (Core-Unify-convertError 'erased arg-0 arg-13 arg-11 arg-10 arg-5 eta-0)))))))
(define Core-Unify-case--unify-7929 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-13 arg-14) (let ((sc0 arg-14)) (cond ((equal? sc0 0) (Core-Unify-unifyArgs 'erased (vector 0 (lambda (vars) (lambda (c) (lambda (u) (lambda (arg-5433) (lambda (arg-5435) (lambda (arg-5436) (lambda (eta-0) (Core-Unify-unify_Unify__Closure vars c u arg-5433 arg-5435 arg-5436 eta-0)))))))) (vector 0 (lambda (vars) (lambda (arg-1506) (lambda (arg-1507) (lambda (arg-1509) (lambda (eta-0) (Core-Normalise-quote_Quote__Closure vars arg-1506 arg-1507 arg-1509 eta-0)))))) (lambda (vars) (lambda (arg-1511) (lambda (arg-1513) (lambda (arg-1514) (lambda (arg-1516) (lambda (eta-0) (Core-Normalise-quoteGen_Quote__Closure vars arg-1511 arg-1513 arg-1514 arg-1516 eta-0))))))))) arg-0 arg-13 arg-12 arg-11 arg-6 arg-1)) (else (lambda (eta-0) (Core-Unify-convertError 'erased arg-0 arg-13 arg-11 arg-10 arg-5 eta-0)))))))
(define Core-Unify-case--unify-7525 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-13 arg-14 arg-15 arg-16 arg-17 arg-18 arg-19 arg-20) (let ((sc0 arg-20)) (case (vector-ref sc0 0) ((0) (lambda (eta-0) (let ((act-24 (((arg-4 arg-14) (Core-Normalise-toClosure 'erased arg-11 (vector 1 (vector 1 ) arg-18))) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc1 1))) (let ((act-25 (((arg-9 arg-14) (Core-Normalise-toClosure 'erased arg-11 (vector 1 (vector 1 ) arg-18))) eta-0))) (let ((sc2 act-25)) (case (vector-ref sc2 0) ((0) (let ((e-2 (vector-ref sc2 1))) (vector 0 e-2))) (else (let ((e-6 (vector-ref sc2 1))) (let ((act-26 (Core-Normalise-quote_Quote__NF arg-0 arg-15 arg-11 e-5 eta-0))) (let ((sc3 act-26)) (case (vector-ref sc3 0) ((0) (let ((e-2 (vector-ref sc3 1))) (vector 0 e-2))) (else (let ((e-7 (vector-ref sc3 1))) (let ((act-27 (Core-Normalise-quote_Quote__NF arg-0 arg-15 arg-11 e-6 eta-0))) (let ((sc4 act-27)) (case (vector-ref sc4 0) ((0) (let ((e-2 (vector-ref sc4 1))) (vector 0 e-2))) (else (let ((e-8 (vector-ref sc4 1))) (Core-Unify-unify_Unify__Term (vector 1 arg-5 arg-0) arg-13 arg-12 arg-19 (Core-TT-refsToLocals 'erased (vector 1 arg-5 (vector 0 )) (vector 1 arg-5 arg-18 (vector 0 )) e-7) (Core-TT-refsToLocals 'erased (vector 1 arg-5 (vector 0 )) (vector 1 arg-5 arg-18 (vector 0 )) e-8) eta-0))))))))))))))))))))))) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (lambda (eta-0) (let ((act-24 (Core-Normalise-quote_Quote__NF arg-0 arg-15 arg-11 arg-1 eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-4 (vector-ref sc1 1))) (vector 0 e-4))) (else (let ((e-5 (vector-ref sc1 1))) (let ((act-25 (Core-Normalise-quote_Quote__NF arg-0 arg-15 arg-11 arg-6 eta-0))) (let ((sc2 act-25)) (case (vector-ref sc2 0) ((0) (let ((e-4 (vector-ref sc2 1))) (vector 0 e-4))) (else (let ((e-6 (vector-ref sc2 1))) (let ((act-26 ((Core-UnifyState-newConstant arg-0 arg-12 arg-13 arg-11 (vector 3 arg-5 (vector 0 arg-8 (vector 1 ) e-5) (vector 0 0)) (vector 3 arg-5 (vector 1 arg-8 (vector 1 ) e-5) (Core-TT-weaken_Weaken__Term arg-5 arg-0 e-6)) (vector 1 e-2 e-3)) eta-0))) (let ((sc3 act-26)) (case (vector-ref sc3 0) ((0) (let ((e-4 (vector-ref sc3 1))) (vector 0 e-4))) (else (let ((act-27 (((arg-4 arg-14) (Core-Normalise-toClosure 'erased arg-11 (vector 1 (vector 1 ) arg-18))) eta-0))) (let ((sc4 act-27)) (case (vector-ref sc4 0) ((0) (let ((e-4 (vector-ref sc4 1))) (vector 0 e-4))) (else (let ((e-8 (vector-ref sc4 1))) (let ((act-28 (((arg-9 arg-14) (Core-Normalise-toClosure 'erased arg-11 (vector 1 (vector 1 ) arg-18))) eta-0))) (let ((sc5 act-28)) (case (vector-ref sc5 0) ((0) (let ((e-4 (vector-ref sc5 1))) (vector 0 e-4))) (else (let ((e-9 (vector-ref sc5 1))) (let ((act-29 (Core-Normalise-quote_Quote__NF arg-0 arg-15 arg-11 e-8 eta-0))) (let ((sc6 act-29)) (case (vector-ref sc6 0) ((0) (let ((e-4 (vector-ref sc6 1))) (vector 0 e-4))) (else (let ((e-10 (vector-ref sc6 1))) (let ((act-30 (Core-Normalise-quote_Quote__NF arg-0 arg-15 arg-11 e-9 eta-0))) (let ((sc7 act-30)) (case (vector-ref sc7 0) ((0) (let ((e-4 (vector-ref sc7 1))) (vector 0 e-4))) (else (let ((e-11 (vector-ref sc7 1))) (let ((act-31 (Core-Unify-unify_Unify__Term (vector 1 arg-5 arg-0) arg-13 arg-12 arg-19 (Core-TT-refsToLocals 'erased (vector 1 arg-5 (vector 0 )) (vector 1 arg-5 arg-18 (vector 0 )) e-10) (Core-TT-refsToLocals 'erased (vector 1 arg-5 (vector 0 )) (vector 1 arg-5 arg-18 (vector 0 )) e-11) eta-0))) (let ((sc8 act-31)) (case (vector-ref sc8 0) ((0) (let ((e-4 (vector-ref sc8 1))) (vector 0 e-4))) (else (let ((e-12 (vector-ref sc8 1))) (vector 1 (Core-Unify-union arg-17 e-12)))))))))))))))))))))))))))))))))))))))))))))))))
(define Core-Unify-case--unifyApp-7387 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8) (let ((sc0 arg-8)) (cond ((equal? sc0 0) (lambda (eta-0) (vector 1 (Core-Unify-success)))) (else (lambda (eta-0) (Core-Unify-postpone arg-0 arg-6 arg-5 arg-4 (vector 1 arg-3 arg-2) arg-1 eta-0)))))))
(define Core-Unify-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32unifyApp-7280 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-13 arg-14 arg-15 arg-16 arg-17) (let ((sc0 arg-17)) (case (vector-ref sc0 0) ((1) (let ((e-1 (vector-ref sc0 1))) (lambda (eta-0) (let ((act-24 ((Core-Unify-instantiate arg-7 arg-6 arg-0 arg-9 arg-5 arg-2 e-1 arg-10 arg-16) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (vector 1 (Core-Unify-solvedHole))))))))) (else (lambda (eta-0) (Core-Core-throw_Catchable__Core_Error 'erased (vector 1 arg-2) eta-0)))))))
(define Core-Unify-case--caseC-32blockC-32inC-32unifyApp-7197 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-13 arg-14 arg-15 arg-16) (let ((sc0 arg-16)) (case (vector-ref sc0 0) ((0) (lambda (eta-0) (Core-Unify-postpone arg-0 arg-7 arg-6 arg-5 (vector 1 (vector 2 arg-2 arg-1) arg-4) arg-3 eta-0))) (else (let ((e-2 (vector-ref sc0 1))) (lambda (eta-0) (let ((act-24 (Core-Context-lookupDef arg-2 arg-13 eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-3 (vector-ref sc1 1))) (vector 0 e-3))) (else (let ((e-5 (vector-ref sc1 1))) (let ((sc2 e-5)) (case (vector-ref sc2 0) ((1) (let ((e-1 (vector-ref sc2 1))) (let ((act-25 ((Core-Unify-instantiate arg-7 arg-6 arg-0 arg-9 arg-5 arg-2 e-1 arg-10 e-2) eta-0))) (let ((sc3 act-25)) (case (vector-ref sc3 0) ((0) (let ((e-3 (vector-ref sc3 1))) (vector 0 e-3))) (else (vector 1 (Core-Unify-solvedHole)))))))) (else (Core-Core-throw_Catchable__Core_Error 'erased (vector 1 arg-2) eta-0))))))))))))))))
(define Core-Unify-case--unifyApp-7117 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9) (let ((sc0 arg-9)) (case (vector-ref sc0 0) ((0) (lambda (eta-0) (Core-Unify-postpone arg-0 arg-7 arg-6 arg-5 (vector 1 (vector 2 arg-2 arg-1) arg-4) arg-3 eta-0))) (else (let ((e-2 (vector-ref sc0 1))) (let ((sc1 e-2)) (let ((e-5 (vector-ref sc1 1))) (let ((e-6 (vector-ref sc1 2))) (let ((sc2 e-6)) (let ((e-9 (vector-ref sc2 1))) (let ((e-10 (vector-ref sc2 2))) (lambda (eta-0) (let ((act-24 (let ((act-24 (unbox arg-7))) (vector 1 act-24)))) (let ((sc3 act-24)) (case (vector-ref sc3 0) ((0) (let ((e-3 (vector-ref sc3 1))) (vector 0 e-3))) (else (let ((e-7 (vector-ref sc3 1))) (let ((act-25 (Core-Context-clearDefs e-7 eta-0))) (let ((sc4 act-25)) (case (vector-ref sc4 0) ((0) (let ((e-3 (vector-ref sc4 1))) (vector 0 e-3))) (else (let ((e-8 (vector-ref sc4 1))) (let ((act-26 (Core-Normalise-quote_Quote__NF arg-0 e-8 arg-5 arg-3 eta-0))) (let ((sc5 act-26)) (case (vector-ref sc5 0) ((0) (let ((e-3 (vector-ref sc5 1))) (vector 0 e-3))) (else (let ((e-11 (vector-ref sc5 1))) (let ((bind-0 (vector 1 (vector 0 e-5 (vector 0 e-9 e-10))))) ((Core-Unify-case--caseC-32blockC-32inC-32unifyApp-7197 arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 e-5 e-9 e-10 bind-0 e-7 e-8 e-11 (Core-TT-shrinkTerm 'erased 'erased e-11 e-10)) eta-0))))))))))))))))))))))))))))))
(define Core-Unify-case--caseC-32blockC-32inC-32unifyIfEq-7061 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8) (let ((sc0 arg-4)) (cond ((equal? sc0 0) (lambda (eta-0) (Core-Unify-postpone arg-0 arg-6 arg-5 arg-3 arg-2 arg-1 eta-0))) (else (lambda (eta-0) (Core-Unify-convertError 'erased arg-0 arg-6 arg-3 arg-2 arg-1 eta-0)))))))
(define Core-Unify-case--unifyIfEq-7024 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8) (let ((sc0 arg-8)) (cond ((equal? sc0 0) (lambda (eta-0) (vector 1 (Core-Unify-success)))) (else (let ((sc1 arg-4)) (cond ((equal? sc1 0) (lambda (eta-0) (Core-Unify-postpone arg-0 arg-6 arg-5 arg-3 arg-2 arg-1 eta-0))) (else (lambda (eta-0) (Core-Unify-convertError 'erased arg-0 arg-6 arg-3 arg-2 arg-1 eta-0))))))))))
(define Core-Unify-case--instantiate-6957 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11) (let ((sc0 arg-4)) (let ((e-0 (vector-ref sc0 1))) (vector 0 e-0 (vector 1 (vector 0 ) (vector 1 arg-11)))))))
(define Core-Unify-case--instantiateC-44mkDef-6830 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-13 arg-14) (let ((sc0 arg-14)) (case (vector-ref sc0 0) ((1) (let ((e-1 (vector-ref sc0 1))) (lambda (eta-0) (vector 1 e-1)))) (else (lambda (eta-0) (Core-Unify-ufail 'erased (Prelude-Types-Strings-C-43C-43 "Can't make solution for " (Core-TT-show_Show__Name arg-5)) eta-0)))))))
(define Core-Unify-case--instantiateC-44updateIVars-6531 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-13 arg-14 arg-15) (vector 1 (vector 0 arg-15))))
(define Core-Unify-case--caseC-32blockC-32inC-32instantiateC-44updateIVar-6439 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-13 arg-14 arg-15 arg-16 arg-17 arg-18 arg-19) (vector 1 (+ 1 arg-19))))
(define Core-Unify-case--instantiateC-44updateIVar-6339 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-13 arg-14 arg-15 arg-16 arg-17 arg-18 arg-19) (let ((sc0 arg-19)) (cond ((equal? sc0 0) (vector 1 0)) (else (Prelude-Types-C-62C-62C-61_Monad__Maybe 'erased 'erased (Core-Unify-n--4508-6236-updateIVar arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 'erased arg-17 'erased 'erased arg-16 'erased) (lambda (_-0) (vector 1 (+ 1 _-0)))))))))
(define Core-Unify-case--instantiateC-44updateIVar-6269 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-13 arg-14 arg-15 arg-16) (vector 1 (+ 1 arg-16))))
(define Core-Unify-case--caseC-32blockC-32inC-32patternEnv-6028 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9) (let ((sc0 arg-9)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (lambda (eta-0) (vector 1 (vector 1 (vector 0 e-2 (vector 0 (Core-Unify-n--4113-5874-updateVars arg-0 arg-1 arg-2 arg-3 arg-4 'erased arg-8 e-3) e-3))))))))))
(define Core-Unify-case--patternEnv-5983 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8) (let ((sc0 arg-8)) (case (vector-ref sc0 0) ((0) (lambda (eta-0) (vector 1 (vector 0 )))) (else (let ((e-2 (vector-ref sc0 1))) (Core-Unify-case--caseC-32blockC-32inC-32patternEnv-6028 arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 e-2 (Core-Unify-toSubVars arg-0 e-2))))))))
(define Core-Unify-case--patternEnvC-44updateVars-5899 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11) (let ((sc0 arg-11)) (case (vector-ref sc0 0) ((0) (Core-Unify-n--4113-5874-updateVars arg-0 arg-1 arg-2 arg-3 arg-4 'erased arg-9 arg-10)) (else (let ((e-2 (vector-ref sc0 1))) (vector 1 e-2 (Core-Unify-n--4113-5874-updateVars arg-0 arg-1 arg-2 arg-3 arg-4 'erased arg-9 arg-10))))))))
(define Core-Unify-case--caseC-32blockC-32inC-32toSubVars-5827 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-5)) (cond ((equal? sc0 0) (vector 0 (vector 1 arg-0 arg-3) (vector 2 arg-4))) (else (vector 0 arg-3 (vector 1 arg-4)))))))
(define Core-Unify-case--toSubVars-5811 (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (Core-Unify-case--caseC-32blockC-32inC-32toSubVars-5827 arg-0 arg-1 arg-2 e-2 e-3 (Core-Unify-n--3999-5777-anyFirst arg-0 arg-1 arg-2 arg-2)))))))
(define Core-Unify-case--getVars-5706 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (let ((sc0 arg-6)) (cond ((equal? sc0 0) (vector 0 )) (else (Prelude-Types-C-62C-62C-61_Monad__Maybe 'erased 'erased (Core-Unify-getVars arg-0 (vector 1 arg-2 arg-5) arg-4) (lambda (xsC-39) (Prelude-Types-pure_Applicative__Maybe 'erased (vector 1 arg-2 xsC-39)))))))))
(define Core-Unify-n--4113-5874-updateVars (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (let ((sc0 arg-6)) (case (vector-ref sc0 0) ((0) (vector 0 )) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (Core-Unify-case--patternEnvC-44updateVars-5899 arg-0 arg-1 arg-2 arg-3 arg-4 'erased 'erased e-2 'erased e-3 arg-7 (Core-TT-subElem 'erased 'erased 'erased e-2 'erased arg-7)))))))))
(define Core-Unify-n--4525-6613-updateIVarsB (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-13 arg-14 arg-15 arg-16 arg-17 arg-18) (let ((sc0 arg-18)) (case (vector-ref sc0 0) ((0) (let ((e-1 (vector-ref sc0 1))) (let ((e-2 (vector-ref sc0 2))) (let ((e-3 (vector-ref sc0 3))) (Prelude-Types-C-62C-62C-61_Monad__Maybe 'erased 'erased (Core-Unify-n--4508-6237-updateIVars arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-15 arg-16 arg-17 e-3) (lambda (bind-0) (vector 1 (vector 0 e-1 e-2 bind-0)))))))) ((1) (let ((e-5 (vector-ref sc0 1))) (let ((e-6 (vector-ref sc0 2))) (let ((e-7 (vector-ref sc0 3))) (Prelude-Types-C-62C-62C-61_Monad__Maybe 'erased 'erased (Core-Unify-n--4508-6237-updateIVars arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-15 arg-16 arg-17 e-7) (lambda (bind-0) (vector 1 (vector 1 e-5 e-6 bind-0)))))))) ((2) (let ((e-9 (vector-ref sc0 1))) (let ((e-10 (vector-ref sc0 2))) (Prelude-Types-C-62C-62C-61_Monad__Maybe 'erased 'erased (Core-Unify-n--4508-6237-updateIVars arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-15 arg-16 arg-17 e-10) (lambda (bind-0) (vector 1 (vector 2 e-9 bind-0))))))) (else (let ((e-12 (vector-ref sc0 1))) (Prelude-Types-C-62C-62C-61_Monad__Maybe 'erased 'erased (Core-Unify-n--4508-6237-updateIVars arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-15 arg-16 arg-17 e-12) (lambda (bind-0) (vector 1 (vector 3 bind-0))))))))))
(define Core-Unify-n--4508-6237-updateIVars (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12) (let ((sc0 arg-12)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (Prelude-Types-C-62C-62C-61_Monad__Maybe 'erased 'erased (Core-Unify-n--4508-6236-updateIVar arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 'erased e-2 'erased 'erased arg-11 'erased) (lambda (_-0) (vector 1 (vector 0 _-0)))))) ((1) (let ((e-5 (vector-ref sc0 1))) (let ((e-6 (vector-ref sc0 2))) (Prelude-Types-pure_Applicative__Maybe 'erased (vector 1 e-5 e-6))))) ((2) (let ((e-8 (vector-ref sc0 1))) (let ((e-9 (vector-ref sc0 2))) (Prelude-Types-C-62C-62C-61_Monad__Maybe 'erased 'erased (Prelude-Types-traverse_Traversable__List 'erased 'erased 'erased (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-62) (Prelude-Types-map_Functor__Maybe 'erased 'erased func arg-62))))) (lambda (a) (lambda (arg-172) (Prelude-Types-pure_Applicative__Maybe 'erased arg-172))) (lambda (b) (lambda (a) (lambda (arg-173) (lambda (arg-175) (Prelude-Types-C-60C-42C-62_Applicative__Maybe 'erased 'erased arg-173 arg-175)))))) (lambda (eta-0) (Core-Unify-n--4508-6237-updateIVars arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 eta-0)) e-9) (lambda (bind-0) (Prelude-Types-pure_Applicative__Maybe 'erased (vector 2 e-8 bind-0))))))) ((3) (let ((e-11 (vector-ref sc0 1))) (let ((e-12 (vector-ref sc0 2))) (let ((e-13 (vector-ref sc0 3))) (Prelude-Types-C-62C-62C-61_Monad__Maybe 'erased 'erased (Core-Unify-n--4525-6613-updateIVarsB arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-10 e-11 e-13 e-12 arg-9 arg-11 arg-9 arg-10 arg-11 e-12) (lambda (bC-39) (Prelude-Types-C-62C-62C-61_Monad__Maybe 'erased 'erased (Core-Unify-n--4508-6237-updateIVars arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 (vector 1 e-11 arg-9) (vector 1 e-11 arg-10) (vector 1 (vector 1 0) (Core-Unify-weaken_Weaken__C-40IVarsC-32C-36vsC-41 'erased e-11 arg-10 arg-11)) e-13) (lambda (scC-39) (vector 1 (vector 3 e-11 bC-39 scC-39)))))))))) ((4) (let ((e-15 (vector-ref sc0 1))) (let ((e-16 (vector-ref sc0 2))) (Prelude-Types-C-62C-62C-61_Monad__Maybe 'erased 'erased (Core-Unify-n--4508-6237-updateIVars arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 e-15) (lambda (bind-0) (Prelude-Types-C-62C-62C-61_Monad__Maybe 'erased 'erased (Core-Unify-n--4508-6237-updateIVars arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 e-16) (lambda (bind-1) (vector 1 (vector 4 bind-0 bind-1))))))))) ((6) (vector 1 (vector 6 ))) (else (vector 1 (vector 5 )))))))
(define Core-Unify-n--4508-6236-updateIVar (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-13 arg-14) (let ((sc0 arg-13)) (case (vector-ref sc0 0) ((1) (let ((e-3 (vector-ref sc0 1))) (let ((e-4 (vector-ref sc0 2))) (let ((sc1 e-3)) (case (vector-ref sc1 0) ((0) (Prelude-Types-C-62C-62C-61_Monad__Maybe 'erased 'erased (Core-Unify-n--4508-6236-updateIVar arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 'erased arg-10 'erased 'erased e-4 'erased) (lambda (_-0) (vector 1 (+ 1 _-0))))) ((1) (let ((e-7 (vector-ref sc1 1))) (Core-Unify-case--instantiateC-44updateIVar-6339 arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 'erased 'erased 'erased 'erased 'erased e-7 'erased e-4 arg-10 'erased (Prelude-Types-C-61C-61_Eq__Nat arg-10 e-7))))(else (vector 0 )))))))(else (vector 0 ))))))
(define Core-Unify-n--4508-6238-mkDef (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-13 arg-14) (let ((sc0 arg-11)) (case (vector-ref sc0 0) ((1) (let ((e-1 (vector-ref sc0 1))) (let ((e-2 (vector-ref sc0 2))) (let ((sc1 arg-14)) (case (vector-ref sc1 0) ((3) (let ((e-5 (vector-ref sc1 1))) (let ((e-6 (vector-ref sc1 2))) (let ((e-7 (vector-ref sc1 3))) (let ((sc2 e-6)) (case (vector-ref sc2 0) ((1) (let ((e-9 (vector-ref sc2 1))) (lambda (eta-0) (let ((act-24 ((Core-Unify-n--4508-6238-mkDef arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 (vector 1 e-5 arg-9) arg-10 e-2 (vector 1 (vector 1 e-1) arg-12) arg-13 e-7) eta-0))) (let ((sc3 act-24)) (case (vector-ref sc3 0) ((0) (let ((e-3 (vector-ref sc3 1))) (vector 0 e-3))) (else (let ((e-8 (vector-ref sc3 1))) (vector 1 (vector 3 e-5 (vector 0 e-9 (vector 1 ) (vector 6 )) e-8))))))))))(else (lambda (eta-0) (Core-Unify-ufail 'erased (Prelude-Types-Strings-C-43C-43 "Can't make solution for " (Prelude-Types-Strings-C-43C-43 (Core-TT-show_Show__Name arg-5) (Prelude-Types-Strings-C-43C-43 " at " (Core-TT-show_Show__C-40TermC-32C-36varsC-41 arg-9 arg-14)))) eta-0)))))))))(else (lambda (eta-0) (Core-Unify-ufail 'erased (Prelude-Types-Strings-C-43C-43 "Can't make solution for " (Prelude-Types-Strings-C-43C-43 (Core-TT-show_Show__Name arg-5) (Prelude-Types-Strings-C-43C-43 " at " (Core-TT-show_Show__C-40TermC-32C-36varsC-41 arg-9 arg-14)))) eta-0)))))))) ((0) (Core-Unify-case--instantiateC-44mkDef-6830 arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-14 arg-13 arg-12 (Core-Unify-n--4508-6237-updateIVars arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-12 arg-13)))(else (lambda (eta-0) (Core-Unify-ufail 'erased (Prelude-Types-Strings-C-43C-43 "Can't make solution for " (Prelude-Types-Strings-C-43C-43 (Core-TT-show_Show__Name arg-5) (Prelude-Types-Strings-C-43C-43 " at " (Core-TT-show_Show__C-40TermC-32C-36varsC-41 arg-9 arg-14)))) eta-0)))))))
(define Core-Unify-n--3897-5692-inArgs (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (let ((sc0 arg-7)) (case (vector-ref sc0 0) ((0) 1) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (Prelude-Basics-C-124C-124 (Prelude-EqOrd-C-61C-61_Eq__Integer (Prelude-Types-natToInteger arg-6) (Prelude-Types-natToInteger e-2)) (lambda () (Core-Unify-n--3897-5692-inArgs arg-0 'erased arg-2 'erased arg-4 arg-5 arg-6 e-3))))))))))
(define Core-Unify-n--3999-5777-anyFirst (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((0) 1) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 e-2)) (cond ((equal? sc1 0) 0)(else (Core-Unify-n--3999-5777-anyFirst arg-0 arg-1 arg-2 e-3)))))))))))
(define Core-Unify-weaken_Weaken__C-40IVarsC-32C-36vsC-41 (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((0) (vector 0 )) (else (let ((e-4 (vector-ref sc0 1))) (let ((e-5 (vector-ref sc0 2))) (let ((sc1 e-4)) (case (vector-ref sc1 0) ((0) (vector 1 (vector 0 ) (Core-Unify-weaken_Weaken__C-40IVarsC-32C-36vsC-41 'erased arg-1 arg-2 e-5))) (else (let ((e-8 (vector-ref sc1 1))) (vector 1 (vector 1 (Core-TT-weaken_Weaken__Var arg-1 arg-2 e-8)) (Core-Unify-weaken_Weaken__C-40IVarsC-32C-36vsC-41 'erased arg-1 arg-2 e-5)))))))))))))
(define Core-Unify-weakenNs_Weaken__C-40IVarsC-32C-36vsC-41 (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((0) arg-3) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (Core-Unify-weaken_Weaken__C-40IVarsC-32C-36vsC-41 'erased e-2 (Prelude-Types-List-C-43C-43 'erased e-3 arg-1) (Core-Unify-weakenNs_Weaken__C-40IVarsC-32C-36vsC-41 'erased arg-1 e-3 arg-3)))))))))
(define Core-Unify-unify_Unify__Term (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 ext-0) (let ((act-24 (let ((act-24 (unbox arg-1))) (vector 1 act-24)))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (let ((act-25 ((Core-Normalise-nf arg-0 e-5 arg-3 arg-4) ext-0))) (let ((sc1 act-25)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-6 (vector-ref sc1 1))) (let ((act-26 ((Core-Normalise-nf arg-0 e-5 arg-3 arg-5) ext-0))) (let ((sc2 act-26)) (case (vector-ref sc2 0) ((0) (let ((e-2 (vector-ref sc2 1))) (vector 0 e-2))) (else (let ((e-7 (vector-ref sc2 1))) ((Core-Unify-unify_Unify__NF arg-0 arg-1 arg-2 arg-3 e-6 e-7) ext-0))))))))))))))))))
(define Core-Unify-unify_Unify__NF (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-4)) (case (vector-ref sc0 0) ((0) (let ((e-4 (vector-ref sc0 1))) (let ((e-5 (vector-ref sc0 2))) (let ((e-6 (vector-ref sc0 3))) (let ((sc1 e-5)) (case (vector-ref sc1 0) ((1) (let ((e-25 (vector-ref sc1 1))) (let ((e-26 (vector-ref sc1 2))) (let ((e-27 (vector-ref sc1 3))) (let ((sc2 arg-5)) (case (vector-ref sc2 0) ((0) (let ((e-33 (vector-ref sc2 1))) (let ((e-34 (vector-ref sc2 2))) (let ((e-35 (vector-ref sc2 3))) (let ((sc3 e-34)) (case (vector-ref sc3 0) ((1) (let ((e-37 (vector-ref sc3 1))) (let ((e-38 (vector-ref sc3 2))) (let ((e-39 (vector-ref sc3 3))) (lambda (eta-0) (let ((act-24 (let ((act-24 (unbox arg-1))) (vector 1 act-24)))) (let ((sc4 act-24)) (case (vector-ref sc4 0) ((0) (let ((e-2 (vector-ref sc4 1))) (vector 0 e-2))) (else (let ((e-7 (vector-ref sc4 1))) (let ((act-25 (Core-Context-clearDefs e-7 eta-0))) (let ((sc5 act-25)) (case (vector-ref sc5 0) ((0) (let ((e-2 (vector-ref sc5 1))) (vector 0 e-2))) (else (let ((e-8 (vector-ref sc5 1))) (let ((act-26 (Core-Normalise-quote_Quote__NF arg-0 e-8 arg-3 e-27 eta-0))) (let ((sc6 act-26)) (case (vector-ref sc6 0) ((0) (let ((e-2 (vector-ref sc6 1))) (vector 0 e-2))) (else (let ((e-9 (vector-ref sc6 1))) (let ((act-27 ((Core-Unify-unify_Unify__NF arg-0 arg-1 arg-2 arg-3 e-27 e-39) eta-0))) (let ((sc7 act-27)) (case (vector-ref sc7 0) ((0) (let ((e-2 (vector-ref sc7 1))) (vector 0 e-2))) (else (let ((e-10 (vector-ref sc7 1))) (let ((act-28 (Core-UnifyState-genVarName arg-1 arg-2 "x" eta-0))) (let ((sc8 act-28)) (case (vector-ref sc8 0) ((0) (let ((e-2 (vector-ref sc8 1))) (vector 0 e-2))) (else (let ((e-11 (vector-ref sc8 1))) (let ((envC-39 (vector 1 (vector 1 e-37 (vector 1 ) e-9) arg-3))) ((Core-Unify-case--unify-7525 arg-0 e-27 e-26 e-25 e-6 e-4 e-39 e-38 e-37 e-35 e-33 arg-3 arg-2 arg-1 e-7 e-8 e-9 e-10 e-11 envC-39 (let ((sc9 e-10)) (let ((e-0 (vector-ref sc9 1))) e-0))) eta-0))))))))))))))))))))))))))))))))(else (let ((sc3 arg-5)) (case (vector-ref sc3 0) ((0) (lambda (eta-0) (Core-Unify-convertError 'erased arg-0 arg-1 arg-3 arg-4 arg-5 eta-0)))(else (let ((sc3 arg-5)) (case (vector-ref sc3 0) ((1) (let ((e-1 (vector-ref sc3 1))) (let ((e-2 (vector-ref sc3 2))) (Core-Unify-unifyApp arg-0 arg-1 arg-2 arg-3 e-1 e-2 arg-4))))(else (lambda (eta-0) (Core-Unify-unifyIfEq arg-1 arg-2 arg-0 1 arg-3 arg-4 arg-5 eta-0)))))))))))))))(else (let ((sc2 arg-5)) (case (vector-ref sc2 0) ((0) (lambda (eta-0) (Core-Unify-convertError 'erased arg-0 arg-1 arg-3 arg-4 arg-5 eta-0)))(else (let ((sc2 arg-5)) (case (vector-ref sc2 0) ((1) (let ((e-1 (vector-ref sc2 1))) (let ((e-2 (vector-ref sc2 2))) (Core-Unify-unifyApp arg-0 arg-1 arg-2 arg-3 e-1 e-2 arg-4))))(else (lambda (eta-0) (Core-Unify-unifyIfEq arg-1 arg-2 arg-0 1 arg-3 arg-4 arg-5 eta-0))))))))))))))) ((0) (let ((e-29 (vector-ref sc1 1))) (let ((e-31 (vector-ref sc1 3))) (let ((sc2 arg-5)) (case (vector-ref sc2 0) ((0) (let ((e-42 (vector-ref sc2 2))) (let ((e-43 (vector-ref sc2 3))) (let ((sc3 e-42)) (case (vector-ref sc3 0) ((0) (let ((e-47 (vector-ref sc3 3))) (lambda (eta-0) (let ((act-24 (let ((act-24 (unbox arg-1))) (vector 1 act-24)))) (let ((sc4 act-24)) (case (vector-ref sc4 0) ((0) (let ((e-2 (vector-ref sc4 1))) (vector 0 e-2))) (else (let ((e-7 (vector-ref sc4 1))) (let ((act-25 (Core-Context-clearDefs e-7 eta-0))) (let ((sc5 act-25)) (case (vector-ref sc5 0) ((0) (let ((e-2 (vector-ref sc5 1))) (vector 0 e-2))) (else (let ((e-8 (vector-ref sc5 1))) (let ((act-26 (Core-Normalise-quote_Quote__NF arg-0 e-8 arg-3 e-31 eta-0))) (let ((sc6 act-26)) (case (vector-ref sc6 0) ((0) (let ((e-2 (vector-ref sc6 1))) (vector 0 e-2))) (else (let ((e-9 (vector-ref sc6 1))) (let ((act-27 ((Core-Unify-unify_Unify__NF arg-0 arg-1 arg-2 arg-3 e-31 e-47) eta-0))) (let ((sc7 act-27)) (case (vector-ref sc7 0) ((0) (let ((e-2 (vector-ref sc7 1))) (vector 0 e-2))) (else (let ((e-10 (vector-ref sc7 1))) (let ((act-28 (Core-UnifyState-genVarName arg-1 arg-2 "x" eta-0))) (let ((sc8 act-28)) (case (vector-ref sc8 0) ((0) (let ((e-2 (vector-ref sc8 1))) (vector 0 e-2))) (else (let ((e-11 (vector-ref sc8 1))) (let ((envC-39 (vector 1 (vector 0 e-29 (vector 1 ) e-9) arg-3))) (let ((act-29 (Core-Normalise-quote_Quote__NF arg-0 e-8 arg-3 e-31 eta-0))) (let ((sc9 act-29)) (case (vector-ref sc9 0) ((0) (let ((e-2 (vector-ref sc9 1))) (vector 0 e-2))) (else (let ((act-30 (Core-Normalise-quote_Quote__NF arg-0 e-8 arg-3 e-47 eta-0))) (let ((sc10 act-30)) (case (vector-ref sc10 0) ((0) (let ((e-2 (vector-ref sc10 1))) (vector 0 e-2))) (else (let ((act-31 (((e-6 e-7) (Core-Normalise-toClosure 'erased arg-3 (vector 1 (vector 1 ) e-11))) eta-0))) (let ((sc11 act-31)) (case (vector-ref sc11 0) ((0) (let ((e-2 (vector-ref sc11 1))) (vector 0 e-2))) (else (let ((e-14 (vector-ref sc11 1))) (let ((act-32 (((e-43 e-7) (Core-Normalise-toClosure 'erased arg-3 (vector 1 (vector 1 ) e-11))) eta-0))) (let ((sc12 act-32)) (case (vector-ref sc12 0) ((0) (let ((e-2 (vector-ref sc12 1))) (vector 0 e-2))) (else (let ((act-33 (Core-Normalise-quote_Quote__NF arg-0 e-8 arg-3 e-14 eta-0))) (let ((sc13 act-33)) (case (vector-ref sc13 0) ((0) (let ((e-2 (vector-ref sc13 1))) (vector 0 e-2))) (else (let ((e-16 (vector-ref sc13 1))) (let ((act-34 (Core-Normalise-quote_Quote__NF arg-0 e-8 arg-3 e-14 eta-0))) (let ((sc14 act-34)) (case (vector-ref sc14 0) ((0) (let ((e-2 (vector-ref sc14 1))) (vector 0 e-2))) (else (let ((e-17 (vector-ref sc14 1))) (let ((act-35 (Core-Unify-unify_Unify__Term (vector 1 e-4 arg-0) arg-1 arg-2 envC-39 (Core-TT-refsToLocals 'erased (vector 1 e-4 (vector 0 )) (vector 1 e-4 e-11 (vector 0 )) e-16) (Core-TT-refsToLocals 'erased (vector 1 e-4 (vector 0 )) (vector 1 e-4 e-11 (vector 0 )) e-17) eta-0))) (let ((sc15 act-35)) (case (vector-ref sc15 0) ((0) (let ((e-2 (vector-ref sc15 1))) (vector 0 e-2))) (else (let ((e-18 (vector-ref sc15 1))) (vector 1 (Core-Unify-union e-10 e-18)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(else (let ((sc3 arg-5)) (case (vector-ref sc3 0) ((0) (lambda (eta-0) (Core-Unify-convertError 'erased arg-0 arg-1 arg-3 arg-4 arg-5 eta-0)))(else (let ((sc3 arg-5)) (case (vector-ref sc3 0) ((1) (let ((e-1 (vector-ref sc3 1))) (let ((e-2 (vector-ref sc3 2))) (Core-Unify-unifyApp arg-0 arg-1 arg-2 arg-3 e-1 e-2 arg-4))))(else (lambda (eta-0) (Core-Unify-unifyIfEq arg-1 arg-2 arg-0 1 arg-3 arg-4 arg-5 eta-0))))))))))))))(else (let ((sc2 arg-5)) (case (vector-ref sc2 0) ((0) (lambda (eta-0) (Core-Unify-convertError 'erased arg-0 arg-1 arg-3 arg-4 arg-5 eta-0)))(else (let ((sc2 arg-5)) (case (vector-ref sc2 0) ((1) (let ((e-1 (vector-ref sc2 1))) (let ((e-2 (vector-ref sc2 2))) (Core-Unify-unifyApp arg-0 arg-1 arg-2 arg-3 e-1 e-2 arg-4))))(else (lambda (eta-0) (Core-Unify-unifyIfEq arg-1 arg-2 arg-0 1 arg-3 arg-4 arg-5 eta-0))))))))))))))(else (let ((sc1 arg-5)) (case (vector-ref sc1 0) ((0) (lambda (eta-0) (Core-Unify-convertError 'erased arg-0 arg-1 arg-3 arg-4 arg-5 eta-0)))(else (let ((sc1 arg-5)) (case (vector-ref sc1 0) ((1) (let ((e-1 (vector-ref sc1 1))) (let ((e-2 (vector-ref sc1 2))) (Core-Unify-unifyApp arg-0 arg-1 arg-2 arg-3 e-1 e-2 arg-4))))(else (lambda (eta-0) (Core-Unify-unifyIfEq arg-1 arg-2 arg-0 1 arg-3 arg-4 arg-5 eta-0))))))))))))))) ((2) (let ((e-8 (vector-ref sc0 1))) (let ((e-9 (vector-ref sc0 2))) (let ((e-10 (vector-ref sc0 3))) (let ((e-11 (vector-ref sc0 4))) (let ((sc1 arg-5)) (case (vector-ref sc1 0) ((2) (let ((e-49 (vector-ref sc1 1))) (let ((e-50 (vector-ref sc1 2))) (let ((e-51 (vector-ref sc1 3))) (let ((e-52 (vector-ref sc1 4))) (let ((ny (vector 2 e-49 e-50 e-51 e-52))) (let ((nx (vector 2 e-8 e-9 e-10 e-11))) (Core-Unify-case--unify-7929 arg-0 e-52 e-51 e-50 e-49 ny e-11 e-10 e-9 e-8 nx arg-3 arg-2 arg-1 (Prelude-EqOrd-C-61C-61_Eq__Int e-9 e-50)))))))))(else (let ((sc1 arg-5)) (case (vector-ref sc1 0) ((1) (let ((e-1 (vector-ref sc1 1))) (let ((e-2 (vector-ref sc1 2))) (Core-Unify-unifyApp arg-0 arg-1 arg-2 arg-3 e-1 e-2 arg-4))))(else (lambda (eta-0) (Core-Unify-unifyIfEq arg-1 arg-2 arg-0 1 arg-3 arg-4 arg-5 eta-0))))))))))))) ((3) (let ((e-13 (vector-ref sc0 1))) (let ((e-14 (vector-ref sc0 2))) (let ((e-15 (vector-ref sc0 3))) (let ((e-16 (vector-ref sc0 4))) (let ((sc1 arg-5)) (case (vector-ref sc1 0) ((3) (let ((e-54 (vector-ref sc1 1))) (let ((e-55 (vector-ref sc1 2))) (let ((e-56 (vector-ref sc1 3))) (let ((e-57 (vector-ref sc1 4))) (let ((ny (vector 3 e-54 e-55 e-56 e-57))) (let ((nx (vector 3 e-13 e-14 e-15 e-16))) (Core-Unify-case--unify-8010 arg-0 e-57 e-56 e-55 e-54 ny e-16 e-15 e-14 e-13 nx arg-3 arg-2 arg-1 (Core-TT-C-61C-61_Eq__Name e-13 e-54)))))))))(else (let ((sc1 arg-5)) (case (vector-ref sc1 0) ((1) (let ((e-1 (vector-ref sc1 1))) (let ((e-2 (vector-ref sc1 2))) (Core-Unify-unifyApp arg-0 arg-1 arg-2 arg-3 e-1 e-2 arg-4))))(else (lambda (eta-0) (Core-Unify-unifyIfEq arg-1 arg-2 arg-0 1 arg-3 arg-4 arg-5 eta-0))))))))))))) ((1) (let ((e-18 (vector-ref sc0 1))) (let ((e-19 (vector-ref sc0 2))) (Core-Unify-unifyApp arg-0 arg-1 arg-2 arg-3 e-18 e-19 arg-5))))(else (let ((sc0 arg-5)) (case (vector-ref sc0 0) ((1) (let ((e-1 (vector-ref sc0 1))) (let ((e-2 (vector-ref sc0 2))) (Core-Unify-unifyApp arg-0 arg-1 arg-2 arg-3 e-1 e-2 arg-4))))(else (lambda (eta-0) (Core-Unify-unifyIfEq arg-1 arg-2 arg-0 1 arg-3 arg-4 arg-5 eta-0))))))))))
(define Core-Unify-unify_Unify__Closure (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 ext-0) (let ((act-24 (let ((act-24 (unbox arg-1))) (vector 1 act-24)))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (let ((act-25 ((Core-Normalise-evalClosure arg-0 e-5 arg-4) ext-0))) (let ((sc1 act-25)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-6 (vector-ref sc1 1))) (let ((act-26 ((Core-Normalise-evalClosure arg-0 e-5 arg-5) ext-0))) (let ((sc2 act-26)) (case (vector-ref sc2 0) ((0) (let ((e-2 (vector-ref sc2 1))) (vector 0 e-2))) (else (let ((e-7 (vector-ref sc2 1))) ((Core-Unify-unify_Unify__NF arg-0 arg-1 arg-2 arg-3 e-6 e-7) ext-0))))))))))))))))))
(define Core-Unify-__Impl_Weaken_C-40IVarsC-32C-36vsC-41 (lambda (arg-0) (vector 0 (lambda (n) (lambda (vars) (lambda (arg-2952) (Core-Unify-weaken_Weaken__C-40IVarsC-32C-36vsC-41 'erased n vars arg-2952)))) (lambda (vars) (lambda (ns) (lambda (arg-2956) (Core-Unify-weakenNs_Weaken__C-40IVarsC-32C-36vsC-41 'erased vars ns arg-2956)))))))
(define Core-Unify-__Impl_Unify_Term (lambda (ext-6 ext-1 ext-2 ext-3 ext-4 ext-5 ext-0) (Core-Unify-unify_Unify__Term ext-6 ext-1 ext-2 ext-3 ext-4 ext-5 ext-0)))
(define Core-Unify-__Impl_Unify_NF (lambda (ext-0 ext-1 ext-2 ext-3 ext-4 ext-5) (Core-Unify-unify_Unify__NF ext-0 ext-1 ext-2 ext-3 ext-4 ext-5)))
(define Core-Unify-__Impl_Unify_Closure (lambda (ext-6 ext-1 ext-2 ext-3 ext-4 ext-5 ext-0) (Core-Unify-unify_Unify__Closure ext-6 ext-1 ext-2 ext-3 ext-4 ext-5 ext-0)))
(define Core-Unify-unionAll (lambda (arg-0) (let ((sc0 arg-0)) (case (vector-ref sc0 0) ((0) (vector 0 (vector 0 ) 1)) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 e-3)) (case (vector-ref sc1 0) ((0) e-2)(else (Core-Unify-union e-2 (Core-Unify-unionAll e-3))))))))))))
(define Core-Unify-union (lambda (arg-0 arg-1) (vector 0 (Data-List-union 'erased (vector 0 (lambda (arg-2) (lambda (arg-3) (Prelude-EqOrd-C-61C-61_Eq__Int arg-2 arg-3))) (lambda (arg-4) (lambda (arg-5) (Prelude-EqOrd-C-47C-61_Eq__Int arg-4 arg-5)))) (let ((sc0 arg-0)) (let ((e-0 (vector-ref sc0 1))) e-0)) (let ((sc0 arg-1)) (let ((e-0 (vector-ref sc0 1))) e-0))) (Prelude-Basics-C-124C-124 (let ((sc0 arg-0)) (let ((e-1 (vector-ref sc0 2))) e-1)) (lambda () (let ((sc0 arg-1)) (let ((e-1 (vector-ref sc0 2))) e-1)))))))
(define Core-Unify-unifyIfEq (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 ext-0) (let ((act-24 (let ((act-24 (unbox arg-0))) (vector 1 act-24)))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (let ((act-25 (Core-Normalise-convert_Convert__NF arg-2 e-5 arg-4 arg-5 arg-6 ext-0))) (let ((sc1 act-25)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-6 (vector-ref sc1 1))) (let ((sc2 e-6)) (cond ((equal? sc2 0) (vector 1 (Core-Unify-success))) (else (let ((sc3 arg-3)) (cond ((equal? sc3 0) (Core-Unify-postpone arg-2 arg-0 arg-1 arg-4 arg-5 arg-6 ext-0)) (else (Core-Unify-convertError 'erased arg-2 arg-0 arg-4 arg-5 arg-6 ext-0)))))))))))))))))))
(define Core-Unify-unifyArgs (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (let ((sc0 arg-6)) (case (vector-ref sc0 0) ((0) (let ((sc1 arg-7)) (case (vector-ref sc1 0) ((0) (lambda (eta-0) (vector 1 (Core-Unify-success))))(else (lambda (eta-0) (Core-Unify-ufail 'erased "" eta-0)))))) ((1) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 arg-7)) (case (vector-ref sc1 0) ((1) (let ((e-6 (vector-ref sc1 1))) (let ((e-7 (vector-ref sc1 2))) (lambda (eta-0) (let ((act-24 ((Core-Unify-unifyArgs 'erased arg-1 arg-2 arg-3 arg-4 arg-5 e-3 e-7) eta-0))) (let ((sc2 act-24)) (case (vector-ref sc2 0) ((0) (let ((e-4 (vector-ref sc2 1))) (vector 0 e-4))) (else (let ((e-5 (vector-ref sc2 1))) (let ((act-25 ((((((((Builtin-fst 'erased 'erased arg-1) arg-2) arg-3) arg-4) arg-5) e-2) e-6) eta-0))) (let ((sc3 act-25)) (case (vector-ref sc3 0) ((0) (let ((e-4 (vector-ref sc3 1))) (vector 0 e-4))) (else (let ((e-8 (vector-ref sc3 1))) (vector 1 (Core-Unify-union e-8 e-5))))))))))))))))(else (lambda (eta-0) (Core-Unify-ufail 'erased "" eta-0))))))))(else (lambda (eta-0) (Core-Unify-ufail 'erased "" eta-0)))))))
(define Core-Unify-unifyApp (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (let ((sc0 arg-4)) (case (vector-ref sc0 0) ((2) (let ((e-1 (vector-ref sc0 1))) (let ((e-2 (vector-ref sc0 2))) (let ((args (Prelude-Types-List-C-43C-43 'erased e-2 arg-5))) (lambda (eta-0) (let ((act-24 (Core-Unify-patternEnv arg-1 arg-2 arg-0 arg-3 args eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-3 (vector-ref sc1 1))) (vector 0 e-3))) (else (let ((e-5 (vector-ref sc1 1))) (let ((sc2 e-5)) (case (vector-ref sc2 0) ((0) (Core-Unify-postpone arg-0 arg-1 arg-2 arg-3 (vector 1 (vector 2 e-1 e-2) arg-5) arg-6 eta-0)) (else (let ((e-3 (vector-ref sc2 1))) (let ((sc3 e-3)) (let ((e-7 (vector-ref sc3 1))) (let ((e-6 (vector-ref sc3 2))) (let ((sc4 e-6)) (let ((e-9 (vector-ref sc4 1))) (let ((e-10 (vector-ref sc4 2))) (let ((act-25 (let ((act-25 (unbox arg-1))) (vector 1 act-25)))) (let ((sc5 act-25)) (case (vector-ref sc5 0) ((0) (let ((e-4 (vector-ref sc5 1))) (vector 0 e-4))) (else (let ((e-8 (vector-ref sc5 1))) (let ((act-26 (Core-Context-clearDefs e-8 eta-0))) (let ((sc6 act-26)) (case (vector-ref sc6 0) ((0) (let ((e-4 (vector-ref sc6 1))) (vector 0 e-4))) (else (let ((e-11 (vector-ref sc6 1))) (let ((act-27 (Core-Normalise-quote_Quote__NF arg-0 e-11 arg-3 arg-6 eta-0))) (let ((sc7 act-27)) (case (vector-ref sc7 0) ((0) (let ((e-4 (vector-ref sc7 1))) (vector 0 e-4))) (else (let ((e-12 (vector-ref sc7 1))) (let ((bind-0 (vector 1 (vector 0 e-7 (vector 0 e-9 e-10))))) ((Core-Unify-case--caseC-32blockC-32inC-32unifyApp-7197 arg-0 e-2 e-1 arg-6 arg-5 arg-3 arg-2 arg-1 args e-7 e-9 e-10 bind-0 e-8 e-11 e-12 (Core-TT-shrinkTerm 'erased 'erased e-12 e-10)) eta-0)))))))))))))))))))))))))))))))))))))(else (lambda (eta-0) (let ((act-24 (let ((act-24 (unbox arg-1))) (vector 1 act-24)))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (let ((act-25 (Core-Normalise-convert_Convert__NF arg-0 e-5 arg-3 (vector 1 arg-4 arg-5) arg-6 eta-0))) (let ((sc1 act-25)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-6 (vector-ref sc1 1))) (let ((sc2 e-6)) (cond ((equal? sc2 0) (vector 1 (Core-Unify-success))) (else (Core-Unify-postpone arg-0 arg-1 arg-2 arg-3 (vector 1 arg-4 arg-5) arg-6 eta-0))))))))))))))))))))
(define Core-Unify-unify (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 ext-0 ext-1 ext-2) ((((((arg-4 arg-1) arg-2) arg-3) ext-0) ext-1) ext-2)))
(define Core-Unify-ufail (lambda (arg-0 arg-1 ext-0) (Core-Core-throw_Catchable__Core_Error 'erased (vector 3 arg-1) ext-0)))
(define Core-Unify-toSubVars (lambda (arg-0 arg-1) (let ((sc0 arg-0)) (case (vector-ref sc0 0) ((0) (vector 0 (vector 0 ) (vector 0 ))) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (Core-Unify-case--toSubVars-5811 e-2 e-3 arg-1 (Core-Unify-toSubVars e-3 (Core-TT-dropFirst 'erased 'erased arg-1))))))))))
(define Core-Unify-success (lambda () (vector 0 (vector 0 ) 1)))
(define Core-Unify-solvedHole (lambda () (vector 0 (vector 0 ) 0)))
(define Core-Unify-solveConstraints (lambda (arg-0 arg-1 ext-0) (let ((act-24 (let ((act-24 (unbox arg-1))) (vector 1 act-24)))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (let ((act-25 ((Core-Core-traverse 'erased 'erased (lambda (eta-0) (lambda (eta-1) (Core-Unify-retryGuess arg-0 arg-1 eta-0 eta-1))) (Data-SortedSet-toList 'erased (let ((sc1 e-5)) (let ((e-1 (vector-ref sc1 2))) e-1)))) ext-0))) (let ((sc1 act-25)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-6 (vector-ref sc1 1))) (let ((sc2 (Data-Bool-Extra-anyTrue e-6))) (cond ((equal? sc2 0) (Core-Unify-solveConstraints arg-0 arg-1 ext-0)) (else (vector 1 (vector 0 )))))))))))))))))
(define Core-Unify-retryInts (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((0) (lambda (eta-0) (vector 1 (vector 0 )))) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (lambda (eta-0) (let ((act-24 (Core-Unify-retry arg-0 arg-1 e-2 eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-4 (vector-ref sc1 1))) (vector 0 e-4))) (else (let ((e-5 (vector-ref sc1 1))) ((Core-Unify-case--retryInts-8711 arg-0 e-2 e-3 arg-1 e-5 (let ((sc2 e-5)) (let ((e-0 (vector-ref sc2 1))) e-0))) eta-0))))))))))))))
(define Core-Unify-retryGuess (lambda (arg-0 arg-1 arg-2 ext-0) (let ((act-24 (let ((act-24 (unbox arg-0))) (vector 1 act-24)))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (let ((act-25 (Core-Context-lookupDef arg-2 e-5 ext-0))) (let ((sc1 act-25)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-6 (vector-ref sc1 1))) (let ((sc2 e-6)) (case (vector-ref sc2 0) ((0) (vector 1 1)) (else (let ((e-2 (vector-ref sc2 1))) (let ((bind-0 (vector 1 e-2))) ((Core-Unify-case--caseC-32blockC-32inC-32retryGuess-8499 arg-2 arg-1 arg-0 e-5 e-2 bind-0 (let ((sc3 e-2)) (let ((e-1 (vector-ref sc3 2))) e-1))) ext-0))))))))))))))))))
(define Core-Unify-retry (lambda (arg-0 arg-1 arg-2 ext-0) (let ((act-24 (let ((act-24 (unbox arg-1))) (vector 1 act-24)))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) ((Core-Unify-case--retry-8273 arg-0 arg-2 arg-1 e-5 (Data-SortedMap-lookup 'erased 'erased arg-2 (let ((sc1 e-5)) (let ((e-2 (vector-ref sc1 3))) e-2)))) ext-0))))))))
(define Core-Unify-postpone (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 ext-0) (let ((act-24 (let ((act-24 (unbox arg-1))) (vector 1 act-24)))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (let ((act-25 (Core-Context-clearDefs e-5 ext-0))) (let ((sc1 act-25)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-6 (vector-ref sc1 1))) (let ((act-26 (Core-Normalise-quote_Quote__NF arg-0 e-6 arg-3 arg-4 ext-0))) (let ((sc2 act-26)) (case (vector-ref sc2 0) ((0) (let ((e-2 (vector-ref sc2 1))) (vector 0 e-2))) (else (let ((e-7 (vector-ref sc2 1))) (let ((act-27 (Core-Normalise-quote_Quote__NF arg-0 e-6 arg-3 arg-5 ext-0))) (let ((sc3 act-27)) (case (vector-ref sc3 0) ((0) (let ((e-2 (vector-ref sc3 1))) (vector 0 e-2))) (else (let ((e-8 (vector-ref sc3 1))) (let ((act-28 (Core-UnifyState-addConstraint arg-2 (vector 0 arg-0 arg-3 e-7 e-8) ext-0))) (let ((sc4 act-28)) (case (vector-ref sc4 0) ((0) (let ((e-2 (vector-ref sc4 1))) (vector 0 e-2))) (else (let ((e-9 (vector-ref sc4 1))) (vector 1 (Core-Unify-constrain e-9)))))))))))))))))))))))))))))
(define Core-Unify-patternEnv (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 ext-0) (let ((act-24 (let ((act-24 (unbox arg-0))) (vector 1 act-24)))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (let ((act-25 (Core-Context-clearDefs e-5 ext-0))) (let ((sc1 act-25)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-6 (vector-ref sc1 1))) (let ((act-26 ((Core-Core-traverse 'erased 'erased (lambda (eta-0) (Core-Normalise-evalClosure arg-2 e-6 eta-0)) arg-4) ext-0))) (let ((sc2 act-26)) (case (vector-ref sc2 0) ((0) (let ((e-2 (vector-ref sc2 1))) (vector 0 e-2))) (else (let ((e-7 (vector-ref sc2 1))) ((Core-Unify-case--patternEnv-5983 arg-2 arg-4 arg-3 arg-1 arg-0 e-5 e-6 e-7 (Core-Unify-getVars arg-2 (vector 0 ) e-7)) ext-0))))))))))))))))))
(define Core-Unify-instantiate (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8) (let ((ty (let ((sc0 arg-6)) (let ((e-0 (vector-ref sc0 1))) e-0)))) (lambda (eta-0) (let ((act-24 (let ((act-24 (unbox arg-0))) (vector 1 act-24)))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((act-25 ((Core-Unify-n--4508-6238-mkDef arg-2 arg-3 arg-8 arg-7 arg-6 arg-5 arg-4 arg-1 arg-0 (vector 0 ) arg-3 arg-7 (vector 0 ) arg-8 ty) eta-0))) (let ((sc1 act-25)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-6 (vector-ref sc1 1))) (let ((newdef (let ((sc2 arg-6)) (let ((e-0 (vector-ref sc2 1))) (vector 0 e-0 (vector 1 (vector 0 ) (vector 1 e-6))))))) (let ((act-26 (Core-Context-addDef arg-0 arg-5 newdef eta-0))) (let ((sc2 act-26)) (case (vector-ref sc2 0) ((0) (let ((e-2 (vector-ref sc2 1))) (vector 0 e-2))) (else (Core-UnifyState-removeHole arg-1 arg-5 eta-0)))))))))))))))))))
(define Core-Unify-UnifyResult-holesSolved (lambda (arg-0) (let ((sc0 arg-0)) (let ((e-1 (vector-ref sc0 2))) e-1))))
(define Core-Unify-getVars (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((0) (vector 1 (vector 0 ))) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 e-2)) (case (vector-ref sc1 0) ((1) (let ((e-5 (vector-ref sc1 1))) (let ((e-6 (vector-ref sc1 2))) (let ((sc2 e-5)) (case (vector-ref sc2 0) ((0) (let ((e-9 (vector-ref sc2 1))) (let ((sc3 e-6)) (case (vector-ref sc3 0) ((0) (Core-Unify-case--getVars-5706 arg-0 'erased e-9 'erased e-3 arg-1 (Core-Unify-n--3897-5692-inArgs arg-0 'erased e-9 'erased e-3 arg-1 e-9 arg-1)))(else (vector 0 ))))))(else (vector 0 )))))))(else (vector 0 )))))))))))
(define Core-Unify-convertError (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 ext-0) (let ((act-24 (let ((act-24 (unbox arg-2))) (vector 1 act-24)))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (let ((act-25 (Core-Context-clearDefs e-5 ext-0))) (let ((sc1 act-25)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-6 (vector-ref sc1 1))) (let ((act-26 (Core-Normalise-quote_Quote__NF arg-1 e-6 arg-3 arg-4 ext-0))) (let ((sc2 act-26)) (case (vector-ref sc2 0) ((0) (let ((e-2 (vector-ref sc2 1))) (vector 0 e-2))) (else (let ((e-7 (vector-ref sc2 1))) (let ((act-27 (Core-Normalise-quote_Quote__NF arg-1 e-6 arg-3 arg-5 ext-0))) (let ((sc3 act-27)) (case (vector-ref sc3 0) ((0) (let ((e-2 (vector-ref sc3 1))) (vector 0 e-2))) (else (let ((e-8 (vector-ref sc3 1))) (Core-Core-throw_Catchable__Core_Error 'erased (vector 0 arg-1 arg-3 e-7 e-8) ext-0)))))))))))))))))))))))
(define Core-Unify-UnifyResult-constraints (lambda (arg-0) (let ((sc0 arg-0)) (let ((e-0 (vector-ref sc0 1))) e-0))))
(define Core-Unify-constrain (lambda (arg-0) (vector 0 (vector 1 arg-0 (vector 0 )) 1)))
(define Data-Bool-Extra-anyTrue (lambda (arg-0) (let ((sc0 arg-0)) (case (vector-ref sc0 0) ((0) 1) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (Prelude-Basics-C-124C-124 e-2 (lambda () (Data-Bool-Extra-anyTrue e-3))))))))))
(define Core-Normalise-case--convGen-3180 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12) (let ((sc0 arg-12)) (cond ((equal? sc0 0) (Core-Normalise-allConv arg-0 arg-11 arg-10 arg-9 arg-3 arg-6)) (else (lambda (eta-0) (vector 1 1)))))))
(define Core-Normalise-case--convGen-3110 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12) (let ((sc0 arg-12)) (cond ((equal? sc0 0) (Core-Normalise-allConv arg-0 arg-11 arg-10 arg-9 arg-3 arg-6)) (else (lambda (eta-0) (vector 1 1)))))))
(define Core-Normalise-case--convGen-3058 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8) (let ((sc0 arg-8)) (cond ((equal? sc0 0) (Core-Normalise-allConv arg-0 arg-7 arg-6 arg-5 arg-1 arg-3)) (else (lambda (eta-0) (vector 1 1)))))))
(define Core-Normalise-case--convGen-2975 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12) (let ((sc0 arg-12)) (cond ((equal? sc0 0) (lambda (eta-0) (let ((act-24 (((arg-1 arg-8) arg-11) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc1 1))) (let ((act-25 (((arg-4 arg-8) arg-11) eta-0))) (let ((sc2 act-25)) (case (vector-ref sc2 0) ((0) (let ((e-2 (vector-ref sc2 1))) (vector 0 e-2))) (else (let ((e-6 (vector-ref sc2 1))) ((Core-Normalise-convGen_Convert__NF arg-0 arg-9 arg-8 arg-7 e-5 e-6) eta-0))))))))))))) (else (lambda (eta-0) (vector 1 1)))))))
(define Core-Normalise-case--chkConvHead-2799 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8) (let ((sc0 arg-8)) (cond ((equal? sc0 0) (Core-Normalise-allConv arg-0 arg-7 arg-6 arg-5 arg-1 arg-3)) (else (lambda (eta-0) (vector 1 1)))))))
(define Core-Normalise-case--quoteHead-2021 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8) (let ((sc0 arg-8)) (case (vector-ref sc0 0) ((1) (let ((e-1 (vector-ref sc0 1))) (lambda (eta-0) (vector 1 (vector 0 e-1))))) (else (lambda (eta-0) (vector 1 (vector 1 (vector 1 ) (vector 1 arg-3 arg-2)))))))))
(define Core-Normalise-case--quoteHeadC-44findName-1978 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12) (vector 1 (+ 1 arg-12))))
(define Core-Normalise-case--caseC-32blockC-32inC-32quoteHeadC-44findName-1920 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-13) (vector 1 (+ 1 arg-13))))
(define Core-Normalise-case--quoteHeadC-44findName-1847 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-13) (let ((sc0 arg-13)) (cond ((equal? sc0 0) (vector 1 0)) (else (Prelude-Types-C-62C-62C-61_Monad__Maybe 'erased 'erased (Core-Normalise-n--4609-1831-findName arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 'erased arg-11) (lambda (_-0) (vector 1 (+ 1 _-0)))))))))
(define Core-Normalise-case--quoteHead-1793 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 ext-0) (vector 1 (vector 0 arg-9))))
(define Core-Normalise-case--quoteHeadC-44addLater-1743 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-13 arg-14 arg-15) (+ 1 arg-15)))
(define Core-Normalise-case--caseC-32blockC-32inC-32evalDef-1383 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9) (let ((sc0 arg-9)) (case (vector-ref sc0 0) ((0) (let ((e-1 (vector-ref sc0 1))) (lambda (eta-0) (vector 1 e-1))))(else (lambda (eta-0) (vector 1 (arg-4))))))))
(define Core-Normalise-case--evalDef-1333 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (let ((sc0 arg-7)) (case (vector-ref sc0 0) ((0) (lambda (eta-0) (vector 1 (arg-4)))) (else (let ((e-2 (vector-ref sc0 1))) (let ((sc1 e-2)) (let ((e-5 (vector-ref sc1 1))) (let ((e-6 (vector-ref sc1 2))) (lambda (eta-0) (let ((act-24 ((Core-Normalise-evalTree arg-0 arg-2 arg-1 arg-6 e-5 e-6 arg-3) eta-0))) (let ((sc2 act-24)) (case (vector-ref sc2 0) ((0) (let ((e-3 (vector-ref sc2 1))) (vector 0 e-3))) (else (let ((e-7 (vector-ref sc2 1))) (let ((sc3 e-7)) (case (vector-ref sc3 0) ((0) (let ((e-1 (vector-ref sc3 1))) (vector 1 e-1)))(else (vector 1 (arg-4))))))))))))))))))))
(define Core-Normalise-case--argsFromStack-1299 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (let ((sc0 arg-6)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (Prelude-Types-pure_Applicative__Maybe 'erased (vector 0 (vector 1 arg-4 e-2) e-3)))))))
(define Core-Normalise-case--findAlt-1083 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9) (let ((sc0 arg-9)) (case (vector-ref sc0 0) ((0) (let ((e-1 (vector-ref sc0 1))) (lambda (eta-0) (vector 1 (vector 0 e-1))))) ((1) (Core-Normalise-findAlt arg-0 arg-1 arg-2 arg-8 arg-7 arg-6 arg-5 arg-4)) (else (lambda (eta-0) (vector 1 (vector 2 ))))))))
(define Core-Normalise-case--tryAlt-1000 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8) (let ((sc0 arg-8)) (cond ((equal? sc0 0) (Core-Normalise-evalTree arg-0 arg-2 arg-1 arg-7 arg-6 arg-5 arg-3)) (else (lambda (eta-0) (vector 1 (vector 2 ))))))))
(define Core-Normalise-case--tryAlt-914 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-13 arg-14) (let ((sc0 arg-14)) (cond ((equal? sc0 0) (Core-Normalise-evalConAlt arg-0 arg-7 arg-1 arg-13 arg-12 arg-11 arg-6 arg-2 arg-8)) (else (lambda (eta-0) (vector 1 (vector 1 ))))))))
(define Core-Normalise-case--evalConAlt-855 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9) (let ((sc0 arg-9)) (case (vector-ref sc0 0) ((1) (let ((e-1 (vector-ref sc0 1))) (Core-Normalise-evalTree arg-0 (Prelude-Types-List-C-43C-43 'erased arg-3 arg-1) arg-2 arg-8 e-1 arg-6 arg-4))) (else (lambda (eta-0) (vector 1 (vector 2 ))))))))
(define Core-Normalise-case--evalRef-756 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (let ((sc0 arg-7)) (case (vector-ref sc0 0) ((1) (let ((e-1 (vector-ref sc0 1))) (Core-Normalise-evalDef arg-0 arg-1 arg-6 (let ((sc1 e-1)) (let ((e-2 (vector-ref sc1 2))) e-2)) arg-3 arg-2))) (else (lambda (eta-0) (vector 1 (arg-2))))))))
(define Core-Normalise-n--4609-1831-findName (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9) (let ((sc0 arg-9)) (case (vector-ref sc0 0) ((0) (vector 0 )) (else (let ((e-1 (vector-ref sc0 1))) (let ((e-2 (vector-ref sc0 2))) (let ((e-3 (vector-ref sc0 3))) (let ((sc1 e-2)) (case (vector-ref sc1 0) ((1) (let ((e-4 (vector-ref sc1 1))) (let ((e-5 (vector-ref sc1 2))) (Core-Normalise-case--quoteHeadC-44findName-1847 arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 'erased e-5 e-4 e-3 e-1 (Prelude-EqOrd-C-61C-61_Eq__Int arg-2 e-5)))))(else (Prelude-Types-C-62C-62C-61_Monad__Maybe 'erased 'erased (Core-Normalise-n--4609-1831-findName arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 'erased e-3) (lambda (_-0) (vector 1 (+ 1 _-0)))))))))))))))
(define Core-Normalise-n--3353-984-concrete (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8) (let ((sc0 arg-8)) (case (vector-ref sc0 0) ((2) 0)(else 1)))))
(define Core-Normalise-n--4609-1714-addLater (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-13) (let ((sc0 arg-12)) (case (vector-ref sc0 0) ((0) arg-11) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (Core-Normalise-case--quoteHeadC-44addLater-1743 arg-0 'erased arg-2 'erased arg-4 arg-5 arg-6 arg-7 arg-8 'erased 'erased arg-11 e-2 e-3 'erased (Core-Normalise-n--4609-1714-addLater arg-0 'erased arg-2 'erased arg-4 arg-5 arg-6 arg-7 arg-8 'erased 'erased arg-11 e-3 'erased)))))))))
(define Core-Normalise-quote_Quote__Term (lambda (arg-0 arg-1 arg-2 arg-3 ext-0) (let ((act-24 (Core-Core-newRef 'erased 'erased (vector "Core.Normalise.QVar" ) 0 ext-0))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (Core-Normalise-quoteGen_Quote__Term arg-0 e-5 arg-1 arg-2 arg-3 ext-0))))))))
(define Core-Normalise-quote_Quote__NF (lambda (arg-0 arg-1 arg-2 arg-3 ext-0) (let ((act-24 (Core-Core-newRef 'erased 'erased (vector "Core.Normalise.QVar" ) 0 ext-0))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) ((Core-Normalise-quoteGen_Quote__NF arg-0 e-5 arg-1 arg-2 arg-3) ext-0))))))))
(define Core-Normalise-quote_Quote__Closure (lambda (arg-0 arg-1 arg-2 arg-3 ext-0) (let ((act-24 (Core-Core-newRef 'erased 'erased (vector "Core.Normalise.QVar" ) 0 ext-0))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (Core-Normalise-quoteGen_Quote__Closure arg-0 e-5 arg-1 arg-2 arg-3 ext-0))))))))
(define Core-Normalise-quoteGen_Quote__Term (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 ext-0) (vector 1 arg-4)))
(define Core-Normalise-quoteGen_Quote__NF (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (Core-Normalise-quoteGenNF (vector 0 ) arg-0 arg-1 arg-2 (vector 0 ) arg-3 arg-4)))
(define Core-Normalise-quoteGen_Quote__Closure (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 ext-0) (let ((act-24 ((Core-Normalise-evalClosure arg-0 arg-2 arg-4) ext-0))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) ((Core-Normalise-quoteGen_Quote__NF arg-0 arg-1 arg-2 arg-3 e-5) ext-0))))))))
(define Core-Normalise-convert_Convert__NF (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 ext-0) (let ((act-24 (Core-Core-newRef 'erased 'erased (vector "Core.Normalise.QVar" ) 0 ext-0))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) ((Core-Normalise-convGen_Convert__NF arg-0 e-5 arg-1 arg-2 arg-3 arg-4) ext-0))))))))
(define Core-Normalise-convert_Convert__Closure (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 ext-0) (let ((act-24 (Core-Core-newRef 'erased 'erased (vector "Core.Normalise.QVar" ) 0 ext-0))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (Core-Normalise-convGen_Convert__Closure arg-0 e-5 arg-1 arg-2 arg-3 arg-4 ext-0))))))))
(define Core-Normalise-convGen_Convert__NF (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-4)) (case (vector-ref sc0 0) ((0) (let ((e-5 (vector-ref sc0 2))) (let ((e-6 (vector-ref sc0 3))) (let ((sc1 arg-5)) (case (vector-ref sc1 0) ((0) (let ((e-23 (vector-ref sc1 2))) (let ((e-24 (vector-ref sc1 3))) (lambda (eta-0) (let ((act-24 (Core-Normalise-genName arg-1 "conv" eta-0))) (let ((sc2 act-24)) (case (vector-ref sc2 0) ((0) (let ((e-2 (vector-ref sc2 1))) (vector 0 e-2))) (else (let ((e-7 (vector-ref sc2 1))) (let ((c (vector 0 (vector 0 ) (vector 0 ) arg-3 (vector 1 (vector 1 ) e-7)))) (let ((act-25 ((Core-Normalise-convBinders arg-0 arg-1 arg-2 arg-3 e-5 e-23) eta-0))) (let ((sc3 act-25)) (case (vector-ref sc3 0) ((0) (let ((e-2 (vector-ref sc3 1))) (vector 0 e-2))) (else (let ((e-8 (vector-ref sc3 1))) (let ((sc4 e-8)) (cond ((equal? sc4 0) (let ((act-26 (((e-6 arg-2) c) eta-0))) (let ((sc5 act-26)) (case (vector-ref sc5 0) ((0) (let ((e-2 (vector-ref sc5 1))) (vector 0 e-2))) (else (let ((e-9 (vector-ref sc5 1))) (let ((act-27 (((e-24 arg-2) c) eta-0))) (let ((sc6 act-27)) (case (vector-ref sc6 0) ((0) (let ((e-2 (vector-ref sc6 1))) (vector 0 e-2))) (else (let ((e-10 (vector-ref sc6 1))) ((Core-Normalise-convGen_Convert__NF arg-0 arg-1 arg-2 arg-3 e-9 e-10) eta-0)))))))))))) (else (vector 1 1)))))))))))))))))))(else (let ((sc1 arg-5)) (case (vector-ref sc1 0) ((5) (lambda (eta-0) (vector 1 0)))(else (let ((sc1 arg-4)) (case (vector-ref sc1 0) ((4) (let ((sc2 arg-5)) (case (vector-ref sc2 0) ((4) (lambda (eta-0) (vector 1 0)))(else (lambda (eta-0) (vector 1 1))))))(else (lambda (eta-0) (vector 1 1)))))))))))))) ((1) (let ((e-8 (vector-ref sc0 1))) (let ((e-9 (vector-ref sc0 2))) (let ((sc1 arg-5)) (case (vector-ref sc1 0) ((1) (let ((e-26 (vector-ref sc1 1))) (let ((e-27 (vector-ref sc1 2))) (lambda (eta-0) (let ((act-24 ((Core-Normalise-chkConvHead arg-0 arg-1 arg-2 arg-3 e-8 e-26) eta-0))) (let ((sc2 act-24)) (case (vector-ref sc2 0) ((0) (let ((e-2 (vector-ref sc2 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc2 1))) (let ((sc3 e-5)) (cond ((equal? sc3 0) ((Core-Normalise-allConv arg-0 arg-1 arg-2 arg-3 e-9 e-27) eta-0)) (else (vector 1 1)))))))))))))(else (let ((sc1 arg-5)) (case (vector-ref sc1 0) ((5) (lambda (eta-0) (vector 1 0)))(else (let ((sc1 arg-4)) (case (vector-ref sc1 0) ((4) (let ((sc2 arg-5)) (case (vector-ref sc2 0) ((4) (lambda (eta-0) (vector 1 0)))(else (lambda (eta-0) (vector 1 1))))))(else (lambda (eta-0) (vector 1 1)))))))))))))) ((2) (let ((e-11 (vector-ref sc0 1))) (let ((e-12 (vector-ref sc0 2))) (let ((e-13 (vector-ref sc0 3))) (let ((e-14 (vector-ref sc0 4))) (let ((sc1 arg-5)) (case (vector-ref sc1 0) ((2) (let ((e-29 (vector-ref sc1 1))) (let ((e-30 (vector-ref sc1 2))) (let ((e-31 (vector-ref sc1 3))) (let ((e-32 (vector-ref sc1 4))) (Core-Normalise-case--convGen-3110 arg-0 e-31 e-13 e-14 e-12 e-11 e-32 e-30 e-29 arg-3 arg-2 arg-1 (Prelude-EqOrd-C-61C-61_Eq__Int e-12 e-30)))))))(else (let ((sc1 arg-5)) (case (vector-ref sc1 0) ((5) (lambda (eta-0) (vector 1 0)))(else (let ((sc1 arg-4)) (case (vector-ref sc1 0) ((4) (let ((sc2 arg-5)) (case (vector-ref sc2 0) ((4) (lambda (eta-0) (vector 1 0)))(else (lambda (eta-0) (vector 1 1))))))(else (lambda (eta-0) (vector 1 1)))))))))))))))) ((3) (let ((e-16 (vector-ref sc0 1))) (let ((e-17 (vector-ref sc0 2))) (let ((e-18 (vector-ref sc0 3))) (let ((e-19 (vector-ref sc0 4))) (let ((sc1 arg-5)) (case (vector-ref sc1 0) ((3) (let ((e-34 (vector-ref sc1 1))) (let ((e-35 (vector-ref sc1 2))) (let ((e-36 (vector-ref sc1 3))) (let ((e-37 (vector-ref sc1 4))) (Core-Normalise-case--convGen-3180 arg-0 e-36 e-18 e-19 e-17 e-16 e-37 e-35 e-34 arg-3 arg-2 arg-1 (Core-TT-C-61C-61_Eq__Name e-16 e-34)))))))(else (let ((sc1 arg-5)) (case (vector-ref sc1 0) ((5) (lambda (eta-0) (vector 1 0)))(else (let ((sc1 arg-4)) (case (vector-ref sc1 0) ((4) (let ((sc2 arg-5)) (case (vector-ref sc2 0) ((4) (lambda (eta-0) (vector 1 0)))(else (lambda (eta-0) (vector 1 1))))))(else (lambda (eta-0) (vector 1 1)))))))))))))))) ((5) (lambda (eta-0) (vector 1 0)))(else (let ((sc0 arg-5)) (case (vector-ref sc0 0) ((5) (lambda (eta-0) (vector 1 0)))(else (let ((sc0 arg-4)) (case (vector-ref sc0 0) ((4) (let ((sc1 arg-5)) (case (vector-ref sc1 0) ((4) (lambda (eta-0) (vector 1 0)))(else (lambda (eta-0) (vector 1 1))))))(else (lambda (eta-0) (vector 1 1)))))))))))))
(define Core-Normalise-convGen_Convert__Closure (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 ext-0) (let ((act-24 ((Core-Normalise-evalClosure arg-0 arg-2 arg-4) ext-0))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (let ((act-25 ((Core-Normalise-evalClosure arg-0 arg-2 arg-5) ext-0))) (let ((sc1 act-25)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-6 (vector-ref sc1 1))) ((Core-Normalise-convGen_Convert__NF arg-0 arg-1 arg-2 arg-3 e-5 e-6) ext-0)))))))))))))
(define Core-Normalise-__Impl_Quote_Term (lambda () (vector 0 (lambda (vars) (lambda (arg-1506) (lambda (arg-1507) (lambda (arg-1509) (lambda (eta-0) (Core-Normalise-quote_Quote__Term vars arg-1506 arg-1507 arg-1509 eta-0)))))) (lambda (vars) (lambda (arg-1511) (lambda (arg-1513) (lambda (arg-1514) (lambda (arg-1516) (lambda (eta-0) (Core-Normalise-quoteGen_Quote__Term vars arg-1511 arg-1513 arg-1514 arg-1516 eta-0))))))))))
(define Core-Normalise-__Impl_Quote_NF (lambda () (vector 0 (lambda (vars) (lambda (arg-1506) (lambda (arg-1507) (lambda (arg-1509) (lambda (eta-0) (Core-Normalise-quote_Quote__NF vars arg-1506 arg-1507 arg-1509 eta-0)))))) (lambda (vars) (lambda (arg-1511) (lambda (arg-1513) (lambda (arg-1514) (lambda (arg-1516) (Core-Normalise-quoteGen_Quote__NF vars arg-1511 arg-1513 arg-1514 arg-1516)))))))))
(define Core-Normalise-__Impl_Quote_Closure (lambda () (vector 0 (lambda (vars) (lambda (arg-1506) (lambda (arg-1507) (lambda (arg-1509) (lambda (eta-0) (Core-Normalise-quote_Quote__Closure vars arg-1506 arg-1507 arg-1509 eta-0)))))) (lambda (vars) (lambda (arg-1511) (lambda (arg-1513) (lambda (arg-1514) (lambda (arg-1516) (lambda (eta-0) (Core-Normalise-quoteGen_Quote__Closure vars arg-1511 arg-1513 arg-1514 arg-1516 eta-0))))))))))
(define Core-Normalise-__Impl_Convert_NF (lambda () (vector 0 (lambda (vars) (lambda (arg-2575) (lambda (arg-2576) (lambda (arg-2578) (lambda (arg-2579) (lambda (eta-0) (Core-Normalise-convert_Convert__NF vars arg-2575 arg-2576 arg-2578 arg-2579 eta-0))))))) (lambda (vars) (lambda (arg-2581) (lambda (arg-2583) (lambda (arg-2584) (lambda (arg-2586) (lambda (arg-2587) (Core-Normalise-convGen_Convert__NF vars arg-2581 arg-2583 arg-2584 arg-2586 arg-2587))))))))))
(define Core-Normalise-__Impl_Convert_Closure (lambda () (vector 0 (lambda (vars) (lambda (arg-2575) (lambda (arg-2576) (lambda (arg-2578) (lambda (arg-2579) (lambda (eta-0) (Core-Normalise-convert_Convert__Closure vars arg-2575 arg-2576 arg-2578 arg-2579 eta-0))))))) (lambda (vars) (lambda (arg-2581) (lambda (arg-2583) (lambda (arg-2584) (lambda (arg-2586) (lambda (arg-2587) (lambda (eta-0) (Core-Normalise-convGen_Convert__Closure vars arg-2581 arg-2583 arg-2584 arg-2586 arg-2587 eta-0)))))))))))
(define Core-Normalise-tryAlt (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (let ((sc0 arg-6)) (case (vector-ref sc0 0) ((2) (let ((e-3 (vector-ref sc0 1))) (let ((e-4 (vector-ref sc0 2))) (let ((e-5 (vector-ref sc0 3))) (let ((e-6 (vector-ref sc0 4))) (let ((sc1 arg-7)) (case (vector-ref sc1 0) ((0) (let ((e-8 (vector-ref sc1 1))) (let ((e-9 (vector-ref sc1 2))) (let ((e-10 (vector-ref sc1 3))) (let ((e-11 (vector-ref sc1 4))) (Core-Normalise-case--tryAlt-914 arg-0 arg-1 e-6 e-5 e-4 e-3 e-10 arg-2 e-11 e-9 e-8 arg-5 arg-4 arg-3 (Prelude-EqOrd-C-61C-61_Eq__Int e-9 e-4)))))))(else (let ((sc1 arg-7)) (case (vector-ref sc1 0) ((1) (let ((e-1 (vector-ref sc1 1))) (Core-Normalise-case--tryAlt-1000 arg-0 arg-1 arg-2 e-1 arg-6 arg-5 arg-4 arg-3 (Core-Normalise-n--3353-984-concrete arg-0 arg-1 arg-2 e-1 arg-6 arg-5 arg-4 arg-3 arg-6))))(else (lambda (eta-0) (vector 1 (vector 2 ))))))))))))))(else (let ((sc0 arg-7)) (case (vector-ref sc0 0) ((1) (let ((e-1 (vector-ref sc0 1))) (Core-Normalise-case--tryAlt-1000 arg-0 arg-1 arg-2 e-1 arg-6 arg-5 arg-4 arg-3 (Core-Normalise-n--3353-984-concrete arg-0 arg-1 arg-2 e-1 arg-6 arg-5 arg-4 arg-3 arg-6))))(else (lambda (eta-0) (vector 1 (vector 2 )))))))))))
(define Core-Normalise-toClosure (lambda (arg-0 arg-1 arg-2) (vector 0 (vector 0 ) (vector 0 ) arg-1 arg-2)))
(define Core-Normalise-quoteHead (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (let ((sc0 arg-6)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (lambda (eta-0) (Core-Normalise-case--quoteHead-1793 arg-1 'erased e-2 'erased arg-5 arg-0 arg-4 arg-3 arg-2 (Core-Normalise-n--4609-1714-addLater arg-1 'erased e-2 'erased arg-5 arg-0 arg-4 arg-3 arg-2 'erased 'erased e-2 arg-0 'erased) eta-0)))) ((1) (let ((e-5 (vector-ref sc0 1))) (let ((e-6 (vector-ref sc0 2))) (let ((sc1 e-5)) (case (vector-ref sc1 0) ((1) (let ((sc2 e-6)) (case (vector-ref sc2 0) ((1) (let ((e-10 (vector-ref sc2 1))) (let ((e-11 (vector-ref sc2 2))) (Core-Normalise-case--quoteHead-2021 arg-0 arg-1 e-11 e-10 arg-5 arg-4 arg-3 arg-2 (Core-Normalise-n--4609-1831-findName arg-0 arg-1 e-11 e-10 arg-5 arg-4 arg-3 arg-2 'erased arg-4)))))(else (lambda (eta-0) (vector 1 (vector 1 e-5 e-6)))))))(else (lambda (eta-0) (vector 1 (vector 1 e-5 e-6))))))))) (else (let ((e-8 (vector-ref sc0 1))) (let ((e-9 (vector-ref sc0 2))) (lambda (eta-0) (let ((act-24 ((Core-Normalise-quoteArgs arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 e-9) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc1 1))) (vector 1 (vector 2 e-8 e-5)))))))))))))))
(define Core-Normalise-quoteGenNF (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (let ((sc0 arg-6)) (case (vector-ref sc0 0) ((0) (let ((e-1 (vector-ref sc0 1))) (let ((e-2 (vector-ref sc0 2))) (let ((e-3 (vector-ref sc0 3))) (lambda (eta-0) (let ((act-24 (Core-Normalise-genName arg-2 "qv" eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-4 (vector-ref sc1 1))) (vector 0 e-4))) (else (let ((e-5 (vector-ref sc1 1))) (let ((act-25 (let ((act-25 (((e-3 arg-3) (Core-Normalise-toClosure 'erased arg-5 (vector 1 (vector 1 ) e-5))) eta-0))) (let ((sc2 act-25)) (case (vector-ref sc2 0) ((0) (let ((e-4 (vector-ref sc2 1))) (vector 0 e-4))) (else (let ((e-6 (vector-ref sc2 1))) ((Core-Normalise-quoteGenNF (vector 1 e-1 arg-0) arg-1 arg-2 arg-3 (vector 1 e-1 e-5 arg-4) arg-5 e-6) eta-0)))))))) (let ((sc2 act-25)) (case (vector-ref sc2 0) ((0) (let ((e-4 (vector-ref sc2 1))) (vector 0 e-4))) (else (let ((e-6 (vector-ref sc2 1))) (let ((act-26 ((Core-Normalise-quoteBinder arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 e-2) eta-0))) (let ((sc3 act-26)) (case (vector-ref sc3 0) ((0) (let ((e-4 (vector-ref sc3 1))) (vector 0 e-4))) (else (let ((e-7 (vector-ref sc3 1))) (vector 1 (vector 3 e-1 e-7 e-6)))))))))))))))))))))) ((1) (let ((e-5 (vector-ref sc0 1))) (let ((e-6 (vector-ref sc0 2))) (lambda (eta-0) (let ((act-24 ((Core-Normalise-quoteHead arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 e-5) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-7 (vector-ref sc1 1))) (let ((act-25 ((Core-Normalise-quoteArgs arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 e-6) eta-0))) (let ((sc2 act-25)) (case (vector-ref sc2 0) ((0) (let ((e-2 (vector-ref sc2 1))) (vector 0 e-2))) (else (let ((e-8 (vector-ref sc2 1))) (vector 1 (Core-TT-apply 'erased e-7 e-8)))))))))))))))) ((2) (let ((e-8 (vector-ref sc0 1))) (let ((e-9 (vector-ref sc0 2))) (let ((e-10 (vector-ref sc0 3))) (let ((e-11 (vector-ref sc0 4))) (lambda (eta-0) (let ((act-24 ((Core-Normalise-quoteArgs arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 e-11) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc1 1))) (vector 1 (Core-TT-apply 'erased (vector 1 (vector 2 e-9 e-10) e-8) e-5))))))))))))) ((3) (let ((e-13 (vector-ref sc0 1))) (let ((e-14 (vector-ref sc0 2))) (let ((e-15 (vector-ref sc0 3))) (let ((e-16 (vector-ref sc0 4))) (lambda (eta-0) (let ((act-24 ((Core-Normalise-quoteArgs arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 e-16) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc1 1))) (vector 1 (Core-TT-apply 'erased (vector 1 (vector 3 e-14 e-15) e-13) e-5))))))))))))) ((5) (lambda (eta-0) (vector 1 (vector 6 )))) (else (lambda (eta-0) (vector 1 (vector 5 ))))))))
(define Core-Normalise-quoteGen (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (let ((e-2 (vector-ref sc0 2))) (lambda (arg-3) (lambda (arg-4) (lambda (arg-5) (lambda (arg-6) (((((e-2 arg-1) arg-3) arg-4) arg-5) arg-6)))))))))
(define Core-Normalise-quoteBinder (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (let ((sc0 arg-6)) (case (vector-ref sc0 0) ((0) (let ((e-1 (vector-ref sc0 1))) (let ((e-2 (vector-ref sc0 2))) (let ((e-3 (vector-ref sc0 3))) (lambda (eta-0) (let ((act-24 ((Core-Normalise-quoteGenNF arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 e-3) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-4 (vector-ref sc1 1))) (vector 0 e-4))) (else (let ((e-5 (vector-ref sc1 1))) (vector 1 (vector 0 e-1 e-2 e-5)))))))))))) ((1) (let ((e-5 (vector-ref sc0 1))) (let ((e-6 (vector-ref sc0 2))) (let ((e-7 (vector-ref sc0 3))) (lambda (eta-0) (let ((act-24 ((Core-Normalise-quoteGenNF arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 e-7) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-8 (vector-ref sc1 1))) (vector 1 (vector 1 e-5 e-6 e-8)))))))))))) ((2) (let ((e-9 (vector-ref sc0 1))) (let ((e-10 (vector-ref sc0 2))) (lambda (eta-0) (let ((act-24 ((Core-Normalise-quoteGenNF arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 e-10) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc1 1))) (vector 1 (vector 2 e-9 e-5))))))))))) (else (let ((e-12 (vector-ref sc0 1))) (lambda (eta-0) (let ((act-24 ((Core-Normalise-quoteGenNF arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 e-12) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc1 1))) (vector 1 (vector 3 e-5))))))))))))))
(define Core-Normalise-quoteArgs (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (let ((sc0 arg-6)) (case (vector-ref sc0 0) ((0) (lambda (eta-0) (vector 1 (vector 0 )))) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (lambda (eta-0) (let ((act-24 ((Core-Normalise-evalClosure arg-1 arg-3 e-2) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-4 (vector-ref sc1 1))) (vector 0 e-4))) (else (let ((e-5 (vector-ref sc1 1))) (let ((act-25 ((Core-Normalise-quoteGenNF arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 e-5) eta-0))) (let ((sc2 act-25)) (case (vector-ref sc2 0) ((0) (let ((e-4 (vector-ref sc2 1))) (vector 0 e-4))) (else (let ((e-6 (vector-ref sc2 1))) (let ((act-26 ((Core-Normalise-quoteArgs arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 e-3) eta-0))) (let ((sc3 act-26)) (case (vector-ref sc3 0) ((0) (let ((e-4 (vector-ref sc3 1))) (vector 0 e-4))) (else (let ((e-7 (vector-ref sc3 1))) (vector 1 (vector 1 e-6 e-7)))))))))))))))))))))))))
(define Core-Normalise-quote (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (let ((e-1 (vector-ref sc0 1))) (lambda (arg-3) (lambda (arg-4) (lambda (arg-5) ((((e-1 arg-1) arg-3) arg-4) arg-5))))))))
(define Core-Normalise-normalise (lambda (arg-0 arg-1 arg-2 arg-3 ext-0) (let ((act-24 ((Core-Normalise-nf arg-0 arg-1 arg-2 arg-3) ext-0))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (Core-Normalise-quote_Quote__NF arg-0 arg-1 arg-2 e-5 ext-0))))))))
(define Core-Normalise-nf (lambda (arg-0 arg-1 arg-2 arg-3) (Core-Normalise-eval arg-1 arg-0 (vector 0 ) arg-2 (vector 0 ) arg-3 (vector 0 ))))
(define Core-Normalise-gnf (lambda (arg-0 arg-1 arg-2) (vector 0 (lambda (eta-0) (vector 1 arg-2)) (lambda (c) (lambda (eta-0) (let ((act-24 (let ((act-24 (unbox c))) (vector 1 act-24)))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) ((Core-Normalise-nf arg-0 e-5 arg-1 arg-2) eta-0)))))))))))
(define Core-Normalise-glueBack (lambda (arg-0 arg-1 arg-2 arg-3) (vector 0 (lambda (eta-0) (let ((act-24 (Core-Context-clearDefs arg-1 eta-0))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (Core-Normalise-quote_Quote__NF arg-0 e-5 arg-2 arg-3 eta-0))))))) (lambda (eta-0) (lambda (eta-1) (vector 1 arg-3))))))
(define Core-Normalise-getValArity (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 2))) (let ((e-3 (vector-ref sc0 3))) (let ((sc1 e-2)) (case (vector-ref sc1 0) ((1) (lambda (eta-0) (let ((act-24 (((e-3 arg-1) (Core-Normalise-toClosure 'erased arg-2 (vector 6 ))) eta-0))) (let ((sc2 act-24)) (case (vector-ref sc2 0) ((0) (let ((e-4 (vector-ref sc2 1))) (vector 0 e-4))) (else (let ((e-8 (vector-ref sc2 1))) (let ((act-25 ((Core-Normalise-getValArity arg-0 arg-1 arg-2 e-8) eta-0))) (let ((sc3 act-25)) (case (vector-ref sc3 0) ((0) (let ((e-4 (vector-ref sc3 1))) (vector 0 e-4))) (else (let ((e-9 (vector-ref sc3 1))) (vector 1 (+ 1 e-9))))))))))))))(else (lambda (eta-0) (vector 1 0))))))))(else (lambda (eta-0) (vector 1 0)))))))
(define Core-Normalise-getTerm (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (let ((e-1 (vector-ref sc0 1))) e-1))))
(define Core-Normalise-getNF (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (let ((e-2 (vector-ref sc0 2))) (e-2 arg-1)))))
(define Core-Normalise-getCaseBound (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((0) (let ((sc1 arg-4)) (case (vector-ref sc1 0) ((0) (vector 1 arg-5)) (else (vector 0 ))))) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 arg-4)) (case (vector-ref sc1 0) ((0) (vector 0 )) (else (let ((e-11 (vector-ref sc1 2))) (Prelude-Interfaces-C-60C-36C-62 'erased 'erased 'erased (lambda (eta-0) (lambda (eta-1) (lambda (eta-2) (lambda (eta-3) (Prelude-Types-map_Functor__Maybe 'erased 'erased eta-2 eta-3))))) (lambda (arg-6) (vector 1 e-2 arg-6)) (Core-Normalise-getCaseBound arg-0 'erased 'erased e-3 e-11 arg-5)))))))))))))
(define Core-Normalise-getArity (lambda (arg-0 arg-1 arg-2 arg-3 ext-0) (let ((act-24 ((Core-Normalise-nf arg-0 arg-1 arg-2 arg-3) ext-0))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) ((Core-Normalise-getValArity arg-0 arg-1 arg-2 e-5) ext-0))))))))
(define Core-Normalise-genName (lambda (arg-0 arg-1 ext-0) (let ((act-24 (let ((act-24 (unbox arg-0))) (vector 1 act-24)))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (let ((act-25 (let ((act-25 (set-box! arg-0 (b+ e-5 1 63)))) (vector 1 act-25)))) (let ((sc1 act-25)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (vector 1 (vector 1 arg-1 e-5)))))))))))))
(define Core-Normalise-gType (lambda (arg-0) (vector 0 (lambda (eta-0) (vector 1 (vector 5 ))) (lambda (eta-0) (lambda (eta-1) (vector 1 (vector 4 )))))))
(define Core-Normalise-findAlt (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (let ((sc0 arg-7)) (case (vector-ref sc0 0) ((0) (lambda (eta-0) (vector 1 (vector 2 )))) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (lambda (eta-0) (let ((act-24 ((Core-Normalise-tryAlt arg-0 arg-2 arg-1 arg-3 arg-4 arg-5 arg-6 e-2) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-4 (vector-ref sc1 1))) (vector 0 e-4))) (else (let ((e-5 (vector-ref sc1 1))) (let ((sc2 e-5)) (case (vector-ref sc2 0) ((0) (let ((e-1 (vector-ref sc2 1))) (vector 1 (vector 0 e-1)))) ((1) ((Core-Normalise-findAlt arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 e-3) eta-0)) (else (vector 1 (vector 2 ))))))))))))))))))
(define Core-Normalise-evalTree (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (let ((sc0 arg-6)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 3))) (let ((e-5 (vector-ref sc0 5))) (lambda (eta-0) (let ((act-24 ((Core-Normalise-evalLocal arg-0 'erased arg-2 arg-1 arg-3 e-2 'erased (vector 0 ) arg-4) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-3 (vector-ref sc1 1))) (vector 0 e-3))) (else (let ((e-6 (vector-ref sc1 1))) ((Core-Normalise-findAlt arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 e-6 e-5) eta-0)))))))))) ((1) (let ((e-7 (vector-ref sc0 1))) (lambda (eta-0) (let ((act-24 ((Core-Normalise-eval arg-0 arg-2 arg-1 arg-3 arg-4 (Core-TT-embed 'erased 'erased e-7) arg-5) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc1 1))) (vector 1 (vector 0 e-5))))))))))(else (lambda (eta-0) (vector 1 (vector 2 ))))))))
(define Core-Normalise-evalTop (lambda (arg-0 arg-1 arg-2 ext-0 ext-1 ext-2 ext-3) (Core-Normalise-eval arg-2 arg-0 arg-1 ext-0 ext-1 ext-2 ext-3)))
(define Core-Normalise-evalRef (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((2) (let ((e-0 (vector-ref sc0 1))) (let ((e-1 (vector-ref sc0 2))) (lambda (eta-0) (vector 1 (vector 2 arg-4 e-0 e-1 arg-5)))))) ((3) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (lambda (eta-0) (vector 1 (vector 3 arg-4 e-2 e-3 arg-5)))))) ((1) (lambda (eta-0) (vector 1 (arg-6))))(else (lambda (eta-0) (let ((act-24 (Core-Context-lookupDef arg-4 arg-0 eta-0))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (let ((sc1 e-5)) (case (vector-ref sc1 0) ((1) (let ((e-1 (vector-ref sc1 1))) ((Core-Normalise-evalDef arg-0 arg-1 arg-2 (let ((sc2 e-1)) (let ((e-2 (vector-ref sc2 2))) e-2)) arg-5 arg-6) eta-0))) (else (vector 1 (arg-6))))))))))))))))
(define Core-Normalise-evalMeta (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (Core-Normalise-evalRef arg-0 arg-1 arg-2 (vector 0 ) arg-3 (Prelude-Types-List-C-43C-43 'erased arg-4 arg-5) (lambda () (vector 1 (vector 2 arg-3 arg-4) arg-5)))))
(define Core-Normalise-evalLocal (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((0) (lambda (eta-0) (vector 1 (vector 1 (vector 0 arg-5) arg-7)))) (else (let ((e-3 (vector-ref sc0 2))) (let ((sc1 arg-5)) (cond ((equal? sc1 0) (let ((sc2 arg-8)) (let ((e-8 (vector-ref sc2 1))) (Core-Normalise-evalLocClosure arg-0 arg-2 arg-4 arg-7 e-8))))(else (let ((e-4 (- arg-5 1))) (let ((sc1 arg-8)) (let ((e-14 (vector-ref sc1 2))) (Core-Normalise-evalLocal arg-0 'erased arg-2 e-3 arg-4 e-4 'erased arg-7 e-14)))))))))))))
(define Core-Normalise-evalLocClosure (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-4)) (let ((e-1 (vector-ref sc0 1))) (let ((e-2 (vector-ref sc0 2))) (let ((e-3 (vector-ref sc0 3))) (let ((e-4 (vector-ref sc0 4))) (Core-Normalise-eval arg-0 arg-1 e-1 e-3 e-2 e-4 arg-3))))))))
(define Core-Normalise-evalDef (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((1) (let ((e-0 (vector-ref sc0 1))) (let ((e-1 (vector-ref sc0 2))) (Core-Normalise-case--evalDef-1333 arg-0 arg-1 e-0 e-1 arg-5 arg-4 arg-2 (Core-Normalise-argsFromStack arg-0 'erased e-0 arg-4)))))(else (lambda (eta-0) (vector 1 (arg-5))))))))
(define Core-Normalise-evalConAlt (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8) (Core-Normalise-case--evalConAlt-855 arg-0 arg-1 arg-2 arg-6 arg-8 arg-7 arg-5 arg-4 arg-3 (Core-Normalise-getCaseBound arg-0 'erased 'erased arg-7 arg-6 arg-4))))
(define Core-Normalise-evalClosure (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (let ((e-1 (vector-ref sc0 1))) (let ((e-2 (vector-ref sc0 2))) (let ((e-3 (vector-ref sc0 3))) (let ((e-4 (vector-ref sc0 4))) (Core-Normalise-eval arg-1 arg-0 e-1 e-3 e-2 e-4 (vector 0 )))))))))
(define Core-Normalise-eval (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (let ((sc0 arg-5)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (Core-Normalise-evalLocal arg-0 'erased arg-1 arg-2 arg-3 e-2 'erased arg-6 arg-4))) ((1) (let ((e-5 (vector-ref sc0 1))) (let ((e-6 (vector-ref sc0 2))) (Core-Normalise-evalRef arg-0 arg-1 arg-3 e-5 e-6 arg-6 (lambda () (vector 1 (vector 1 e-5 e-6) arg-6)))))) ((2) (let ((e-8 (vector-ref sc0 1))) (let ((e-9 (vector-ref sc0 2))) (Core-Normalise-evalMeta arg-0 arg-1 arg-3 e-8 (Prelude-Types-map_Functor__List 'erased 'erased (lambda (eta-0) (vector 0 arg-2 arg-4 arg-3 eta-0)) e-9) arg-6)))) ((3) (let ((e-11 (vector-ref sc0 1))) (let ((e-12 (vector-ref sc0 2))) (let ((e-13 (vector-ref sc0 3))) (let ((sc1 e-12)) (case (vector-ref sc1 0) ((0) (let ((sc2 arg-6)) (case (vector-ref sc2 0) ((1) (let ((e-24 (vector-ref sc2 1))) (let ((e-25 (vector-ref sc2 2))) (Core-Normalise-eval arg-0 arg-1 (vector 1 e-11 arg-2) arg-3 (vector 1 e-24 arg-4) e-13 e-25))))(else (lambda (eta-0) (let ((act-24 ((Core-Core-Binder-traverse 'erased 'erased (lambda (tm) (Core-Normalise-eval arg-0 arg-1 arg-2 arg-3 arg-4 tm (vector 0 ))) e-12) eta-0))) (let ((sc2 act-24)) (case (vector-ref sc2 0) ((0) (let ((e-2 (vector-ref sc2 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc2 1))) (vector 1 (vector 0 e-11 e-5 (lambda (defsC-39) (lambda (arg) (Core-Normalise-evalTop arg-1 (vector 1 e-11 arg-2) defsC-39 arg-3 (vector 1 arg arg-4) e-13 arg-6)))))))))))))))(else (lambda (eta-0) (let ((act-24 ((Core-Core-Binder-traverse 'erased 'erased (lambda (tm) (Core-Normalise-eval arg-0 arg-1 arg-2 arg-3 arg-4 tm (vector 0 ))) e-12) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc1 1))) (vector 1 (vector 0 e-11 e-5 (lambda (defsC-39) (lambda (arg) (Core-Normalise-evalTop arg-1 (vector 1 e-11 arg-2) defsC-39 arg-3 (vector 1 arg arg-4) e-13 arg-6)))))))))))))))))) ((4) (let ((e-15 (vector-ref sc0 1))) (let ((e-16 (vector-ref sc0 2))) (Core-Normalise-eval arg-0 arg-1 arg-2 arg-3 arg-4 e-15 (vector 1 (vector 0 arg-2 arg-4 arg-3 e-16) arg-6))))) ((5) (lambda (eta-0) (vector 1 (vector 4 )))) (else (lambda (eta-0) (vector 1 (vector 5 ))))))))
(define Core-Normalise-convert (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (let ((e-1 (vector-ref sc0 1))) (lambda (arg-3) (lambda (arg-4) (lambda (arg-5) (lambda (arg-6) (((((e-1 arg-1) arg-3) arg-4) arg-5) arg-6)))))))))
(define Core-Normalise-convGen (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (let ((e-2 (vector-ref sc0 2))) (lambda (arg-3) (lambda (arg-4) (lambda (arg-5) (lambda (arg-6) (lambda (arg-7) ((((((e-2 arg-1) arg-3) arg-4) arg-5) arg-6) arg-7))))))))))
(define Core-Normalise-convBinders (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-4)) (case (vector-ref sc0 0) ((1) (let ((e-3 (vector-ref sc0 3))) (let ((sc1 arg-5)) (case (vector-ref sc1 0) ((1) (let ((e-11 (vector-ref sc1 3))) (Core-Normalise-convGen_Convert__NF arg-0 arg-1 arg-2 arg-3 e-3 e-11)))(else (lambda (eta-0) (vector 1 1))))))) ((0) (let ((e-7 (vector-ref sc0 3))) (let ((sc1 arg-5)) (case (vector-ref sc1 0) ((0) (let ((e-15 (vector-ref sc1 3))) (Core-Normalise-convGen_Convert__NF arg-0 arg-1 arg-2 arg-3 e-7 e-15)))(else (lambda (eta-0) (vector 1 1)))))))(else (lambda (eta-0) (vector 1 1)))))))
(define Core-Normalise-chkConvHead (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-4)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (let ((sc1 arg-5)) (case (vector-ref sc1 0) ((0) (let ((e-12 (vector-ref sc1 1))) (lambda (eta-0) (vector 1 (Prelude-Types-C-61C-61_Eq__Nat e-2 e-12)))))(else (lambda (eta-0) (vector 1 1))))))) ((1) (let ((e-6 (vector-ref sc0 2))) (let ((sc1 arg-5)) (case (vector-ref sc1 0) ((1) (let ((e-16 (vector-ref sc1 2))) (lambda (eta-0) (vector 1 (Core-TT-C-61C-61_Eq__Name e-6 e-16)))))(else (lambda (eta-0) (vector 1 1))))))) ((2) (let ((e-8 (vector-ref sc0 1))) (let ((e-9 (vector-ref sc0 2))) (let ((sc1 arg-5)) (case (vector-ref sc1 0) ((2) (let ((e-18 (vector-ref sc1 1))) (let ((e-19 (vector-ref sc1 2))) (Core-Normalise-case--chkConvHead-2799 arg-0 e-9 e-8 e-19 e-18 arg-3 arg-2 arg-1 (Core-TT-C-61C-61_Eq__Name e-8 e-18)))))(else (lambda (eta-0) (vector 1 1))))))))(else (lambda (eta-0) (vector 1 1)))))))
(define Core-Normalise-argsFromStack (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((0) (vector 1 (vector 0 (vector 0 ) arg-3))) (else (let ((e-3 (vector-ref sc0 2))) (let ((sc1 arg-3)) (case (vector-ref sc1 0) ((0) (vector 0 )) (else (let ((e-6 (vector-ref sc1 1))) (let ((e-7 (vector-ref sc1 2))) (Prelude-Types-C-62C-62C-61_Monad__Maybe 'erased 'erased (Core-Normalise-argsFromStack arg-0 'erased e-3 e-7) (lambda (_-0) (let ((sc2 _-0)) (let ((e-5 (vector-ref sc2 1))) (let ((e-4 (vector-ref sc2 2))) (Prelude-Types-pure_Applicative__Maybe 'erased (vector 0 (vector 1 e-6 e-5) e-4))))))))))))))))))
(define Core-Normalise-allConv (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-4)) (case (vector-ref sc0 0) ((0) (let ((sc1 arg-5)) (case (vector-ref sc1 0) ((0) (lambda (eta-0) (vector 1 0)))(else (lambda (eta-0) (vector 1 1)))))) ((1) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 arg-5)) (case (vector-ref sc1 0) ((1) (let ((e-6 (vector-ref sc1 1))) (let ((e-7 (vector-ref sc1 2))) (lambda (eta-0) (let ((act-24 (Core-Normalise-convGen_Convert__Closure arg-0 arg-1 arg-2 arg-3 e-2 e-6 eta-0))) (let ((sc2 act-24)) (case (vector-ref sc2 0) ((0) (let ((e-4 (vector-ref sc2 1))) (vector 0 e-4))) (else (let ((e-5 (vector-ref sc2 1))) (let ((act-25 ((Core-Normalise-allConv arg-0 arg-1 arg-2 arg-3 e-3 e-7) eta-0))) (let ((sc3 act-25)) (case (vector-ref sc3 0) ((0) (let ((e-4 (vector-ref sc3 1))) (vector 0 e-4))) (else (let ((e-8 (vector-ref sc3 1))) (vector 1 (Prelude-Basics-C-38C-38 e-5 (lambda () e-8)))))))))))))))))(else (lambda (eta-0) (vector 1 1))))))))(else (lambda (eta-0) (vector 1 1)))))))
(define Core-Normalise-Stack (lambda (arg-0) (vector "Prelude.Types.List" (vector "Core.Value.Closure" arg-0))))
(define Parser-Source-case--parseFile-448 (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((1) (let ((e-2 (vector-ref sc0 1))) (lambda (eta-0) (Parser-Source-runParser 'erased 0 (Parser-Unlit-isLitFile arg-2) e-2 arg-1)))) (else (let ((e-5 (vector-ref sc0 1))) (lambda (eta-0) (vector 0 (vector 2 e-5)))))))))
(define Parser-Source-runParserTo (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (Prelude-Types-C-62C-62C-61_Monad__C-40EitherC-32C-36eC-41 'erased 'erased 'erased (Utils-Either-mapError 'erased 'erased 'erased (lambda (eta-0) (vector 3 eta-0)) (Parser-Unlit-unlit arg-2 arg-4)) (lambda (str) (Prelude-Types-C-62C-62C-61_Monad__C-40EitherC-32C-36eC-41 'erased 'erased 'erased (Utils-Either-mapError 'erased 'erased 'erased (lambda (eta-0) (vector 1 eta-0)) (Parser-Lexer-Source-lexTo arg-3 str)) (lambda (toks) (Prelude-Types-C-62C-62C-61_Monad__C-40EitherC-32C-36eC-41 'erased 'erased 'erased (Utils-Either-mapError 'erased 'erased 'erased (lambda (eta-0) (Parser-Support-toGenericParsingError 'erased eta-0)) (Text-Parser-Core-parse 'erased 'erased arg-1 arg-5 toks)) (lambda (parsed) (vector 1 (Builtin-fst 'erased 'erased parsed))))))))))
(define Parser-Source-runParser (lambda (arg-0 arg-1 arg-2 ext-0 ext-1) (Parser-Source-runParserTo 'erased arg-1 arg-2 (lambda (eta-0) 1) ext-0 ext-1)))
(define Parser-Source-parseFile (lambda (arg-0 arg-1 arg-2 ext-0) (let ((act-24 ((System-File-readFile 'erased (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-62) (lambda (eta-0) (Prelude-IO-map_Functor__IO 'erased 'erased func arg-62 eta-0)))))) (lambda (a) (lambda (arg-172) (lambda (eta-0) arg-172))) (lambda (b) (lambda (a) (lambda (arg-173) (lambda (arg-175) (lambda (eta-0) (let ((act-17 (arg-173 eta-0))) (let ((act-16 (arg-175 eta-0))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-334) (lambda (arg-335) (lambda (eta-0) (let ((act-24 (arg-334 eta-0))) ((arg-335 act-24) eta-0))))))) (lambda (a) (lambda (arg-337) (lambda (eta-0) (let ((act-51 (arg-337 eta-0))) (act-51 eta-0)))))) (lambda (a) (lambda (arg-6366) arg-6366))) arg-1) ext-0))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((1) (let ((e-2 (vector-ref sc0 1))) (Parser-Source-runParser 'erased 0 (Parser-Unlit-isLitFile arg-1) e-2 arg-2))) (else (let ((e-5 (vector-ref sc0 1))) (vector 0 (vector 2 e-5)))))))))
(define Utils-Either-mapError (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (Prelude-Types-either 'erased 'erased 'erased (lambda () (lambda (eta-0) (vector 0 (arg-3 eta-0)))) (lambda () (lambda (eta-0) (vector 1 eta-0))) arg-4)))
(define Parser-Unlit-case--caseC-32blockC-32inC-32isLitFile-2328 (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (case (vector-ref sc0 0) ((1) (let ((e-1 (vector-ref sc0 1))) (vector 1 e-1))) (else (Parser-Unlit-n--1840-2285-isStyle arg-0 (Parser-Unlit-styleCMark)))))))
(define Parser-Unlit-case--isLitFile-2313 (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (case (vector-ref sc0 0) ((1) (let ((e-1 (vector-ref sc0 1))) (vector 1 e-1))) (else (Parser-Unlit-case--caseC-32blockC-32inC-32isLitFile-2328 arg-0 (Parser-Unlit-n--1840-2285-isStyle arg-0 (Parser-Unlit-styleOrg))))))))
(define Parser-Unlit-case--isLitFileC-44isStyle-2296 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (cond ((equal? sc0 0) (vector 1 arg-1)) (else (vector 0 ))))))
(define Parser-Unlit-n--1840-2285-isStyle (lambda (arg-0 arg-1) (Parser-Unlit-case--isLitFileC-44isStyle-2296 arg-0 arg-1 ((Prelude-Interfaces-any 'erased 'erased (vector 0 (lambda (acc) (lambda (elem) (lambda (func) (lambda (init) (lambda (input) (Prelude-Types-foldr_Foldable__List 'erased 'erased func init input)))))) (lambda (elem) (lambda (acc) (lambda (func) (lambda (init) (lambda (input) (Prelude-Types-foldl_Foldable__List 'erased 'erased func init input))))))) (lambda (eta-0) (Parser-Unlit-n--1840-2284-hasSuffix arg-0 eta-0))) (let ((sc0 arg-1)) (let ((e-2 (vector-ref sc0 3))) e-2))))))
(define Parser-Unlit-n--1840-2284-hasSuffix (lambda (arg-0 arg-1) (Data-Strings-isSuffixOf arg-1 arg-0)))
(define Parser-Unlit-unlit (lambda (arg-0 arg-1) (let ((sc0 arg-0)) (case (vector-ref sc0 0) ((0) (vector 1 arg-1)) (else (let ((e-2 (vector-ref sc0 1))) (Text-Literate-unlit e-2 arg-1)))))))
(define Parser-Unlit-styleOrg (lambda () (vector 0 (vector 1 (vector 0 "#+BEGIN_SRC idris" "#+END_SRC") (vector 1 (vector 0 "#+begin_src idris" "#+end_src") (vector 1 (vector 0 "#+COMMENT idris" "#+END_COMMENT") (vector 1 (vector 0 "#+comment idris" "#+end_comment") (vector 0 ))))) (vector 1 "#+IDRIS:" (vector 0 )) (vector 1 ".org" (vector 0 )))))
(define Parser-Unlit-styleCMark (lambda () (vector 0 (vector 1 (vector 0 "```idris" "```") (vector 0 )) (vector 0 ) (vector 1 ".md" (vector 1 ".markdown" (vector 0 ))))))
(define Parser-Unlit-styleBird (lambda () (vector 0 (vector 0 ) (vector 1 ">" (vector 1 "<" (vector 0 ))) (vector 1 ".lidr" (vector 0 )))))
(define Parser-Unlit-isLitFile (lambda (arg-0) (Parser-Unlit-case--isLitFile-2313 arg-0 (Parser-Unlit-n--1840-2285-isStyle arg-0 (Parser-Unlit-styleBird)))))
(define Text-Literate-with--withC-32blockC-32inC-32reduce-2429 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11) (let ((sc0 arg-0)) (case (vector-ref sc0 0) ((0) (let ((sc1 arg-1)) (case (vector-ref sc1 0) ((0) (Text-Literate-reduce arg-8 arg-7))(else (let ((sc1 arg-1)) (let ((e-2 (vector-ref sc1 2))) (Text-Literate-reduce arg-8 (vector 1 "\xa;" (vector 1 (Data-Strings-unlines e-2) arg-7)))))))))(else (let ((sc0 arg-1)) (let ((e-2 (vector-ref sc0 2))) (Text-Literate-reduce arg-8 (vector 1 "\xa;" (vector 1 (Data-Strings-unlines e-2) arg-7))))))))))
(define Text-Literate-with--reduce-2406 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9) (let ((sc0 arg-1)) (case (vector-ref sc0 0) ((0) (Text-Literate-reduce arg-8 arg-9)) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (Text-Literate-with--withC-32blockC-32inC-32reduce-2429 e-3 (Data-List-Views-snocList 'erased e-3) arg-2 arg-3 arg-4 arg-5 e-2 arg-9 arg-8 arg-7 arg-6 arg-0))))))))
(define Text-Literate-case--extractCode-2506 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-4)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 e-3)) (let ((e-6 (vector-ref sc1 1))) (let ((e-7 (vector-ref sc1 2))) (let ((sc2 e-7)) (let ((e-10 (vector-ref sc2 1))) (let ((e-11 (vector-ref sc2 2))) (let ((sc3 e-11)) (cond ((equal? sc3 "") (vector 1 (Text-Literate-reduce e-2 (vector 0 ))))(else (vector 0 (vector 0 e-6 e-10 e-11))))))))))))))))
(define Text-Literate-case--reduce-2345 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8) (let ((sc0 arg-8)) (cond ((equal? sc0 0) (Text-Literate-reduce arg-6 (vector 1 "\xa;" arg-7))) (else (Text-Literate-reduce arg-6 (vector 1 (Prelude-Types-substr (Prelude-Types-C-43_Num__Nat (Prelude-Types-Strings-length arg-5) (+ 1 0)) (Prelude-Types-Strings-length arg-4) arg-4) arg-7)))))))
(define Text-Literate-case--rawTokens-2283 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (vector 0 (Text-Literate-block e-2 e-3) (lambda (eta-0) (vector 0 (Data-Strings-trim e-2) (Data-Strings-trim e-3) eta-0))))))))
(define Text-Literate-n--2405-2316-blank_content (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (Data-Strings-fastAppend (Data-List-replicate 'erased (Prelude-Types-List-length 'erased (Data-Strings-lines arg-4)) "\xa;"))))
(define Text-Literate-untilEOL (lambda () (Text-Lexer-manyUntil 'erased (Text-Lexer-newline) (Text-Lexer-any))))
(define Text-Literate-unlit (lambda (ext-0 ext-1) (Text-Literate-extractCode ext-0 ext-1)))
(define Text-Literate-reduce (lambda (arg-0 arg-1) (let ((sc0 arg-0)) (case (vector-ref sc0 0) ((0) (Data-Strings-fastAppend (Data-List-reverse 'erased arg-1))) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 e-2)) (let ((e-5 (vector-ref sc1 1))) (let ((e-6 (vector-ref sc1 2))) (let ((e-7 (vector-ref sc1 3))) (let ((e-8 (vector-ref sc1 4))) (let ((e-9 (vector-ref sc1 5))) (let ((sc2 e-9)) (case (vector-ref sc2 0) ((1) (let ((e-10 (vector-ref sc2 1))) (Text-Literate-reduce e-3 (vector 1 (Text-Literate-n--2405-2316-blank_content e-5 e-6 e-7 e-8 e-10 e-3 arg-1) arg-1)))) ((2) (let ((e-11 (vector-ref sc2 1))) (let ((e-12 (vector-ref sc2 2))) (Text-Literate-case--reduce-2345 e-5 e-6 e-7 e-8 e-12 e-11 e-3 arg-1 (Prelude-EqOrd-C-61C-61_Eq__String e-11 (Data-Strings-trim e-12)))))) (else (let ((e-13 (vector-ref sc2 1))) (let ((e-14 (vector-ref sc2 2))) (let ((e-15 (vector-ref sc2 3))) (Text-Literate-with--reduce-2406 e-15 (Data-Strings-lines e-15) e-5 e-6 e-7 e-8 e-14 e-13 e-3 arg-1))))))))))))))))))))
(define Text-Literate-rawTokens (lambda (arg-0 arg-1) (Prelude-Types-List-C-43C-43 'erased (Prelude-Types-map_Functor__List 'erased 'erased (lambda (lamc-0) (let ((sc0 lamc-0)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (vector 0 (Text-Literate-block e-2 e-3) (lambda (eta-0) (vector 0 (Data-Strings-trim e-2) (Data-Strings-trim e-3) eta-0))))))) arg-0) (Prelude-Types-List-C-43C-43 'erased (Prelude-Types-map_Functor__List 'erased 'erased (lambda (m) (vector 0 (Text-Literate-line m) (lambda (eta-0) (vector 2 (Data-Strings-trim m) eta-0)))) arg-1) (vector 1 (vector 0 (Text-Literate-notCodeLine) (lambda (eta-0) (vector 1 eta-0))) (vector 0 ))))))
(define Text-Literate-notCodeLine (lambda () (Text-Lexer-Core-C-60C-124C-62 'erased 'erased (Text-Lexer-newline) (vector 4 (Text-Lexer-any) (lambda () (Text-Literate-untilEOL))))))
(define Text-Literate-line (lambda (arg-0) (vector 4 (Text-Lexer-exact arg-0) (lambda () (Text-Lexer-Core-C-60C-124C-62 'erased 'erased (Text-Lexer-newline) (vector 4 (Text-Lexer-space) (lambda () (Text-Literate-untilEOL))))))))
(define Text-Literate-LiterateStyle-file_extensions (lambda (arg-0) (let ((sc0 arg-0)) (let ((e-2 (vector-ref sc0 3))) e-2))))
(define Text-Literate-extractCode (lambda (arg-0 arg-1) (let ((sc0 arg-0)) (let ((e-0 (vector-ref sc0 1))) (let ((e-1 (vector-ref sc0 2))) (let ((e-2 (vector-ref sc0 3))) (Text-Literate-case--extractCode-2506 e-2 e-1 e-0 arg-1 (Text-Lexer-Core-lex 'erased (Text-Literate-rawTokens e-0 e-1) arg-1))))))))
(define Text-Literate-block (lambda (arg-0 arg-1) (Text-Lexer-surround (vector 4 (Text-Lexer-exact arg-0) (lambda () (Text-Literate-untilEOL))) (vector 4 (Text-Lexer-exact arg-1) (lambda () (Text-Literate-untilEOL))) (Text-Lexer-any))))
(define Data-List-Views-snocListHelp (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((0) arg-2) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (Data-List-Views-snocListHelp 'erased (Prelude-Types-List-C-43C-43 'erased arg-1 (vector 1 e-2 (vector 0 ))) (vector 1 e-2 arg-1 arg-2) e-3))))))))
(define Data-List-Views-snocList (lambda (arg-0 arg-1) (Data-List-Views-snocListHelp 'erased (vector 0 ) (vector 0 ) arg-1)))
(define Text-Lexer-case--approx-451 (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (case (vector-ref sc0 0) ((0) (Text-Lexer-Core-fail 'erased)) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (Text-Lexer-Core-concatMap 'erased 'erased (lambda (eta-0) (Text-Lexer-like eta-0)) (vector 1 e-2 e-3)))))))))
(define Text-Lexer-case--exact-430 (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (case (vector-ref sc0 0) ((0) (Text-Lexer-Core-fail 'erased)) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (Text-Lexer-Core-concatMap 'erased 'erased (lambda (eta-0) (Text-Lexer-is eta-0)) (vector 1 e-2 e-3)))))))))
(define Text-Lexer-n--2639-575-lexStr (lambda (arg-0) (let ((sc0 arg-0)) (case (vector-ref sc0 0) ((0) (Text-Lexer-Core-fail 'erased)) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (Text-Lexer-Core-C-60C-124C-62 'erased 'erased (Text-Lexer-exact e-2) (Text-Lexer-n--2639-575-lexStr e-3)))))))))
(define Text-Lexer-n--2639-576-control (lambda () (Text-Lexer-Core-C-60C-124C-62 'erased 'erased (Text-Lexer-n--2639-575-lexStr (vector 1 "NUL" (vector 1 "SOH" (vector 1 "STX" (vector 1 "ETX" (vector 1 "EOT" (vector 1 "ENQ" (vector 1 "ACK" (vector 1 "BEL" (vector 1 "BS" (vector 1 "HT" (vector 1 "LF" (vector 1 "VT" (vector 1 "FF" (vector 1 "CR" (vector 1 "SO" (vector 1 "SI" (vector 1 "DLE" (vector 1 "DC1" (vector 1 "DC2" (vector 1 "DC3" (vector 1 "DC4" (vector 1 "NAK" (vector 1 "SYN" (vector 1 "ETB" (vector 1 "CAN" (vector 1 "EM" (vector 1 "SUB" (vector 1 "ESC" (vector 1 "FS" (vector 1 "GS" (vector 1 "RS" (vector 1 "US" (vector 1 "SP" (vector 1 "DEL" (vector 0 )))))))))))))))))))))))))))))))))))) (Text-Lexer-Core-C-60C-124C-62 'erased 'erased (vector 4 (Text-Lexer-is #\x) (lambda () (Text-Lexer-hexDigits))) (Text-Lexer-Core-C-60C-124C-62 'erased 'erased (vector 4 (Text-Lexer-is #\o) (lambda () (Text-Lexer-octDigits))) (Text-Lexer-digits))))))
(define Text-Lexer-symbol (lambda () (Text-Lexer-Core-pred (lambda (x) (Prelude-Basics-not (Prelude-Basics-C-124C-124 (Prelude-Types-isSpace x) (lambda () (Prelude-Types-isAlphaNum x))))))))
(define Text-Lexer-surround (lambda (arg-0 arg-1 arg-2) (vector 4 arg-0 (lambda () (Text-Lexer-manyThen 'erased arg-1 arg-2)))))
(define Text-Lexer-stringLit (lambda () (Text-Lexer-quote (Text-Lexer-is #\") (Text-Lexer-Core-C-60C-124C-62 'erased 'erased (Text-Lexer-escape #\\ (Text-Lexer-any)) (Text-Lexer-any)))))
(define Text-Lexer-space (lambda () (Text-Lexer-Core-pred (lambda (eta-0) (Prelude-Types-isSpace eta-0)))))
(define Text-Lexer-some (lambda (arg-0) (vector 4 arg-0 (lambda () (Text-Lexer-many arg-0)))))
(define Text-Lexer-quote (lambda (arg-0 arg-1) (Text-Lexer-surround arg-0 arg-0 arg-1)))
(define Text-Lexer-opt (lambda (arg-0) (Text-Lexer-Core-C-60C-124C-62 'erased 'erased arg-0 (Text-Lexer-Core-empty))))
(define Text-Lexer-oneOf (lambda (arg-0) (Text-Lexer-Core-pred (lambda (x) (Prelude-Types-elem 'erased (vector 0 (lambda (arg-2) (lambda (arg-3) (Prelude-EqOrd-C-61C-61_Eq__Char arg-2 arg-3))) (lambda (arg-4) (lambda (arg-5) (Prelude-EqOrd-C-47C-61_Eq__Char arg-4 arg-5)))) x (Prelude-Types-unpack arg-0))))))
(define Text-Lexer-octLit (lambda () (vector 4 (Text-Lexer-exact "0o") (lambda () (Text-Lexer-octDigits)))))
(define Text-Lexer-octDigits (lambda () (Text-Lexer-some (Text-Lexer-octDigit))))
(define Text-Lexer-octDigit (lambda () (Text-Lexer-Core-pred (lambda (eta-0) (Prelude-Types-isOctDigit eta-0)))))
(define Text-Lexer-newline (lambda () (let ((crlf "\xd;\xa;")) (Text-Lexer-Core-C-60C-124C-62 'erased 'erased (Text-Lexer-exact crlf) (Text-Lexer-oneOf crlf)))))
(define Text-Lexer-manyUntil (lambda (arg-0 arg-1 arg-2) (Text-Lexer-many (vector 5 (Text-Lexer-Core-reject 'erased arg-1) arg-2))))
(define Text-Lexer-manyThen (lambda (arg-0 arg-1 arg-2) (vector 5 (Text-Lexer-manyUntil 'erased arg-1 arg-2) arg-1)))
(define Text-Lexer-many (lambda (arg-0) (Text-Lexer-opt (Text-Lexer-some arg-0))))
(define Text-Lexer-like (lambda (arg-0) (Text-Lexer-Core-pred (lambda (y) (Prelude-EqOrd-C-61C-61_Eq__Char (Prelude-Types-toUpper arg-0) (Prelude-Types-toUpper y))))))
(define Text-Lexer-isNot (lambda (arg-0) (Text-Lexer-Core-pred (lambda (arg-1) (Prelude-EqOrd-C-47C-61_Eq__Char arg-1 arg-0)))))
(define Text-Lexer-is (lambda (arg-0) (Text-Lexer-Core-pred (lambda (arg-1) (Prelude-EqOrd-C-61C-61_Eq__Char arg-1 arg-0)))))
(define Text-Lexer-hexLit (lambda () (vector 4 (Text-Lexer-approx "0x") (lambda () (Text-Lexer-hexDigits)))))
(define Text-Lexer-hexDigits (lambda () (Text-Lexer-some (Text-Lexer-hexDigit))))
(define Text-Lexer-hexDigit (lambda () (Text-Lexer-Core-pred (lambda (eta-0) (Prelude-Types-isHexDigit eta-0)))))
(define Text-Lexer-exact (lambda (arg-0) (Text-Lexer-case--exact-430 arg-0 (Prelude-Types-unpack arg-0))))
(define Text-Lexer-escape (lambda (arg-0 arg-1) (vector 4 (Text-Lexer-is arg-0) (lambda () arg-1))))
(define Text-Lexer-digits (lambda () (Text-Lexer-some (Text-Lexer-digit))))
(define Text-Lexer-digit (lambda () (Text-Lexer-Core-pred (lambda (eta-0) (Prelude-Types-isDigit eta-0)))))
(define Text-Lexer-choiceMap (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-3)) (let ((e-1 (vector-ref sc0 1))) (((((e-1 'erased) 'erased) (lambda (x) (lambda (acc) (Text-Lexer-Core-C-60C-124C-62 'erased 'erased (arg-4 x) acc)))) (Text-Lexer-Core-fail 'erased)) arg-5)))))
(define Text-Lexer-choice (lambda (arg-0 arg-1 arg-2 ext-0) (Text-Lexer-choiceMap 'erased 'erased arg-1 arg-2 (lambda (eta-0) eta-0) ext-0)))
(define Text-Lexer-charLit (lambda () (let ((q #\')) (vector 4 (vector 4 (Text-Lexer-is q) (lambda () (Text-Lexer-Core-C-60C-124C-62 'erased 'erased (Text-Lexer-escape #\\ (Text-Lexer-Core-C-60C-124C-62 'erased 'erased (Text-Lexer-n--2639-576-control) (Text-Lexer-any))) (Text-Lexer-isNot q)))) (lambda () (Text-Lexer-is q))))))
(define Text-Lexer-approx (lambda (arg-0) (Text-Lexer-case--approx-451 arg-0 (Prelude-Types-unpack arg-0))))
(define Text-Lexer-any (lambda () (Text-Lexer-Core-pred (lambda (eta-0) 0))))
(define Text-Lexer-Core-case--lexTo-3069 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-4)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 e-3)) (let ((e-6 (vector-ref sc1 1))) (let ((e-7 (vector-ref sc1 2))) (let ((sc2 e-7)) (let ((e-10 (vector-ref sc2 1))) (let ((e-11 (vector-ref sc2 2))) (vector 0 e-2 (vector 0 e-6 (vector 0 e-10 (Prelude-Types-fastPack e-11)))))))))))))))
(define Text-Lexer-Core-case--lex-3017 (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 e-3)) (let ((e-6 (vector-ref sc1 1))) (let ((e-7 (vector-ref sc1 2))) (let ((sc2 e-7)) (let ((e-10 (vector-ref sc2 1))) (let ((e-11 (vector-ref sc2 2))) (vector 0 e-2 (vector 0 e-6 (vector 0 e-10 (Prelude-Types-fastPack e-11)))))))))))))))
(define Text-Lexer-Core-case--caseC-32blockC-32inC-32tokenise-2898 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11) (let ((sc0 arg-11)) (cond ((equal? sc0 0) (vector 0 (Data-List-reverse 'erased arg-3) (vector 0 arg-5 (vector 0 arg-4 (vector 0 ))))) (else (Text-Lexer-Core-tokenise 'erased arg-6 arg-8 arg-9 (vector 1 arg-7 arg-3) arg-2 arg-10))))))
(define Text-Lexer-Core-case--tokenise-2865 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (let ((sc0 arg-7)) (case (vector-ref sc0 0) ((1) (let ((e-1 (vector-ref sc0 1))) (let ((sc1 e-1)) (let ((e-5 (vector-ref sc1 1))) (let ((e-6 (vector-ref sc1 2))) (let ((sc2 e-6)) (let ((e-9 (vector-ref sc2 1))) (let ((e-10 (vector-ref sc2 2))) (let ((sc3 e-10)) (let ((e-13 (vector-ref sc3 1))) (let ((e-14 (vector-ref sc3 2))) (Text-Lexer-Core-case--caseC-32blockC-32inC-32tokenise-2898 'erased arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 e-5 e-9 e-13 e-14 (arg-6 e-5))))))))))))) (else (vector 0 (Data-List-reverse 'erased arg-3) (vector 0 arg-5 (vector 0 arg-4 arg-1))))))))
(define Text-Lexer-Core-case--tokeniseC-44getFirstToken-2779 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11) (let ((sc0 arg-11)) (case (vector-ref sc0 0) ((1) (let ((e-1 (vector-ref sc0 1))) (let ((sc1 e-1)) (let ((e-5 (vector-ref sc1 1))) (let ((e-6 (vector-ref sc1 2))) (let ((lineC-39 (b+ arg-5 (Prelude-Types-cast_Cast__Nat_Int (Text-Lexer-Core-n--2869-2672-countNLs 'erased arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 e-5)) 63))) (let ((colC-39 (Text-Lexer-Core-n--2869-2673-getCols 'erased arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 e-5 arg-4))) (vector 1 (vector 0 (vector 0 arg-5 arg-4 lineC-39 colC-39 (arg-8 (Prelude-Types-fastPack (Data-List-reverse 'erased e-5)))) (vector 0 lineC-39 (vector 0 colC-39 e-6))))))))))) (else (Text-Lexer-Core-n--2869-2674-getFirstToken 'erased arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-9 arg-10))))))
(define Text-Lexer-Core-case--tokeniseC-44getCols-2698 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9) (let ((sc0 arg-9)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 e-3)) (case (vector-ref sc1 0) ((0) (b+ arg-7 (Prelude-Types-cast_Cast__Nat_Int (Prelude-Types-List-length 'erased e-2)) 63))(else (Prelude-Types-cast_Cast__Nat_Int (Prelude-Types-List-length 'erased e-2))))))))))
(define Text-Lexer-Core-case--scan-2514 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-5)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (Text-Lexer-Core-scan 'erased arg-1 e-2 e-3))))))
(define Text-Lexer-Core-case--scan-2479 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (let ((sc0 arg-7)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (Text-Lexer-Core-scan 'erased arg-2 e-2 e-3))))))
(define Text-Lexer-Core-case--scan-2443 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (let ((sc0 arg-6)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (Text-Lexer-Core-scan 'erased (arg-1) e-2 e-3))))))
(define Text-Lexer-Core-case--scan-2398 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-4)) (cond ((equal? sc0 0) (vector 1 (vector 0 (vector 1 arg-1 arg-3) arg-2))) (else (vector 0 ))))))
(define Text-Lexer-Core-case--scan-2349 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (let ((sc0 arg-6)) (cond ((equal? sc0 0) (Prelude-Types-pure_Applicative__Maybe 'erased (vector 0 arg-4 arg-3))) (else (vector 0 ))))))
(define Text-Lexer-Core-n--2869-2674-getFirstToken (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8) (let ((sc0 arg-7)) (case (vector-ref sc0 0) ((0) (vector 0 )) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 e-2)) (let ((e-6 (vector-ref sc1 1))) (let ((e-7 (vector-ref sc1 2))) (Text-Lexer-Core-case--tokeniseC-44getFirstToken-2779 'erased arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 e-6 e-7 e-3 arg-8 (Text-Lexer-Core-scan 'erased e-6 (vector 0 ) arg-8))))))))))))
(define Text-Lexer-Core-n--2869-2673-getCols (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8) (Text-Lexer-Core-case--tokeniseC-44getCols-2698 'erased arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-8 arg-7 (Data-List-span 'erased (lambda (arg-9) (Prelude-EqOrd-C-47C-61_Eq__Char arg-9 (integer->char 10))) (Data-List-reverse 'erased arg-7)))))
(define Text-Lexer-Core-n--2869-2672-countNLs (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (Prelude-Types-List-length 'erased (Data-List-filter 'erased (lambda (arg-8) (Prelude-EqOrd-C-61C-61_Eq__Char arg-8 (integer->char 10))) arg-7))))
(define Text-Lexer-Core-tokenise (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (Text-Lexer-Core-case--tokenise-2865 'erased arg-6 arg-5 arg-4 arg-3 arg-2 arg-1 (Text-Lexer-Core-n--2869-2674-getFirstToken 'erased arg-6 arg-5 arg-4 arg-3 arg-2 arg-1 arg-5 arg-6))))
(define Text-Lexer-Core-TokenData-tok (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (let ((e-5 (vector-ref sc0 5))) e-5))))
(define Text-Lexer-Core-scan (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-1)) (case (vector-ref sc0 0) ((0) (Prelude-Types-pure_Applicative__Maybe 'erased (vector 0 arg-2 arg-3))) ((1) (vector 0 )) ((2) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (Text-Lexer-Core-case--scan-2349 'erased e-3 e-2 arg-3 arg-2 'erased (Prelude-EqOrd-C-61C-61_Eq__Bool (Data-Maybe-isJust 'erased (Text-Lexer-Core-scan 'erased e-3 arg-2 arg-3)) e-2))))) ((3) (let ((e-4 (vector-ref sc0 1))) (let ((sc1 arg-3)) (case (vector-ref sc1 0) ((0) (vector 0 )) (else (let ((e-21 (vector-ref sc1 1))) (let ((e-22 (vector-ref sc1 2))) (Text-Lexer-Core-case--scan-2398 e-4 e-21 e-22 arg-2 (e-4 e-21))))))))) ((4) (let ((e-6 (vector-ref sc0 1))) (let ((e-7 (vector-ref sc0 2))) (Prelude-Types-C-62C-62C-61_Monad__Maybe 'erased 'erased (Text-Lexer-Core-scan 'erased e-6 arg-2 arg-3) (lambda (_-0) (let ((sc1 _-0)) (let ((e-2 (vector-ref sc1 1))) (let ((e-3 (vector-ref sc1 2))) (Text-Lexer-Core-scan 'erased (e-7) e-2 e-3))))))))) ((5) (let ((e-10 (vector-ref sc0 1))) (let ((e-11 (vector-ref sc0 2))) (Prelude-Types-C-62C-62C-61_Monad__Maybe 'erased 'erased (Text-Lexer-Core-scan 'erased e-10 arg-2 arg-3) (lambda (_-0) (let ((sc1 _-0)) (let ((e-2 (vector-ref sc1 1))) (let ((e-3 (vector-ref sc1 2))) (Text-Lexer-Core-scan 'erased e-11 e-2 e-3))))))))) ((6) (let ((e-13 (vector-ref sc0 1))) (let ((e-14 (vector-ref sc0 2))) (Prelude-Types-C-62C-62C-61_Monad__Maybe 'erased 'erased (Text-Lexer-Core-scan 'erased e-13 arg-2 arg-3) (lambda (_-0) (let ((sc1 _-0)) (let ((e-2 (vector-ref sc1 1))) (let ((e-3 (vector-ref sc1 2))) (Text-Lexer-Core-scan 'erased e-14 e-2 e-3))))))))) (else (let ((e-17 (vector-ref sc0 1))) (let ((e-18 (vector-ref sc0 2))) (Prelude-Types-maybe 'erased 'erased (lambda () (Text-Lexer-Core-scan 'erased e-18 arg-2 arg-3)) (lambda () (lambda (eta-0) (vector 1 eta-0))) (Text-Lexer-Core-scan 'erased e-17 arg-2 arg-3)))))))))
(define Text-Lexer-Core-reject (lambda (arg-0 ext-0) (vector 2 1 ext-0)))
(define Text-Lexer-Core-pred (lambda (ext-0) (vector 3 ext-0)))
(define Text-Lexer-Core-TokenData-line (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (let ((e-1 (vector-ref sc0 1))) e-1))))
(define Text-Lexer-Core-lexTo (lambda (arg-0 arg-1 arg-2 arg-3) (Text-Lexer-Core-case--lexTo-3069 'erased arg-3 arg-2 arg-1 (Text-Lexer-Core-tokenise 'erased arg-1 0 0 (vector 0 ) arg-2 (Prelude-Types-unpack arg-3)))))
(define Text-Lexer-Core-lex (lambda (arg-0 arg-1 arg-2) (Text-Lexer-Core-case--lex-3017 'erased arg-2 arg-1 (Text-Lexer-Core-tokenise 'erased (lambda (eta-0) 1) 0 0 (vector 0 ) arg-1 (Prelude-Types-unpack arg-2)))))
(define Text-Lexer-Core-fail (lambda (arg-0) (vector 1 )))
(define Text-Lexer-Core-expect (lambda (arg-0 ext-0) (vector 2 0 ext-0)))
(define Text-Lexer-Core-empty (lambda () (vector 0 )))
(define Text-Lexer-Core-concatMap (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((0) (vector 0 )) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 e-3)) (case (vector-ref sc1 0) ((0) (arg-2 e-2)) (else (vector 6 (arg-2 e-2) (Text-Lexer-Core-concatMap 'erased 'erased arg-2 e-3))))))))))))
(define Text-Lexer-Core-TokenData-col (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (let ((e-2 (vector-ref sc0 2))) e-2))))
(define Text-Lexer-Core-Lexer (lambda () (vector "Text.Lexer.Core.Recognise" 0)))
(define Text-Lexer-Core-C-60C-124C-62 (lambda (arg-0 arg-1 ext-0 ext-1) (vector 7 ext-0 ext-1)))
(define Text-Lexer-Core-C-60C-43C-62 (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (cond ((equal? sc0 1) (lambda (eta-0) (lambda (eta-1) (vector 5 eta-0 eta-1)))) (else (lambda (eta-0) (lambda (eta-1) (vector 4 eta-0 eta-1))))))))
(define Parser-Rule-Source-case--terminatorC-44afterDedent-3153 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-4)) (cond ((equal? sc0 0) (vector 0 (vector 1 arg-2))) (else (vector 4 1 "Not the end of a block entry"))))))
(define Parser-Rule-Source-case--terminatorC-44afterDedent-3119 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-4)) (cond ((equal? sc0 0) (vector 0 (vector 1 arg-2))) (else (vector 4 1 "Not the end of a block entry"))))))
(define Parser-Rule-Source-case--terminatorC-44afterDedent-3089 (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (cond ((equal? sc0 0) (vector 0 (vector 0 ))) (else (vector 4 1 "Not the end of a block entry"))))))
(define Parser-Rule-Source-case--atEnd-3014 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (cond ((equal? sc0 0) (vector 0 (vector 0 ))) (else (vector 4 1 "Not the end of a block entry"))))))
(define Parser-Rule-Source-case--checkValid-2898 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (cond ((equal? sc0 0) (vector 0 (vector 0 ))) (else (vector 4 1 "Invalid indentation"))))))
(define Parser-Rule-Source-case--checkValid-2872 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (cond ((equal? sc0 0) (vector 0 (vector 0 ))) (else (vector 4 1 "Invalid indentation"))))))
(define Parser-Rule-Source-case--continueF-2775 (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (cond ((equal? sc0 0) arg-1) (else (vector 0 (vector 0 )))))))
(define Parser-Rule-Source-case--holeName-2630 (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (case (vector-ref sc0 0) ((4) (let ((e-0 (vector-ref sc0 1))) (vector 1 e-0)))(else (vector 0 ))))))
(define Parser-Rule-Source-case--identPart-2549 (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (case (vector-ref sc0 0) ((5) (let ((e-0 (vector-ref sc0 1))) (vector 1 e-0)))(else (vector 0 ))))))
(define Parser-Rule-Source-case--caseC-32blockC-32inC-32exactIdent-2427 (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (cond ((equal? sc0 0) (vector 1 (vector 0 ))) (else (vector 0 ))))))
(define Parser-Rule-Source-case--exactIdent-2415 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((5) (let ((e-0 (vector-ref sc0 1))) (Parser-Rule-Source-case--caseC-32blockC-32inC-32exactIdent-2427 arg-0 arg-1 e-0 (Prelude-EqOrd-C-61C-61_Eq__String e-0 arg-0))))(else (vector 0 ))))))
(define Parser-Rule-Source-case--caseC-32blockC-32inC-32keyword-2378 (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (cond ((equal? sc0 0) (vector 1 (vector 0 ))) (else (vector 0 ))))))
(define Parser-Rule-Source-case--keyword-2366 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((13) (let ((e-0 (vector-ref sc0 1))) (Parser-Rule-Source-case--caseC-32blockC-32inC-32keyword-2378 arg-0 arg-1 e-0 (Prelude-EqOrd-C-61C-61_Eq__String e-0 arg-0))))(else (vector 0 ))))))
(define Parser-Rule-Source-case--caseC-32blockC-32inC-32symbol-2326 (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (cond ((equal? sc0 0) (vector 1 (vector 0 ))) (else (vector 0 ))))))
(define Parser-Rule-Source-case--symbol-2314 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((8) (let ((e-0 (vector-ref sc0 1))) (Parser-Rule-Source-case--caseC-32blockC-32inC-32symbol-2326 arg-0 arg-1 e-0 (Prelude-EqOrd-C-61C-61_Eq__String e-0 arg-0))))(else (vector 0 ))))))
(define Parser-Rule-Source-n--2943-2179-isEOI (lambda (arg-0) (let ((sc0 arg-0)) (case (vector-ref sc0 0) ((12) 0)(else 1)))))
(define Parser-Rule-Source-n--3876-3073-afterSemi (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((0) (vector 0 )) ((1) (let ((e-0 (vector-ref sc0 1))) (vector 2 e-0))) ((2) (let ((e-1 (vector-ref sc0 1))) (vector 2 e-1))) (else (vector 3 ))))))
(define Parser-Rule-Source-n--3876-3074-afterDedent (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((0) (Parser-Rule-Source-case--terminatorC-44afterDedent-3089 arg-0 arg-1 arg-3 (Prelude-EqOrd-C-60C-61_Ord__Int arg-3 arg-0))) ((2) (let ((e-0 (vector-ref sc0 1))) (Parser-Rule-Source-case--terminatorC-44afterDedent-3119 arg-0 arg-1 e-0 arg-3 (Prelude-EqOrd-C-60C-61_Ord__Int arg-3 arg-0)))) ((1) (let ((e-1 (vector-ref sc0 1))) (Parser-Rule-Source-case--terminatorC-44afterDedent-3153 arg-0 arg-1 e-1 arg-3 (Prelude-EqOrd-C-60C-61_Ord__Int arg-3 arg-0)))) (else (vector 0 (vector 3 )))))))
(define Parser-Rule-Source-unqualifiedName (lambda () (Parser-Rule-Source-identPart)))
(define Parser-Rule-Source-terminator (lambda (arg-0 arg-1) (vector 9 1 (Prelude-Basics-C-38C-38 (Prelude-Basics-C-124C-124 0 (lambda () 1)) (lambda () (Prelude-Basics-C-38C-38 1 (lambda () 1)))) (vector 8 1 1 (Parser-Rule-Source-eoi) (lambda (_-3236) (vector 0 (vector 3 )))) (lambda () (vector 9 (Prelude-Basics-C-124C-124 0 (lambda () 1)) (Prelude-Basics-C-38C-38 1 (lambda () 1)) (vector 7 1 (Parser-Rule-Source-symbol ";") (lambda () (lambda (_-3222) (vector 0 (Parser-Rule-Source-n--3876-3073-afterSemi arg-1 arg-0 arg-0))))) (lambda () (vector 9 1 1 (vector 8 1 1 (Parser-Rule-Common-column (vector "Parser.Lexer.Source.Token" )) (lambda (col) (Parser-Rule-Source-n--3876-3074-afterDedent arg-1 arg-0 arg-0 col))) (lambda () (vector 0 (vector 3 ))))))))))
(define Parser-Rule-Source-symbol (lambda (arg-0) (vector 1 (Prelude-Types-Strings-C-43C-43 "Expected '" (Prelude-Types-Strings-C-43C-43 arg-0 "'")) (lambda (x) (Parser-Rule-Source-case--symbol-2314 arg-0 x (let ((sc0 x)) (let ((e-5 (vector-ref sc0 5))) e-5)))))))
(define Parser-Rule-Source-nonEmptyBlock (lambda (arg-0 arg-1) (vector 9 (Prelude-Basics-C-124C-124 0 (lambda () 0)) 0 (vector 7 0 (Parser-Rule-Source-symbol "{") (lambda () (lambda (_-3812) (vector 8 1 0 (vector 5 ) (lambda (_-3822) (vector 7 0 (Parser-Rule-Source-blockEntry 'erased (vector 0 ) arg-1) (lambda () (lambda (res) (vector 8 1 0 (Parser-Rule-Source-blockEntries 'erased (Builtin-snd 'erased 'erased res) arg-1) (lambda (ps) (vector 7 1 (Parser-Rule-Source-symbol "}") (lambda () (lambda (_-3853) (vector 0 (vector 1 (Builtin-fst 'erased 'erased res) ps))))))))))))))) (lambda () (vector 8 1 0 (Parser-Rule-Common-column (vector "Parser.Lexer.Source.Token" )) (lambda (col) (vector 7 1 (Parser-Rule-Source-blockEntry 'erased (vector 1 col) arg-1) (lambda () (lambda (res) (vector 8 1 1 (Parser-Rule-Source-blockEntries 'erased (Builtin-snd 'erased 'erased res) arg-1) (lambda (ps) (vector 0 (vector 1 (Builtin-fst 'erased 'erased res) ps)))))))))))))
(define Parser-Rule-Source-name (lambda () (vector 7 1 (Parser-Rule-Source-unqualifiedName) (lambda () (lambda (n) (vector 0 (vector 0 n)))))))
(define Parser-Rule-Source-mustContinue (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (case (vector-ref sc0 0) ((0) (Parser-Rule-Source-continueF (vector 4 0 "Unexpected end of expression") arg-0)) (else (let ((e-2 (vector-ref sc0 1))) (Parser-Rule-Source-continueF (vector 4 0 (Prelude-Types-Strings-C-43C-43 "Expected '" (Prelude-Types-Strings-C-43C-43 e-2 "'"))) arg-0)))))))
(define Parser-Rule-Source-keyword (lambda (arg-0) (vector 1 (Prelude-Types-Strings-C-43C-43 "Expected '" (Prelude-Types-Strings-C-43C-43 arg-0 "'")) (lambda (x) (Parser-Rule-Source-case--keyword-2366 arg-0 x (let ((sc0 x)) (let ((e-5 (vector-ref sc0 5))) e-5)))))))
(define Parser-Rule-Source-isTerminator (lambda (arg-0) (let ((sc0 arg-0)) (case (vector-ref sc0 0) ((8) (let ((e-0 (vector-ref sc0 1))) (let ((sc1 e-0)) (cond ((equal? sc1 ",") 0) ((equal? sc1 "]") 0) ((equal? sc1 ";") 0) ((equal? sc1 "}") 0) ((equal? sc1 ")") 0) ((equal? sc1 "|") 0)(else 1))))) ((13) (let ((e-1 (vector-ref sc0 1))) (let ((sc1 e-1)) (cond ((equal? sc1 "in") 0) ((equal? sc1 "then") 0) ((equal? sc1 "else") 0) ((equal? sc1 "where") 0)(else 1))))) ((12) 0)(else 1)))))
(define Parser-Rule-Source-init (lambda () 0))
(define Parser-Rule-Source-identPart (lambda () (vector 1 "Expected name" (lambda (x) (Parser-Rule-Source-case--identPart-2549 x (let ((sc0 x)) (let ((e-5 (vector-ref sc0 5))) e-5)))))))
(define Parser-Rule-Source-holeName (lambda () (vector 1 "Expected hole name" (lambda (x) (Parser-Rule-Source-case--holeName-2630 x (let ((sc0 x)) (let ((e-5 (vector-ref sc0 5))) e-5)))))))
(define Parser-Rule-Source-exactIdent (lambda (arg-0) (vector 1 (Prelude-Types-Strings-C-43C-43 "Expected " arg-0) (lambda (x) (Parser-Rule-Source-case--exactIdent-2415 arg-0 x (let ((sc0 x)) (let ((e-5 (vector-ref sc0 5))) e-5)))))))
(define Parser-Rule-Source-eoi (lambda () (vector 8 1 1 (vector 2 "Expected end of input" (lambda (eta-0) (Parser-Rule-Source-n--2943-2179-isEOI (let ((sc0 eta-0)) (let ((e-5 (vector-ref sc0 5))) e-5))))) (lambda (_-2200) (vector 0 (vector 0 ))))))
(define Parser-Rule-Source-continueF (lambda (arg-0 arg-1) (vector 9 1 (Prelude-Basics-C-38C-38 0 (lambda () 1)) (vector 8 1 1 (Parser-Rule-Source-eoi) (lambda (_-2767) arg-0)) (lambda () (vector 9 0 1 (vector 7 1 (Parser-Rule-Source-keyword "where") (lambda () (lambda (_-2758) arg-0))) (lambda () (vector 8 1 1 (Parser-Rule-Common-column (vector "Parser.Lexer.Source.Token" )) (lambda (col) (Parser-Rule-Source-case--continueF-2775 arg-1 arg-0 col (Prelude-EqOrd-C-60C-61_Ord__Int col arg-1))))))))))
(define Parser-Rule-Source-continue (lambda (ext-0) (Parser-Rule-Source-continueF (vector 4 1 "Unexpected end of expression") ext-0)))
(define Parser-Rule-Source-checkValid (lambda (arg-0 arg-1) (let ((sc0 arg-0)) (case (vector-ref sc0 0) ((0) (vector 0 (vector 0 ))) ((1) (let ((e-0 (vector-ref sc0 1))) (Parser-Rule-Source-case--checkValid-2872 e-0 arg-1 (Prelude-EqOrd-C-61C-61_Eq__Int arg-1 e-0)))) ((2) (let ((e-1 (vector-ref sc0 1))) (Parser-Rule-Source-case--checkValid-2898 e-1 arg-1 (Prelude-EqOrd-C-62C-61_Ord__Int arg-1 e-1)))) (else (vector 4 1 "End of block"))))))
(define Parser-Rule-Source-blockEntry (lambda (arg-0 arg-1 arg-2) (vector 8 1 0 (Parser-Rule-Common-column (vector "Parser.Lexer.Source.Token" )) (lambda (col) (vector 8 1 0 (Parser-Rule-Source-checkValid arg-1 col) (lambda (_-3265) (vector 7 1 (arg-2 col) (lambda () (lambda (p) (vector 8 1 1 (Parser-Rule-Source-terminator arg-1 col) (lambda (validC-39) (vector 0 (vector 0 p validC-39)))))))))))))
(define Parser-Rule-Source-blockEntries (lambda (arg-0 arg-1 arg-2) (vector 9 1 (Prelude-Basics-C-38C-38 0 (lambda () 1)) (vector 8 1 1 (Parser-Rule-Source-eoi) (lambda (_-3335) (vector 0 (vector 0 )))) (lambda () (vector 9 0 1 (vector 7 1 (Parser-Rule-Source-blockEntry 'erased arg-1 arg-2) (lambda () (lambda (res) (vector 8 1 1 (Parser-Rule-Source-blockEntries 'erased (Builtin-snd 'erased 'erased res) arg-2) (lambda (ts) (vector 0 (vector 1 (Builtin-fst 'erased 'erased res) ts))))))) (lambda () (vector 0 (vector 0 ))))))))
(define Parser-Rule-Source-block (lambda (arg-0 arg-1) (vector 9 (Prelude-Basics-C-124C-124 0 (lambda () 0)) 1 (vector 7 0 (Parser-Rule-Source-symbol "{") (lambda () (lambda (_-3392) (vector 8 1 0 (vector 5 ) (lambda (_-3402) (vector 8 1 0 (Parser-Rule-Source-blockEntries 'erased (vector 0 ) arg-1) (lambda (ps) (vector 7 1 (Parser-Rule-Source-symbol "}") (lambda () (lambda (_-3421) (vector 0 ps))))))))))) (lambda () (vector 8 1 1 (Parser-Rule-Common-column (vector "Parser.Lexer.Source.Token" )) (lambda (col) (Parser-Rule-Source-blockEntries 'erased (vector 1 col) arg-1)))))))
(define Parser-Rule-Source-atEnd (lambda (arg-0) (vector 9 1 (Prelude-Basics-C-38C-38 1 (lambda () 1)) (Parser-Rule-Source-eoi) (lambda () (vector 9 1 1 (vector 8 1 1 (vector 2 "Expected end of block" (lambda (eta-0) (Parser-Rule-Source-isTerminator (let ((sc0 eta-0)) (let ((e-5 (vector-ref sc0 5))) e-5))))) (lambda (_-3003) (vector 0 (vector 0 )))) (lambda () (vector 8 1 1 (Parser-Rule-Common-column (vector "Parser.Lexer.Source.Token" )) (lambda (col) (Parser-Rule-Source-case--atEnd-3014 arg-0 col (Prelude-EqOrd-C-60C-61_Ord__Int col arg-0))))))))))
(define Parser-Rule-Source-Rule (lambda (ext-0) (Parser-Rule-Common-Rule (vector "Parser.Lexer.Source.Token" ) ext-0)))
(define Parser-Rule-Source-IndentInfo (lambda () (vector "Int" )))
(define Parser-Support-show_Show__C-40ParseErrorC-32C-36tokC-41 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((0) (let ((e-1 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 3))) (Prelude-Types-Strings-C-43C-43 "Parse error: " (Prelude-Types-Strings-C-43C-43 e-1 (Prelude-Types-Strings-C-43C-43 " (next tokens: " (Prelude-Types-Strings-C-43C-43 (Prelude-Show-show_Show__C-40ListC-32C-36aC-41 'erased arg-1 (Data-List-take 'erased (+ 1 (+ 1 (+ 1 (+ 1 (+ 1 (+ 1 (+ 1 (+ 1 (+ 1 (+ 1 0)))))))))) e-3)) ")"))))))) ((1) (let ((e-5 (vector-ref sc0 1))) (let ((sc1 e-5)) (let ((e-12 (vector-ref sc1 1))) (let ((e-13 (vector-ref sc1 2))) (let ((sc2 e-13)) (let ((e-16 (vector-ref sc2 1))) (let ((e-17 (vector-ref sc2 2))) (Prelude-Types-Strings-C-43C-43 "Lex error at " (Prelude-Types-Strings-C-43C-43 (Prelude-Show-show_Show__C-40C-124C-40C-40BuiltinC-46PairC-32C-36aC-41C-32C-36bC-41C-44C-40C-40BuiltinC-46MkPairC-32C-36aC-41C-32C-36bC-41C-124C-41 'erased 'erased (vector 0 (vector 0 (lambda (x) (Prelude-Show-show_Show__Int x)) (lambda (d) (lambda (x) (Prelude-Show-showPrec_Show__Int d x)))) (vector 0 (lambda (x) (Prelude-Show-show_Show__Int x)) (lambda (d) (lambda (x) (Prelude-Show-showPrec_Show__Int d x))))) (vector 0 e-12 e-16)) (Prelude-Types-Strings-C-43C-43 " input: " e-17))))))))))) ((2) (let ((e-7 (vector-ref sc0 1))) (Prelude-Types-Strings-C-43C-43 "File error: " (System-File-show_Show__FileError e-7)))) (else (let ((e-9 (vector-ref sc0 1))) (let ((sc1 e-9)) (let ((e-18 (vector-ref sc1 1))) (let ((e-19 (vector-ref sc1 2))) (let ((e-20 (vector-ref sc1 3))) (Prelude-Types-Strings-C-43C-43 "Lit error(s) at " (Prelude-Types-Strings-C-43C-43 (Prelude-Show-show_Show__C-40C-124C-40C-40BuiltinC-46PairC-32C-36aC-41C-32C-36bC-41C-44C-40C-40BuiltinC-46MkPairC-32C-36aC-41C-32C-36bC-41C-124C-41 'erased 'erased (vector 0 (vector 0 (lambda (x) (Prelude-Show-show_Show__Int x)) (lambda (d) (lambda (x) (Prelude-Show-showPrec_Show__Int d x)))) (vector 0 (lambda (x) (Prelude-Show-show_Show__Int x)) (lambda (d) (lambda (x) (Prelude-Show-showPrec_Show__Int d x))))) (vector 0 e-19 e-18)) (Prelude-Types-Strings-C-43C-43 " input: " e-20)))))))))))))
(define Parser-Support-showPrec_Show__C-40ParseErrorC-32C-36tokC-41 (lambda (arg-0 arg-1 arg-2 arg-3) (Parser-Support-show_Show__C-40ParseErrorC-32C-36tokC-41 'erased arg-1 arg-3)))
(define Parser-Support-__Impl_Show_C-40ParseErrorC-32C-36tokC-41 (lambda (arg-0 arg-1) (vector 0 (lambda (x) (Parser-Support-show_Show__C-40ParseErrorC-32C-36tokC-41 'erased arg-1 x)) (lambda (d) (lambda (x) (Parser-Support-showPrec_Show__C-40ParseErrorC-32C-36tokC-41 'erased arg-1 d x))))))
(define Parser-Support-toGenericParsingError (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (let ((e-1 (vector-ref sc0 1))) (let ((e-2 (vector-ref sc0 2))) (let ((sc1 e-2)) (case (vector-ref sc1 0) ((0) (vector 0 e-1 (vector 0 ) (vector 0 ))) (else (let ((e-5 (vector-ref sc1 1))) (let ((e-6 (vector-ref sc1 2))) (vector 0 e-1 (vector 1 (vector 0 (let ((sc2 e-5)) (let ((e-9 (vector-ref sc2 1))) e-9)) (let ((sc2 e-5)) (let ((e-8 (vector-ref sc2 2))) e-8)))) (Prelude-Types-map_Functor__List 'erased 'erased (lambda (eta-0) (let ((sc2 eta-0)) (let ((e-7 (vector-ref sc2 5))) e-7))) (vector 1 e-5 e-6)))))))))))))
(define Text-Parser-some (lambda (arg-0 arg-1 arg-2) (vector 7 1 arg-2 (lambda () (lambda (bind-0) (vector 8 1 1 (Text-Parser-many 'erased 'erased arg-2) (lambda (bind-1) (vector 0 (vector 1 bind-0 bind-1)))))))))
(define Text-Parser-sepBy1 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (vector 8 (Prelude-Basics-C-124C-124 1 (lambda () arg-3)) 1 (vector 8 1 arg-3 (vector 0 (lambda (eta-0) (lambda (eta-1) (vector 1 eta-0 eta-1)))) (lambda (f) (Text-Parser-Core-map_Functor__C-40C-40GrammarC-32C-36tokC-41C-32C-36cC-41 'erased 'erased 'erased arg-3 f arg-5))) (lambda (f) (Text-Parser-Core-map_Functor__C-40C-40GrammarC-32C-36tokC-41C-32C-36cC-41 'erased 'erased 'erased 1 f (Text-Parser-many 'erased 'erased (vector 8 0 arg-3 (Text-Parser-Core-map_Functor__C-40C-40GrammarC-32C-36tokC-41C-32C-36cC-41 'erased 'erased 'erased 0 (lambda (eta-0) (lambda (eta-1) eta-1)) arg-4) (lambda (f-0) (Text-Parser-Core-map_Functor__C-40C-40GrammarC-32C-36tokC-41C-32C-36cC-41 'erased 'erased 'erased arg-3 f-0 arg-5)))))))))
(define Text-Parser-option (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-2)) (cond ((equal? sc0 1) (vector 9 1 1 arg-4 (lambda () (vector 0 arg-3)))) (else (vector 9 0 1 arg-4 (lambda () (vector 0 arg-3))))))))
(define Text-Parser-many (lambda (arg-0 arg-1 arg-2) (Text-Parser-option 'erased 'erased 0 (vector 0 ) (Text-Parser-some 'erased 'erased arg-2))))
(define Text-Parser-Core-case--parse-1801 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-5)) (case (vector-ref sc0 0) ((0) (let ((e-4 (vector-ref sc0 3))) (let ((e-5 (vector-ref sc0 4))) (vector 0 (vector 0 e-4 e-5))))) (else (let ((e-9 (vector-ref sc0 2))) (let ((e-10 (vector-ref sc0 3))) (vector 1 (vector 0 e-9 e-10)))))))))
(define Text-Parser-Core-case--caseC-32blockC-32inC-32doParse-1713 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12) (let ((sc0 arg-12)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((e-4 (vector-ref sc0 3))) (let ((e-5 (vector-ref sc0 4))) (vector 0 e-2 e-3 e-4 e-5)))))) (else (let ((e-8 (vector-ref sc0 1))) (let ((e-9 (vector-ref sc0 2))) (let ((e-10 (vector-ref sc0 3))) (vector 1 e-8 e-9 e-10)))))))))
(define Text-Parser-Core-case--doParse-1652 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9) (let ((sc0 arg-9)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((e-4 (vector-ref sc0 3))) (let ((e-5 (vector-ref sc0 4))) (vector 0 e-2 e-3 e-4 e-5)))))) (else (let ((e-8 (vector-ref sc0 1))) (let ((e-9 (vector-ref sc0 2))) (let ((e-10 (vector-ref sc0 3))) (Text-Parser-Core-case--caseC-32blockC-32inC-32doParse-1713 'erased 'erased 'erased arg-3 arg-4 arg-5 arg-6 arg-7 'erased e-9 e-10 e-8 (Text-Parser-Core-doParse 'erased 'erased 'erased e-8 ((arg-4) e-9) e-10))))))))))
(define Text-Parser-Core-case--caseC-32blockC-32inC-32doParse-1553 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-13) (let ((sc0 arg-13)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((e-4 (vector-ref sc0 3))) (let ((e-5 (vector-ref sc0 4))) (vector 0 e-2 e-3 e-4 e-5)))))) (else (let ((e-8 (vector-ref sc0 1))) (let ((e-9 (vector-ref sc0 2))) (let ((e-10 (vector-ref sc0 3))) (vector 1 e-8 e-9 e-10)))))))))
(define Text-Parser-Core-case--doParse-1488 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10) (let ((sc0 arg-10)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((e-4 (vector-ref sc0 3))) (let ((e-5 (vector-ref sc0 4))) (vector 0 e-2 e-3 e-4 e-5)))))) (else (let ((e-8 (vector-ref sc0 1))) (let ((e-9 (vector-ref sc0 2))) (let ((e-10 (vector-ref sc0 3))) (Text-Parser-Core-case--caseC-32blockC-32inC-32doParse-1553 'erased 'erased 'erased arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 'erased e-9 e-10 e-8 (Text-Parser-Core-doParse 'erased 'erased 'erased e-8 (arg-5 e-9) e-10))))))))))
(define Text-Parser-Core-case--caseC-32blockC-32inC-32doParse-1374 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-13) (let ((sc0 arg-13)) (cond ((equal? sc0 0) (vector 0 arg-7 arg-11 arg-10 arg-9)) (else (Text-Parser-Core-doParse 'erased 'erased 'erased 1 (arg-3) arg-6))))))
(define Text-Parser-Core-case--doParse-1350 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9) (let ((sc0 arg-9)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((e-4 (vector-ref sc0 3))) (let ((e-5 (vector-ref sc0 4))) (Text-Parser-Core-case--caseC-32blockC-32inC-32doParse-1374 'erased 'erased arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 'erased e-5 e-4 e-3 e-2 (Prelude-Basics-C-124C-124 e-2 (lambda () e-3)))))))) (else (let ((e-9 (vector-ref sc0 2))) (let ((e-10 (vector-ref sc0 3))) (vector 1 arg-7 e-9 e-10))))))))
(define Text-Parser-Core-case--doParse-1279 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8) (let ((sc0 arg-8)) (cond ((equal? sc0 0) (vector 1 arg-5 arg-3 (vector 1 arg-3 arg-4))) (else (vector 0 arg-5 1 arg-2 (vector 1 arg-3 arg-4)))))))
(define Text-Parser-Core-case--doParse-1160 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8) (let ((sc0 arg-8)) (case (vector-ref sc0 0) ((0) (vector 0 arg-6 1 arg-3 (vector 1 arg-4 arg-5))) (else (let ((e-2 (vector-ref sc0 1))) (vector 1 arg-6 e-2 arg-5)))))))
(define Text-Parser-Core-case--doParse-1092 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (let ((sc0 arg-6)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (let ((e-4 (vector-ref sc0 3))) (let ((e-5 (vector-ref sc0 4))) (vector 0 e-2 0 e-4 e-5)))))(else arg-6)))))
(define Text-Parser-Core-map_Functor__C-40C-40GrammarC-32C-36tokC-41C-32C-36cC-41 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-3)) (cond ((equal? sc0 1) (let ((sc1 arg-5)) (case (vector-ref sc1 0) ((0) (let ((e-34 (vector-ref sc1 1))) (vector 0 (arg-4 e-34))))(else (let ((sc1 arg-5)) (case (vector-ref sc1 0) ((4) (let ((e-26 (vector-ref sc1 1))) (let ((e-27 (vector-ref sc1 2))) (vector 4 e-26 e-27)))) ((6) (let ((e-31 (vector-ref sc1 1))) (vector 6 (Text-Parser-Core-map_Functor__C-40C-40GrammarC-32C-36tokC-41C-32C-36cC-41 'erased 'erased 'erased arg-3 arg-4 e-31))))(else (let ((sc1 arg-3)) (cond ((equal? sc1 0) (let ((sc2 arg-5)) (case (vector-ref sc2 0) ((1) (let ((e-21 (vector-ref sc2 1))) (let ((e-22 (vector-ref sc2 2))) (vector 1 e-21 (lambda (t) (Prelude-Types-map_Functor__Maybe 'erased 'erased arg-4 (e-22 t)))))))(else (let ((sc2 arg-5)) (case (vector-ref sc2 0) ((9) (let ((e-15 (vector-ref sc2 1))) (let ((e-16 (vector-ref sc2 2))) (let ((e-17 (vector-ref sc2 3))) (let ((e-18 (vector-ref sc2 4))) (vector 9 e-15 e-16 (Text-Parser-Core-map_Functor__C-40C-40GrammarC-32C-36tokC-41C-32C-36cC-41 'erased 'erased 'erased e-15 arg-4 e-17) (lambda () (Text-Parser-Core-map_Functor__C-40C-40GrammarC-32C-36tokC-41C-32C-36cC-41 'erased 'erased 'erased e-16 arg-4 (e-18)))))))))(else (let ((sc2 arg-3)) (cond ((equal? sc2 0) (let ((sc3 arg-5)) (case (vector-ref sc3 0) ((7) (let ((e-10 (vector-ref sc3 1))) (let ((e-11 (vector-ref sc3 2))) (let ((e-12 (vector-ref sc3 3))) (vector 7 e-10 e-11 (lambda () (lambda (val) (Text-Parser-Core-map_Functor__C-40C-40GrammarC-32C-36tokC-41C-32C-36cC-41 'erased 'erased 'erased e-10 arg-4 ((e-12) val)))))))))(else (let ((sc3 arg-5)) (case (vector-ref sc3 0) ((8) (let ((e-3 (vector-ref sc3 1))) (let ((e-4 (vector-ref sc3 2))) (let ((e-5 (vector-ref sc3 3))) (let ((e-6 (vector-ref sc3 4))) (vector 8 e-3 e-4 e-5 (lambda (val) (Text-Parser-Core-map_Functor__C-40C-40GrammarC-32C-36tokC-41C-32C-36cC-41 'erased 'erased 'erased e-4 arg-4 (e-6 val)))))))))(else (let ((sc3 arg-3)) (cond (else (vector 8 1 1 arg-5 (lambda (eta-0) (vector 0 (arg-4 eta-0))))))))))))))(else (let ((sc2 arg-5)) (case (vector-ref sc2 0) ((8) (let ((e-3 (vector-ref sc2 1))) (let ((e-4 (vector-ref sc2 2))) (let ((e-5 (vector-ref sc2 3))) (let ((e-6 (vector-ref sc2 4))) (vector 8 e-3 e-4 e-5 (lambda (val) (Text-Parser-Core-map_Functor__C-40C-40GrammarC-32C-36tokC-41C-32C-36cC-41 'erased 'erased 'erased e-4 arg-4 (e-6 val)))))))))(else (let ((sc2 arg-3)) (cond (else (vector 8 1 1 arg-5 (lambda (eta-0) (vector 0 (arg-4 eta-0))))))))))))))))))))(else (let ((sc1 arg-5)) (case (vector-ref sc1 0) ((9) (let ((e-15 (vector-ref sc1 1))) (let ((e-16 (vector-ref sc1 2))) (let ((e-17 (vector-ref sc1 3))) (let ((e-18 (vector-ref sc1 4))) (vector 9 e-15 e-16 (Text-Parser-Core-map_Functor__C-40C-40GrammarC-32C-36tokC-41C-32C-36cC-41 'erased 'erased 'erased e-15 arg-4 e-17) (lambda () (Text-Parser-Core-map_Functor__C-40C-40GrammarC-32C-36tokC-41C-32C-36cC-41 'erased 'erased 'erased e-16 arg-4 (e-18)))))))))(else (let ((sc1 arg-3)) (cond ((equal? sc1 0) (let ((sc2 arg-5)) (case (vector-ref sc2 0) ((7) (let ((e-10 (vector-ref sc2 1))) (let ((e-11 (vector-ref sc2 2))) (let ((e-12 (vector-ref sc2 3))) (vector 7 e-10 e-11 (lambda () (lambda (val) (Text-Parser-Core-map_Functor__C-40C-40GrammarC-32C-36tokC-41C-32C-36cC-41 'erased 'erased 'erased e-10 arg-4 ((e-12) val)))))))))(else (let ((sc2 arg-5)) (case (vector-ref sc2 0) ((8) (let ((e-3 (vector-ref sc2 1))) (let ((e-4 (vector-ref sc2 2))) (let ((e-5 (vector-ref sc2 3))) (let ((e-6 (vector-ref sc2 4))) (vector 8 e-3 e-4 e-5 (lambda (val) (Text-Parser-Core-map_Functor__C-40C-40GrammarC-32C-36tokC-41C-32C-36cC-41 'erased 'erased 'erased e-4 arg-4 (e-6 val)))))))))(else (let ((sc2 arg-3)) (cond (else (vector 8 1 1 arg-5 (lambda (eta-0) (vector 0 (arg-4 eta-0))))))))))))))(else (let ((sc1 arg-5)) (case (vector-ref sc1 0) ((8) (let ((e-3 (vector-ref sc1 1))) (let ((e-4 (vector-ref sc1 2))) (let ((e-5 (vector-ref sc1 3))) (let ((e-6 (vector-ref sc1 4))) (vector 8 e-3 e-4 e-5 (lambda (val) (Text-Parser-Core-map_Functor__C-40C-40GrammarC-32C-36tokC-41C-32C-36cC-41 'erased 'erased 'erased e-4 arg-4 (e-6 val)))))))))(else (let ((sc1 arg-3)) (cond (else (vector 8 1 1 arg-5 (lambda (eta-0) (vector 0 (arg-4 eta-0))))))))))))))))))))))))))(else (let ((sc0 arg-5)) (case (vector-ref sc0 0) ((4) (let ((e-26 (vector-ref sc0 1))) (let ((e-27 (vector-ref sc0 2))) (vector 4 e-26 e-27)))) ((6) (let ((e-31 (vector-ref sc0 1))) (vector 6 (Text-Parser-Core-map_Functor__C-40C-40GrammarC-32C-36tokC-41C-32C-36cC-41 'erased 'erased 'erased arg-3 arg-4 e-31))))(else (let ((sc0 arg-3)) (cond ((equal? sc0 0) (let ((sc1 arg-5)) (case (vector-ref sc1 0) ((1) (let ((e-21 (vector-ref sc1 1))) (let ((e-22 (vector-ref sc1 2))) (vector 1 e-21 (lambda (t) (Prelude-Types-map_Functor__Maybe 'erased 'erased arg-4 (e-22 t)))))))(else (let ((sc1 arg-5)) (case (vector-ref sc1 0) ((9) (let ((e-15 (vector-ref sc1 1))) (let ((e-16 (vector-ref sc1 2))) (let ((e-17 (vector-ref sc1 3))) (let ((e-18 (vector-ref sc1 4))) (vector 9 e-15 e-16 (Text-Parser-Core-map_Functor__C-40C-40GrammarC-32C-36tokC-41C-32C-36cC-41 'erased 'erased 'erased e-15 arg-4 e-17) (lambda () (Text-Parser-Core-map_Functor__C-40C-40GrammarC-32C-36tokC-41C-32C-36cC-41 'erased 'erased 'erased e-16 arg-4 (e-18)))))))))(else (let ((sc1 arg-3)) (cond ((equal? sc1 0) (let ((sc2 arg-5)) (case (vector-ref sc2 0) ((7) (let ((e-10 (vector-ref sc2 1))) (let ((e-11 (vector-ref sc2 2))) (let ((e-12 (vector-ref sc2 3))) (vector 7 e-10 e-11 (lambda () (lambda (val) (Text-Parser-Core-map_Functor__C-40C-40GrammarC-32C-36tokC-41C-32C-36cC-41 'erased 'erased 'erased e-10 arg-4 ((e-12) val)))))))))(else (let ((sc2 arg-5)) (case (vector-ref sc2 0) ((8) (let ((e-3 (vector-ref sc2 1))) (let ((e-4 (vector-ref sc2 2))) (let ((e-5 (vector-ref sc2 3))) (let ((e-6 (vector-ref sc2 4))) (vector 8 e-3 e-4 e-5 (lambda (val) (Text-Parser-Core-map_Functor__C-40C-40GrammarC-32C-36tokC-41C-32C-36cC-41 'erased 'erased 'erased e-4 arg-4 (e-6 val)))))))))(else (let ((sc2 arg-3)) (cond (else (vector 8 1 1 arg-5 (lambda (eta-0) (vector 0 (arg-4 eta-0))))))))))))))(else (let ((sc1 arg-5)) (case (vector-ref sc1 0) ((8) (let ((e-3 (vector-ref sc1 1))) (let ((e-4 (vector-ref sc1 2))) (let ((e-5 (vector-ref sc1 3))) (let ((e-6 (vector-ref sc1 4))) (vector 8 e-3 e-4 e-5 (lambda (val) (Text-Parser-Core-map_Functor__C-40C-40GrammarC-32C-36tokC-41C-32C-36cC-41 'erased 'erased 'erased e-4 arg-4 (e-6 val)))))))))(else (let ((sc1 arg-3)) (cond (else (vector 8 1 1 arg-5 (lambda (eta-0) (vector 0 (arg-4 eta-0))))))))))))))))))))(else (let ((sc0 arg-5)) (case (vector-ref sc0 0) ((9) (let ((e-15 (vector-ref sc0 1))) (let ((e-16 (vector-ref sc0 2))) (let ((e-17 (vector-ref sc0 3))) (let ((e-18 (vector-ref sc0 4))) (vector 9 e-15 e-16 (Text-Parser-Core-map_Functor__C-40C-40GrammarC-32C-36tokC-41C-32C-36cC-41 'erased 'erased 'erased e-15 arg-4 e-17) (lambda () (Text-Parser-Core-map_Functor__C-40C-40GrammarC-32C-36tokC-41C-32C-36cC-41 'erased 'erased 'erased e-16 arg-4 (e-18)))))))))(else (let ((sc0 arg-3)) (cond ((equal? sc0 0) (let ((sc1 arg-5)) (case (vector-ref sc1 0) ((7) (let ((e-10 (vector-ref sc1 1))) (let ((e-11 (vector-ref sc1 2))) (let ((e-12 (vector-ref sc1 3))) (vector 7 e-10 e-11 (lambda () (lambda (val) (Text-Parser-Core-map_Functor__C-40C-40GrammarC-32C-36tokC-41C-32C-36cC-41 'erased 'erased 'erased e-10 arg-4 ((e-12) val)))))))))(else (let ((sc1 arg-5)) (case (vector-ref sc1 0) ((8) (let ((e-3 (vector-ref sc1 1))) (let ((e-4 (vector-ref sc1 2))) (let ((e-5 (vector-ref sc1 3))) (let ((e-6 (vector-ref sc1 4))) (vector 8 e-3 e-4 e-5 (lambda (val) (Text-Parser-Core-map_Functor__C-40C-40GrammarC-32C-36tokC-41C-32C-36cC-41 'erased 'erased 'erased e-4 arg-4 (e-6 val)))))))))(else (let ((sc1 arg-3)) (cond (else (vector 8 1 1 arg-5 (lambda (eta-0) (vector 0 (arg-4 eta-0))))))))))))))(else (let ((sc0 arg-5)) (case (vector-ref sc0 0) ((8) (let ((e-3 (vector-ref sc0 1))) (let ((e-4 (vector-ref sc0 2))) (let ((e-5 (vector-ref sc0 3))) (let ((e-6 (vector-ref sc0 4))) (vector 8 e-3 e-4 e-5 (lambda (val) (Text-Parser-Core-map_Functor__C-40C-40GrammarC-32C-36tokC-41C-32C-36cC-41 'erased 'erased 'erased e-4 arg-4 (e-6 val)))))))))(else (let ((sc0 arg-3)) (cond (else (vector 8 1 1 arg-5 (lambda (eta-0) (vector 0 (arg-4 eta-0)))))))))))))))))))))))))))
(define Text-Parser-Core-__Impl_Functor_C-40C-40GrammarC-32C-36tokC-41C-32C-36cC-41 (lambda (arg-0 arg-1 ext-0 ext-1 ext-2 ext-3) (Text-Parser-Core-map_Functor__C-40C-40GrammarC-32C-36tokC-41C-32C-36cC-41 'erased 'erased 'erased arg-1 ext-2 ext-3)))
(define Text-Parser-Core-terminal (lambda (arg-0 arg-1 ext-0 ext-1) (vector 1 ext-0 ext-1)))
(define Text-Parser-Core-pure (lambda (arg-0 arg-1 ext-0) (vector 0 ext-0)))
(define Text-Parser-Core-peek (lambda (arg-0) (vector 2 "Unrecognised token" (lambda (eta-0) 0))))
(define Text-Parser-Core-parse (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (Text-Parser-Core-case--parse-1801 'erased 'erased arg-2 arg-4 arg-3 (Text-Parser-Core-doParse 'erased 'erased 'erased 1 arg-3 arg-4))))
(define Text-Parser-Core-nextIs (lambda (arg-0 ext-0 ext-1) (vector 2 ext-0 ext-1)))
(define Text-Parser-Core-fatalError (lambda (arg-0 arg-1 arg-2 ext-0) (vector 4 0 ext-0)))
(define Text-Parser-Core-fail (lambda (arg-0 arg-1 arg-2 ext-0) (vector 4 1 ext-0)))
(define Text-Parser-Core-doParse (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-4)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 1 arg-3 e-2 arg-5))) ((4) (let ((e-6 (vector-ref sc0 1))) (let ((e-7 (vector-ref sc0 2))) (let ((sc1 arg-5)) (case (vector-ref sc1 0) ((0) (vector 0 arg-3 e-6 e-7 (vector 0 ))) (else (let ((e-42 (vector-ref sc1 1))) (let ((e-43 (vector-ref sc1 2))) (vector 0 arg-3 e-6 e-7 (vector 1 e-42 e-43)))))))))) ((5) (vector 1 0 (vector 0 ) arg-5)) ((6) (let ((e-12 (vector-ref sc0 1))) (let ((pC-39 (Text-Parser-Core-doParse 'erased 'erased 'erased arg-3 e-12 arg-5))) (let ((sc1 pC-39)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (let ((e-4 (vector-ref sc1 3))) (let ((e-5 (vector-ref sc1 4))) (vector 0 e-2 0 e-4 e-5)))))(else pC-39)))))) ((1) (let ((e-15 (vector-ref sc0 1))) (let ((e-16 (vector-ref sc0 2))) (let ((sc1 arg-5)) (case (vector-ref sc1 0) ((0) (vector 0 arg-3 1 "End of input" (vector 0 ))) (else (let ((e-46 (vector-ref sc1 1))) (let ((e-47 (vector-ref sc1 2))) (Text-Parser-Core-case--doParse-1160 'erased 'erased e-16 e-15 e-46 e-47 arg-3 'erased (e-16 e-46)))))))))) ((3) (let ((sc1 arg-5)) (case (vector-ref sc1 0) ((0) (vector 1 arg-3 (vector 0 ) (vector 0 ))) (else (let ((e-50 (vector-ref sc1 1))) (let ((e-51 (vector-ref sc1 2))) (vector 0 arg-3 1 "Expected end of input" (vector 1 e-50 e-51)))))))) ((2) (let ((e-19 (vector-ref sc0 1))) (let ((e-20 (vector-ref sc0 2))) (let ((sc1 arg-5)) (case (vector-ref sc1 0) ((0) (vector 0 arg-3 1 "End of input" (vector 0 ))) (else (let ((e-54 (vector-ref sc1 1))) (let ((e-55 (vector-ref sc1 2))) (Text-Parser-Core-case--doParse-1279 'erased e-20 e-19 e-54 e-55 arg-3 'erased 'erased (e-20 e-54)))))))))) ((9) (let ((e-23 (vector-ref sc0 1))) (let ((e-24 (vector-ref sc0 2))) (let ((e-25 (vector-ref sc0 3))) (let ((e-26 (vector-ref sc0 4))) (Text-Parser-Core-case--doParse-1350 'erased 'erased e-24 e-26 e-23 e-25 arg-5 arg-3 'erased (Text-Parser-Core-doParse 'erased 'erased 'erased 1 e-25 arg-5))))))) ((8) (let ((e-30 (vector-ref sc0 1))) (let ((e-31 (vector-ref sc0 2))) (let ((e-32 (vector-ref sc0 3))) (let ((e-33 (vector-ref sc0 4))) (Text-Parser-Core-case--doParse-1488 'erased 'erased 'erased e-30 e-31 e-33 e-32 arg-5 arg-3 'erased (Text-Parser-Core-doParse 'erased 'erased 'erased arg-3 e-32 arg-5))))))) (else (let ((e-37 (vector-ref sc0 1))) (let ((e-38 (vector-ref sc0 2))) (let ((e-39 (vector-ref sc0 3))) (Text-Parser-Core-case--doParse-1652 'erased 'erased 'erased e-37 e-39 e-38 arg-5 arg-3 'erased (Text-Parser-Core-doParse 'erased 'erased 'erased arg-3 e-38 arg-5))))))))))
(define Text-Parser-Core-commit (lambda (arg-0) (vector 5 )))
(define Text-Parser-Core-C-62C-62C-61 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-3)) (cond ((equal? sc0 1) (lambda (eta-0) (lambda (eta-1) (vector 8 1 arg-4 eta-0 eta-1)))) (else (lambda (eta-0) (lambda (eta-1) (vector 7 arg-4 eta-0 eta-1))))))))
(define Text-Parser-Core-C-60C-124C-62 (lambda (arg-0 arg-1 arg-2 arg-3 ext-0 ext-1) (vector 9 arg-2 arg-3 ext-0 ext-1)))
(define Text-Parser-Core-C-60C-42C-62 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (vector 8 arg-3 arg-4 arg-5 (lambda (f) (Text-Parser-Core-map_Functor__C-40C-40GrammarC-32C-36tokC-41C-32C-36cC-41 'erased 'erased 'erased arg-4 f arg-6)))))
(define Text-Parser-Core-C-42C-62 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (vector 8 arg-3 arg-4 (Text-Parser-Core-map_Functor__C-40C-40GrammarC-32C-36tokC-41C-32C-36cC-41 'erased 'erased 'erased arg-3 (lambda (eta-0) (lambda (eta-1) eta-1)) arg-5) (lambda (f) (Text-Parser-Core-map_Functor__C-40C-40GrammarC-32C-36tokC-41C-32C-36cC-41 'erased 'erased 'erased arg-4 f arg-6)))))
(define Parser-Rule-Common-case--column-1940 (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (let ((e-3 (vector-ref sc0 2))) (vector 0 e-3)))))
(define Parser-Rule-Common-location (lambda (arg-0) (vector 8 1 1 (vector 2 "Unrecognised token" (lambda (eta-0) 0)) (lambda (tok) (vector 0 (vector 0 (let ((sc0 tok)) (let ((e-1 (vector-ref sc0 1))) e-1)) (let ((sc0 tok)) (let ((e-2 (vector-ref sc0 2))) e-2))))))))
(define Parser-Rule-Common-column (lambda (arg-0) (vector 8 1 1 (Parser-Rule-Common-location arg-0) (lambda (_-0) (let ((sc0 _-0)) (let ((e-3 (vector-ref sc0 2))) (vector 0 e-3)))))))
(define Parser-Rule-Common-Rule (lambda (arg-0 arg-1) (vector "Text.Parser.Core.Grammar" (vector "Text.Lexer.Core.TokenData" arg-0) 0 arg-1)))
(define Parser-Lexer-Source-case--lexTo-1261 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 e-3)) (case (vector-ref sc1 0) ((0) (let ((e-6 (vector-ref sc1 1))) (let ((e-7 (vector-ref sc1 2))) (let ((sc2 e-7)) (case (vector-ref sc2 0) ((0) (let ((e-10 (vector-ref sc2 1))) (let ((e-11 (vector-ref sc2 2))) (let ((sc3 e-11)) (cond ((equal? sc3 "") (vector 1 (Prelude-Types-List-C-43C-43 'erased (Data-List-filter 'erased (lambda (eta-0) (Parser-Lexer-Source-n--3362-1231-notComment arg-0 arg-1 eta-0)) e-2) (vector 1 (vector 0 e-6 e-10 e-6 e-10 (vector 12 )) (vector 0 )))))(else (vector 0 e-3)))))))(else (vector 0 e-3)))))))(else (vector 0 e-3)))))))))
(define Parser-Lexer-Source-case--lexToC-44notComment-1236 (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((9) 1)(else 0)))))
(define Parser-Lexer-Source-case--rawTokensC-44parseNamespace-1037 (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (case (vector-ref sc0 0) ((0) (let ((e-1 (vector-ref sc0 1))) (let ((e-2 (vector-ref sc0 2))) (let ((sc1 e-2)) (case (vector-ref sc1 0) ((0) (Parser-Lexer-Source-n--3151-1004-parseIdent e-1))(else (vector 6 arg-1)))))))(else (vector 6 arg-1))))))
(define Parser-Lexer-Source-case--rawTokensC-44parseIdent-1012 (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (cond ((equal? sc0 0) (vector 13 arg-0)) (else (vector 5 arg-0))))))
(define Parser-Lexer-Source-case--caseC-32blockC-32inC-32fromOctLit-985 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((0) 0) (else (let ((e-2 (vector-ref sc0 1))) (Prelude-Types-cast_Cast__Int_Integer e-2)))))))
(define Parser-Lexer-Source-case--fromOctLit-969 (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (cond ((equal? sc0 0) 0) (else (let ((num (Data-Strings-strTail (Data-Strings-strTail arg-0)))) (Parser-Lexer-Source-case--caseC-32blockC-32inC-32fromOctLit-985 arg-0 num (Utils-Octal-fromOct (Prelude-Types-reverse num)))))))))
(define Parser-Lexer-Source-case--caseC-32blockC-32inC-32fromHexLit-941 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((0) 0) (else (let ((e-2 (vector-ref sc0 1))) (Prelude-Types-cast_Cast__Int_Integer e-2)))))))
(define Parser-Lexer-Source-case--fromHexLit-925 (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (cond ((equal? sc0 0) 0) (else (let ((num (Data-Strings-strTail (Data-Strings-strTail arg-0)))) (Parser-Lexer-Source-case--caseC-32blockC-32inC-32fromHexLit-941 arg-0 num (Utils-Hex-fromHex (Prelude-Types-reverse num)))))))))
(define Parser-Lexer-Source-n--3151-1005-parseNamespace (lambda (arg-0) (Parser-Lexer-Source-case--rawTokensC-44parseNamespace-1037 arg-0 (Data-List1-reverse 'erased (Data-Strings-split (lambda (arg-1) (Prelude-EqOrd-C-61C-61_Eq__Char arg-1 #\.)) arg-0)))))
(define Parser-Lexer-Source-n--3151-1004-parseIdent (lambda (arg-0) (Parser-Lexer-Source-case--rawTokensC-44parseIdent-1012 arg-0 (Prelude-Types-elem 'erased (vector 0 (lambda (arg-2) (lambda (arg-3) (Prelude-EqOrd-C-61C-61_Eq__String arg-2 arg-3))) (lambda (arg-4) (lambda (arg-5) (Prelude-EqOrd-C-47C-61_Eq__String arg-4 arg-5)))) arg-0 (Parser-Lexer-Source-keywords)))))
(define Parser-Lexer-Source-n--3362-1231-notComment (lambda (arg-0 arg-1 arg-2) (Parser-Lexer-Source-case--lexToC-44notComment-1236 arg-0 arg-1 arg-2 (let ((sc0 arg-2)) (let ((e-5 (vector-ref sc0 5))) e-5)))))
(define Parser-Lexer-Source-show_Show__Token (lambda (arg-0) (let ((sc0 arg-0)) (case (vector-ref sc0 0) ((0) (let ((e-0 (vector-ref sc0 1))) (Prelude-Types-Strings-C-43C-43 "character " (Prelude-Show-show_Show__String e-0)))) ((1) (let ((e-1 (vector-ref sc0 1))) (Prelude-Types-Strings-C-43C-43 "double " (Prelude-Show-show_Show__Double e-1)))) ((2) (let ((e-2 (vector-ref sc0 1))) (Prelude-Types-Strings-C-43C-43 "literal " (Prelude-Show-show_Show__Integer e-2)))) ((3) (let ((e-3 (vector-ref sc0 1))) (Prelude-Types-Strings-C-43C-43 "string " (Prelude-Show-show_Show__String e-3)))) ((4) (let ((e-4 (vector-ref sc0 1))) (Prelude-Types-Strings-C-43C-43 "hole identifier " e-4))) ((5) (let ((e-5 (vector-ref sc0 1))) (Prelude-Types-Strings-C-43C-43 "identifier " e-5))) ((6) (let ((e-6 (vector-ref sc0 1))) (Prelude-Types-Strings-C-43C-43 "namespaced identifier " (Utils-String-dotSep (Data-List1-toList 'erased (Data-List1-reverse 'erased e-6)))))) ((7) (let ((e-7 (vector-ref sc0 1))) (Prelude-Types-Strings-C-43C-43 "dot+identifier " e-7))) ((8) (let ((e-8 (vector-ref sc0 1))) (Prelude-Types-Strings-C-43C-43 "symbol " e-8))) ((9) "comment") ((10) (let ((e-10 (vector-ref sc0 1))) (Prelude-Types-Strings-C-43C-43 "doc comment: \"" (Prelude-Types-Strings-C-43C-43 e-10 "\"")))) ((11) (let ((e-11 (vector-ref sc0 1))) (Prelude-Types-Strings-C-43C-43 "CGDirective " e-11))) ((12) "end of input") ((13) (let ((e-12 (vector-ref sc0 1))) e-12)) ((14) (let ((e-13 (vector-ref sc0 1))) (Prelude-Types-Strings-C-43C-43 "pragma " e-13))) (else (let ((e-14 (vector-ref sc0 1))) (Prelude-Types-Strings-C-43C-43 "Unrecognised " e-14)))))))
(define Parser-Lexer-Source-showPrec_Show__Token (lambda (arg-0 arg-1) (Parser-Lexer-Source-show_Show__Token arg-1)))
(define Parser-Lexer-Source-__Impl_Show_Token (lambda () (vector 0 (lambda (x) (Parser-Lexer-Source-show_Show__Token x)) (lambda (d) (lambda (x) (Parser-Lexer-Source-showPrec_Show__Token d x))))))
(define Parser-Lexer-Source-validSymbol (lambda () (Text-Lexer-some (Text-Lexer-Core-pred (lambda (eta-0) (Parser-Lexer-Source-isOpChar eta-0))))))
(define Parser-Lexer-Source-toEndComment (lambda (arg-0) (let ((sc0 arg-0)) (cond ((equal? sc0 0) (Text-Lexer-Core-empty))(else (let ((e-0 (- arg-0 1))) (Text-Lexer-Core-C-60C-124C-62 'erased 'erased (vector 4 (Text-Lexer-some (Text-Lexer-Core-pred (lambda (c) (Prelude-Basics-C-38C-38 (Prelude-EqOrd-C-47C-61_Eq__Char c #\-) (lambda () (Prelude-Basics-C-38C-38 (Prelude-EqOrd-C-47C-61_Eq__Char c #\{) (lambda () (Prelude-EqOrd-C-47C-61_Eq__Char c #\")))))))) (lambda () (Parser-Lexer-Source-toEndComment (+ 1 e-0)))) (Text-Lexer-Core-C-60C-124C-62 'erased 'erased (vector 4 (Text-Lexer-is #\{) (lambda () (Parser-Lexer-Source-singleBrace e-0))) (Text-Lexer-Core-C-60C-124C-62 'erased 'erased (vector 4 (Text-Lexer-is #\-) (lambda () (Parser-Lexer-Source-singleDash e-0))) (vector 4 (Text-Lexer-stringLit) (lambda () (Parser-Lexer-Source-toEndComment (+ 1 e-0)))))))))))))
(define Parser-Lexer-Source-symbols (lambda () (vector 1 ".(" (vector 1 "@{" (vector 1 "[|" (vector 1 "|]" (vector 1 "(" (vector 1 ")" (vector 1 "{" (vector 1 "}}" (vector 1 "}" (vector 1 "[" (vector 1 "]" (vector 1 "," (vector 1 ";" (vector 1 "_" (vector 1 "`(" (vector 1 "`{{" (vector 1 "`[" (vector 1 "`" (vector 0 )))))))))))))))))))))
(define Parser-Lexer-Source-singleDash (lambda (arg-0) (Text-Lexer-Core-C-60C-124C-62 'erased 'erased (vector 4 (Text-Lexer-is #\-) (lambda () (Parser-Lexer-Source-doubleDash arg-0))) (Text-Lexer-Core-C-60C-124C-62 'erased 'erased (vector 4 (Text-Lexer-is #\}) (lambda () (Parser-Lexer-Source-toEndComment arg-0))) (Parser-Lexer-Source-toEndComment (+ 1 arg-0))))))
(define Parser-Lexer-Source-singleBrace (lambda (arg-0) (Text-Lexer-Core-C-60C-124C-62 'erased 'erased (vector 4 (vector 4 (Text-Lexer-is #\-) (lambda () (Text-Lexer-many (Text-Lexer-is #\-)))) (lambda () (Parser-Lexer-Source-singleDash (+ 1 arg-0)))) (Parser-Lexer-Source-toEndComment (+ 1 arg-0)))))
(define Parser-Lexer-Source-rawTokens (lambda () (Prelude-Types-List-C-43C-43 'erased (vector 1 (vector 0 (Parser-Lexer-Common-comment) (lambda (eta-0) (vector 9 eta-0))) (vector 1 (vector 0 (Parser-Lexer-Source-blockComment) (lambda (eta-0) (vector 9 eta-0))) (vector 1 (vector 0 (Parser-Lexer-Source-docComment) (lambda (eta-0) (vector 10 (Data-String-Extra-drop (+ 1 (+ 1 (+ 1 0))) eta-0)))) (vector 1 (vector 0 (Parser-Lexer-Source-cgDirective) (lambda (eta-0) (Parser-Lexer-Source-mkDirective eta-0))) (vector 1 (vector 0 (Parser-Lexer-Source-holeIdent) (lambda (x) (vector 4 (Data-Strings-strTail x)))) (vector 0 )))))) (Prelude-Types-List-C-43C-43 'erased (Prelude-Types-map_Functor__List 'erased 'erased (lambda (x) (vector 0 (Text-Lexer-exact x) (lambda (eta-0) (vector 8 eta-0)))) (Parser-Lexer-Source-symbols)) (vector 1 (vector 0 (Parser-Lexer-Source-doubleLit) (lambda (x) (vector 1 (Prelude-Types-cast_Cast__String_Double x)))) (vector 1 (vector 0 (Text-Lexer-hexLit) (lambda (x) (vector 2 (Parser-Lexer-Source-fromHexLit x)))) (vector 1 (vector 0 (Text-Lexer-octLit) (lambda (x) (vector 2 (Parser-Lexer-Source-fromOctLit x)))) (vector 1 (vector 0 (Text-Lexer-digits) (lambda (x) (vector 2 (Prelude-Types-cast_Cast__String_Integer x)))) (vector 1 (vector 0 (Text-Lexer-stringLit) (lambda (x) (vector 3 (Utils-String-stripQuotes x)))) (vector 1 (vector 0 (Text-Lexer-charLit) (lambda (x) (vector 0 (Utils-String-stripQuotes x)))) (vector 1 (vector 0 (Parser-Lexer-Source-dotIdent) (lambda (x) (vector 7 (Data-Strings-strTail x)))) (vector 1 (vector 0 (Parser-Lexer-Common-namespacedIdent) (lambda (eta-0) (Parser-Lexer-Source-n--3151-1005-parseNamespace eta-0))) (vector 1 (vector 0 (Parser-Lexer-Common-identNormal) (lambda (eta-0) (Parser-Lexer-Source-n--3151-1004-parseIdent eta-0))) (vector 1 (vector 0 (Parser-Lexer-Source-pragma) (lambda (x) (vector 14 (Data-Strings-strTail x)))) (vector 1 (vector 0 (Text-Lexer-space) (lambda (eta-0) (vector 9 eta-0))) (vector 1 (vector 0 (Parser-Lexer-Source-validSymbol) (lambda (eta-0) (vector 8 eta-0))) (vector 1 (vector 0 (Text-Lexer-symbol) (lambda (eta-0) (vector 15 eta-0))) (vector 0 ))))))))))))))))))
(define Parser-Lexer-Source-pragma (lambda () (vector 4 (Text-Lexer-is #\%) (lambda () (Parser-Lexer-Common-identNormal)))))
(define Parser-Lexer-Source-mkDirective (lambda (arg-0) (vector 11 (Data-Strings-trim (Prelude-Types-substr (+ 1 (+ 1 (+ 1 0))) (Prelude-Types-Strings-length arg-0) arg-0)))))
(define Parser-Lexer-Source-lexTo (lambda (arg-0 arg-1) (Parser-Lexer-Source-case--lexTo-1261 arg-1 arg-0 (Text-Lexer-Core-lexTo 'erased arg-0 (Parser-Lexer-Source-rawTokens) arg-1))))
(define Parser-Lexer-Source-keywords (lambda () (vector 1 "data" (vector 1 "module" (vector 1 "where" (vector 1 "let" (vector 1 "pat" (vector 1 "in" (vector 1 "do" (vector 1 "record" (vector 1 "auto" (vector 1 "default" (vector 1 "implicit" (vector 1 "mutual" (vector 1 "namespace" (vector 1 "parameters" (vector 1 "with" (vector 1 "impossible" (vector 1 "case" (vector 1 "of" (vector 1 "if" (vector 1 "then" (vector 1 "else" (vector 1 "forall" (vector 1 "rewrite" (vector 1 "using" (vector 1 "interface" (vector 1 "implementation" (vector 1 "open" (vector 1 "import" (vector 1 "public" (vector 1 "export" (vector 1 "private" (vector 1 "infixl" (vector 1 "infixr" (vector 1 "infix" (vector 1 "prefix" (vector 1 "total" (vector 1 "partial" (vector 1 "covering" (vector 0 )))))))))))))))))))))))))))))))))))))))))
(define Parser-Lexer-Source-isOpChar (lambda (arg-0) (Prelude-Types-elem 'erased (vector 0 (lambda (arg-2) (lambda (arg-3) (Prelude-EqOrd-C-61C-61_Eq__Char arg-2 arg-3))) (lambda (arg-4) (lambda (arg-5) (Prelude-EqOrd-C-47C-61_Eq__Char arg-4 arg-5)))) arg-0 (Prelude-Types-unpack ":!#$%&*+./<=>?@\\^|-~"))))
(define Parser-Lexer-Source-holeIdent (lambda () (vector 4 (Text-Lexer-is #\?) (lambda () (Parser-Lexer-Common-identNormal)))))
(define Parser-Lexer-Source-fromOctLit (lambda (arg-0) (Parser-Lexer-Source-case--fromOctLit-969 arg-0 (Prelude-Types-C-60C-61_Ord__Nat (Prelude-Types-Strings-length arg-0) (Prelude-Types-fromInteger_Num__Nat 2)))))
(define Parser-Lexer-Source-fromHexLit (lambda (arg-0) (Parser-Lexer-Source-case--fromHexLit-925 arg-0 (Prelude-Types-C-60C-61_Ord__Nat (Prelude-Types-Strings-length arg-0) (Prelude-Types-fromInteger_Num__Nat 2)))))
(define Parser-Lexer-Source-doubleLit (lambda () (let ((sc0 (Prelude-Basics-C-124C-124 0 (lambda () 0)))) (cond ((equal? sc0 1) (vector 5 (vector 4 (vector 4 (Text-Lexer-digits) (lambda () (Text-Lexer-is #\.))) (lambda () (Text-Lexer-digits))) (lambda () (Text-Lexer-opt (vector 4 (vector 4 (Text-Lexer-is #\e) (lambda () (Text-Lexer-opt (Text-Lexer-Core-C-60C-124C-62 'erased 'erased (Text-Lexer-is #\-) (Text-Lexer-is #\+))))) (lambda () (Text-Lexer-digits))))))) (else (vector 4 (vector 4 (vector 4 (Text-Lexer-digits) (lambda () (Text-Lexer-is #\.))) (lambda () (Text-Lexer-digits))) (lambda () (Text-Lexer-opt (vector 4 (vector 4 (Text-Lexer-is #\e) (lambda () (Text-Lexer-opt (Text-Lexer-Core-C-60C-124C-62 'erased 'erased (Text-Lexer-is #\-) (Text-Lexer-is #\+))))) (lambda () (Text-Lexer-digits)))))))))))
(define Parser-Lexer-Source-doubleDash (lambda (arg-0) (vector 5 (Text-Lexer-many (Text-Lexer-is #\-)) (Text-Lexer-choice 'erased 0 (vector 0 (lambda (acc) (lambda (elem) (lambda (func) (lambda (init) (lambda (input) (Prelude-Types-foldr_Foldable__List 'erased 'erased func init input)))))) (lambda (elem) (lambda (acc) (lambda (func) (lambda (init) (lambda (input) (Prelude-Types-foldl_Foldable__List 'erased 'erased func init input))))))) (vector 1 (vector 4 (Text-Lexer-is #\}) (lambda () (Parser-Lexer-Source-toEndComment arg-0))) (vector 1 (vector 5 (Text-Lexer-many (Text-Lexer-isNot (integer->char 10))) (Parser-Lexer-Source-toEndComment (+ 1 arg-0))) (vector 0 )))))))
(define Parser-Lexer-Source-dotIdent (lambda () (vector 4 (Text-Lexer-is #\.) (lambda () (Parser-Lexer-Common-identNormal)))))
(define Parser-Lexer-Source-docComment (lambda () (let ((sc0 (Prelude-Basics-C-124C-124 0 (lambda () 0)))) (cond ((equal? sc0 1) (vector 5 (vector 4 (vector 4 (Text-Lexer-is #\|) (lambda () (Text-Lexer-is #\|))) (lambda () (Text-Lexer-is #\|))) (lambda () (Text-Lexer-many (Text-Lexer-isNot (integer->char 10)))))) (else (vector 4 (vector 4 (vector 4 (Text-Lexer-is #\|) (lambda () (Text-Lexer-is #\|))) (lambda () (Text-Lexer-is #\|))) (lambda () (Text-Lexer-many (Text-Lexer-isNot (integer->char 10))))))))))
(define Parser-Lexer-Source-cgDirective (lambda () (vector 4 (Text-Lexer-exact "%cg") (lambda () (Text-Lexer-Core-C-60C-124C-62 'erased 'erased (let ((sc0 (Prelude-Basics-C-124C-124 (Prelude-Basics-C-124C-124 (Prelude-Basics-C-124C-124 0 (lambda () 1)) (lambda () 0)) (lambda () 1)))) (cond ((equal? sc0 1) (vector 5 (let ((sc1 (Prelude-Basics-C-124C-124 (Prelude-Basics-C-124C-124 0 (lambda () 1)) (lambda () 0)))) (cond ((equal? sc1 1) (vector 5 (let ((sc2 (Prelude-Basics-C-124C-124 0 (lambda () 1)))) (cond ((equal? sc2 1) (vector 5 (vector 4 (vector 4 (Text-Lexer-some (Text-Lexer-space)) (lambda () (Text-Lexer-some (Text-Lexer-Core-pred (lambda (eta-0) (Prelude-Types-isAlphaNum eta-0)))))) (lambda () (Text-Lexer-many (Text-Lexer-space)))) (lambda () (Text-Lexer-is #\{)))) (else (vector 4 (vector 4 (vector 4 (Text-Lexer-some (Text-Lexer-space)) (lambda () (Text-Lexer-some (Text-Lexer-Core-pred (lambda (eta-0) (Prelude-Types-isAlphaNum eta-0)))))) (lambda () (Text-Lexer-many (Text-Lexer-space)))) (lambda () (Text-Lexer-is #\{)))))) (lambda () (Text-Lexer-many (Text-Lexer-isNot #\}))))) (else (vector 4 (let ((sc2 (Prelude-Basics-C-124C-124 0 (lambda () 1)))) (cond ((equal? sc2 1) (vector 5 (vector 4 (vector 4 (Text-Lexer-some (Text-Lexer-space)) (lambda () (Text-Lexer-some (Text-Lexer-Core-pred (lambda (eta-0) (Prelude-Types-isAlphaNum eta-0)))))) (lambda () (Text-Lexer-many (Text-Lexer-space)))) (lambda () (Text-Lexer-is #\{)))) (else (vector 4 (vector 4 (vector 4 (Text-Lexer-some (Text-Lexer-space)) (lambda () (Text-Lexer-some (Text-Lexer-Core-pred (lambda (eta-0) (Prelude-Types-isAlphaNum eta-0)))))) (lambda () (Text-Lexer-many (Text-Lexer-space)))) (lambda () (Text-Lexer-is #\{)))))) (lambda () (Text-Lexer-many (Text-Lexer-isNot #\}))))))) (lambda () (Text-Lexer-is #\})))) (else (vector 4 (let ((sc1 (Prelude-Basics-C-124C-124 (Prelude-Basics-C-124C-124 0 (lambda () 1)) (lambda () 0)))) (cond ((equal? sc1 1) (vector 5 (let ((sc2 (Prelude-Basics-C-124C-124 0 (lambda () 1)))) (cond ((equal? sc2 1) (vector 5 (vector 4 (vector 4 (Text-Lexer-some (Text-Lexer-space)) (lambda () (Text-Lexer-some (Text-Lexer-Core-pred (lambda (eta-0) (Prelude-Types-isAlphaNum eta-0)))))) (lambda () (Text-Lexer-many (Text-Lexer-space)))) (lambda () (Text-Lexer-is #\{)))) (else (vector 4 (vector 4 (vector 4 (Text-Lexer-some (Text-Lexer-space)) (lambda () (Text-Lexer-some (Text-Lexer-Core-pred (lambda (eta-0) (Prelude-Types-isAlphaNum eta-0)))))) (lambda () (Text-Lexer-many (Text-Lexer-space)))) (lambda () (Text-Lexer-is #\{)))))) (lambda () (Text-Lexer-many (Text-Lexer-isNot #\}))))) (else (vector 4 (let ((sc2 (Prelude-Basics-C-124C-124 0 (lambda () 1)))) (cond ((equal? sc2 1) (vector 5 (vector 4 (vector 4 (Text-Lexer-some (Text-Lexer-space)) (lambda () (Text-Lexer-some (Text-Lexer-Core-pred (lambda (eta-0) (Prelude-Types-isAlphaNum eta-0)))))) (lambda () (Text-Lexer-many (Text-Lexer-space)))) (lambda () (Text-Lexer-is #\{)))) (else (vector 4 (vector 4 (vector 4 (Text-Lexer-some (Text-Lexer-space)) (lambda () (Text-Lexer-some (Text-Lexer-Core-pred (lambda (eta-0) (Prelude-Types-isAlphaNum eta-0)))))) (lambda () (Text-Lexer-many (Text-Lexer-space)))) (lambda () (Text-Lexer-is #\{)))))) (lambda () (Text-Lexer-many (Text-Lexer-isNot #\}))))))) (lambda () (Text-Lexer-is #\})))))) (Text-Lexer-many (Text-Lexer-isNot (integer->char 10))))))))
(define Parser-Lexer-Source-blockComment (lambda () (vector 4 (vector 4 (Text-Lexer-is #\{) (lambda () (Text-Lexer-is #\-))) (lambda () (Parser-Lexer-Source-toEndComment (+ 1 0))))))
(define Utils-String-stripQuotes (lambda (arg-0) (Prelude-Types-substr (+ 1 0) (Prelude-Types-minus (Prelude-Types-Strings-length arg-0) (+ 1 (+ 1 0))) arg-0)))
(define Utils-String-dotSep (lambda (arg-0) (let ((sc0 arg-0)) (case (vector-ref sc0 0) ((0) "") (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 e-3)) (case (vector-ref sc1 0) ((0) e-2)(else (Prelude-Types-Strings-C-43C-43 e-2 ((Prelude-Interfaces-concat 'erased 'erased (vector 0 (vector 0 (lambda (acc) (lambda (elem) (lambda (func) (lambda (init) (lambda (input) (Prelude-Types-foldr_Foldable__List 'erased 'erased func init input)))))) (lambda (elem) (lambda (acc) (lambda (func) (lambda (init) (lambda (input) (Prelude-Types-foldl_Foldable__List 'erased 'erased func init input))))))) (vector 0 (lambda (arg-2) (lambda (arg-3) (Prelude-Types-C-60C-43C-62_Semigroup__String arg-2 arg-3))) (Prelude-Types-neutral_Monoid__String)))) (Prelude-Types-C-62C-62C-61_Monad__List 'erased 'erased e-3 (lambda (y) (Prelude-Types-pure_Applicative__List 'erased (Prelude-Types-Strings-C-43C-43 "." y))))))))))))))))
(define Utils-Octal-n--1707-583-fromOctCharsC-39 (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (case (vector-ref sc0 0) ((0) (vector 1 0)) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (Prelude-Types-C-62C-62C-61_Monad__Maybe 'erased 'erased (Utils-Octal-fromOctDigit (Prelude-Types-toLower e-2)) (lambda (bind-0) (Prelude-Types-C-62C-62C-61_Monad__Maybe 'erased 'erased (Utils-Octal-n--1707-583-fromOctCharsC-39 (b* arg-0 8 63) e-3) (lambda (bind-1) (Prelude-Types-pure_Applicative__Maybe 'erased (b+ (b* bind-0 arg-0 63) bind-1 63)))))))))))))
(define Utils-Octal-fromOctDigit (lambda (arg-0) (let ((sc0 arg-0)) (cond ((equal? sc0 #\0) (vector 1 0)) ((equal? sc0 #\1) (vector 1 1)) ((equal? sc0 #\2) (vector 1 2)) ((equal? sc0 #\3) (vector 1 3)) ((equal? sc0 #\4) (vector 1 4)) ((equal? sc0 #\5) (vector 1 5)) ((equal? sc0 #\6) (vector 1 6)) ((equal? sc0 #\7) (vector 1 7))(else (vector 0 ))))))
(define Utils-Octal-fromOctChars (lambda (ext-0) (Utils-Octal-n--1707-583-fromOctCharsC-39 1 ext-0)))
(define Utils-Octal-fromOct (lambda (ext-0) (Utils-Octal-fromOctChars (Prelude-Types-unpack ext-0))))
(define Utils-Hex-n--2139-692-fromHexCharsC-39 (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (case (vector-ref sc0 0) ((0) (vector 1 0)) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (Prelude-Types-C-62C-62C-61_Monad__Maybe 'erased 'erased (Utils-Hex-fromHexDigit (Prelude-Types-toLower e-2)) (lambda (bind-0) (Prelude-Types-C-62C-62C-61_Monad__Maybe 'erased 'erased (Utils-Hex-n--2139-692-fromHexCharsC-39 (b* arg-0 16 63) e-3) (lambda (bind-1) (Prelude-Types-pure_Applicative__Maybe 'erased (b+ (b* bind-0 arg-0 63) bind-1 63)))))))))))))
(define Utils-Hex-fromHexDigit (lambda (arg-0) (let ((sc0 arg-0)) (cond ((equal? sc0 #\0) (vector 1 0)) ((equal? sc0 #\1) (vector 1 1)) ((equal? sc0 #\2) (vector 1 2)) ((equal? sc0 #\3) (vector 1 3)) ((equal? sc0 #\4) (vector 1 4)) ((equal? sc0 #\5) (vector 1 5)) ((equal? sc0 #\6) (vector 1 6)) ((equal? sc0 #\7) (vector 1 7)) ((equal? sc0 #\8) (vector 1 8)) ((equal? sc0 #\9) (vector 1 9)) ((equal? sc0 #\a) (vector 1 10)) ((equal? sc0 #\b) (vector 1 11)) ((equal? sc0 #\c) (vector 1 12)) ((equal? sc0 #\d) (vector 1 13)) ((equal? sc0 #\e) (vector 1 14)) ((equal? sc0 #\f) (vector 1 15))(else (vector 0 ))))))
(define Utils-Hex-fromHexChars (lambda (ext-0) (Utils-Hex-n--2139-692-fromHexCharsC-39 1 ext-0)))
(define Utils-Hex-fromHex (lambda (ext-0) (Utils-Hex-fromHexChars (Prelude-Types-unpack ext-0))))
(define Data-String-Extra-drop (lambda (arg-0 arg-1) (Prelude-Types-substr arg-0 (Prelude-Types-Strings-length arg-1) arg-1)))
(define Parser-Lexer-Common-namespacedIdent (lambda () (vector 4 (Parser-Lexer-Common-namespaceIdent) (lambda () (Text-Lexer-opt (vector 4 (Text-Lexer-is #\.) (lambda () (Parser-Lexer-Common-identNormal))))))))
(define Parser-Lexer-Common-namespaceIdent (lambda () (vector 4 (vector 4 (Text-Lexer-Core-pred (lambda (eta-0) (Parser-Lexer-Common-isIdentStart (vector 1 ) eta-0))) (lambda () (Text-Lexer-many (Text-Lexer-Core-pred (lambda (eta-0) (Parser-Lexer-Common-isIdentTrailing (vector 1 ) eta-0)))))) (lambda () (Text-Lexer-many (vector 4 (vector 4 (Text-Lexer-is #\.) (lambda () (vector 4 (Text-Lexer-Core-pred (lambda (eta-0) (Parser-Lexer-Common-isIdentStart (vector 1 ) eta-0))) (lambda () (Text-Lexer-many (Text-Lexer-Core-pred (lambda (eta-0) (Parser-Lexer-Common-isIdentTrailing (vector 1 ) eta-0)))))))) (lambda () (Text-Lexer-Core-expect 'erased (Text-Lexer-is #\.)))))))))
(define Parser-Lexer-Common-isIdentTrailing (lambda (arg-0 arg-1) (let ((sc0 arg-0)) (case (vector-ref sc0 0) ((0) (let ((sc1 arg-1)) (cond ((equal? sc1 #\-) 0)(else (let ((sc1 arg-1)) (cond ((equal? sc1 #\') 0) ((equal? sc1 #\_) 0)(else (Prelude-Basics-C-124C-124 (Prelude-Types-isAlphaNum arg-1) (lambda () (Prelude-EqOrd-C-62_Ord__Char arg-1 (Prelude-Types-chr 160)))))))))))(else (let ((sc0 arg-1)) (cond ((equal? sc0 #\') 0) ((equal? sc0 #\_) 0)(else (Prelude-Basics-C-124C-124 (Prelude-Types-isAlphaNum arg-1) (lambda () (Prelude-EqOrd-C-62_Ord__Char arg-1 (Prelude-Types-chr 160))))))))))))
(define Parser-Lexer-Common-isIdentStart (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (cond ((equal? sc0 #\_) 0)(else (let ((sc0 arg-0)) (case (vector-ref sc0 0) ((1) (Prelude-Basics-C-124C-124 (Prelude-Types-isUpper arg-1) (lambda () (Prelude-EqOrd-C-62_Ord__Char arg-1 (Prelude-Types-chr 160)))))(else (Prelude-Basics-C-124C-124 (Prelude-Types-isAlpha arg-1) (lambda () (Prelude-EqOrd-C-62_Ord__Char arg-1 (Prelude-Types-chr 160))))))))))))
(define Parser-Lexer-Common-identNormal (lambda () (vector 4 (Text-Lexer-Core-pred (lambda (eta-0) (Parser-Lexer-Common-isIdentStart (vector 2 ) eta-0))) (lambda () (Text-Lexer-many (Text-Lexer-Core-pred (lambda (eta-0) (Parser-Lexer-Common-isIdentTrailing (vector 2 ) eta-0))))))))
(define Parser-Lexer-Common-ident (lambda (arg-0) (vector 4 (Text-Lexer-Core-pred (lambda (eta-0) (Parser-Lexer-Common-isIdentStart arg-0 eta-0))) (lambda () (Text-Lexer-many (Text-Lexer-Core-pred (lambda (eta-0) (Parser-Lexer-Common-isIdentTrailing arg-0 eta-0))))))))
(define Parser-Lexer-Common-comment (lambda () (let ((sc0 (Prelude-Basics-C-124C-124 (Prelude-Basics-C-124C-124 0 (lambda () 1)) (lambda () 1)))) (cond ((equal? sc0 1) (vector 5 (let ((sc1 (Prelude-Basics-C-124C-124 0 (lambda () 1)))) (cond ((equal? sc1 1) (vector 5 (vector 4 (vector 4 (Text-Lexer-is #\-) (lambda () (Text-Lexer-is #\-))) (lambda () (Text-Lexer-many (Text-Lexer-is #\-)))) (lambda () (Text-Lexer-Core-reject 'erased (Text-Lexer-is #\}))))) (else (vector 4 (vector 4 (vector 4 (Text-Lexer-is #\-) (lambda () (Text-Lexer-is #\-))) (lambda () (Text-Lexer-many (Text-Lexer-is #\-)))) (lambda () (Text-Lexer-Core-reject 'erased (Text-Lexer-is #\}))))))) (lambda () (Text-Lexer-many (Text-Lexer-isNot (integer->char 10)))))) (else (vector 4 (let ((sc1 (Prelude-Basics-C-124C-124 0 (lambda () 1)))) (cond ((equal? sc1 1) (vector 5 (vector 4 (vector 4 (Text-Lexer-is #\-) (lambda () (Text-Lexer-is #\-))) (lambda () (Text-Lexer-many (Text-Lexer-is #\-)))) (lambda () (Text-Lexer-Core-reject 'erased (Text-Lexer-is #\}))))) (else (vector 4 (vector 4 (vector 4 (Text-Lexer-is #\-) (lambda () (Text-Lexer-is #\-))) (lambda () (Text-Lexer-many (Text-Lexer-is #\-)))) (lambda () (Text-Lexer-Core-reject 'erased (Text-Lexer-is #\}))))))) (lambda () (Text-Lexer-many (Text-Lexer-isNot (integer->char 10))))))))))
(define TTImp-ProcessDecl-processDecl (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((0) (let ((e-0 (vector-ref sc0 1))) (let ((sc1 e-0)) (let ((e-4 (vector-ref sc1 1))) (let ((e-5 (vector-ref sc1 2))) (lambda (eta-0) (TTImp-ProcessType-processType arg-0 arg-1 e-4 e-5 eta-0))))))) ((1) (let ((e-1 (vector-ref sc0 1))) (TTImp-ProcessData-processData arg-0 arg-1 e-1))) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (lambda (eta-0) (TTImp-ProcessDef-processDef arg-0 arg-1 e-2 e-3 eta-0)))))))))
(define TTImp-ProcessType-case--processType-5391 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-4)) (let ((e-2 (vector-ref sc0 1))) (lambda (eta-0) (Core-Context-addDef arg-3 arg-1 (Core-Context-newDef e-2 (vector 0 )) eta-0))))))
(define TTImp-ProcessType-processType (lambda (arg-0 arg-1 arg-2 arg-3 ext-0) (let ((act-24 ((TTImp-Elab-Term-checkTerm (vector 0 ) arg-0 arg-1 (vector 0 ) arg-3 (vector 1 (Core-Normalise-gType 'erased))) ext-0))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (let ((sc1 e-5)) (let ((e-2 (vector-ref sc1 1))) (Core-Context-addDef arg-0 arg-2 (Core-Context-newDef e-2 (vector 0 )) ext-0))))))))))
(define TTImp-ProcessDef-with--getRHSEnv-2199 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((0) (lambda (eta-0) (Core-Core-throw_Catchable__Core_Error 'erased (vector 3 "Can't happen: names don't match in getRHSEnv") eta-0))) (else (let ((e-2 (vector-ref sc0 1))) (let ((sc1 e-2)) (TTImp-ProcessDef-getRHSEnv (vector 1 arg-0 arg-3) (vector 1 (vector 2 arg-0 arg-6) arg-9) arg-7 arg-8))))))))
(define TTImp-ProcessDef-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32processDef-2464 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11) (let ((sc0 arg-11)) (let ((e-0 (vector-ref sc0 1))) (vector 0 e-0 (vector 1 arg-8 arg-9))))))
(define TTImp-ProcessDef-case--caseC-32blockC-32inC-32processDef-2421 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8) (let ((sc0 arg-8)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (lambda (eta-0) (let ((act-24 (Core-Context-updateDef arg-3 arg-1 (lambda (rec-0) (let ((sc1 rec-0)) (let ((e-0 (vector-ref sc1 1))) (vector 0 e-0 (vector 1 e-2 e-3))))) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-4 (vector-ref sc1 1))) (vector 0 e-4))) (else (let ((act-25 ((Prelude-IO-putStrLn 'erased (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-62) (lambda (eta-1) (Prelude-IO-map_Functor__IO 'erased 'erased func arg-62 eta-1)))))) (lambda (a) (lambda (arg-172) (lambda (eta-1) arg-172))) (lambda (b) (lambda (a) (lambda (arg-173) (lambda (arg-175) (lambda (eta-1) (let ((act-17 (arg-173 eta-1))) (let ((act-16 (arg-175 eta-1))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-334) (lambda (arg-335) (lambda (eta-1) (let ((act-25 (arg-334 eta-1))) ((arg-335 act-25) eta-1))))))) (lambda (a) (lambda (arg-337) (lambda (eta-1) (let ((act-51 (arg-337 eta-1))) (act-51 eta-1)))))) (lambda (a) (lambda (arg-6366) arg-6366))) (Prelude-Types-Strings-C-43C-43 "Processed " (Core-TT-show_Show__Name arg-1))) eta-0))) (vector 1 act-25))))))))))))
(define TTImp-ProcessDef-case--processDef-2388 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-5)) (case (vector-ref sc0 0) ((1) (let ((e-1 (vector-ref sc0 1))) (lambda (eta-0) (let ((act-24 ((Core-Core-traverse 'erased 'erased (lambda (eta-1) (TTImp-ProcessDef-processClause arg-3 arg-2 eta-1)) arg-0) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc1 1))) (let ((act-25 ((Core-CaseBuilder-getPMDef arg-3 arg-1 (let ((sc2 e-1)) (let ((e-0 (vector-ref sc2 1))) e-0)) e-5) eta-0))) (let ((sc2 act-25)) (case (vector-ref sc2 0) ((0) (let ((e-2 (vector-ref sc2 1))) (vector 0 e-2))) (else (let ((e-6 (vector-ref sc2 1))) (let ((sc3 e-6)) (let ((e-2 (vector-ref sc3 1))) (let ((e-3 (vector-ref sc3 2))) (let ((act-26 (Core-Context-updateDef arg-3 arg-1 (lambda (rec-0) (let ((sc4 rec-0)) (let ((e-0 (vector-ref sc4 1))) (vector 0 e-0 (vector 1 e-2 e-3))))) eta-0))) (let ((sc4 act-26)) (case (vector-ref sc4 0) ((0) (let ((e-4 (vector-ref sc4 1))) (vector 0 e-4))) (else (let ((act-27 ((Prelude-IO-putStrLn 'erased (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-62) (lambda (eta-1) (Prelude-IO-map_Functor__IO 'erased 'erased func arg-62 eta-1)))))) (lambda (a) (lambda (arg-172) (lambda (eta-1) arg-172))) (lambda (b) (lambda (a) (lambda (arg-173) (lambda (arg-175) (lambda (eta-1) (let ((act-17 (arg-173 eta-1))) (let ((act-16 (arg-175 eta-1))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-334) (lambda (arg-335) (lambda (eta-1) (let ((act-27 (arg-334 eta-1))) ((arg-335 act-27) eta-1))))))) (lambda (a) (lambda (arg-337) (lambda (eta-1) (let ((act-51 (arg-337 eta-1))) (act-51 eta-1)))))) (lambda (a) (lambda (arg-6366) arg-6366))) (Prelude-Types-Strings-C-43C-43 "Processed " (Core-TT-show_Show__Name arg-1))) eta-0))) (vector 1 act-27)))))))))))))))))))))) (else (lambda (eta-0) (Core-Core-throw_Catchable__Core_Error 'erased (vector 3 (Prelude-Types-Strings-C-43C-43 "No type declaration for " (Core-TT-show_Show__Name arg-1))) eta-0)))))))
(define TTImp-ProcessDef-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32processClause-2336 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12) (let ((sc0 arg-12)) (let ((e-2 (vector-ref sc0 1))) (lambda (eta-0) (vector 1 (vector 0 arg-7 arg-8 arg-9 e-2)))))))
(define TTImp-ProcessDef-case--caseC-32blockC-32inC-32processClause-2294 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (let ((sc0 arg-7)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 e-3)) (let ((e-6 (vector-ref sc1 1))) (let ((e-7 (vector-ref sc1 2))) (let ((sc2 e-7)) (let ((e-10 (vector-ref sc2 1))) (let ((e-11 (vector-ref sc2 2))) (lambda (eta-0) (let ((act-24 ((TTImp-Elab-Term-checkTerm e-2 arg-3 arg-2 e-6 arg-0 (vector 1 (Core-Normalise-gnf e-2 e-6 e-11))) eta-0))) (let ((sc3 act-24)) (case (vector-ref sc3 0) ((0) (let ((e-4 (vector-ref sc3 1))) (vector 0 e-4))) (else (let ((e-5 (vector-ref sc3 1))) (let ((sc4 e-5)) (let ((e-8 (vector-ref sc4 1))) (vector 1 (vector 0 e-2 e-6 e-10 e-8)))))))))))))))))))))
(define TTImp-ProcessDef-case--processClause-2264 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-4)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (lambda (eta-0) (let ((act-24 (let ((act-24 ((Core-Normalise-getTerm 'erased e-3) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-4 (vector-ref sc1 1))) (vector 0 e-4))) (else (let ((e-5 (vector-ref sc1 1))) ((TTImp-ProcessDef-getRHSEnv (vector 0 ) (vector 0 ) e-2 e-5) eta-0)))))))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-4 (vector-ref sc1 1))) (vector 0 e-4))) (else (let ((e-5 (vector-ref sc1 1))) (let ((sc2 e-5)) (let ((e-6 (vector-ref sc2 1))) (let ((e-4 (vector-ref sc2 2))) (let ((sc3 e-4)) (let ((e-8 (vector-ref sc3 1))) (let ((e-7 (vector-ref sc3 2))) (let ((sc4 e-7)) (let ((e-10 (vector-ref sc4 1))) (let ((e-11 (vector-ref sc4 2))) (let ((act-25 ((TTImp-Elab-Term-checkTerm e-6 arg-3 arg-2 e-8 arg-0 (vector 1 (Core-Normalise-gnf e-6 e-8 e-11))) eta-0))) (let ((sc5 act-25)) (case (vector-ref sc5 0) ((0) (let ((e-9 (vector-ref sc5 1))) (vector 0 e-9))) (else (let ((e-9 (vector-ref sc5 1))) (let ((sc6 e-9)) (let ((e-13 (vector-ref sc6 1))) (vector 1 (vector 0 e-6 e-8 e-10 e-13)))))))))))))))))))))))))))))
(define TTImp-ProcessDef-processDef (lambda (arg-0 arg-1 arg-2 arg-3 ext-0) (let ((act-24 (let ((act-24 (unbox arg-0))) (vector 1 act-24)))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (let ((act-25 (Core-Context-lookupDef arg-2 e-5 ext-0))) (let ((sc1 act-25)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-6 (vector-ref sc1 1))) (let ((sc2 e-6)) (case (vector-ref sc2 0) ((1) (let ((e-1 (vector-ref sc2 1))) (let ((act-26 ((Core-Core-traverse 'erased 'erased (lambda (eta-0) (TTImp-ProcessDef-processClause arg-0 arg-1 eta-0)) arg-3) ext-0))) (let ((sc3 act-26)) (case (vector-ref sc3 0) ((0) (let ((e-2 (vector-ref sc3 1))) (vector 0 e-2))) (else (let ((e-7 (vector-ref sc3 1))) (let ((act-27 ((Core-CaseBuilder-getPMDef arg-0 arg-2 (let ((sc4 e-1)) (let ((e-0 (vector-ref sc4 1))) e-0)) e-7) ext-0))) (let ((sc4 act-27)) (case (vector-ref sc4 0) ((0) (let ((e-2 (vector-ref sc4 1))) (vector 0 e-2))) (else (let ((e-8 (vector-ref sc4 1))) (let ((sc5 e-8)) (let ((e-2 (vector-ref sc5 1))) (let ((e-3 (vector-ref sc5 2))) (let ((act-28 (Core-Context-updateDef arg-0 arg-2 (lambda (rec-0) (let ((sc6 rec-0)) (let ((e-0 (vector-ref sc6 1))) (vector 0 e-0 (vector 1 e-2 e-3))))) ext-0))) (let ((sc6 act-28)) (case (vector-ref sc6 0) ((0) (let ((e-4 (vector-ref sc6 1))) (vector 0 e-4))) (else (let ((act-29 ((Prelude-IO-putStrLn 'erased (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-62) (lambda (eta-0) (Prelude-IO-map_Functor__IO 'erased 'erased func arg-62 eta-0)))))) (lambda (a) (lambda (arg-172) (lambda (eta-0) arg-172))) (lambda (b) (lambda (a) (lambda (arg-173) (lambda (arg-175) (lambda (eta-0) (let ((act-17 (arg-173 eta-0))) (let ((act-16 (arg-175 eta-0))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-334) (lambda (arg-335) (lambda (eta-0) (let ((act-29 (arg-334 eta-0))) ((arg-335 act-29) eta-0))))))) (lambda (a) (lambda (arg-337) (lambda (eta-0) (let ((act-51 (arg-337 eta-0))) (act-51 eta-0)))))) (lambda (a) (lambda (arg-6366) arg-6366))) (Prelude-Types-Strings-C-43C-43 "Processed " (Core-TT-show_Show__Name arg-2))) ext-0))) (vector 1 act-29))))))))))))))))))))) (else (Core-Core-throw_Catchable__Core_Error 'erased (vector 3 (Prelude-Types-Strings-C-43C-43 "No type declaration for " (Core-TT-show_Show__Name arg-2))) ext-0))))))))))))))))
(define TTImp-ProcessDef-processClause (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (let ((e-0 (vector-ref sc0 1))) (let ((e-1 (vector-ref sc0 2))) (lambda (eta-0) (let ((act-24 ((TTImp-Elab-Term-checkTerm (vector 0 ) arg-0 arg-1 (vector 0 ) e-0 (vector 0 )) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc1 1))) (let ((sc2 e-5)) (let ((e-2 (vector-ref sc2 1))) (let ((e-3 (vector-ref sc2 2))) (let ((act-25 (let ((act-25 ((Core-Normalise-getTerm 'erased e-3) eta-0))) (let ((sc3 act-25)) (case (vector-ref sc3 0) ((0) (let ((e-4 (vector-ref sc3 1))) (vector 0 e-4))) (else (let ((e-6 (vector-ref sc3 1))) ((TTImp-ProcessDef-getRHSEnv (vector 0 ) (vector 0 ) e-2 e-6) eta-0)))))))) (let ((sc3 act-25)) (case (vector-ref sc3 0) ((0) (let ((e-4 (vector-ref sc3 1))) (vector 0 e-4))) (else (let ((e-6 (vector-ref sc3 1))) (let ((sc4 e-6)) (let ((e-7 (vector-ref sc4 1))) (let ((e-4 (vector-ref sc4 2))) (let ((sc5 e-4)) (let ((e-9 (vector-ref sc5 1))) (let ((e-8 (vector-ref sc5 2))) (let ((sc6 e-8)) (let ((e-10 (vector-ref sc6 1))) (let ((e-11 (vector-ref sc6 2))) (let ((act-26 ((TTImp-Elab-Term-checkTerm e-7 arg-0 arg-1 e-9 e-1 (vector 1 (Core-Normalise-gnf e-7 e-9 e-11))) eta-0))) (let ((sc7 act-26)) (case (vector-ref sc7 0) ((0) (let ((e-12 (vector-ref sc7 1))) (vector 0 e-12))) (else (let ((e-12 (vector-ref sc7 1))) (let ((sc8 e-12)) (let ((e-14 (vector-ref sc8 1))) (vector 1 (vector 0 e-7 e-9 e-10 e-14)))))))))))))))))))))))))))))))))))))
(define TTImp-ProcessDef-getRHSEnv (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((3) (let ((e-1 (vector-ref sc0 1))) (let ((e-2 (vector-ref sc0 2))) (let ((e-3 (vector-ref sc0 3))) (let ((sc1 e-2)) (case (vector-ref sc1 0) ((2) (let ((e-5 (vector-ref sc1 1))) (let ((e-6 (vector-ref sc1 2))) (let ((sc2 arg-3)) (case (vector-ref sc2 0) ((3) (let ((e-8 (vector-ref sc2 1))) (let ((e-9 (vector-ref sc2 2))) (let ((e-10 (vector-ref sc2 3))) (let ((sc3 e-9)) (case (vector-ref sc3 0) ((3) (let ((e-12 (vector-ref sc3 1))) (TTImp-ProcessDef-with--getRHSEnv-2199 e-1 e-8 (Core-TT-nameEq e-1 e-8) arg-0 e-12 e-5 e-6 e-3 e-10 arg-1)))(else (lambda (eta-0) (vector 1 (vector 0 arg-0 (vector 0 arg-1 (vector 0 arg-2 arg-3))))))))))))(else (lambda (eta-0) (vector 1 (vector 0 arg-0 (vector 0 arg-1 (vector 0 arg-2 arg-3)))))))))))(else (lambda (eta-0) (vector 1 (vector 0 arg-0 (vector 0 arg-1 (vector 0 arg-2 arg-3))))))))))))(else (lambda (eta-0) (vector 1 (vector 0 arg-0 (vector 0 arg-1 (vector 0 arg-2 arg-3))))))))))
(define Core-CaseBuilder-with--groupConsC-44addConG-5301 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-13 arg-14 arg-15 arg-16 arg-17) (let ((sc0 arg-10)) (case (vector-ref sc0 0) ((0) (let ((e-7 (vector-ref sc0 1))) (let ((e-8 (vector-ref sc0 2))) (let ((e-9 (vector-ref sc0 3))) (let ((e-10 (vector-ref sc0 4))) (let ((sc1 e-10)) (case (vector-ref sc1 0) ((1) (let ((e-12 (vector-ref sc1 1))) (let ((e-13 (vector-ref sc1 2))) (let ((sc2 e-12)) (case (vector-ref sc2 0) ((0) (let ((e-16 (vector-ref sc2 1))) (let ((e-17 (vector-ref sc2 2))) (let ((e-18 (vector-ref sc2 3))) (let ((sc3 arg-14)) (case (vector-ref sc3 0) ((0) (let ((e-29 (vector-ref sc3 1))) (let ((newps (Core-CaseBuilder-newPats 'erased 'erased 'erased arg-11 e-29 e-17))) (let ((patsC-39 (Core-CaseBuilder-updatePatNames 'erased 'erased (Core-CaseBuilder-updateNames (Data-List-zip 'erased 'erased e-7 arg-11)) (Core-CaseBuilder-weakenNs 'erased arg-9 e-7 arg-17)))) (let ((newclause (vector 0 e-16 (Core-CaseBuilder-C-43C-43 'erased 'erased 'erased newps patsC-39) (Core-TT-weakenNs_Weaken__Term arg-9 e-7 arg-16)))) (lambda (eta-0) (vector 1 (vector 1 (vector 0 e-7 e-8 e-9 (vector 1 (vector 0 e-16 e-17 e-18) (Prelude-Types-List-C-43C-43 'erased e-13 (vector 1 newclause (vector 0 ))))) arg-15))))))))(else (let ((sc3 arg-14)) (lambda (eta-0) (let ((act-24 ((Core-CaseBuilder-n--6494-4983-addConG arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-9 arg-8 arg-13 arg-12 arg-11 arg-17 arg-16 arg-15) eta-0))) (let ((sc4 act-24)) (case (vector-ref sc4 0) ((0) (let ((e-2 (vector-ref sc4 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc4 1))) (vector 1 (vector 1 arg-10 e-5))))))))))))))))(else (let ((sc2 arg-14)) (lambda (eta-0) (let ((act-24 ((Core-CaseBuilder-n--6494-4983-addConG arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-9 arg-8 arg-13 arg-12 arg-11 arg-17 arg-16 arg-15) eta-0))) (let ((sc3 act-24)) (case (vector-ref sc3 0) ((0) (let ((e-2 (vector-ref sc3 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc3 1))) (vector 1 (vector 1 arg-10 e-5)))))))))))))))(else (let ((sc1 arg-14)) (lambda (eta-0) (let ((act-24 ((Core-CaseBuilder-n--6494-4983-addConG arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-9 arg-8 arg-13 arg-12 arg-11 arg-17 arg-16 arg-15) eta-0))) (let ((sc2 act-24)) (case (vector-ref sc2 0) ((0) (let ((e-2 (vector-ref sc2 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc2 1))) (vector 1 (vector 1 arg-10 e-5)))))))))))))))))(else (let ((sc0 arg-14)) (lambda (eta-0) (let ((act-24 ((Core-CaseBuilder-n--6494-4983-addConG arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-9 arg-8 arg-13 arg-12 arg-11 arg-17 arg-16 arg-15) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc1 1))) (vector 1 (vector 1 arg-10 e-5))))))))))))))
(define Core-CaseBuilder-with--partition-3805 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-4)) (case (vector-ref sc0 0) ((0) (let ((e-3 (vector-ref sc0 1))) (let ((e-5 (vector-ref sc0 3))) (let ((e-6 (vector-ref sc0 4))) (let ((e-7 (vector-ref sc0 5))) (let ((sc1 e-3)) (case (vector-ref sc1 0) ((1) (Core-CaseBuilder-case--withC-32blockC-32inC-32partition-3822 arg-2 arg-1 arg-0 e-5 e-7 e-6 arg-5 (Core-CaseBuilder-clauseType 'erased 'erased 'erased arg-5)))(else (let ((sc1 arg-3)) (let ((sc2 arg-4)) (Core-CaseBuilder-case--withC-32blockC-32inC-32partition-3944 arg-2 arg-1 arg-0 arg-5 (Core-CaseBuilder-clauseType 'erased 'erased 'erased arg-5)))))))))))) ((1) (let ((e-8 (vector-ref sc0 1))) (let ((e-10 (vector-ref sc0 3))) (let ((e-11 (vector-ref sc0 4))) (let ((e-12 (vector-ref sc0 5))) (let ((sc1 e-8)) (case (vector-ref sc1 0) ((1) (Core-CaseBuilder-case--withC-32blockC-32inC-32partition-3884 arg-2 arg-1 arg-0 e-10 e-12 e-11 arg-5 (Core-CaseBuilder-clauseType 'erased 'erased 'erased arg-5)))(else (let ((sc1 arg-3)) (let ((sc2 arg-4)) (Core-CaseBuilder-case--withC-32blockC-32inC-32partition-3944 arg-2 arg-1 arg-0 arg-5 (Core-CaseBuilder-clauseType 'erased 'erased 'erased arg-5))))))))))))(else (let ((sc0 arg-3)) (let ((sc1 arg-4)) (Core-CaseBuilder-case--withC-32blockC-32inC-32partition-3944 arg-2 arg-1 arg-0 arg-5 (Core-CaseBuilder-clauseType 'erased 'erased 'erased arg-5)))))))))
(define Core-CaseBuilder-case--getPMDef-8012 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (let ((sc0 arg-6)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (lambda (eta-0) (vector 1 (vector 0 e-2 e-3))))))))
(define Core-CaseBuilder-case--caseC-32blockC-32inC-32toPatClause-7681 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (let ((sc0 arg-7)) (cond ((equal? sc0 0) (lambda (eta-0) (vector 1 (vector 0 (Prelude-Types-map_Functor__List 'erased 'erased (lambda (eta-1) (Core-CaseTree-argToPat eta-1)) arg-5) arg-1)))) (else (lambda (eta-0) (Core-Core-throw_Catchable__Core_Error 'erased (vector 3 (Prelude-Types-Strings-C-43C-43 "Wrong function name in pattern LHS " (Prelude-Show-show_Show__C-40C-124C-40C-40BuiltinC-46PairC-32C-36aC-41C-32C-36bC-41C-44C-40C-40BuiltinC-46MkPairC-32C-36aC-41C-32C-36bC-41C-124C-41 'erased 'erased (vector 0 (vector 0 (lambda (x) (Core-TT-show_Show__Name x)) (lambda (d) (lambda (x) (Core-TT-showPrec_Show__Name d x)))) (vector 0 (lambda (x) (Core-TT-show_Show__Name x)) (lambda (d) (lambda (x) (Core-TT-showPrec_Show__Name d x))))) (vector 0 arg-2 arg-4)))) eta-0)))))))
(define Core-CaseBuilder-case--toPatClause-7651 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-4)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 e-2)) (case (vector-ref sc1 0) ((1) (let ((e-5 (vector-ref sc1 1))) (let ((e-6 (vector-ref sc1 2))) (let ((sc2 e-5)) (case (vector-ref sc2 0) ((0) (lambda (eta-0) (let ((act-24 (let ((act-24 (unbox arg-3))) (vector 1 act-24)))) (let ((sc3 act-24)) (case (vector-ref sc3 0) ((0) (let ((e-4 (vector-ref sc3 1))) (vector 0 e-4))) (else (let ((e-7 (vector-ref sc3 1))) ((Core-CaseBuilder-case--caseC-32blockC-32inC-32toPatClause-7681 arg-0 arg-1 arg-2 arg-3 e-6 e-3 e-7 (Core-TT-C-61C-61_Eq__Name arg-2 e-6)) eta-0))))))))(else (lambda (eta-0) (Core-Core-throw_Catchable__Core_Error 'erased (vector 3 "Not a function name in pattern LHS") eta-0))))))))(else (lambda (eta-0) (Core-Core-throw_Catchable__Core_Error 'erased (vector 3 "Not a function name in pattern LHS") eta-0))))))))))
(define Core-CaseBuilder-case--mkPatClauseC-44mkNames-7220 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-13) (let ((sc0 arg-11)) (case (vector-ref sc0 0) ((0) (lambda (eta-0) (vector 1 (vector 0 (vector 0 ) (vector 2 ))))) (else (let ((e-2 (vector-ref sc0 1))) (let ((sc1 e-2)) (case (vector-ref sc1 0) ((0) (let ((e-5 (vector-ref sc1 2))) (let ((e-6 (vector-ref sc1 3))) (let ((sc2 e-5)) (case (vector-ref sc2 0) ((1) (let ((e-10 (vector-ref sc2 3))) (lambda (eta-0) (let ((act-24 (((e-6 arg-12) (Core-Normalise-toClosure 'erased (vector 0 ) (vector 1 (vector 1 ) arg-6))) eta-0))) (let ((sc3 act-24)) (case (vector-ref sc3 0) ((0) (let ((e-3 (vector-ref sc3 1))) (vector 0 e-3))) (else (let ((e-7 (vector-ref sc3 1))) (let ((act-25 (Core-Normalise-quote_Quote__NF (vector 0 ) arg-13 (vector 0 ) e-10 eta-0))) (let ((sc4 act-25)) (case (vector-ref sc4 0) ((0) (let ((e-3 (vector-ref sc4 1))) (vector 0 e-3))) (else (let ((e-11 (vector-ref sc4 1))) (vector 1 (vector 0 (vector 1 e-7) (vector 0 (Core-TT-embed 'erased 'erased e-11)))))))))))))))))(else (lambda (eta-0) (let ((act-24 (Core-Normalise-quote_Quote__NF (vector 0 ) arg-13 (vector 0 ) e-2 eta-0))) (let ((sc2 act-24)) (case (vector-ref sc2 0) ((0) (let ((e-3 (vector-ref sc2 1))) (vector 0 e-3))) (else (let ((e-7 (vector-ref sc2 1))) (vector 1 (vector 0 (vector 0 ) (vector 1 (Core-TT-embed 'erased 'erased e-7))))))))))))))))(else (lambda (eta-0) (let ((act-24 (Core-Normalise-quote_Quote__NF (vector 0 ) arg-13 (vector 0 ) e-2 eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-3 (vector-ref sc1 1))) (vector 0 e-3))) (else (let ((e-5 (vector-ref sc1 1))) (vector 1 (vector 0 (vector 0 ) (vector 1 (Core-TT-embed 'erased 'erased e-5)))))))))))))))))))
(define Core-CaseBuilder-case--conRule-6881 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-13 arg-14 arg-15 arg-16 arg-17 arg-18) (let ((sc0 arg-5)) (case (vector-ref sc0 0) ((0) (let ((e-1 (vector-ref sc0 1))) (lambda (eta-0) (vector 1 e-1))))(else (lambda (eta-0) (Core-Core-throw_Catchable__Core_Error 'erased (vector 2 arg-14 (vector 4 )) eta-0)))))))
(define Core-CaseBuilder-case--match-6614 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8) (let ((sc0 arg-8)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((clausesC-39 (Prelude-Types-map_Functor__List 'erased 'erased (lambda (eta-0) (Core-CaseBuilder-shuffleVars 'erased 'erased 'erased e-3 'erased eta-0)) arg-4))) (let ((ps (Core-CaseBuilder-partition e-2 (Core-TT-dropVar 'erased (vector 1 arg-2 arg-1) e-3 'erased) arg-0 clausesC-39))) (lambda (eta-0) (let ((act-24 ((Core-CaseBuilder-mixture e-2 arg-0 (Core-TT-dropVar 'erased (vector 1 arg-2 arg-1) e-3 'erased) arg-7 arg-6 clausesC-39 arg-5 ps arg-3) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-4 (vector-ref sc1 1))) (vector 0 e-4))) (else (let ((e-5 (vector-ref sc1 1))) ((Prelude-Types-maybe 'erased 'erased (lambda () (lambda (eta-1) (vector 1 (vector 2 "No clauses")))) (lambda () (lambda (eta-1) (lambda (eta-2) (vector 1 eta-1)))) e-5) eta-0))))))))))))))
(define Core-CaseBuilder-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32pickNext-6439 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9) (let ((sc0 arg-9)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (lambda (eta-0) (vector 1 (vector 0 e-2 (+ 1 e-3)))))))))
(define Core-CaseBuilder-case--caseC-32blockC-32inC-32pickNext-6366 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8) (let ((sc0 arg-8)) (case (vector-ref sc0 0) ((1) (let ((e-2 (vector-ref sc0 1))) (let ((sc1 e-2)) (case (vector-ref sc1 0) ((0) (lambda (eta-0) (vector 1 (vector 0 arg-0 0))))(else (lambda (eta-0) (let ((act-24 ((Core-CaseBuilder-pickNext arg-2 arg-1 arg-3 arg-7 arg-6 arg-5 (Prelude-Types-map_Functor__List 'erased 'erased (lambda (eta-1) (Core-CaseBuilder-tail 'erased 'erased 'erased eta-1)) arg-4)) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-3 (vector-ref sc1 1))) (vector 0 e-3))) (else (let ((e-5 (vector-ref sc1 1))) (let ((sc2 e-5)) (let ((e-4 (vector-ref sc2 1))) (let ((e-3 (vector-ref sc2 2))) (vector 1 (vector 0 e-4 (+ 1 e-3)))))))))))))))))(else (lambda (eta-0) (let ((act-24 ((Core-CaseBuilder-pickNext arg-2 arg-1 arg-3 arg-7 arg-6 arg-5 (Prelude-Types-map_Functor__List 'erased 'erased (lambda (eta-1) (Core-CaseBuilder-tail 'erased 'erased 'erased eta-1)) arg-4)) eta-0))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (let ((sc1 e-5)) (let ((e-2 (vector-ref sc1 1))) (let ((e-3 (vector-ref sc1 2))) (vector 1 (vector 0 e-2 (+ 1 e-3)))))))))))))))))
(define Core-CaseBuilder-case--pickNext-6305 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8) (let ((sc0 arg-8)) (cond ((equal? sc0 0) (lambda (eta-0) (vector 1 (vector 0 arg-0 0)))) (else (lambda (eta-0) (let ((act-24 (Core-CaseBuilder-getScore 'erased 'erased arg-1 arg-7 arg-6 arg-5 arg-4 eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc1 1))) (let ((sc2 e-5)) (case (vector-ref sc2 0) ((1) (let ((e-2 (vector-ref sc2 1))) (let ((sc3 e-2)) (case (vector-ref sc3 0) ((0) (vector 1 (vector 0 arg-0 0)))(else (let ((act-25 ((Core-CaseBuilder-pickNext arg-2 arg-1 arg-3 arg-7 arg-6 arg-5 (Prelude-Types-map_Functor__List 'erased 'erased (lambda (eta-1) (Core-CaseBuilder-tail 'erased 'erased 'erased eta-1)) arg-4)) eta-0))) (let ((sc3 act-25)) (case (vector-ref sc3 0) ((0) (let ((e-3 (vector-ref sc3 1))) (vector 0 e-3))) (else (let ((e-6 (vector-ref sc3 1))) (let ((sc4 e-6)) (let ((e-4 (vector-ref sc4 1))) (let ((e-3 (vector-ref sc4 2))) (vector 1 (vector 0 e-4 (+ 1 e-3))))))))))))))))(else (let ((act-25 ((Core-CaseBuilder-pickNext arg-2 arg-1 arg-3 arg-7 arg-6 arg-5 (Prelude-Types-map_Functor__List 'erased 'erased (lambda (eta-1) (Core-CaseBuilder-tail 'erased 'erased 'erased eta-1)) arg-4)) eta-0))) (let ((sc2 act-25)) (case (vector-ref sc2 0) ((0) (let ((e-2 (vector-ref sc2 1))) (vector 0 e-2))) (else (let ((e-6 (vector-ref sc2 1))) (let ((sc3 e-6)) (let ((e-2 (vector-ref sc3 1))) (let ((e-3 (vector-ref sc3 2))) (vector 1 (vector 0 e-2 (+ 1 e-3)))))))))))))))))))))))))
(define Core-CaseBuilder-case--caseC-32blockC-32inC-32pickNext-6245 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (let ((sc0 arg-6)) (case (vector-ref sc0 0) ((1) (let ((e-2 (vector-ref sc0 1))) (let ((sc1 e-2)) (lambda (eta-0) (vector 1 (vector 0 arg-0 0)))))) (else (let ((e-5 (vector-ref sc0 1))) (lambda (eta-0) (Core-Core-throw_Catchable__Core_Error 'erased (vector 2 arg-3 e-5) eta-0))))))))
(define Core-CaseBuilder-case--pickNext-6192 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (let ((sc0 arg-6)) (cond ((equal? sc0 0) (lambda (eta-0) (vector 1 (vector 0 arg-0 0)))) (else (lambda (eta-0) (let ((act-24 (Core-CaseBuilder-getScore 'erased 'erased arg-1 arg-5 arg-4 arg-3 arg-2 eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc1 1))) (let ((sc2 e-5)) (case (vector-ref sc2 0) ((1) (let ((e-2 (vector-ref sc2 1))) (let ((sc3 e-2)) (vector 1 (vector 0 arg-0 0))))) (else (let ((e-6 (vector-ref sc2 1))) (Core-Core-throw_Catchable__Core_Error 'erased (vector 2 arg-3 e-6) eta-0))))))))))))))))
(define Core-CaseBuilder-case--getScore-6108 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (let ((sc0 arg-7)) (case (vector-ref sc0 0) ((2) (let ((e-1 (vector-ref sc0 2))) (lambda (eta-0) (vector 1 (vector 0 e-1)))))(else (lambda (eta-0) (Core-Core-throw_Catchable__Core_Error 'erased arg-7 eta-0)))))))
(define Core-CaseBuilder-case--sameType-5846 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10) (let ((sc0 arg-10)) (case (vector-ref sc0 0) ((0) (let ((e-1 (vector-ref sc0 1))) (lambda (eta-0) (let ((act-24 ((Core-Normalise-nf arg-2 arg-9 arg-5 e-1) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc1 1))) ((Core-CaseBuilder-n--7231-5633-sameTypeAs 'erased 'erased arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 e-5 (Prelude-Types-map_Functor__List 'erased 'erased (lambda (eta-1) (Core-CaseBuilder-getFirstArgType 'erased 'erased 'erased eta-1)) arg-4)) eta-0)))))))))(else (lambda (eta-0) (Core-Core-throw_Catchable__Core_Error 'erased (vector 2 arg-6 (vector 1 )) eta-0)))))))
(define Core-CaseBuilder-case--sameTypeC-44sameTypeAs-5763 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-13 arg-14) (let ((sc0 arg-14)) (cond ((equal? sc0 0) (Core-CaseBuilder-n--7231-5633-sameTypeAs 'erased 'erased arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-11 arg-10)) (else (lambda (eta-0) (Core-Core-throw_Catchable__Core_Error 'erased (vector 2 arg-6 (vector 1 )) eta-0)))))))
(define Core-CaseBuilder-case--groupConsC-44addGroup-5414 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-13 arg-14 arg-15 arg-16 arg-17 arg-18 arg-19 arg-20) (let ((sc0 arg-20)) (cond ((equal? sc0 0) (Core-CaseBuilder-n--6494-4983-addConG arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-9 arg-10 arg-15 arg-14 arg-12 arg-18 arg-17 arg-16)) (else (lambda (eta-0) (Core-Core-throw_Catchable__Core_Error 'erased (vector 2 arg-5 (vector 3 arg-15)) eta-0)))))))
(define Core-CaseBuilder-case--caseC-32blockC-32inC-32groupConsC-44addConG-5220 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-13 arg-14 arg-15 arg-16) (let ((sc0 arg-16)) (case (vector-ref sc0 0) ((1) (let ((e-1 (vector-ref sc0 1))) (Core-Normalise-nf arg-8 arg-15 (Core-Env-mkEnv arg-8) (Core-TT-embed 'erased 'erased (let ((sc1 e-1)) (let ((e-0 (vector-ref sc1 1))) e-0)))))) (else (lambda (eta-0) (vector 1 (vector 5 ))))))))
(define Core-CaseBuilder-case--groupConsC-44addConG-5097 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-13 arg-14 arg-15) (let ((sc0 arg-15)) (cond ((equal? sc0 0) (lambda (eta-0) (vector 1 (vector 0 (vector 1 "_" 0) (vector 1 (vector 1 "_" 0) (vector 1 ) (vector 4 )) (lambda (d) (lambda (a) (lambda (eta-1) (vector 1 (vector 0 (vector 1 "_" 1) (vector 1 (vector 1 "_" 1) (vector 1 ) (vector 5 )) (lambda (d-0) (lambda (a-0) (lambda (eta-2) (vector 1 (vector 4 )))))))))))))) (else (lambda (eta-0) (let ((act-24 (let ((act-24 (unbox arg-6))) (vector 1 act-24)))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc1 1))) (let ((act-25 (Core-Context-lookupDef arg-14 e-5 eta-0))) (let ((sc2 act-25)) (case (vector-ref sc2 0) ((0) (let ((e-2 (vector-ref sc2 1))) (vector 0 e-2))) (else (let ((e-6 (vector-ref sc2 1))) (let ((sc3 e-6)) (case (vector-ref sc3 0) ((1) (let ((e-1 (vector-ref sc3 1))) ((Core-Normalise-nf arg-8 e-5 (Core-Env-mkEnv arg-8) (Core-TT-embed 'erased 'erased (let ((sc4 e-1)) (let ((e-0 (vector-ref sc4 1))) e-0)))) eta-0))) (else (vector 1 (vector 5 )))))))))))))))))))))
(define Core-CaseBuilder-case--groupConsC-44addConG-5014 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-13 arg-14 arg-15 arg-16) (let ((sc0 arg-16)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((patsC-39 (Core-CaseBuilder-updatePatNames 'erased 'erased (Core-CaseBuilder-updateNames (Data-List-zip 'erased 'erased e-2 arg-12)) (Core-CaseBuilder-weakenNs 'erased arg-8 e-2 arg-11)))) (let ((clause (vector 0 arg-4 (Core-CaseBuilder-C-43C-43 'erased 'erased 'erased e-3 patsC-39) (Core-TT-weakenNs_Weaken__Term arg-8 e-2 arg-9)))) (lambda (eta-0) (vector 1 (vector 1 (vector 0 e-2 arg-14 arg-13 (vector 1 clause (vector 0 ))) (vector 0 )))))))))))
(define Core-CaseBuilder-case--updatePatNames-4943 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (let ((sc0 arg-4)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((e-4 (vector-ref sc0 3))) (let ((e-6 (vector-ref sc0 4))) (vector 0 e-2 e-3 (Core-CaseBuilder-n--6359-4870-update 'erased 'erased 'erased arg-3 arg-4 arg-5 'erased e-4) e-6))))))))
(define Core-CaseBuilder-case--updatePatNamesC-44update-4887 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8) (let ((sc0 arg-8)) (case (vector-ref sc0 0) ((0) (vector 1 arg-7)) (else (let ((e-2 (vector-ref sc0 1))) (vector 1 e-2)))))))
(define Core-CaseBuilder-case--newPats-4801 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9) (let ((sc0 arg-8)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((e-6 (vector-ref sc0 4))) (vector 0 e-2 e-3 arg-4 e-6)))))))
(define Core-CaseBuilder-case--nextNames-4559 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((0) (lambda (eta-0) (vector 1 (vector 0 (vector 0 ) (vector 2 ))))) (else (let ((e-2 (vector-ref sc0 1))) (let ((sc1 e-2)) (case (vector-ref sc1 0) ((0) (let ((e-5 (vector-ref sc1 2))) (let ((e-6 (vector-ref sc1 3))) (let ((sc2 e-5)) (case (vector-ref sc2 0) ((1) (let ((e-10 (vector-ref sc2 3))) (let ((sc3 e-10)) (case (vector-ref sc3 0) ((5) (lambda (eta-0) (let ((act-24 (((e-6 arg-7) (Core-Normalise-toClosure 'erased arg-10 (vector 1 (vector 1 ) arg-9))) eta-0))) (let ((sc4 act-24)) (case (vector-ref sc4 0) ((0) (let ((e-3 (vector-ref sc4 1))) (vector 0 e-3))) (else (let ((e-7 (vector-ref sc4 1))) (vector 1 (vector 0 (vector 1 e-7) (vector 2 ))))))))))(else (lambda (eta-0) (let ((act-24 (((e-6 arg-7) (Core-Normalise-toClosure 'erased arg-10 (vector 1 (vector 1 ) arg-9))) eta-0))) (let ((sc3 act-24)) (case (vector-ref sc3 0) ((0) (let ((e-3 (vector-ref sc3 1))) (vector 0 e-3))) (else (let ((e-7 (vector-ref sc3 1))) (let ((act-25 (Core-Normalise-quote_Quote__NF arg-2 arg-8 arg-10 e-10 eta-0))) (let ((sc4 act-25)) (case (vector-ref sc4 0) ((0) (let ((e-3 (vector-ref sc4 1))) (vector 0 e-3))) (else (let ((e-11 (vector-ref sc4 1))) (vector 1 (vector 0 (vector 1 e-7) (vector 0 e-11)))))))))))))))))))(else (lambda (eta-0) (let ((act-24 (Core-Normalise-quote_Quote__NF arg-2 arg-8 arg-10 e-2 eta-0))) (let ((sc2 act-24)) (case (vector-ref sc2 0) ((0) (let ((e-3 (vector-ref sc2 1))) (vector 0 e-3))) (else (let ((e-7 (vector-ref sc2 1))) (vector 1 (vector 0 (vector 0 ) (vector 1 e-7)))))))))))))))(else (lambda (eta-0) (let ((act-24 (Core-Normalise-quote_Quote__NF arg-2 arg-8 arg-10 e-2 eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-3 (vector-ref sc1 1))) (vector 0 e-3))) (else (let ((e-5 (vector-ref sc1 1))) (vector 1 (vector 0 (vector 0 ) (vector 1 e-5))))))))))))))))))
(define Core-CaseBuilder-case--caseC-32blockC-32inC-32nextNames-4421 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-13 arg-14 arg-15) (let ((sc0 arg-15)) (case (vector-ref sc0 0) ((2) (vector 2 )) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 (Core-TT-weakenNs_Weaken__Term arg-2 (vector 1 arg-9 arg-12) e-2)))) (else (let ((e-4 (vector-ref sc0 1))) (vector 1 (Core-TT-weakenNs_Weaken__Term arg-2 (vector 1 arg-9 arg-12) e-4))))))))
(define Core-CaseBuilder-case--nextNames-4385 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12) (let ((sc0 arg-12)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((argTy (let ((_-0 (vector 0 e-2 e-3))) (Core-CaseBuilder-case--caseC-32blockC-32inC-32nextNames-4421 arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 e-2 e-3 _-0 (Builtin-snd 'erased 'erased arg-11))))) (lambda (eta-0) (vector 1 (vector 0 (vector 1 arg-9 e-2) (vector 1 (vector 0 0 arg-9 arg-0 argTy) (Core-CaseBuilder-weaken 'erased arg-9 (Prelude-Types-List-C-43C-43 'erased e-2 arg-2) e-3)))))))))))
(define Core-CaseBuilder-case--caseC-32blockC-32inC-32checkGroupMatch-4184 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-13) (let ((sc0 arg-13)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 e-2)) (case (vector-ref sc1 0) ((1) (let ((e-5 (vector-ref sc1 1))) (let ((sc2 e-5)) (case (vector-ref sc2 0) ((0) (let ((sc3 e-3)) (case (vector-ref sc3 0) ((0) (let ((e-9 (vector-ref sc3 1))) (let ((sc4 e-9)) (case (vector-ref sc4 0) ((0) (vector 0 arg-12))(else (vector 1 ))))))(else (vector 1 )))))(else (vector 1 ))))))(else (vector 1 )))))))(else (vector 1 ))))))
(define Core-CaseBuilder-case--checkGroupMatch-4114 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12) (let ((sc0 arg-12)) (case (vector-ref sc0 0) ((0) (vector 1 )) (else (let ((e-2 (vector-ref sc0 1))) (Core-CaseBuilder-case--caseC-32blockC-32inC-32checkGroupMatch-4184 'erased 'erased arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 e-2 (vector 0 (Core-TT-nameEq arg-3 arg-10) (Decidable-Equality-decEq_DecEq__Int arg-2 arg-9)))))))))
(define Core-CaseBuilder-case--withC-32blockC-32inC-32partition-3944 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-4)) (case (vector-ref sc0 0) ((0) (vector 0 (vector 1 arg-2 arg-1) arg-0 (vector 0 ) (vector 1 arg-3 (vector 0 )) (vector 2 ))) (else (vector 1 (vector 1 arg-2 arg-1) arg-0 (vector 0 ) (vector 1 arg-3 (vector 0 )) (vector 2 )))))))
(define Core-CaseBuilder-case--withC-32blockC-32inC-32partition-3884 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (let ((sc0 arg-7)) (case (vector-ref sc0 0) ((0) (vector 0 (vector 1 arg-2 arg-1) arg-0 (Prelude-Types-List-C-43C-43 'erased arg-5 arg-3) (vector 1 arg-6 (vector 0 )) (vector 1 (vector 1 arg-2 arg-1) arg-0 arg-3 arg-5 arg-4))) (else (vector 1 (vector 1 arg-2 arg-1) arg-0 arg-3 (vector 1 arg-6 arg-5) arg-4))))))
(define Core-CaseBuilder-case--withC-32blockC-32inC-32partition-3822 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (let ((sc0 arg-7)) (case (vector-ref sc0 0) ((0) (vector 0 (vector 1 arg-2 arg-1) arg-0 arg-3 (vector 1 arg-6 arg-5) arg-4)) (else (vector 1 (vector 1 arg-2 arg-1) arg-0 (Prelude-Types-List-C-43C-43 'erased arg-5 arg-3) (vector 1 arg-6 (vector 0 )) (vector 0 (vector 1 arg-2 arg-1) arg-0 arg-3 arg-5 arg-4)))))))
(define Core-CaseBuilder-case--substInPats-3187 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9) (let ((sc0 arg-9)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (lambda (eta-0) (let ((act-24 ((Core-CaseBuilder-substInPats arg-0 arg-1 arg-7 arg-6 arg-5 e-3) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-4 (vector-ref sc1 1))) (vector 0 e-4))) (else (let ((e-5 (vector-ref sc1 1))) (vector 1 (vector 1 e-2 e-5)))))))))))))
(define Core-CaseBuilder-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32substInPatInfo-3043 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-13 arg-14 arg-15 arg-16 arg-17 arg-18 arg-19 arg-20) (let ((sc0 arg-4)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((e-4 (vector-ref sc0 3))) (vector 0 e-2 e-3 e-4 (vector 0 arg-18))))))))
(define Core-CaseBuilder-case--caseC-32blockC-32inC-32substInPatInfo-2964 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12) (let ((sc0 arg-12)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 2))) (let ((e-3 (vector-ref sc0 3))) (let ((sc1 e-2)) (case (vector-ref sc1 0) ((1) (let ((e-7 (vector-ref sc1 3))) (lambda (eta-0) (let ((act-24 (Core-Normalise-quote_Quote__NF arg-1 arg-10 arg-11 e-7 eta-0))) (let ((sc2 act-24)) (case (vector-ref sc2 0) ((0) (let ((e-4 (vector-ref sc2 1))) (vector 0 e-4))) (else (let ((e-8 (vector-ref sc2 1))) (let ((act-25 (((e-3 arg-9) (Core-Normalise-toClosure 'erased arg-11 (vector 1 (vector 1 ) arg-3))) eta-0))) (let ((sc3 act-25)) (case (vector-ref sc3 0) ((0) (let ((e-4 (vector-ref sc3 1))) (vector 0 e-4))) (else (let ((e-9 (vector-ref sc3 1))) (let ((act-26 ((Core-CaseBuilder-updatePats arg-1 arg-0 arg-7 arg-11 e-9 arg-2) eta-0))) (let ((sc4 act-26)) (case (vector-ref sc4 0) ((0) (let ((e-4 (vector-ref sc4 1))) (vector 0 e-4))) (else (let ((e-10 (vector-ref sc4 1))) (vector 1 (vector 0 (let ((sc5 arg-4)) (let ((e-13 (vector-ref sc5 1))) (let ((e-12 (vector-ref sc5 2))) (let ((e-4 (vector-ref sc5 3))) (vector 0 e-13 e-12 e-4 (vector 0 e-8)))))) e-10))))))))))))))))))))(else (lambda (eta-0) (vector 1 (vector 0 arg-4 arg-2)))))))))(else (lambda (eta-0) (vector 1 (vector 0 arg-4 arg-2))))))))
(define Core-CaseBuilder-case--caseC-32blockC-32inC-32substInPatInfo-2892 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8) (let ((sc0 arg-4)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((e-4 (vector-ref sc0 3))) (vector 0 e-2 e-3 e-4 (vector 0 (Core-TT-substName arg-1 arg-6 arg-5 arg-8)))))))))
(define Core-CaseBuilder-case--substInPatInfo-2855 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8) (let ((sc0 arg-8)) (case (vector-ref sc0 0) ((0) (let ((e-1 (vector-ref sc0 1))) (lambda (eta-0) (vector 1 (vector 0 (let ((sc1 arg-4)) (let ((e-2 (vector-ref sc1 1))) (let ((e-3 (vector-ref sc1 2))) (let ((e-4 (vector-ref sc1 3))) (vector 0 e-2 e-3 e-4 (vector 0 (Core-TT-substName arg-1 arg-6 arg-5 e-1))))))) arg-2))))) ((1) (let ((e-3 (vector-ref sc0 1))) (lambda (eta-0) (let ((act-24 (let ((act-24 (unbox arg-7))) (vector 1 act-24)))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc1 1))) (let ((act-25 (Core-Context-clearDefs e-5 eta-0))) (let ((sc2 act-25)) (case (vector-ref sc2 0) ((0) (let ((e-2 (vector-ref sc2 1))) (vector 0 e-2))) (else (let ((e-6 (vector-ref sc2 1))) (let ((env (Core-Env-mkEnv arg-1))) (let ((act-26 ((Core-Normalise-nf arg-1 e-5 env (Core-TT-substName arg-1 arg-6 arg-5 e-3)) eta-0))) (let ((sc3 act-26)) (case (vector-ref sc3 0) ((0) (let ((e-2 (vector-ref sc3 1))) (vector 0 e-2))) (else (let ((e-7 (vector-ref sc3 1))) (let ((sc4 e-7)) (case (vector-ref sc4 0) ((0) (let ((e-2 (vector-ref sc4 2))) (let ((e-4 (vector-ref sc4 3))) (let ((sc5 e-2)) (case (vector-ref sc5 0) ((1) (let ((e-8 (vector-ref sc5 3))) (let ((act-27 (Core-Normalise-quote_Quote__NF arg-1 e-6 env e-8 eta-0))) (let ((sc6 act-27)) (case (vector-ref sc6 0) ((0) (let ((e-11 (vector-ref sc6 1))) (vector 0 e-11))) (else (let ((e-11 (vector-ref sc6 1))) (let ((act-28 (((e-4 e-5) (Core-Normalise-toClosure 'erased env (vector 1 (vector 1 ) arg-3))) eta-0))) (let ((sc7 act-28)) (case (vector-ref sc7 0) ((0) (let ((e-12 (vector-ref sc7 1))) (vector 0 e-12))) (else (let ((e-12 (vector-ref sc7 1))) (let ((act-29 ((Core-CaseBuilder-updatePats arg-1 arg-0 arg-7 env e-12 arg-2) eta-0))) (let ((sc8 act-29)) (case (vector-ref sc8 0) ((0) (let ((e-13 (vector-ref sc8 1))) (vector 0 e-13))) (else (let ((e-13 (vector-ref sc8 1))) (vector 1 (vector 0 (let ((sc9 arg-4)) (let ((e-17 (vector-ref sc9 1))) (let ((e-16 (vector-ref sc9 2))) (let ((e-15 (vector-ref sc9 3))) (vector 0 e-17 e-16 e-15 (vector 0 e-11)))))) e-13)))))))))))))))))))(else (vector 1 (vector 0 arg-4 arg-2))))))))(else (vector 1 (vector 0 arg-4 arg-2)))))))))))))))))))))))) (else (lambda (eta-0) (vector 1 (vector 0 arg-4 arg-2))))))))
(define Core-CaseBuilder-case--caseC-32blockC-32inC-32updatePats-2781 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11) (let ((sc0 arg-4)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((e-4 (vector-ref sc0 3))) (vector 0 e-2 e-3 e-4 (vector 1 arg-11))))))))
(define Core-CaseBuilder-case--updatePats-2719 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9) (let ((sc0 arg-9)) (case (vector-ref sc0 0) ((2) (lambda (eta-0) (let ((act-24 (let ((act-24 (unbox arg-7))) (vector 1 act-24)))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc1 1))) (let ((act-25 (Core-Context-clearDefs e-5 eta-0))) (let ((sc2 act-25)) (case (vector-ref sc2 0) ((0) (let ((e-2 (vector-ref sc2 1))) (vector 0 e-2))) (else (let ((e-6 (vector-ref sc2 1))) (let ((act-26 (Core-Normalise-quote_Quote__NF arg-0 e-6 arg-6 arg-5 eta-0))) (let ((sc3 act-26)) (case (vector-ref sc3 0) ((0) (let ((e-2 (vector-ref sc3 1))) (vector 0 e-2))) (else (let ((e-7 (vector-ref sc3 1))) (vector 1 (vector 1 (let ((sc4 arg-4)) (let ((e-2 (vector-ref sc4 1))) (let ((e-3 (vector-ref sc4 2))) (let ((e-4 (vector-ref sc4 3))) (vector 0 e-2 e-3 e-4 (vector 1 e-7)))))) arg-3)))))))))))))))))))(else (lambda (eta-0) (vector 1 (vector 1 arg-4 arg-3))))))))
(define Core-CaseBuilder-case--caseC-32blockC-32inC-32updatePats-2628 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-13 arg-14 arg-15 arg-16) (let ((sc0 arg-9)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((e-4 (vector-ref sc0 3))) (vector 0 e-2 e-3 e-4 (vector 0 arg-14))))))))
(define Core-CaseBuilder-case--updatePats-2543 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12) (let ((sc0 arg-12)) (case (vector-ref sc0 0) ((2) (lambda (eta-0) (let ((act-24 (let ((act-24 (unbox arg-11))) (vector 1 act-24)))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc1 1))) (let ((act-25 (Core-Context-clearDefs e-5 eta-0))) (let ((sc2 act-25)) (case (vector-ref sc2 0) ((0) (let ((e-2 (vector-ref sc2 1))) (vector 0 e-2))) (else (let ((e-6 (vector-ref sc2 1))) (let ((act-26 (Core-Normalise-quote_Quote__NF arg-0 e-6 arg-10 arg-6 eta-0))) (let ((sc3 act-26)) (case (vector-ref sc3 0) ((0) (let ((e-2 (vector-ref sc3 1))) (vector 0 e-2))) (else (let ((e-7 (vector-ref sc3 1))) (let ((act-27 (((arg-7 e-5) (Core-Normalise-toClosure 'erased arg-10 (vector 1 (vector 1 ) arg-4))) eta-0))) (let ((sc4 act-27)) (case (vector-ref sc4 0) ((0) (let ((e-2 (vector-ref sc4 1))) (vector 0 e-2))) (else (let ((e-8 (vector-ref sc4 1))) (let ((act-28 ((Core-CaseBuilder-updatePats arg-0 arg-5 arg-11 arg-10 e-8 arg-8) eta-0))) (let ((sc5 act-28)) (case (vector-ref sc5 0) ((0) (let ((e-2 (vector-ref sc5 1))) (vector 0 e-2))) (else (let ((e-9 (vector-ref sc5 1))) (vector 1 (vector 1 (let ((sc6 arg-9)) (let ((e-2 (vector-ref sc6 1))) (let ((e-3 (vector-ref sc6 2))) (let ((e-4 (vector-ref sc6 3))) (vector 0 e-2 e-3 e-4 (vector 0 e-7)))))) e-9)))))))))))))))))))))))))))))(else (lambda (eta-0) (vector 1 (vector 1 arg-9 arg-8))))))))
(define Core-CaseBuilder-n--8301-6965-updateVar (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8) (let ((sc0 arg-8)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((e-4 (vector-ref sc0 3))) (let ((sc1 e-3)) (let ((e-8 (vector-ref sc1 1))) (let ((e-9 (vector-ref sc1 2))) (let ((sc2 e-8)) (let ((e-12 (vector-ref sc2 1))) (let ((e-14 (vector-ref sc2 3))) (let ((sc3 e-14)) (case (vector-ref sc3 0) ((1) (let ((e-17 (vector-ref sc3 1))) (lambda (eta-0) (let ((act-24 ((Core-CaseBuilder-substInPats arg-1 arg-0 arg-6 arg-3 (vector 0 e-12) e-9) eta-0))) (let ((sc4 act-24)) (case (vector-ref sc4 0) ((0) (let ((e-5 (vector-ref sc4 1))) (vector 0 e-5))) (else (let ((e-5 (vector-ref sc4 1))) (vector 1 (vector 0 (vector 1 e-17 e-2) e-5 (Core-TT-substName arg-1 e-17 (vector 0 e-12) e-4)))))))))))(else (lambda (eta-0) (let ((act-24 ((Core-CaseBuilder-substInPats arg-1 arg-0 arg-6 arg-3 (Core-CaseTree-mkTerm arg-1 e-14) e-9) eta-0))) (let ((sc3 act-24)) (case (vector-ref sc3 0) ((0) (let ((e-5 (vector-ref sc3 1))) (vector 0 e-5))) (else (let ((e-5 (vector-ref sc3 1))) (vector 1 (vector 0 e-2 e-5 e-4)))))))))))))))))))))))
(define Core-CaseBuilder-n--6359-4870-update (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (let ((sc0 arg-7)) (case (vector-ref sc0 0) ((0) (let ((e-0 (vector-ref sc0 1))) (let ((e-1 (vector-ref sc0 2))) (let ((e-2 (vector-ref sc0 3))) (let ((e-3 (vector-ref sc0 4))) (vector 0 e-0 e-1 e-2 (Prelude-Types-map_Functor__List 'erased 'erased (lambda (eta-0) (Core-CaseBuilder-n--6359-4870-update 'erased 'erased 'erased arg-3 arg-4 arg-5 'erased eta-0)) e-3))))))) ((1) (let ((e-4 (vector-ref sc0 1))) (Core-CaseBuilder-case--updatePatNamesC-44update-4887 'erased 'erased 'erased arg-3 arg-4 arg-5 'erased e-4 (Data-List-lookup 'erased 'erased (vector 0 (lambda (arg-8) (lambda (arg-9) (Core-TT-C-61C-61_Eq__Name arg-8 arg-9))) (lambda (arg-8) (lambda (arg-9) (Core-TT-C-47C-61_Eq__Name arg-8 arg-9)))) e-4 arg-5))))(else arg-7)))))
(define Core-CaseBuilder-n--6339-4831-update (lambda (arg-0) (let ((sc0 arg-0)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 e-3)) (case (vector-ref sc1 0) ((1) (let ((e-4 (vector-ref sc1 1))) (vector 1 (vector 0 e-4 e-2))))(else (vector 0 )))))))(else (vector 0 ))))))
(define Core-CaseBuilder-n--9564-7887-toClosed (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-5)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 e-3)) (let ((e-4 (vector-ref sc1 1))) (let ((e-5 (vector-ref sc1 2))) (let ((e-6 (vector-ref sc1 3))) (let ((e-7 (vector-ref sc1 4))) (vector 0 (Core-CaseBuilder-n--9564-7886-close arg-0 arg-1 arg-2 arg-3 e-4 e-5 e-2 e-6) (Core-CaseBuilder-n--9564-7886-close arg-0 arg-1 arg-2 arg-3 e-4 e-5 e-2 e-7))))))))))))
(define Core-CaseBuilder-n--7231-5633-sameTypeAs (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10) (let ((sc0 arg-10)) (case (vector-ref sc0 0) ((0) (lambda (eta-0) (vector 1 (vector 0 )))) ((1) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 e-2)) (case (vector-ref sc1 0) ((0) (let ((e-5 (vector-ref sc1 1))) (lambda (eta-0) (let ((act-24 (let ((act-24 (unbox arg-7))) (vector 1 act-24)))) (let ((sc2 act-24)) (case (vector-ref sc2 0) ((0) (let ((e-4 (vector-ref sc2 1))) (vector 0 e-4))) (else (let ((e-6 (vector-ref sc2 1))) (let ((act-25 ((Core-Normalise-nf arg-2 e-6 arg-5 e-5) eta-0))) (let ((sc3 act-25)) (case (vector-ref sc3 0) ((0) (let ((e-4 (vector-ref sc3 1))) (vector 0 e-4))) (else (let ((e-7 (vector-ref sc3 1))) ((Core-CaseBuilder-case--sameTypeC-44sameTypeAs-5763 'erased 'erased arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 e-5 e-3 arg-9 e-6 e-7 (Core-CaseBuilder-n--7231-5632-headEq 'erased 'erased arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 e-7)) eta-0))))))))))))))(else (lambda (eta-0) (Core-Core-throw_Catchable__Core_Error 'erased (vector 2 arg-6 (vector 1 )) eta-0))))))))(else (lambda (eta-0) (Core-Core-throw_Catchable__Core_Error 'erased (vector 2 arg-6 (vector 1 )) eta-0)))))))
(define Core-CaseBuilder-n--7565-5928-samePatAs (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (let ((sc0 arg-6)) (case (vector-ref sc0 0) ((0) 0)(else (let ((sc0 arg-5)) (case (vector-ref sc0 0) ((0) (let ((e-0 (vector-ref sc0 1))) (let ((e-1 (vector-ref sc0 2))) (let ((e-2 (vector-ref sc0 3))) (let ((e-3 (vector-ref sc0 4))) (let ((sc1 arg-6)) (case (vector-ref sc1 0) ((1) (let ((e-6 (vector-ref sc1 1))) (let ((e-7 (vector-ref sc1 2))) (let ((sc2 e-6)) (case (vector-ref sc2 0) ((0) (let ((e-8 (vector-ref sc2 1))) (let ((e-9 (vector-ref sc2 2))) (Prelude-Basics-C-38C-38 (Core-TT-C-61C-61_Eq__Name e-0 e-8) (lambda () (Prelude-Basics-C-38C-38 (Prelude-EqOrd-C-61C-61_Eq__Int e-1 e-9) (lambda () (Core-CaseBuilder-n--7565-5928-samePatAs 'erased 'erased 'erased arg-3 arg-4 (vector 0 e-0 e-1 e-2 e-3) e-7))))))))(else 1))))))(else 1)))))))) ((1) (let ((e-4 (vector-ref sc0 1))) (let ((sc1 arg-6)) (case (vector-ref sc1 0) ((1) (let ((e-13 (vector-ref sc1 1))) (let ((e-14 (vector-ref sc1 2))) (let ((sc2 e-13)) (case (vector-ref sc2 0) ((1) (Core-CaseBuilder-n--7565-5928-samePatAs 'erased 'erased 'erased arg-3 arg-4 (vector 1 e-4) e-14))(else 1))))))(else 1)))))(else 1))))))))
(define Core-CaseBuilder-n--9564-7885-mkSubstEnv (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (let ((sc0 arg-7)) (case (vector-ref sc0 0) ((0) (vector 0 )) (else (let ((e-5 (vector-ref sc0 2))) (vector 1 (vector 1 (vector 1 ) (vector 1 arg-6 arg-5)) (Core-CaseBuilder-n--9564-7885-mkSubstEnv arg-0 arg-1 arg-2 arg-3 'erased (b+ arg-5 1 63) arg-6 e-5))))))))
(define Core-CaseBuilder-n--9254-7531-mkPatClausesFrom (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (let ((sc0 arg-7)) (case (vector-ref sc0 0) ((0) (lambda (eta-0) (vector 1 (vector 0 )))) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (lambda (eta-0) (let ((act-24 ((Core-CaseBuilder-mkPatClause arg-5 arg-4 arg-6 arg-3 e-2) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-4 (vector-ref sc1 1))) (vector 0 e-4))) (else (let ((e-5 (vector-ref sc1 1))) (let ((act-25 ((Core-CaseBuilder-n--9254-7531-mkPatClausesFrom arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 e-3) eta-0))) (let ((sc2 act-25)) (case (vector-ref sc2 0) ((0) (let ((e-4 (vector-ref sc2 1))) (vector 0 e-4))) (else (let ((e-6 (vector-ref sc2 1))) (vector 1 (vector 1 e-5 e-6))))))))))))))))))))
(define Core-CaseBuilder-n--8934-7141-mkNames (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9) (let ((sc0 arg-6)) (case (vector-ref sc0 0) ((0) (let ((sc1 arg-7)) (let ((sc2 arg-8)) (lambda (eta-0) (vector 1 (vector 0 )))))) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 arg-7)) (let ((e-8 (vector-ref sc1 1))) (let ((e-9 (vector-ref sc1 2))) (let ((sc2 arg-8)) (let ((e-16 (vector-ref sc2 1))) (lambda (eta-0) (let ((act-24 (let ((act-24 (unbox arg-5))) (vector 1 act-24)))) (let ((sc3 act-24)) (case (vector-ref sc3 0) ((0) (let ((e-4 (vector-ref sc3 1))) (vector 0 e-4))) (else (let ((e-5 (vector-ref sc3 1))) (let ((act-25 (Core-Context-clearDefs e-5 eta-0))) (let ((sc4 act-25)) (case (vector-ref sc4 0) ((0) (let ((e-4 (vector-ref sc4 1))) (vector 0 e-4))) (else (let ((e-6 (vector-ref sc4 1))) (let ((act-26 (let ((sc5 arg-9)) (case (vector-ref sc5 0) ((0) (vector 1 (vector 0 (vector 0 ) (vector 2 )))) (else (let ((e-4 (vector-ref sc5 1))) (let ((sc6 e-4)) (case (vector-ref sc6 0) ((0) (let ((e-10 (vector-ref sc6 2))) (let ((e-7 (vector-ref sc6 3))) (let ((sc7 e-10)) (case (vector-ref sc7 0) ((1) (let ((e-12 (vector-ref sc7 3))) (let ((act-26 (((e-7 e-5) (Core-Normalise-toClosure 'erased (vector 0 ) (vector 1 (vector 1 ) e-2))) eta-0))) (let ((sc8 act-26)) (case (vector-ref sc8 0) ((0) (let ((e-15 (vector-ref sc8 1))) (vector 0 e-15))) (else (let ((e-15 (vector-ref sc8 1))) (let ((act-27 (Core-Normalise-quote_Quote__NF (vector 0 ) e-6 (vector 0 ) e-12 eta-0))) (let ((sc9 act-27)) (case (vector-ref sc9 0) ((0) (let ((e-17 (vector-ref sc9 1))) (vector 0 e-17))) (else (let ((e-17 (vector-ref sc9 1))) (vector 1 (vector 0 (vector 1 e-15) (vector 0 (Core-TT-embed 'erased 'erased e-17))))))))))))))))(else (let ((act-26 (Core-Normalise-quote_Quote__NF (vector 0 ) e-6 (vector 0 ) e-4 eta-0))) (let ((sc7 act-26)) (case (vector-ref sc7 0) ((0) (let ((e-12 (vector-ref sc7 1))) (vector 0 e-12))) (else (let ((e-12 (vector-ref sc7 1))) (vector 1 (vector 0 (vector 0 ) (vector 1 (Core-TT-embed 'erased 'erased e-12)))))))))))))))(else (let ((act-26 (Core-Normalise-quote_Quote__NF (vector 0 ) e-6 (vector 0 ) e-4 eta-0))) (let ((sc6 act-26)) (case (vector-ref sc6 0) ((0) (let ((e-7 (vector-ref sc6 1))) (vector 0 e-7))) (else (let ((e-7 (vector-ref sc6 1))) (vector 1 (vector 0 (vector 0 ) (vector 1 (Core-TT-embed 'erased 'erased e-7)))))))))))))))))) (let ((sc5 act-26)) (case (vector-ref sc5 0) ((0) (let ((e-4 (vector-ref sc5 1))) (vector 0 e-4))) (else (let ((e-7 (vector-ref sc5 1))) (let ((act-27 ((Core-CaseBuilder-n--8934-7141-mkNames arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 e-3 e-9 e-16 (Builtin-fst 'erased 'erased e-7)) eta-0))) (let ((sc6 act-27)) (case (vector-ref sc6 0) ((0) (let ((e-4 (vector-ref sc6 1))) (vector 0 e-4))) (else (let ((e-10 (vector-ref sc6 1))) (vector 1 (vector 1 (vector 0 0 e-2 e-8 (Builtin-snd 'erased 'erased e-7)) (Core-CaseBuilder-weaken 'erased e-2 e-3 e-10))))))))))))))))))))))))))))))))))))
(define Core-CaseBuilder-n--9564-7884-labelPat (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (let ((sc0 arg-6)) (case (vector-ref sc0 0) ((0) (vector 0 )) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (vector 1 (vector 0 (Prelude-Types-Strings-C-43C-43 "pat" (Prelude-Types-Strings-C-43C-43 (Prelude-Show-show_Show__Int arg-5) ":")) e-2) (Core-CaseBuilder-n--9564-7884-labelPat arg-0 arg-1 arg-2 arg-3 'erased (b+ arg-5 1 63) e-3)))))))))
(define Core-CaseBuilder-n--7231-5632-headEq (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10) (let ((sc0 arg-9)) (case (vector-ref sc0 0) ((0) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 e-3)) (case (vector-ref sc1 0) ((1) (let ((sc2 arg-10)) (case (vector-ref sc2 0) ((0) (let ((e-21 (vector-ref sc2 2))) (let ((sc3 e-21)) (case (vector-ref sc3 0) ((1) 0)(else (let ((sc3 arg-10)) (case (vector-ref sc3 0) ((5) 0)(else 1))))))))(else (let ((sc2 arg-10)) (case (vector-ref sc2 0) ((5) 0)(else 1)))))))(else (let ((sc1 arg-10)) (case (vector-ref sc1 0) ((5) 0)(else 1)))))))) ((3) (let ((e-6 (vector-ref sc0 1))) (let ((sc1 arg-10)) (case (vector-ref sc1 0) ((3) (let ((e-28 (vector-ref sc1 1))) (Core-TT-C-61C-61_Eq__Name e-6 e-28)))(else (let ((sc1 arg-10)) (case (vector-ref sc1 0) ((5) 0)(else 1)))))))) ((4) (let ((sc1 arg-10)) (case (vector-ref sc1 0) ((4) 0)(else (let ((sc1 arg-10)) (case (vector-ref sc1 0) ((5) 0)(else 1))))))) ((1) (let ((e-12 (vector-ref sc0 1))) (let ((sc1 e-12)) (case (vector-ref sc1 0) ((1) (let ((e-35 (vector-ref sc1 2))) (let ((sc2 arg-10)) (case (vector-ref sc2 0) ((1) (let ((e-37 (vector-ref sc2 1))) (let ((sc3 e-37)) (case (vector-ref sc3 0) ((1) (let ((e-41 (vector-ref sc3 2))) (Core-TT-C-61C-61_Eq__Name e-35 e-41)))(else (let ((sc3 arg-10)) (case (vector-ref sc3 0) ((5) 0)(else 1))))))))(else (let ((sc2 arg-10)) (case (vector-ref sc2 0) ((5) 0)(else 1))))))))(else (let ((sc1 arg-10)) (case (vector-ref sc1 0) ((5) 0)(else 1)))))))) ((5) 0)(else (let ((sc0 arg-10)) (case (vector-ref sc0 0) ((5) 0)(else 1))))))))
(define Core-CaseBuilder-n--9254-7532-getNames (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (let ((sc0 arg-7)) (case (vector-ref sc0 0) ((0) (vector 0 )) (else (let ((e-3 (vector-ref sc0 2))) (vector 1 (vector 1 "arg" arg-6) (Core-CaseBuilder-n--9254-7532-getNames arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 (b+ arg-6 1 63) e-3))))))))
(define Core-CaseBuilder-n--5086-3755-getClauseType (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11) (let ((sc0 arg-11)) (case (vector-ref sc0 0) ((0) (vector 0 ))(else (Core-CaseBuilder-n--5086-3754-clauseTypeC-39 'erased 'erased 'erased arg-3 arg-4 'erased arg-6 arg-7 arg-8 arg-9 arg-10 arg-11))))))
(define Core-CaseBuilder-n--9564-7801-getArgs (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-4)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 2))) (let ((e-3 (vector-ref sc0 3))) (let ((sc1 e-2)) (case (vector-ref sc1 0) ((1) (lambda (eta-0) (let ((act-24 (let ((act-24 (unbox arg-2))) (vector 1 act-24)))) (let ((sc2 act-24)) (case (vector-ref sc2 0) ((0) (let ((e-4 (vector-ref sc2 1))) (vector 0 e-4))) (else (let ((e-8 (vector-ref sc2 1))) (let ((act-25 (((e-3 e-8) (Core-Normalise-toClosure 'erased (vector 0 ) (vector 6 ))) eta-0))) (let ((sc3 act-25)) (case (vector-ref sc3 0) ((0) (let ((e-4 (vector-ref sc3 1))) (vector 0 e-4))) (else (let ((e-9 (vector-ref sc3 1))) (let ((act-26 ((Core-CaseBuilder-n--9564-7801-getArgs arg-0 arg-1 arg-2 arg-3 e-9) eta-0))) (let ((sc4 act-26)) (case (vector-ref sc4 0) ((0) (let ((e-4 (vector-ref sc4 1))) (vector 0 e-4))) (else (let ((e-10 (vector-ref sc4 1))) (vector 1 (vector 1 (vector 1 "arg" arg-3) e-10)))))))))))))))))))(else (lambda (eta-0) (vector 1 (vector 0 )))))))))(else (lambda (eta-0) (vector 1 (vector 0 ))))))))
(define Core-CaseBuilder-n--6494-4985-gc (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12) (let ((sc0 arg-12)) (case (vector-ref sc0 0) ((0) (lambda (eta-0) (vector 1 arg-11))) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 e-2)) (let ((e-7 (vector-ref sc1 2))) (let ((e-8 (vector-ref sc1 3))) (let ((sc2 e-7)) (let ((e-12 (vector-ref sc2 1))) (let ((e-13 (vector-ref sc2 2))) (let ((sc3 e-12)) (let ((e-16 (vector-ref sc3 1))) (let ((e-18 (vector-ref sc3 3))) (lambda (eta-0) (let ((act-24 ((Core-CaseBuilder-n--6494-4984-addGroup arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 'erased arg-9 arg-10 e-16 e-18 'erased e-13 e-8 arg-11) eta-0))) (let ((sc4 act-24)) (case (vector-ref sc4 0) ((0) (let ((e-4 (vector-ref sc4 1))) (vector 0 e-4))) (else (let ((e-5 (vector-ref sc4 1))) ((Core-CaseBuilder-n--6494-4985-gc arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 e-5 e-3) eta-0)))))))))))))))))))))))
(define Core-CaseBuilder-n--9564-7886-close (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (Core-TT-SubstEnv-substs arg-4 (vector 0 ) (Core-CaseBuilder-n--9564-7885-mkSubstEnv arg-0 arg-1 arg-2 arg-3 'erased 0 arg-6 arg-5) arg-7)))
(define Core-CaseBuilder-n--5086-3754-clauseTypeC-39 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11) (let ((sc0 arg-11)) (case (vector-ref sc0 0) ((0) (vector 0 ))(else (vector 1 ))))))
(define Core-CaseBuilder-n--8286-6732-altGroups (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11) (let ((sc0 arg-11)) (case (vector-ref sc0 0) ((0) (Prelude-Types-maybe 'erased 'erased (lambda () (lambda (eta-0) (vector 1 (vector 0 )))) (lambda () (lambda (e) (lambda (eta-0) (vector 1 (vector 1 (vector 1 e) (vector 0 )))))) arg-4)) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 e-2)) (let ((e-6 (vector-ref sc1 1))) (let ((e-7 (vector-ref sc1 2))) (let ((e-8 (vector-ref sc1 3))) (let ((e-9 (vector-ref sc1 4))) (lambda (eta-0) (let ((act-24 ((Core-CaseBuilder-match (Prelude-Types-List-C-43C-43 'erased e-6 arg-3) (Prelude-Types-List-C-43C-43 'erased e-6 arg-1) arg-10 arg-9 arg-8 e-9 (Prelude-Types-map_Functor__Maybe 'erased 'erased (lambda (arg-12) (Core-CaseTree-weakenNs_Weaken__CaseTree arg-3 e-6 arg-12)) arg-4)) eta-0))) (let ((sc2 act-24)) (case (vector-ref sc2 0) ((0) (let ((e-4 (vector-ref sc2 1))) (vector 0 e-4))) (else (let ((e-5 (vector-ref sc2 1))) (let ((act-25 ((Core-CaseBuilder-n--8286-6732-altGroups arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 'erased arg-8 arg-9 arg-10 e-3) eta-0))) (let ((sc3 act-25)) (case (vector-ref sc3 0) ((0) (let ((e-4 (vector-ref sc3 1))) (vector 0 e-4))) (else (let ((e-10 (vector-ref sc3 1))) (vector 1 (vector 1 (vector 0 e-7 e-8 e-6 e-5) e-10)))))))))))))))))))))))))
(define Core-CaseBuilder-n--6494-4984-addGroup (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-13 arg-14 arg-15 arg-16) (let ((sc0 arg-12)) (case (vector-ref sc0 0) ((0) (let ((e-0 (vector-ref sc0 1))) (let ((e-1 (vector-ref sc0 2))) (let ((e-2 (vector-ref sc0 3))) (let ((e-3 (vector-ref sc0 4))) (Core-CaseBuilder-case--groupConsC-44addGroup-5414 arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 'erased arg-9 arg-10 arg-11 e-3 e-2 e-1 e-0 arg-16 arg-15 arg-14 'erased (Prelude-Types-C-61C-61_Eq__Nat e-2 (Prelude-Types-List-length 'erased e-3))))))))(else (lambda (eta-0) (vector 1 arg-16)))))))
(define Core-CaseBuilder-n--6494-4983-addConG (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-13 arg-14 arg-15) (let ((sc0 arg-15)) (case (vector-ref sc0 0) ((0) (lambda (eta-0) (let ((act-24 ((Core-CaseBuilder-case--groupConsC-44addConG-5097 arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-14 arg-9 arg-13 arg-12 arg-11 arg-10 (Core-TT-C-61C-61_Eq__Name arg-10 (vector 0 "->"))) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc1 1))) (let ((act-25 ((Core-CaseBuilder-nextNames arg-8 arg-7 arg-6 "e" arg-12 (vector 1 e-5)) eta-0))) (let ((sc2 act-25)) (case (vector-ref sc2 0) ((0) (let ((e-2 (vector-ref sc2 1))) (vector 0 e-2))) (else (let ((e-6 (vector-ref sc2 1))) (let ((sc3 e-6)) (let ((e-2 (vector-ref sc3 1))) (let ((e-3 (vector-ref sc3 2))) (let ((patsC-39 (Core-CaseBuilder-updatePatNames 'erased 'erased (Core-CaseBuilder-updateNames (Data-List-zip 'erased 'erased e-2 arg-12)) (Core-CaseBuilder-weakenNs 'erased arg-8 e-2 arg-13)))) (let ((clause (vector 0 arg-4 (Core-CaseBuilder-C-43C-43 'erased 'erased 'erased e-3 patsC-39) (Core-TT-weakenNs_Weaken__Term arg-8 e-2 arg-14)))) (vector 1 (vector 1 (vector 0 e-2 arg-10 arg-11 (vector 1 clause (vector 0 ))) (vector 0 )))))))))))))))))))) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (Core-CaseBuilder-with--groupConsC-44addConG-5301 arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-9 arg-8 e-2 arg-12 arg-11 arg-10 (Core-CaseBuilder-checkGroupMatch 'erased 'erased (vector 0 arg-10 arg-11) arg-12 e-2) e-3 arg-14 arg-13))))))))
(define Core-CaseBuilder-weaken_Weaken__ArgType (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((0) (let ((e-1 (vector-ref sc0 1))) (vector 0 (Core-TT-weaken_Weaken__Term arg-0 arg-1 e-1)))) ((1) (let ((e-3 (vector-ref sc0 1))) (vector 1 (Core-TT-weaken_Weaken__Term arg-0 arg-1 e-3)))) (else (vector 2 ))))))
(define Core-CaseBuilder-weaken_Weaken__C-40PatInfoC-32C-36pC-41 (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((e-4 (vector-ref sc0 3))) (let ((e-6 (vector-ref sc0 4))) (vector 0 (+ 1 e-2) e-3 e-4 (Core-CaseBuilder-weaken_Weaken__ArgType arg-1 arg-2 e-6)))))))))
(define Core-CaseBuilder-weakenNs_Weaken__C-40PatInfoC-32C-36pC-41 (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((0) arg-3) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (Core-CaseBuilder-weaken_Weaken__C-40PatInfoC-32C-36pC-41 'erased e-2 (Prelude-Types-List-C-43C-43 'erased e-3 arg-1) (Core-CaseBuilder-weakenNs_Weaken__C-40PatInfoC-32C-36pC-41 'erased arg-1 e-3 arg-3)))))))))
(define Core-CaseBuilder-__Impl_Weaken_C-40PatInfoC-32C-36pC-41 (lambda (arg-0) (vector 0 (lambda (n) (lambda (vars) (lambda (arg-2952) (Core-CaseBuilder-weaken_Weaken__C-40PatInfoC-32C-36pC-41 'erased n vars arg-2952)))) (lambda (vars) (lambda (ns) (lambda (arg-2956) (Core-CaseBuilder-weakenNs_Weaken__C-40PatInfoC-32C-36pC-41 'erased vars ns arg-2956)))))))
(define Core-CaseBuilder-weakenNs (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((0) (vector 0 )) (else (let ((e-4 (vector-ref sc0 1))) (let ((e-5 (vector-ref sc0 2))) (vector 1 (Core-CaseBuilder-weakenNs_Weaken__C-40PatInfoC-32C-36pC-41 'erased arg-1 arg-2 e-4) (Core-CaseBuilder-weakenNs 'erased arg-1 arg-2 e-5)))))))))
(define Core-CaseBuilder-weaken (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((0) (vector 0 )) (else (let ((e-4 (vector-ref sc0 1))) (let ((e-5 (vector-ref sc0 2))) (vector 1 (Core-CaseBuilder-weaken_Weaken__C-40PatInfoC-32C-36pC-41 'erased arg-1 arg-2 e-4) (Core-CaseBuilder-weaken 'erased arg-1 arg-2 e-5)))))))))
(define Core-CaseBuilder-varRule (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 ext-0) (let ((act-24 ((Core-Core-traverse 'erased 'erased (lambda (eta-0) (Core-CaseBuilder-n--8301-6965-updateVar arg-2 arg-1 arg-7 arg-0 arg-6 arg-5 arg-4 arg-3 eta-0)) arg-6) ext-0))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) ((Core-CaseBuilder-match arg-1 arg-2 arg-3 arg-4 arg-5 e-5 arg-7) ext-0))))))))
(define Core-CaseBuilder-updatePats (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-1)) (case (vector-ref sc0 0) ((0) (let ((sc1 arg-5)) (lambda (eta-0) (vector 1 (vector 0 ))))) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 arg-4)) (case (vector-ref sc1 0) ((0) (let ((e-11 (vector-ref sc1 1))) (let ((e-12 (vector-ref sc1 2))) (let ((e-13 (vector-ref sc1 3))) (let ((sc2 e-12)) (case (vector-ref sc2 0) ((1) (let ((e-15 (vector-ref sc2 1))) (let ((e-16 (vector-ref sc2 2))) (let ((e-17 (vector-ref sc2 3))) (let ((sc3 arg-5)) (case (vector-ref sc3 0) ((1) (let ((e-21 (vector-ref sc3 1))) (let ((e-22 (vector-ref sc3 2))) (Core-CaseBuilder-case--updatePats-2543 arg-0 e-11 e-15 e-16 e-2 e-3 e-17 e-13 e-22 e-21 arg-3 arg-2 (let ((sc4 e-21)) (let ((e-6 (vector-ref sc4 4))) e-6))))))(else (let ((sc3 arg-5)) (let ((e-8 (vector-ref sc3 1))) (let ((e-9 (vector-ref sc3 2))) (let ((todo (vector 1 e-2 e-3))) (Core-CaseBuilder-case--updatePats-2719 arg-0 e-3 e-2 e-9 e-8 arg-4 arg-3 arg-2 todo (let ((sc4 e-8)) (let ((e-6 (vector-ref sc4 4))) e-6))))))))))))))(else (let ((sc2 arg-5)) (let ((e-8 (vector-ref sc2 1))) (let ((e-9 (vector-ref sc2 2))) (let ((todo (vector 1 e-2 e-3))) (Core-CaseBuilder-case--updatePats-2719 arg-0 e-3 e-2 e-9 e-8 arg-4 arg-3 arg-2 todo (let ((sc3 e-8)) (let ((e-6 (vector-ref sc3 4))) e-6))))))))))))))(else (let ((sc1 arg-5)) (let ((e-8 (vector-ref sc1 1))) (let ((e-9 (vector-ref sc1 2))) (let ((todo (vector 1 e-2 e-3))) (Core-CaseBuilder-case--updatePats-2719 arg-0 e-3 e-2 e-9 e-8 arg-4 arg-3 arg-2 todo (let ((sc2 e-8)) (let ((e-6 (vector-ref sc2 4))) e-6)))))))))))))))))
(define Core-CaseBuilder-updatePatNames (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((0) (vector 0 )) (else (let ((e-4 (vector-ref sc0 1))) (let ((e-5 (vector-ref sc0 2))) (vector 1 (let ((sc1 e-4)) (let ((e-2 (vector-ref sc1 1))) (let ((e-3 (vector-ref sc1 2))) (let ((e-7 (vector-ref sc1 3))) (let ((e-6 (vector-ref sc1 4))) (vector 0 e-2 e-3 (Core-CaseBuilder-n--6359-4870-update 'erased 'erased 'erased e-5 e-4 arg-2 'erased e-7) e-6)))))) (Core-CaseBuilder-updatePatNames 'erased 'erased arg-2 e-5)))))))))
(define Core-CaseBuilder-updateNames (lambda (ext-0) (Data-List-mapMaybe 'erased 'erased (lambda (eta-0) (Core-CaseBuilder-n--6339-4831-update eta-0)) ext-0)))
(define Core-CaseBuilder-toPatClause (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (Core-CaseBuilder-case--toPatClause-7651 e-2 e-3 arg-1 arg-0 (Core-TT-getFnArgs 'erased e-2)))))))
(define Core-CaseBuilder-tail (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (let ((e-4 (vector-ref sc0 2))) e-4))))
(define Core-CaseBuilder-substInPats (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-1)) (case (vector-ref sc0 0) ((0) (let ((sc1 arg-5)) (lambda (eta-0) (vector 1 (vector 0 ))))) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 arg-5)) (let ((e-8 (vector-ref sc1 1))) (let ((e-9 (vector-ref sc1 2))) (lambda (eta-0) (let ((act-24 ((Core-CaseBuilder-substInPatInfo e-2 arg-0 e-3 arg-2 arg-3 arg-4 e-8 e-9) eta-0))) (let ((sc2 act-24)) (case (vector-ref sc2 0) ((0) (let ((e-4 (vector-ref sc2 1))) (vector 0 e-4))) (else (let ((e-5 (vector-ref sc2 1))) (let ((sc3 e-5)) (let ((e-6 (vector-ref sc3 1))) (let ((e-4 (vector-ref sc3 2))) (let ((act-25 ((Core-CaseBuilder-substInPats arg-0 e-3 arg-2 arg-3 arg-4 e-4) eta-0))) (let ((sc4 act-25)) (case (vector-ref sc4 0) ((0) (let ((e-7 (vector-ref sc4 1))) (vector 0 e-7))) (else (let ((e-7 (vector-ref sc4 1))) (vector 1 (vector 1 e-6 e-7))))))))))))))))))))))))))
(define Core-CaseBuilder-substInPatInfo (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (Core-CaseBuilder-case--substInPatInfo-2855 arg-2 arg-1 arg-7 arg-0 arg-6 arg-5 arg-4 arg-3 (let ((sc0 arg-6)) (let ((e-6 (vector-ref sc0 4))) e-6)))))
(define Core-CaseBuilder-substInClause (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-4)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((e-4 (vector-ref sc0 3))) (let ((sc1 e-3)) (let ((e-8 (vector-ref sc1 1))) (let ((e-9 (vector-ref sc1 2))) (let ((sc2 e-8)) (let ((e-12 (vector-ref sc2 1))) (let ((e-13 (vector-ref sc2 2))) (let ((e-14 (vector-ref sc2 3))) (let ((e-16 (vector-ref sc2 4))) (lambda (eta-0) (let ((act-24 ((Core-CaseBuilder-substInPats arg-1 arg-2 arg-3 arg-0 (Core-CaseTree-mkTerm arg-1 e-14) e-9) eta-0))) (let ((sc3 act-24)) (case (vector-ref sc3 0) ((0) (let ((e-5 (vector-ref sc3 1))) (vector 0 e-5))) (else (let ((e-5 (vector-ref sc3 1))) (vector 1 (vector 0 e-2 (vector 1 (vector 0 e-12 e-13 e-14 e-16) e-5) e-4))))))))))))))))))))))
(define Core-CaseBuilder-simpleCase (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 ext-0) (let ((act-24 ((Core-Core-traverse 'erased 'erased (lambda (eta-0) (Core-CaseBuilder-toPatClause arg-0 arg-1 eta-0)) arg-4) ext-0))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (let ((act-25 (let ((act-25 (unbox arg-0))) (vector 1 act-25)))) (let ((sc1 act-25)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else ((Core-CaseBuilder-patCompile arg-0 arg-1 arg-2 e-5 arg-3) ext-0))))))))))))
(define Core-CaseBuilder-shuffleVars (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-5)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((e-4 (vector-ref sc0 3))) (vector 0 e-2 (Core-CaseBuilder-moveFirst 'erased 'erased 'erased arg-3 'erased e-3) e-4)))))))
(define Core-CaseBuilder-sameType (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (let ((sc0 arg-7)) (case (vector-ref sc0 0) ((0) (lambda (eta-0) (vector 1 (vector 0 )))) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (lambda (eta-0) (let ((act-24 (let ((act-24 (unbox arg-4))) (vector 1 act-24)))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-4 (vector-ref sc1 1))) (vector 0 e-4))) (else (let ((e-5 (vector-ref sc1 1))) ((Core-CaseBuilder-case--sameType-5846 'erased 'erased arg-2 e-2 e-3 arg-6 arg-5 arg-4 arg-3 e-5 (Core-CaseBuilder-getFirstArgType 'erased 'erased 'erased e-2)) eta-0))))))))))))))
(define Core-CaseBuilder-samePat (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((0) 0) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (Core-CaseBuilder-n--7565-5928-samePatAs 'erased 'erased 'erased e-2 e-3 (Core-CaseBuilder-getFirstPat 'erased 'erased 'erased e-2) (Prelude-Types-map_Functor__List 'erased 'erased (lambda (eta-0) (Core-CaseBuilder-getFirstPat 'erased 'erased 'erased eta-0)) e-3)))))))))
(define Core-CaseBuilder-pickNext (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((0) (Core-CaseBuilder-case--pickNext-6192 arg-0 arg-1 arg-6 arg-5 arg-4 arg-3 (Core-CaseBuilder-samePat 'erased 'erased 'erased arg-6))) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (Core-CaseBuilder-case--pickNext-6305 arg-0 arg-1 e-2 e-3 arg-6 arg-5 arg-4 arg-3 (Core-CaseBuilder-samePat 'erased 'erased 'erased arg-6)))))))))
(define Core-CaseBuilder-patCompile (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((0) (Prelude-Types-maybe 'erased 'erased (lambda () (lambda (eta-0) (vector 1 (vector 0 (vector 0 ) (vector 2 "No definition"))))) (lambda () (lambda (e) (lambda (eta-0) (vector 1 (vector 0 (vector 0 ) e))))) arg-4)) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((ns (Core-CaseBuilder-n--9254-7532-getNames e-2 e-3 arg-4 arg-2 arg-1 arg-0 0 (Builtin-fst 'erased 'erased e-2)))) (lambda (eta-0) (let ((act-24 ((Core-CaseBuilder-n--9254-7531-mkPatClausesFrom e-2 e-3 arg-4 arg-2 arg-1 arg-0 ns (vector 1 e-2 e-3)) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-4 (vector-ref sc1 1))) (vector 0 e-4))) (else (let ((e-5 (vector-ref sc1 1))) (let ((act-25 (Core-Core-newRef 'erased 'erased (vector "Core.CaseBuilder.PName" ) 0 eta-0))) (let ((sc2 act-25)) (case (vector-ref sc2 0) ((0) (let ((e-4 (vector-ref sc2 1))) (vector 0 e-4))) (else (let ((e-6 (vector-ref sc2 1))) (let ((act-26 ((Core-CaseBuilder-match ns ns e-6 arg-0 arg-1 e-5 (Prelude-Types-map_Functor__Maybe 'erased 'erased (lambda (arg-5) (Core-CaseTree-weakenNs_Weaken__CaseTree (vector 0 ) ns arg-5)) arg-4)) eta-0))) (let ((sc3 act-26)) (case (vector-ref sc3 0) ((0) (let ((e-4 (vector-ref sc3 1))) (vector 0 e-4))) (else (let ((e-7 (vector-ref sc3 1))) (vector 1 (vector 0 ns e-7))))))))))))))))))))))))))
(define Core-CaseBuilder-PatInfo-pat (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (let ((e-4 (vector-ref sc0 3))) e-4))))
(define Core-CaseBuilder-partition (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((0) (vector 2 )) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (Core-CaseBuilder-with--partition-3805 arg-0 arg-1 arg-2 e-3 (Core-CaseBuilder-partition arg-0 arg-1 arg-2 e-3) e-2))))))))
(define Core-CaseBuilder-nextNames (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-4)) (case (vector-ref sc0 0) ((0) (lambda (eta-0) (vector 1 (vector 0 (vector 0 ) (vector 0 ))))) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (lambda (eta-0) (let ((act-24 (let ((act-24 (unbox arg-2))) (vector 1 act-24)))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-4 (vector-ref sc1 1))) (vector 0 e-4))) (else (let ((e-5 (vector-ref sc1 1))) (let ((act-25 (Core-Context-clearDefs e-5 eta-0))) (let ((sc2 act-25)) (case (vector-ref sc2 0) ((0) (let ((e-4 (vector-ref sc2 1))) (vector 0 e-4))) (else (let ((e-6 (vector-ref sc2 1))) (let ((act-26 (Core-CaseBuilder-nextName arg-1 arg-3 eta-0))) (let ((sc3 act-26)) (case (vector-ref sc3 0) ((0) (let ((e-4 (vector-ref sc3 1))) (vector 0 e-4))) (else (let ((e-7 (vector-ref sc3 1))) (let ((env (Core-Env-mkEnv arg-0))) (let ((act-27 (let ((sc4 arg-5)) (case (vector-ref sc4 0) ((0) (vector 1 (vector 0 (vector 0 ) (vector 2 )))) (else (let ((e-4 (vector-ref sc4 1))) (let ((sc5 e-4)) (case (vector-ref sc5 0) ((0) (let ((e-9 (vector-ref sc5 2))) (let ((e-8 (vector-ref sc5 3))) (let ((sc6 e-9)) (case (vector-ref sc6 0) ((1) (let ((e-11 (vector-ref sc6 3))) (let ((sc7 e-11)) (case (vector-ref sc7 0) ((5) (let ((act-27 (((e-8 e-5) (Core-Normalise-toClosure 'erased env (vector 1 (vector 1 ) e-7))) eta-0))) (let ((sc8 act-27)) (case (vector-ref sc8 0) ((0) (let ((e-14 (vector-ref sc8 1))) (vector 0 e-14))) (else (let ((e-14 (vector-ref sc8 1))) (vector 1 (vector 0 (vector 1 e-14) (vector 2 )))))))))(else (let ((act-27 (((e-8 e-5) (Core-Normalise-toClosure 'erased env (vector 1 (vector 1 ) e-7))) eta-0))) (let ((sc7 act-27)) (case (vector-ref sc7 0) ((0) (let ((e-14 (vector-ref sc7 1))) (vector 0 e-14))) (else (let ((e-14 (vector-ref sc7 1))) (let ((act-28 (Core-Normalise-quote_Quote__NF arg-0 e-6 env e-11 eta-0))) (let ((sc8 act-28)) (case (vector-ref sc8 0) ((0) (let ((e-15 (vector-ref sc8 1))) (vector 0 e-15))) (else (let ((e-15 (vector-ref sc8 1))) (vector 1 (vector 0 (vector 1 e-14) (vector 0 e-15))))))))))))))))))(else (let ((act-27 (Core-Normalise-quote_Quote__NF arg-0 e-6 env e-4 eta-0))) (let ((sc6 act-27)) (case (vector-ref sc6 0) ((0) (let ((e-11 (vector-ref sc6 1))) (vector 0 e-11))) (else (let ((e-11 (vector-ref sc6 1))) (vector 1 (vector 0 (vector 0 ) (vector 1 e-11))))))))))))))(else (let ((act-27 (Core-Normalise-quote_Quote__NF arg-0 e-6 env e-4 eta-0))) (let ((sc5 act-27)) (case (vector-ref sc5 0) ((0) (let ((e-8 (vector-ref sc5 1))) (vector 0 e-8))) (else (let ((e-8 (vector-ref sc5 1))) (vector 1 (vector 0 (vector 0 ) (vector 1 e-8))))))))))))))))) (let ((sc4 act-27)) (case (vector-ref sc4 0) ((0) (let ((e-4 (vector-ref sc4 1))) (vector 0 e-4))) (else (let ((e-8 (vector-ref sc4 1))) (let ((act-28 ((Core-CaseBuilder-nextNames arg-0 arg-1 arg-2 arg-3 e-3 (Builtin-fst 'erased 'erased e-8)) eta-0))) (let ((sc5 act-28)) (case (vector-ref sc5 0) ((0) (let ((e-4 (vector-ref sc5 1))) (vector 0 e-4))) (else (let ((e-9 (vector-ref sc5 1))) (let ((sc6 e-9)) (let ((e-10 (vector-ref sc6 1))) (let ((e-4 (vector-ref sc6 2))) (let ((argTy (let ((_-0 (vector 0 e-10 e-4))) (Core-CaseBuilder-case--caseC-32blockC-32inC-32nextNames-4421 e-2 e-3 arg-0 arg-5 arg-3 arg-2 arg-1 e-5 e-6 e-7 env e-8 e-10 e-4 _-0 (Builtin-snd 'erased 'erased e-8))))) (vector 1 (vector 0 (vector 1 e-7 e-10) (vector 1 (vector 0 0 e-7 e-2 argTy) (Core-CaseBuilder-weaken 'erased e-7 (Prelude-Types-List-C-43C-43 'erased e-10 arg-0) e-4))))))))))))))))))))))))))))))))))))))))))
(define Core-CaseBuilder-nextName (lambda (arg-0 arg-1 ext-0) (let ((act-24 (let ((act-24 (unbox arg-0))) (vector 1 act-24)))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (let ((act-25 (let ((act-25 (set-box! arg-0 (b+ e-5 1 63)))) (vector 1 act-25)))) (let ((sc1 act-25)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (vector 1 (vector 1 arg-1 e-5)))))))))))))
(define Core-CaseBuilder-newPats (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((0) (let ((sc1 arg-4)) (vector 0 ))) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 arg-4)) (let ((e-12 (vector-ref sc1 1))) (let ((sc2 arg-5)) (let ((e-16 (vector-ref sc2 1))) (let ((e-17 (vector-ref sc2 2))) (vector 1 (let ((sc3 e-16)) (let ((e-7 (vector-ref sc3 1))) (let ((e-5 (vector-ref sc3 2))) (let ((e-6 (vector-ref sc3 4))) (vector 0 e-7 e-5 e-2 e-6))))) (Core-CaseBuilder-newPats 'erased 'erased 'erased e-3 e-12 e-17))))))))))))))
(define Core-CaseBuilder-moveFirst (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (vector 1 (Core-CaseBuilder-getPat 'erased 'erased 'erased arg-3 'erased arg-5) (Core-CaseBuilder-dropPat 'erased 'erased 'erased arg-3 'erased arg-5))))
(define Core-CaseBuilder-mkPatClause (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-4)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (Prelude-Types-maybe 'erased 'erased (lambda () (lambda (eta-0) (Core-Core-throw_Catchable__Core_Error 'erased (vector 2 arg-1 (vector 0 )) eta-0))) (lambda () (lambda (eq) (lambda (eta-0) (let ((act-24 (let ((act-24 (unbox arg-0))) (vector 1 act-24)))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-4 (vector-ref sc1 1))) (vector 0 e-4))) (else (let ((e-5 (vector-ref sc1 1))) (let ((act-25 ((Core-Normalise-nf (vector 0 ) e-5 (vector 0 ) arg-3) eta-0))) (let ((sc2 act-25)) (case (vector-ref sc2 0) ((0) (let ((e-4 (vector-ref sc2 1))) (vector 0 e-4))) (else (let ((e-6 (vector-ref sc2 1))) (let ((act-26 ((Core-CaseBuilder-n--8934-7141-mkNames e-2 e-3 arg-3 arg-2 arg-1 arg-0 arg-2 e-2 eq (vector 1 e-6)) eta-0))) (let ((sc3 act-26)) (case (vector-ref sc3 0) ((0) (let ((e-4 (vector-ref sc3 1))) (vector 0 e-4))) (else (let ((e-7 (vector-ref sc3 1))) (vector 1 (vector 0 (vector 0 ) e-7 (Core-TT-weakenNs_Weaken__Term (vector 0 ) arg-2 e-3))))))))))))))))))))) (Data-LengthMatch-checkLengthMatch 'erased 'erased arg-2 e-2)))))))
(define Core-CaseBuilder-mixture (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8) (let ((sc0 arg-7)) (case (vector-ref sc0 0) ((0) (let ((e-3 (vector-ref sc0 1))) (let ((e-5 (vector-ref sc0 3))) (let ((e-6 (vector-ref sc0 4))) (let ((e-7 (vector-ref sc0 5))) (let ((sc1 e-3)) (case (vector-ref sc1 0) ((1) (lambda (eta-0) (let ((act-24 ((Core-CaseBuilder-mixture arg-0 arg-1 arg-2 arg-3 arg-4 e-5 arg-6 e-7 arg-8) eta-0))) (let ((sc2 act-24)) (case (vector-ref sc2 0) ((0) (let ((e-2 (vector-ref sc2 1))) (vector 0 e-2))) (else (let ((e-8 (vector-ref sc2 1))) (let ((act-25 ((Core-CaseBuilder-conRule arg-0 arg-1 arg-2 arg-3 arg-4 arg-6 e-6 e-8) eta-0))) (let ((sc3 act-25)) (case (vector-ref sc3 0) ((0) (let ((e-2 (vector-ref sc3 1))) (vector 0 e-2))) (else (let ((e-9 (vector-ref sc3 1))) (vector 1 (vector 1 e-9))))))))))))))(else (let ((sc1 arg-5)) (let ((sc2 arg-7)) (lambda (eta-0) (vector 1 arg-8)))))))))))) ((1) (let ((e-8 (vector-ref sc0 1))) (let ((e-10 (vector-ref sc0 3))) (let ((e-11 (vector-ref sc0 4))) (let ((e-12 (vector-ref sc0 5))) (let ((sc1 e-8)) (case (vector-ref sc1 0) ((1) (lambda (eta-0) (let ((act-24 ((Core-CaseBuilder-mixture arg-0 arg-1 arg-2 arg-3 arg-4 e-10 arg-6 e-12 arg-8) eta-0))) (let ((sc2 act-24)) (case (vector-ref sc2 0) ((0) (let ((e-2 (vector-ref sc2 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc2 1))) (let ((act-25 (Core-CaseBuilder-varRule arg-0 arg-1 arg-2 arg-3 arg-4 arg-6 e-11 e-5 eta-0))) (let ((sc3 act-25)) (case (vector-ref sc3 0) ((0) (let ((e-2 (vector-ref sc3 1))) (vector 0 e-2))) (else (let ((e-6 (vector-ref sc3 1))) (vector 1 (vector 1 e-6))))))))))))))(else (let ((sc1 arg-5)) (let ((sc2 arg-7)) (lambda (eta-0) (vector 1 arg-8))))))))))))(else (let ((sc0 arg-5)) (let ((sc1 arg-7)) (lambda (eta-0) (vector 1 arg-8)))))))))
(define Core-CaseBuilder-match (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (let ((sc0 arg-1)) (case (vector-ref sc0 0) ((1) (let ((e-1 (vector-ref sc0 1))) (let ((e-2 (vector-ref sc0 2))) (lambda (eta-0) (let ((act-24 ((Core-CaseBuilder-pickNext e-1 arg-0 e-2 arg-2 arg-3 arg-4 (Prelude-Types-map_Functor__List 'erased 'erased (lambda (eta-1) (Core-CaseBuilder-getNPs 'erased 'erased eta-1)) arg-5)) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-3 (vector-ref sc1 1))) (vector 0 e-3))) (else (let ((e-5 (vector-ref sc1 1))) (let ((sc2 e-5)) (let ((e-4 (vector-ref sc2 1))) (let ((e-3 (vector-ref sc2 2))) (let ((clausesC-39 (Prelude-Types-map_Functor__List 'erased 'erased (lambda (eta-1) (Core-CaseBuilder-shuffleVars 'erased 'erased 'erased e-3 'erased eta-1)) arg-5))) (let ((ps (Core-CaseBuilder-partition e-4 (Core-TT-dropVar 'erased (vector 1 e-1 e-2) e-3 'erased) arg-0 clausesC-39))) (let ((act-25 ((Core-CaseBuilder-mixture e-4 arg-0 (Core-TT-dropVar 'erased (vector 1 e-1 e-2) e-3 'erased) arg-2 arg-3 clausesC-39 arg-4 ps arg-6) eta-0))) (let ((sc3 act-25)) (case (vector-ref sc3 0) ((0) (let ((e-6 (vector-ref sc3 1))) (vector 0 e-6))) (else (let ((e-6 (vector-ref sc3 1))) ((Prelude-Types-maybe 'erased 'erased (lambda () (lambda (eta-1) (vector 1 (vector 2 "No clauses")))) (lambda () (lambda (eta-1) (lambda (eta-2) (vector 1 eta-1)))) e-6) eta-0)))))))))))))))))))) (else (let ((sc1 arg-5)) (case (vector-ref sc1 0) ((0) (Prelude-Types-maybe 'erased 'erased (lambda () (lambda (eta-0) (vector 1 (vector 2 "No patterns")))) (lambda () (lambda (eta-0) (lambda (eta-1) (vector 1 eta-0)))) arg-6)) (else (let ((e-6 (vector-ref sc1 1))) (let ((sc2 e-6)) (let ((e-11 (vector-ref sc2 2))) (let ((e-12 (vector-ref sc2 3))) (let ((sc3 e-11)) (let ((sc4 e-12)) (case (vector-ref sc4 0) ((6) (lambda (eta-0) (vector 1 (vector 3 ))))(else (lambda (eta-0) (vector 1 (vector 1 e-12)))))))))))))))))))
(define Core-CaseBuilder-groupCons (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (Core-CaseBuilder-n--6494-4985-gc arg-0 arg-1 arg-2 arg-7 arg-6 arg-5 arg-4 arg-3 arg-0 arg-1 arg-2 (vector 0 ) arg-7)))
(define Core-CaseBuilder-getScore (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 ext-0) (Core-Core-catch_Catchable__Core_Error 'erased (lambda (eta-0) (let ((act-24 ((Core-CaseBuilder-sameType 'erased 'erased arg-2 arg-3 arg-4 arg-5 (Core-Env-mkEnv arg-2) arg-6) eta-0))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (vector 1 (vector 1 (vector 0 )))))))) (lambda (err) (let ((sc0 err)) (case (vector-ref sc0 0) ((2) (let ((e-1 (vector-ref sc0 2))) (lambda (eta-0) (vector 1 (vector 0 e-1)))))(else (lambda (eta-0) (Core-Core-throw_Catchable__Core_Error 'erased err eta-0)))))) ext-0)))
(define Core-CaseBuilder-getPat (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-3)) (cond ((equal? sc0 0) (let ((sc1 arg-5)) (let ((e-4 (vector-ref sc1 1))) e-4)))(else (let ((e-0 (- arg-3 1))) (let ((sc0 arg-5)) (let ((e-10 (vector-ref sc0 2))) (Core-CaseBuilder-getPat 'erased 'erased 'erased e-0 'erased e-10)))))))))
(define Core-CaseBuilder-getPMDef (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((0) (lambda (eta-0) (let ((act-24 (let ((act-24 (unbox arg-0))) (vector 1 act-24)))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc1 1))) (let ((act-25 ((Core-Normalise-nf (vector 0 ) e-5 (vector 0 ) arg-2) eta-0))) (let ((sc2 act-25)) (case (vector-ref sc2 0) ((0) (let ((e-2 (vector-ref sc2 1))) (vector 0 e-2))) (else (let ((e-6 (vector-ref sc2 1))) (let ((act-26 ((Core-CaseBuilder-n--9564-7801-getArgs arg-2 arg-1 arg-0 0 e-6) eta-0))) (let ((sc3 act-26)) (case (vector-ref sc3 0) ((0) (let ((e-2 (vector-ref sc3 1))) (vector 0 e-2))) (else (let ((e-7 (vector-ref sc3 1))) (vector 1 (vector 0 e-7 (vector 2 "No clauses"))))))))))))))))))))(else (lambda (eta-0) (let ((act-24 (let ((act-24 (unbox arg-0))) (vector 1 act-24)))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (let ((cs (Prelude-Types-map_Functor__List 'erased 'erased (lambda (eta-1) (Core-CaseBuilder-n--9564-7887-toClosed arg-3 arg-2 arg-1 arg-0 e-5 eta-1)) (Core-CaseBuilder-n--9564-7884-labelPat arg-3 arg-2 arg-1 arg-0 'erased 0 arg-3)))) (let ((act-25 (Core-CaseBuilder-simpleCase arg-0 arg-1 arg-2 (vector 0 ) cs eta-0))) (let ((sc1 act-25)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-6 (vector-ref sc1 1))) (let ((sc2 e-6)) (let ((e-2 (vector-ref sc2 1))) (let ((e-3 (vector-ref sc2 2))) (vector 1 (vector 0 e-2 e-3))))))))))))))))))))))
(define Core-CaseBuilder-getNPs (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (let ((e-3 (vector-ref sc0 2))) e-3))))
(define Core-CaseBuilder-getFirstPat (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (let ((e-3 (vector-ref sc0 1))) (let ((sc1 e-3)) (let ((e-5 (vector-ref sc1 3))) e-5))))))
(define Core-CaseBuilder-getFirstArgType (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (let ((e-3 (vector-ref sc0 1))) (let ((sc1 e-3)) (let ((e-6 (vector-ref sc1 4))) e-6))))))
(define Core-CaseBuilder-dropPat (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-3)) (cond ((equal? sc0 0) (let ((sc1 arg-5)) (let ((e-5 (vector-ref sc1 2))) e-5)))(else (let ((e-0 (- arg-3 1))) (let ((sc0 arg-5)) (let ((e-9 (vector-ref sc0 1))) (let ((e-10 (vector-ref sc0 2))) (vector 1 e-9 (Core-CaseBuilder-dropPat 'erased 'erased 'erased e-0 'erased e-10)))))))))))
(define Core-CaseBuilder-conRule (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (let ((sc0 arg-6)) (case (vector-ref sc0 0) ((0) (Prelude-Types-maybe 'erased 'erased (lambda () (lambda (eta-0) (vector 1 (vector 2 "No constructor clauses")))) (lambda () (lambda (eta-0) (lambda (eta-1) (vector 1 eta-0)))) arg-7)) (else (let ((e-2 (vector-ref sc0 1))) (let ((sc1 e-2)) (let ((e-6 (vector-ref sc1 1))) (let ((e-7 (vector-ref sc1 2))) (let ((sc2 e-7)) (let ((e-12 (vector-ref sc2 1))) (let ((sc3 e-12)) (let ((e-16 (vector-ref sc3 1))) (let ((e-17 (vector-ref sc3 2))) (let ((e-20 (vector-ref sc3 4))) (lambda (eta-0) (let ((act-24 ((Core-Core-traverse 'erased 'erased (lambda (eta-1) (Core-CaseBuilder-substInClause arg-0 arg-1 arg-2 arg-4 eta-1)) arg-6) eta-0))) (let ((sc4 act-24)) (case (vector-ref sc4 0) ((0) (let ((e-4 (vector-ref sc4 1))) (vector 0 e-4))) (else (let ((e-5 (vector-ref sc4 1))) (let ((act-25 ((Core-CaseBuilder-groupCons arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 e-6 e-5) eta-0))) (let ((sc5 act-25)) (case (vector-ref sc5 0) ((0) (let ((e-4 (vector-ref sc5 1))) (vector 0 e-4))) (else (let ((e-9 (vector-ref sc5 1))) (let ((act-26 (let ((sc6 e-20)) (case (vector-ref sc6 0) ((0) (let ((e-1 (vector-ref sc6 1))) (vector 1 e-1)))(else (Core-Core-throw_Catchable__Core_Error 'erased (vector 2 arg-5 (vector 4 )) eta-0)))))) (let ((sc6 act-26)) (case (vector-ref sc6 0) ((0) (let ((e-4 (vector-ref sc6 1))) (vector 0 e-4))) (else (let ((e-10 (vector-ref sc6 1))) (Core-CaseBuilder-caseGroups e-17 arg-1 arg-2 arg-3 arg-4 arg-5 e-16 'erased e-10 e-9 arg-7 eta-0))))))))))))))))))))))))))))))))
(define Core-CaseBuilder-clauseType (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((e-4 (vector-ref sc0 3))) (let ((sc1 e-3)) (let ((e-8 (vector-ref sc1 1))) (let ((e-9 (vector-ref sc1 2))) (let ((sc2 e-8)) (let ((e-12 (vector-ref sc2 1))) (let ((e-13 (vector-ref sc2 2))) (let ((e-14 (vector-ref sc2 3))) (let ((e-16 (vector-ref sc2 4))) (Core-CaseBuilder-n--5086-3755-getClauseType 'erased 'erased 'erased e-12 e-13 'erased e-16 e-14 e-9 e-4 e-2 e-14)))))))))))))))
(define Core-CaseBuilder-checkGroupMatch (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((0) (let ((e-0 (vector-ref sc0 1))) (let ((e-1 (vector-ref sc0 2))) (let ((sc1 arg-4)) (case (vector-ref sc1 0) ((0) (let ((e-4 (vector-ref sc1 1))) (let ((e-5 (vector-ref sc1 2))) (let ((e-6 (vector-ref sc1 3))) (let ((e-7 (vector-ref sc1 4))) (let ((sc2 e-7)) (case (vector-ref sc2 0) ((1) (let ((e-9 (vector-ref sc2 1))) (let ((e-10 (vector-ref sc2 2))) (let ((sc3 e-9)) (case (vector-ref sc3 0) ((0) (let ((e-13 (vector-ref sc3 1))) (let ((e-14 (vector-ref sc3 2))) (let ((e-15 (vector-ref sc3 3))) (Core-CaseBuilder-case--checkGroupMatch-4114 'erased 'erased e-1 e-0 e-4 e-15 e-14 e-13 e-10 e-6 e-5 arg-3 (Data-LengthMatch-checkLengthMatch 'erased 'erased arg-3 e-4))))))(else (vector 1 )))))))(else (vector 1 )))))))))(else (vector 1 )))))))(else (vector 1 ))))))
(define Core-CaseBuilder-caseGroups (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 ext-0) (let ((act-24 ((Core-CaseBuilder-n--8286-6732-altGroups arg-0 arg-2 arg-6 arg-1 arg-10 arg-9 arg-8 'erased arg-5 arg-4 arg-3 arg-9) ext-0))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (vector 1 (vector 0 arg-0 arg-1 arg-6 (Core-TT-resolveNames arg-1 arg-8) e-5)))))))))
(define Core-CaseBuilder-PatInfo-argType (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (let ((e-6 (vector-ref sc0 4))) e-6))))
(define Core-CaseBuilder-C-43C-43 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((0) arg-4) (else (let ((e-4 (vector-ref sc0 1))) (let ((e-5 (vector-ref sc0 2))) (vector 1 e-4 (Core-CaseBuilder-C-43C-43 'erased 'erased 'erased e-5 arg-4)))))))))
(define Data-LengthMatch-checkLengthMatch (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((0) (let ((sc1 arg-3)) (case (vector-ref sc1 0) ((0) (vector 1 (vector 0 ))) (else (vector 0 ))))) (else (let ((e-3 (vector-ref sc0 2))) (let ((sc1 arg-3)) (case (vector-ref sc1 0) ((0) (vector 0 )) (else (let ((e-11 (vector-ref sc1 2))) (Prelude-Types-C-62C-62C-61_Monad__Maybe 'erased 'erased (Data-LengthMatch-checkLengthMatch 'erased 'erased e-3 e-11) (lambda (bind-0) (vector 1 (vector 1 bind-0))))))))))))))
(define TTImp-ProcessData-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32processData-3979 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-13 arg-14 arg-15 arg-16 arg-17 arg-18 arg-19 arg-20) (let ((sc0 arg-20)) (case (vector-ref sc0 0) ((3) (let ((e-0 (vector-ref sc0 1))) (let ((e-1 (vector-ref sc0 2))) (let ((e-2 (vector-ref sc0 3))) (Core-Context-newDef (let ((sc1 arg-19)) (let ((e-4 (vector-ref sc1 1))) e-4)) (vector 3 e-0 e-1 (vector 1 arg-14 e-2)))))))(else arg-19)))))
(define TTImp-ProcessData-case--caseC-32blockC-32inC-32processData-3923 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-13) (let ((sc0 arg-13)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 e-3)) (let ((e-6 (vector-ref sc1 1))) (let ((e-7 (vector-ref sc1 2))) (lambda (eta-0) (let ((act-24 (Core-Normalise-getArity (vector 0 ) arg-12 (vector 0 ) e-7 eta-0))) (let ((sc2 act-24)) (case (vector-ref sc2 0) ((0) (let ((e-4 (vector-ref sc2 1))) (vector 0 e-4))) (else (let ((e-5 (vector-ref sc2 1))) (let ((act-25 (Core-Context-addDef arg-4 e-6 (Core-Context-newDef e-7 (vector 2 (Prelude-Types-cast_Cast__Nat_Int e-2) e-5)) eta-0))) (let ((sc3 act-25)) (case (vector-ref sc3 0) ((0) (let ((e-4 (vector-ref sc3 1))) (vector 0 e-4))) (else (let ((e-8 (vector-ref sc3 1))) (Core-Context-updateDef arg-4 arg-2 (lambda (d) (let ((lamc-0 (vector 0 e-2 (vector 0 e-6 e-7)))) (TTImp-ProcessData-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32processData-3979 arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 e-2 e-6 e-7 lamc-0 e-5 e-8 d (let ((sc4 d)) (let ((e-1 (vector-ref sc4 2))) e-1))))) eta-0))))))))))))))))))))
(define TTImp-ProcessData-case--processData-3831 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-5)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (lambda (eta-0) (let ((act-24 (let ((act-24 (unbox arg-4))) (vector 1 act-24)))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-4 (vector-ref sc1 1))) (vector 0 e-4))) (else (let ((e-5 (vector-ref sc1 1))) (let ((act-25 (Core-Normalise-getArity (vector 0 ) e-5 (vector 0 ) e-2 eta-0))) (let ((sc2 act-25)) (case (vector-ref sc2 0) ((0) (let ((e-4 (vector-ref sc2 1))) (vector 0 e-4))) (else (let ((e-6 (vector-ref sc2 1))) (let ((act-26 (Core-Context-addDef arg-4 arg-2 (Core-Context-newDef e-2 (vector 3 0 e-6 (vector 0 ))) eta-0))) (let ((sc3 act-26)) (case (vector-ref sc3 0) ((0) (let ((e-4 (vector-ref sc3 1))) (vector 0 e-4))) (else (let ((e-7 (vector-ref sc3 1))) (let ((act-27 ((Core-Core-traverse 'erased 'erased (lambda (eta-1) (TTImp-ProcessData-processCon arg-4 arg-3 eta-1)) arg-0) eta-0))) (let ((sc4 act-27)) (case (vector-ref sc4 0) ((0) (let ((e-4 (vector-ref sc4 1))) (vector 0 e-4))) (else (let ((e-8 (vector-ref sc4 1))) (let ((act-28 (let ((act-28 (unbox arg-4))) (vector 1 act-28)))) (let ((sc5 act-28)) (case (vector-ref sc5 0) ((0) (let ((e-4 (vector-ref sc5 1))) (vector 0 e-4))) (else (let ((e-9 (vector-ref sc5 1))) (let ((act-29 ((Core-Core-traverse_ 'erased 'erased (lambda (lamc-0) (let ((_-0 (vector 0 e-2 e-3))) (let ((sc6 lamc-0)) (let ((e-10 (vector-ref sc6 1))) (let ((e-4 (vector-ref sc6 2))) (let ((sc7 e-4)) (let ((e-12 (vector-ref sc7 1))) (let ((e-11 (vector-ref sc7 2))) (lambda (eta-1) (let ((act-29 (Core-Normalise-getArity (vector 0 ) e-9 (vector 0 ) e-11 eta-1))) (let ((sc8 act-29)) (case (vector-ref sc8 0) ((0) (let ((e-13 (vector-ref sc8 1))) (vector 0 e-13))) (else (let ((e-13 (vector-ref sc8 1))) (let ((act-30 (Core-Context-addDef arg-4 e-12 (Core-Context-newDef e-11 (vector 2 (Prelude-Types-cast_Cast__Nat_Int e-10) e-13)) eta-1))) (let ((sc9 act-30)) (case (vector-ref sc9 0) ((0) (let ((e-14 (vector-ref sc9 1))) (vector 0 e-14))) (else (let ((e-14 (vector-ref sc9 1))) (Core-Context-updateDef arg-4 arg-2 (lambda (d) (let ((lamc-1 (vector 0 e-10 (vector 0 e-12 e-11)))) (TTImp-ProcessData-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32processData-3979 arg-0 arg-1 arg-2 arg-3 arg-4 e-3 e-2 _-0 e-5 e-6 e-7 e-8 e-9 e-10 e-12 e-11 lamc-1 e-13 e-14 d (let ((sc10 d)) (let ((e-1 (vector-ref sc10 2))) e-1))))) eta-1)))))))))))))))))))) (Data-List-zip 'erased 'erased (Prelude-Types-rangeFromTo_Range__Nat (Prelude-Types-fromInteger_Num__Nat 0) (Prelude-Types-List-length 'erased e-8)) e-8)) eta-0))) (let ((sc6 act-29)) (case (vector-ref sc6 0) ((0) (let ((e-4 (vector-ref sc6 1))) (vector 0 e-4))) (else (let ((act-30 ((Prelude-IO-putStrLn 'erased (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-62) (lambda (eta-1) (Prelude-IO-map_Functor__IO 'erased 'erased func arg-62 eta-1)))))) (lambda (a) (lambda (arg-172) (lambda (eta-1) arg-172))) (lambda (b) (lambda (a) (lambda (arg-173) (lambda (arg-175) (lambda (eta-1) (let ((act-17 (arg-173 eta-1))) (let ((act-16 (arg-175 eta-1))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-334) (lambda (arg-335) (lambda (eta-1) (let ((act-30 (arg-334 eta-1))) ((arg-335 act-30) eta-1))))))) (lambda (a) (lambda (arg-337) (lambda (eta-1) (let ((act-51 (arg-337 eta-1))) (act-51 eta-1)))))) (lambda (a) (lambda (arg-6366) arg-6366))) (Prelude-Types-Strings-C-43C-43 "Processed " (Core-TT-show_Show__Name arg-2))) eta-0))) (vector 1 act-30)))))))))))))))))))))))))))))))))))))
(define TTImp-ProcessData-case--processCon-3790 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-4)) (let ((e-2 (vector-ref sc0 1))) (lambda (eta-0) (vector 1 (vector 0 arg-1 e-2)))))))
(define TTImp-ProcessData-processData (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (let ((e-0 (vector-ref sc0 1))) (let ((e-1 (vector-ref sc0 2))) (let ((e-2 (vector-ref sc0 3))) (lambda (eta-0) (let ((act-24 ((TTImp-Elab-Term-checkTerm (vector 0 ) arg-0 arg-1 (vector 0 ) e-1 (vector 1 (Core-Normalise-gType 'erased))) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-3 (vector-ref sc1 1))) (vector 0 e-3))) (else (let ((e-5 (vector-ref sc1 1))) (let ((sc2 e-5)) (let ((e-4 (vector-ref sc2 1))) (let ((e-3 (vector-ref sc2 2))) (let ((act-25 (let ((act-25 (unbox arg-0))) (vector 1 act-25)))) (let ((sc3 act-25)) (case (vector-ref sc3 0) ((0) (let ((e-6 (vector-ref sc3 1))) (vector 0 e-6))) (else (let ((e-6 (vector-ref sc3 1))) (let ((act-26 (Core-Normalise-getArity (vector 0 ) e-6 (vector 0 ) e-4 eta-0))) (let ((sc4 act-26)) (case (vector-ref sc4 0) ((0) (let ((e-7 (vector-ref sc4 1))) (vector 0 e-7))) (else (let ((e-7 (vector-ref sc4 1))) (let ((act-27 (Core-Context-addDef arg-0 e-0 (Core-Context-newDef e-4 (vector 3 0 e-7 (vector 0 ))) eta-0))) (let ((sc5 act-27)) (case (vector-ref sc5 0) ((0) (let ((e-8 (vector-ref sc5 1))) (vector 0 e-8))) (else (let ((e-8 (vector-ref sc5 1))) (let ((act-28 ((Core-Core-traverse 'erased 'erased (lambda (eta-1) (TTImp-ProcessData-processCon arg-0 arg-1 eta-1)) e-2) eta-0))) (let ((sc6 act-28)) (case (vector-ref sc6 0) ((0) (let ((e-9 (vector-ref sc6 1))) (vector 0 e-9))) (else (let ((e-9 (vector-ref sc6 1))) (let ((act-29 (let ((act-29 (unbox arg-0))) (vector 1 act-29)))) (let ((sc7 act-29)) (case (vector-ref sc7 0) ((0) (let ((e-10 (vector-ref sc7 1))) (vector 0 e-10))) (else (let ((e-10 (vector-ref sc7 1))) (let ((act-30 ((Core-Core-traverse_ 'erased 'erased (lambda (lamc-0) (let ((_-0 (vector 0 e-4 e-3))) (let ((sc8 lamc-0)) (let ((e-12 (vector-ref sc8 1))) (let ((e-11 (vector-ref sc8 2))) (let ((sc9 e-11)) (let ((e-14 (vector-ref sc9 1))) (let ((e-13 (vector-ref sc9 2))) (lambda (eta-1) (let ((act-30 (Core-Normalise-getArity (vector 0 ) e-10 (vector 0 ) e-13 eta-1))) (let ((sc10 act-30)) (case (vector-ref sc10 0) ((0) (let ((e-15 (vector-ref sc10 1))) (vector 0 e-15))) (else (let ((e-15 (vector-ref sc10 1))) (let ((act-31 (Core-Context-addDef arg-0 e-14 (Core-Context-newDef e-13 (vector 2 (Prelude-Types-cast_Cast__Nat_Int e-12) e-15)) eta-1))) (let ((sc11 act-31)) (case (vector-ref sc11 0) ((0) (let ((e-16 (vector-ref sc11 1))) (vector 0 e-16))) (else (let ((e-16 (vector-ref sc11 1))) (Core-Context-updateDef arg-0 e-0 (lambda (d) (let ((lamc-1 (vector 0 e-12 (vector 0 e-14 e-13)))) (TTImp-ProcessData-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32processData-3979 e-2 e-1 e-0 arg-1 arg-0 e-3 e-4 _-0 e-6 e-7 e-8 e-9 e-10 e-12 e-14 e-13 lamc-1 e-15 e-16 d (let ((sc12 d)) (let ((e-17 (vector-ref sc12 2))) e-17))))) eta-1)))))))))))))))))))) (Data-List-zip 'erased 'erased (Prelude-Types-rangeFromTo_Range__Nat (Prelude-Types-fromInteger_Num__Nat 0) (Prelude-Types-List-length 'erased e-9)) e-9)) eta-0))) (let ((sc8 act-30)) (case (vector-ref sc8 0) ((0) (let ((e-11 (vector-ref sc8 1))) (vector 0 e-11))) (else (let ((act-31 ((Prelude-IO-putStrLn 'erased (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-62) (lambda (eta-1) (Prelude-IO-map_Functor__IO 'erased 'erased func arg-62 eta-1)))))) (lambda (a) (lambda (arg-172) (lambda (eta-1) arg-172))) (lambda (b) (lambda (a) (lambda (arg-173) (lambda (arg-175) (lambda (eta-1) (let ((act-17 (arg-173 eta-1))) (let ((act-16 (arg-175 eta-1))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-334) (lambda (arg-335) (lambda (eta-1) (let ((act-31 (arg-334 eta-1))) ((arg-335 act-31) eta-1))))))) (lambda (a) (lambda (arg-337) (lambda (eta-1) (let ((act-51 (arg-337 eta-1))) (act-51 eta-1)))))) (lambda (a) (lambda (arg-6366) arg-6366))) (Prelude-Types-Strings-C-43C-43 "Processed " (Core-TT-show_Show__Name e-0))) eta-0))) (vector 1 act-31))))))))))))))))))))))))))))))))))))))))))))))
(define TTImp-ProcessData-processCon (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (let ((e-0 (vector-ref sc0 1))) (let ((e-1 (vector-ref sc0 2))) (lambda (eta-0) (let ((act-24 ((TTImp-Elab-Term-checkTerm (vector 0 ) arg-0 arg-1 (vector 0 ) e-1 (vector 1 (Core-Normalise-gType 'erased))) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc1 1))) (let ((sc2 e-5)) (let ((e-2 (vector-ref sc2 1))) (vector 1 (vector 0 e-0 e-2)))))))))))))))
(define TTImp-Parser-case--collectDefs-1589 (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (vector 1 (vector 2 arg-1 (Prelude-Types-List-C-43C-43 'erased arg-0 e-2)) (TTImp-Parser-collectDefs e-3)))))))
(define TTImp-Parser-case--collectDefsC-44isClause-1550 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (let ((sc0 arg-6)) (cond ((equal? sc0 0) (vector 1 arg-3)) (else (vector 0 ))))))
(define TTImp-Parser-case--caseC-32blockC-32inC-32collectDefsC-44spanMap-1507 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9) (let ((sc0 arg-9)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (vector 0 (Prelude-Types-List-C-43C-43 'erased arg-8 e-2) e-3))))))
(define TTImp-Parser-case--collectDefsC-44spanMap-1446 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8) (let ((sc0 arg-8)) (case (vector-ref sc0 0) ((0) (vector 0 (vector 0 ) (vector 1 arg-5 arg-6))) (else (let ((e-2 (vector-ref sc0 1))) (TTImp-Parser-case--caseC-32blockC-32inC-32collectDefsC-44spanMap-1507 arg-0 arg-1 arg-2 'erased 'erased arg-6 arg-7 arg-5 e-2 (TTImp-Parser-n--3903-1412-spanMap arg-0 arg-1 arg-2 'erased 'erased arg-7 arg-6))))))))
(define TTImp-Parser-case--pibindList-736 (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (vector 0 (vector 1 e-2) e-3))))))
(define TTImp-Parser-n--3903-1412-spanMap (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (let ((sc0 arg-6)) (case (vector-ref sc0 0) ((0) (vector 0 (vector 0 ) (vector 0 ))) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (TTImp-Parser-case--collectDefsC-44spanMap-1446 arg-0 arg-1 arg-2 'erased 'erased e-2 e-3 arg-5 (arg-5 e-2)))))))))
(define TTImp-Parser-n--4013-472-mkPi (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((0) arg-2) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 e-2)) (let ((e-6 (vector-ref sc1 1))) (let ((e-7 (vector-ref sc1 2))) (vector 1 e-6 (vector 0 ) arg-2 (TTImp-Parser-n--4013-472-mkPi arg-0 arg-1 e-7 e-3))))))))))))
(define TTImp-Parser-n--3903-1413-isClause (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-4)) (case (vector-ref sc0 0) ((2) (let ((e-0 (vector-ref sc0 1))) (let ((e-1 (vector-ref sc0 2))) (TTImp-Parser-case--collectDefsC-44isClause-1550 arg-0 arg-1 arg-2 e-1 e-0 arg-3 (Core-TT-C-61C-61_Eq__Name arg-3 e-0)))))(else (vector 0 ))))))
(define TTImp-Parser-n--4770-1181-getFn (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((0) (let ((e-0 (vector-ref sc0 1))) (vector 0 e-0))) ((4) (let ((e-1 (vector-ref sc0 1))) (TTImp-Parser-n--4770-1181-getFn arg-0 arg-1 arg-2 e-1))) ((3) (let ((e-5 (vector-ref sc0 3))) (TTImp-Parser-n--4770-1181-getFn arg-0 arg-1 arg-2 e-5)))(else (vector 4 1 "Not a function application"))))))
(define TTImp-Parser-n--4022-1042-bindAll (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((0) arg-3) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 e-2)) (let ((e-6 (vector-ref sc1 1))) (let ((e-7 (vector-ref sc1 2))) (vector 3 e-6 e-7 (TTImp-Parser-n--4022-1042-bindAll arg-0 arg-1 e-3 arg-3))))))))))))
(define TTImp-Parser-n--4021-963-bindAll (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((0) arg-3) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 e-2)) (let ((e-6 (vector-ref sc1 1))) (let ((e-7 (vector-ref sc1 2))) (vector 2 (vector 1 ) (vector 1 e-6) e-7 (TTImp-Parser-n--4021-963-bindAll arg-0 arg-1 e-3 arg-3))))))))))))
(define TTImp-Parser-typeExpr (lambda (arg-0 arg-1) (vector 7 1 (TTImp-Parser-appExpr arg-0 arg-1) (lambda () (lambda (arg) (vector 9 0 1 (vector 8 1 0 (Parser-Rule-Source-continue arg-1) (lambda (_-502) (vector 7 1 (Text-Parser-some 'erased 'erased (vector 7 0 (TTImp-Parser-bindSymbol) (lambda () (lambda (exp) (vector 7 1 (TTImp-Parser-appExpr arg-0 arg-1) (lambda () (lambda (op) (vector 0 (vector 0 exp op))))))))) (lambda () (lambda (rest) (vector 0 (TTImp-Parser-n--4013-472-mkPi arg-1 arg-0 arg rest))))))) (lambda () (vector 0 arg))))))))
(define TTImp-Parser-tyDecl (lambda (arg-0 arg-1) (vector 7 0 (Parser-Rule-Source-name) (lambda () (lambda (n) (vector 7 0 (Parser-Rule-Source-symbol ":") (lambda () (lambda (_-1150) (vector 7 1 (TTImp-Parser-expr arg-0 arg-1) (lambda () (lambda (ty) (vector 8 1 1 (Parser-Rule-Source-atEnd arg-1) (lambda (_-1165) (vector 0 (vector 0 n ty)))))))))))))))
(define TTImp-Parser-topDecl (lambda (arg-0 arg-1) (vector 9 0 0 (vector 7 1 (TTImp-Parser-dataDecl arg-0 arg-1) (lambda () (lambda (dat) (vector 0 (vector 1 dat))))) (lambda () (vector 9 0 0 (vector 7 1 (TTImp-Parser-tyDecl arg-0 arg-1) (lambda () (lambda (claim) (vector 0 (vector 0 claim))))) (lambda () (TTImp-Parser-definition arg-0 arg-1)))))))
(define TTImp-Parser-simpleExpr (lambda (arg-0 arg-1) (vector 9 0 0 (TTImp-Parser-atom arg-0) (lambda () (vector 9 0 (Prelude-Basics-C-124C-124 0 (lambda () 0)) (TTImp-Parser-binder arg-0 arg-1) (lambda () (vector 7 0 (Parser-Rule-Source-symbol "(") (lambda () (lambda (_-441) (vector 7 0 (TTImp-Parser-expr arg-0 arg-1) (lambda () (lambda (e) (vector 7 1 (Parser-Rule-Source-symbol ")") (lambda () (lambda (_-457) (vector 0 e))))))))))))))))
(define TTImp-Parser-prog (lambda (arg-0) (vector 7 1 (Parser-Rule-Source-nonEmptyBlock 'erased (lambda (eta-0) (TTImp-Parser-topDecl arg-0 eta-0))) (lambda () (lambda (ds) (vector 0 (TTImp-Parser-collectDefs ds)))))))
(define TTImp-Parser-pibindListName (lambda (arg-0 arg-1) (vector 9 0 0 (vector 7 0 (Text-Parser-sepBy1 'erased 'erased 'erased 0 (Parser-Rule-Source-symbol ",") (Parser-Rule-Source-unqualifiedName)) (lambda () (lambda (ns) (vector 7 0 (Parser-Rule-Source-symbol ":") (lambda () (lambda (_-631) (vector 7 1 (TTImp-Parser-expr arg-0 arg-1) (lambda () (lambda (ty) (vector 8 1 1 (Parser-Rule-Source-atEnd arg-1) (lambda (_-646) (vector 0 (Prelude-Types-map_Functor__List 'erased 'erased (lambda (n) (vector 0 (vector 0 n) ty)) ns))))))))))))) (lambda () (Text-Parser-sepBy1 'erased 'erased 'erased (Prelude-Basics-C-124C-124 0 (lambda () 0)) (Parser-Rule-Source-symbol ",") (vector 7 0 (Parser-Rule-Source-name) (lambda () (lambda (n) (vector 7 0 (Parser-Rule-Source-symbol ":") (lambda () (lambda (_-679) (vector 7 1 (TTImp-Parser-expr arg-0 arg-1) (lambda () (lambda (ty) (vector 0 (vector 0 n ty))))))))))))))))
(define TTImp-Parser-pibindList (lambda (arg-0 arg-1) (vector 7 1 (TTImp-Parser-pibindListName arg-0 arg-1) (lambda () (lambda (params) (vector 0 (Prelude-Types-map_Functor__List 'erased 'erased (lambda (lamc-0) (let ((sc0 lamc-0)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (vector 0 (vector 1 e-2) e-3))))) params)))))))
(define TTImp-Parser-pibindAll (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-1)) (case (vector-ref sc0 0) ((0) arg-2) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 e-2)) (let ((e-6 (vector-ref sc1 1))) (let ((e-7 (vector-ref sc1 2))) (vector 1 arg-0 e-6 e-7 (TTImp-Parser-pibindAll arg-0 e-3 arg-2))))))))))))
(define TTImp-Parser-pat (lambda (arg-0 arg-1) (vector 7 0 (Parser-Rule-Source-keyword "pat") (lambda () (lambda (_-1062) (vector 7 0 (TTImp-Parser-bindList arg-0 arg-1) (lambda () (lambda (binders) (vector 7 0 (Parser-Rule-Source-symbol "=>") (lambda () (lambda (_-1078) (vector 8 1 0 (Parser-Rule-Source-mustContinue arg-1 (vector 0 )) (lambda (_-1087) (vector 7 1 (TTImp-Parser-expr arg-0 arg-1) (lambda () (lambda (scope) (vector 8 1 1 (Parser-Rule-Common-location (vector "Parser.Lexer.Source.Token" )) (lambda (end) (vector 0 (TTImp-Parser-n--4022-1042-bindAll arg-1 arg-0 binders scope))))))))))))))))))))
(define TTImp-Parser-parseRHS (lambda (arg-0 arg-1 arg-2) (vector 7 0 (Parser-Rule-Source-symbol "=") (lambda () (lambda (_-1208) (vector 8 1 0 (vector 5 ) (lambda (_-1217) (vector 7 1 (TTImp-Parser-expr arg-0 arg-1) (lambda () (lambda (rhs) (vector 8 1 1 (Parser-Rule-Source-atEnd arg-1) (lambda (_-1232) (vector 8 1 1 (TTImp-Parser-n--4770-1181-getFn arg-2 arg-1 arg-0 arg-2) (lambda (bind-0) (vector 0 (vector 0 bind-0 (vector 0 arg-2 rhs)))))))))))))))))
(define TTImp-Parser-lam (lambda (arg-0 arg-1) (vector 7 0 (Parser-Rule-Source-symbol "\\") (lambda () (lambda (_-985) (vector 7 0 (TTImp-Parser-bindList arg-0 arg-1) (lambda () (lambda (binders) (vector 7 0 (Parser-Rule-Source-symbol "=>") (lambda () (lambda (_-1001) (vector 8 1 0 (Parser-Rule-Source-mustContinue arg-1 (vector 0 )) (lambda (_-1010) (vector 7 1 (TTImp-Parser-expr arg-0 arg-1) (lambda () (lambda (scope) (vector 8 1 1 (Parser-Rule-Common-location (vector "Parser.Lexer.Source.Token" )) (lambda (end) (vector 0 (TTImp-Parser-n--4021-963-bindAll arg-1 arg-0 binders scope))))))))))))))))))))
(define TTImp-Parser-implicitPi (lambda (arg-0 arg-1) (vector 7 0 (Parser-Rule-Source-symbol "{") (lambda () (lambda (_-839) (vector 7 0 (TTImp-Parser-pibindList arg-0 arg-1) (lambda () (lambda (binders) (vector 7 0 (Parser-Rule-Source-symbol "}") (lambda () (lambda (_-855) (vector 7 0 (Parser-Rule-Source-symbol "->") (lambda () (lambda (_-864) (vector 7 1 (TTImp-Parser-typeExpr arg-0 arg-1) (lambda () (lambda (scope) (vector 8 1 1 (Parser-Rule-Common-location (vector "Parser.Lexer.Source.Token" )) (lambda (end) (vector 0 (TTImp-Parser-pibindAll (vector 0 ) binders scope)))))))))))))))))))))
(define TTImp-Parser-forall_ (lambda (arg-0 arg-1) (vector 7 0 (Parser-Rule-Source-keyword "forall") (lambda () (lambda (_-761) (vector 8 1 0 (vector 5 ) (lambda (_-770) (vector 7 0 (Text-Parser-sepBy1 'erased 'erased 'erased 0 (Parser-Rule-Source-symbol ",") (Parser-Rule-Source-unqualifiedName)) (lambda () (lambda (ns) (let ((binders (Prelude-Types-map_Functor__List 'erased 'erased (lambda (n) (vector 0 (vector 1 (vector 0 n)) (vector 6 ))) ns))) (vector 7 0 (Parser-Rule-Source-symbol ".") (lambda () (lambda (_-795) (vector 7 1 (TTImp-Parser-typeExpr arg-0 arg-1) (lambda () (lambda (scope) (vector 0 (TTImp-Parser-pibindAll (vector 0 ) binders scope)))))))))))))))))))
(define TTImp-Parser-expr (lambda (ext-0 ext-1) (TTImp-Parser-typeExpr ext-0 ext-1)))
(define TTImp-Parser-explicitPi (lambda (arg-0 arg-1) (vector 7 0 (Parser-Rule-Source-symbol "(") (lambda () (lambda (_-908) (vector 7 0 (TTImp-Parser-pibindList arg-0 arg-1) (lambda () (lambda (binders) (vector 7 0 (Parser-Rule-Source-symbol ")") (lambda () (lambda (_-924) (vector 7 0 (TTImp-Parser-bindSymbol) (lambda () (lambda (exp) (vector 7 1 (TTImp-Parser-typeExpr arg-0 arg-1) (lambda () (lambda (scope) (vector 8 1 1 (Parser-Rule-Common-location (vector "Parser.Lexer.Source.Token" )) (lambda (end) (vector 0 (TTImp-Parser-pibindAll exp binders scope)))))))))))))))))))))
(define TTImp-Parser-definition (lambda (arg-0 arg-1) (vector 7 1 (TTImp-Parser-clause arg-0 arg-1) (lambda () (lambda (nd) (vector 0 (vector 2 (Builtin-fst 'erased 'erased nd) (vector 1 (Builtin-snd 'erased 'erased nd) (vector 0 )))))))))
(define TTImp-Parser-dataDecl (lambda (arg-0 arg-1) (vector 7 0 (Parser-Rule-Source-keyword "data") (lambda () (lambda (_-1315) (vector 7 0 (Parser-Rule-Source-name) (lambda () (lambda (n) (vector 7 0 (Parser-Rule-Source-symbol ":") (lambda () (lambda (_-1332) (vector 7 0 (TTImp-Parser-expr arg-0 arg-1) (lambda () (lambda (ty) (vector 7 1 (Parser-Rule-Source-keyword "where") (lambda () (lambda (_-1349) (vector 8 1 1 (Parser-Rule-Source-block 'erased (lambda (eta-0) (TTImp-Parser-tyDecl arg-0 eta-0))) (lambda (cs) (vector 0 (vector 0 n ty cs)))))))))))))))))))))
(define TTImp-Parser-collectDefs (lambda (arg-0) (let ((sc0 arg-0)) (case (vector-ref sc0 0) ((0) (vector 0 )) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 e-2)) (case (vector-ref sc1 0) ((2) (let ((e-4 (vector-ref sc1 1))) (let ((e-5 (vector-ref sc1 2))) (TTImp-Parser-case--collectDefs-1589 e-5 e-4 e-3 (TTImp-Parser-n--3903-1412-spanMap e-5 e-4 e-3 'erased 'erased (lambda (eta-0) (TTImp-Parser-n--3903-1413-isClause e-5 e-4 e-3 e-4 eta-0)) e-3)))))(else (vector 1 e-2 (TTImp-Parser-collectDefs e-3))))))))))))
(define TTImp-Parser-clause (lambda (arg-0 arg-1) (vector 7 0 (TTImp-Parser-expr arg-0 arg-1) (lambda () (lambda (lhs) (TTImp-Parser-parseRHS arg-0 arg-1 lhs))))))
(define TTImp-Parser-binder (lambda (arg-0 arg-1) (vector 9 0 0 (TTImp-Parser-forall_ arg-0 arg-1) (lambda () (vector 9 0 0 (TTImp-Parser-implicitPi arg-0 arg-1) (lambda () (vector 9 0 0 (TTImp-Parser-explicitPi arg-0 arg-1) (lambda () (vector 9 0 0 (TTImp-Parser-lam arg-0 arg-1) (lambda () (TTImp-Parser-pat arg-0 arg-1)))))))))))
(define TTImp-Parser-bindSymbol (lambda () (vector 7 1 (Parser-Rule-Source-symbol "->") (lambda () (lambda (_-353) (vector 0 (vector 1 )))))))
(define TTImp-Parser-bindList (lambda (arg-0 arg-1) (Text-Parser-sepBy1 'erased 'erased 'erased 0 (Parser-Rule-Source-symbol ",") (vector 7 1 (Parser-Rule-Source-unqualifiedName) (lambda () (lambda (n) (vector 8 1 1 (Text-Parser-option 'erased 'erased (Prelude-Basics-C-124C-124 0 (lambda () 0)) (vector 6 ) (vector 7 0 (Parser-Rule-Source-symbol ":") (lambda () (lambda (_-586) (TTImp-Parser-appExpr arg-0 arg-1))))) (lambda (ty) (vector 0 (vector 0 (vector 0 n) ty))))))))))
(define TTImp-Parser-atom (lambda (arg-0) (vector 9 0 0 (vector 7 1 (Parser-Rule-Source-exactIdent "Type") (lambda () (lambda (_-267) (vector 0 (vector 7 ))))) (lambda () (vector 9 (Prelude-Basics-C-124C-124 0 (lambda () 1)) 0 (vector 7 1 (Parser-Rule-Source-symbol "_") (lambda () (lambda (_-284) (vector 0 (vector 6 ))))) (lambda () (vector 9 0 (Prelude-Basics-C-124C-124 0 (lambda () 1)) (vector 7 1 (Parser-Rule-Source-holeName) (lambda () (lambda (n) (vector 0 (vector 5 (vector 0 n)))))) (lambda () (vector 7 1 (Parser-Rule-Source-name) (lambda () (lambda (x) (vector 0 (vector 0 x)))))))))))))
(define TTImp-Parser-argExpr (lambda (arg-0 arg-1) (vector 8 1 0 (Parser-Rule-Source-continue arg-1) (lambda (_-423) (TTImp-Parser-simpleExpr arg-0 arg-1)))))
(define TTImp-Parser-appExpr (lambda (arg-0 arg-1) (vector 7 1 (TTImp-Parser-simpleExpr arg-0 arg-1) (lambda () (lambda (f) (vector 8 1 1 (Text-Parser-many 'erased 'erased (TTImp-Parser-argExpr arg-0 arg-1)) (lambda (args) (vector 0 (TTImp-TTImp-apply f args)))))))))
(load-shared-object "libidris2_support.so")
(collect-request-handler (lambda () (collect) (blodwen-run-finalisers)))
(PrimIO-unsafePerformIO 'erased (lambda (eta-0) (Idris-Main-main eta-0)))(collect 4)
(blodwen-run-finalisers))
