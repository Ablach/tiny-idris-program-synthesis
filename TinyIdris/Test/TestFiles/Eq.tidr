data Eq : (a : Type) -> a -> a -> Type where
  refl : (a : Type) -> (x : a) -> Eq a x x

data Nat : Type where
   Z : Nat
   S : Nat -> Nat

add : Nat -> Nat -> Nat
pat n : Nat =>
   add Z n = n
pat n : Nat, m : Nat => 
   add (S n) m = S (add n m)

data List : Type -> Type where
  Nil : (a : Type) -> List a
  Cons : (a : Type) -> a -> List a -> List a

data Vec : Nat -> Type -> Type where
  Nil : (a : Type) -> Vec Z a
  Cons : (a : Type) -> (n : Nat) -> a -> Vec n a -> Vec (S n) a

len : (a : _) -> List a -> Nat
pat a : Type =>
  len a (Nil a) = Z
pat a : Type, x : a, xs : List a =>
  len a (Cons a x xs) = S (len a xs)

listToVec : (a : _) -> (xs : List a) -> Vec (len xs) a
pat a : Type =>
  listToVec a (Nil a) = Nil a 
pat a : Type, x : a, xs : List a =>
  listToVec a (Cons a x xs) = Cons a (len xs) x (listToVec a xs)

vecToList : (a : _) -> (n : _) -> Vect n a -> List a
pat a : Type => 
  vecToList a Z Nil a = Nil a
pat a : Type, n : Nat, x : a, xs : Vec n a =>
  vecToList a (S n) (Cons a n x xs) = Cons a x (vecToList a n xs)

sym : (a : _) -> (x : a) -> (y : a) -> Eq x y -> Eq y x
pat a : Type, x : a, y : a, prf : (Eq x y) =>
  sym a x y prf = ?e01

trans : (a : _) -> (x : a) -> (y : a) -> (z : a) -> Eq x y -> Eq y z -> Eq x z
pat a : Type, x : a, y : a, z : a, prf : (Eq x y), prf' : (Eq y z) =>
  trans a x y x prf prf' = ?e02

cong : (a : _) -> (b : _) -> (x : a) -> (y : a) -> (a -> b) -> Eq x y -> Eq (f x) (f y)
pat a : Type, b : Type, x : a, y : a, f : (a -> b), prf : (Eq x y) =>
  cong a b x y f prf = ?e03

vofLofV : (a : _) -> (n : Nat) -> (v : Vec n a) -> Eq (listToVec (VecToList v))  v
pat a : Type =>
  vofLofV a Z (Nil a) = ?e04
pat a : Type, n : Nat, x : a, xs : Vec n a =>
  vofLofV a (S n) (Cons a n x xs) = ?e05

