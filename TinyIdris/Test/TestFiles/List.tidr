data List : Type -> Type where
  Nil : (a : Type) -> List a
  Cons : (a : Type) -> a -> List a -> List a

data Nat : Type where
  Z : Nat
  S : Nat -> Nat

data Bool : Type where
  T : Bool
  F : Bool

data Pair : Type -> Type -> Type where
  MkPair : (a : Type) -> (b : Type) -> a -> b -> Pair a b

data Maybe : Type -> Type where
 Just : (a : Type) -> a -> Maybe a
 Nothing : (a : Type) -> Maybe a

ifte : (a : Type) -> Bool -> a -> a -> a
pat a : Type, et : a, ef : a =>
  ifte a T et ef = et
pat a : Type, et : a, ef : a =>
  ifte a F et ef = ef


append : (a : Type) -> (xs : List a) -> (ys : List a) -> List a

map : (a : Type) -> (b : Type) -> (a -> b) -> List a -> List b

foldr : (a : Type) -> (b : Type) -> (a -> b -> b) -> (acc : b) -> List a -> b

replicate : (a : Type) -> (x : a) -> Nat -> List a

drop : (a : Type) -> (n : Nat) -> (xs : List a) -> List a

isEmpty : (a : Type) -> List a -> Bool

isElem : (a : Type) -> a -> List a -> Bool

duplicate : (a : Type) -> List a -> List a

zip : (a : Type) -> (b : Type) -> List a -> List b -> List (Pair a b)

ithElem : (a : Type) -> List a -> Nat -> Maybe a

index : (a : Type) -> a -> List a -> Maybe Nat
