#!/usr/bin/chezscheme9.5 --script

; @generated
(import (chezscheme))
(case (machine-type)
  [(i3le ti3le a6le ta6le) (load-shared-object "libc.so.6")]
  [(i3osx ti3osx a6osx ta6osx) (load-shared-object "libc.dylib")]
  [(i3nt ti3nt a6nt ta6nt) (load-shared-object "msvcrt.dll")                           (load-shared-object "ws2_32.dll")]
  [else (load-shared-object "libc.so")])



(let ()
(define (blodwen-os)
  (case (machine-type)
    [(i3le ti3le a6le ta6le) "unix"]  ; GNU/Linux
    [(i3ob ti3ob a6ob ta6ob) "unix"]  ; OpenBSD
    [(i3fb ti3fb a6fb ta6fb) "unix"]  ; FreeBSD
    [(i3nb ti3nb a6nb ta6nb) "unix"]  ; NetBSD
    [(i3osx ti3osx a6osx ta6osx) "darwin"]
    [(i3nt ti3nt a6nt ta6nt) "windows"]
    [else "unknown"]))

(define blodwen-read-args (lambda (desc)
  (case (vector-ref desc 0)
    ((0) '())
    ((1) (cons (vector-ref desc 2)
               (blodwen-read-args (vector-ref desc 3)))))))
(define b+ (lambda (x y bits) (remainder (+ x y) (ash 1 bits))))
(define b- (lambda (x y bits) (remainder (- x y) (ash 1 bits))))
(define b* (lambda (x y bits) (remainder (* x y) (ash 1 bits))))
(define b/ (lambda (x y bits) (remainder (exact-floor (/ x y)) (ash 1 bits))))

(define integer->bits8 (lambda (x) (modulo x (expt 2 8))))
(define integer->bits16 (lambda (x) (modulo x (expt 2 16))))
(define integer->bits32 (lambda (x) (modulo x (expt 2 32))))
(define integer->bits64 (lambda (x) (modulo x (expt 2 64))))

(define blodwen-bits-shl (lambda (x y bits) (remainder (ash x y) (ash 1 bits))))
(define blodwen-shl (lambda (x y) (ash x y)))
(define blodwen-shr (lambda (x y) (ash x (- y))))
(define blodwen-and (lambda (x y) (logand x y)))
(define blodwen-or (lambda (x y) (logor x y)))
(define blodwen-xor (lambda (x y) (logxor x y)))

(define cast-num
  (lambda (x)
    (if (number? x) x 0)))
(define destroy-prefix
  (lambda (x)
    (cond
      ((equal? x "") "")
      ((equal? (string-ref x 0) #\#) "")
      (else x))))
(define cast-string-int
  (lambda (x)
    (floor (cast-num (string->number (destroy-prefix x))))))
(define cast-int-char
  (lambda (x)
    (if (and (>= x 0)
             (<= x #x10ffff))
        (integer->char x)
        0)))
(define exact-floor
  (lambda (x)
    (inexact->exact (floor x))))
(define cast-string-double
  (lambda (x)
    (cast-num (string->number (destroy-prefix x)))))
(define string-cons (lambda (x y) (string-append (string x) y)))
(define get-tag (lambda (x) (vector-ref x 0)))
(define string-reverse (lambda (x)
  (list->string (reverse (string->list x)))))
(define (string-substr off len s)
    (let* ((l (string-length s))
          (b (max 0 off))
          (x (max 0 len))
          (end (min l (+ b x))))
          (if (> b l)
              ""
              (substring s b end))))

(define either-left
  (lambda (x)
    (vector 0 x)))

(define either-right
  (lambda (x)
    (vector 1 x)))

(define blodwen-error-quit
  (lambda (msg)
    (display msg)
    (newline)
    (exit 1)))

(define (blodwen-get-line p)
    (if (port? p)
        (let ((str (get-line p)))
            (if (eof-object? str)
                ""
                str))
        void))

(define (blodwen-get-char p)
    (if (port? p)
        (let ((chr (get-char p)))
            (if (eof-object? chr)
                #\nul
                chr))
        void))

;; Buffers

(define (blodwen-new-buffer size)
  (make-bytevector size 0))

(define (blodwen-buffer-size buf)
  (bytevector-length buf))

(define (blodwen-buffer-setbyte buf loc val)
  (bytevector-u8-set! buf loc val))

(define (blodwen-buffer-getbyte buf loc)
  (bytevector-u8-ref buf loc))

(define (blodwen-buffer-setbits16 buf loc val)
  (bytevector-u16-set! buf loc val (native-endianness)))

(define (blodwen-buffer-getbits16 buf loc)
  (bytevector-u16-ref buf loc (native-endianness)))

(define (blodwen-buffer-setbits32 buf loc val)
  (bytevector-u32-set! buf loc val (native-endianness)))

(define (blodwen-buffer-getbits32 buf loc)
  (bytevector-u32-ref buf loc (native-endianness)))

(define (blodwen-buffer-setbits64 buf loc val)
  (bytevector-u64-set! buf loc val (native-endianness)))

(define (blodwen-buffer-getbits64 buf loc)
  (bytevector-u64-ref buf loc (native-endianness)))

(define (blodwen-buffer-setint32 buf loc val)
  (bytevector-s32-set! buf loc val (native-endianness)))

(define (blodwen-buffer-getint32 buf loc)
  (bytevector-s32-ref buf loc (native-endianness)))

(define (blodwen-buffer-setint buf loc val)
  (bytevector-s64-set! buf loc val (native-endianness)))

(define (blodwen-buffer-getint buf loc)
  (bytevector-s64-ref buf loc (native-endianness)))

(define (blodwen-buffer-setdouble buf loc val)
  (bytevector-ieee-double-set! buf loc val (native-endianness)))

(define (blodwen-buffer-getdouble buf loc)
  (bytevector-ieee-double-ref buf loc (native-endianness)))

(define (blodwen-stringbytelen str)
  (bytevector-length (string->utf8 str)))

(define (blodwen-buffer-setstring buf loc val)
  (let* [(strvec (string->utf8 val))
         (len (bytevector-length strvec))]
    (bytevector-copy! strvec 0 buf loc len)))

(define (blodwen-buffer-getstring buf loc len)
  (let [(newvec (make-bytevector len))]
    (bytevector-copy! buf loc newvec 0 len)
    (utf8->string newvec)))

(define (blodwen-buffer-copydata buf start len dest loc)
  (bytevector-copy! buf start dest loc len))

;; Threads

(define blodwen-thread-data (make-thread-parameter #f))

(define (blodwen-thread p)
    (fork-thread (lambda () (p (vector 0)))))

(define (blodwen-get-thread-data ty)
  (blodwen-thread-data))

(define (blodwen-set-thread-data a)
  (blodwen-thread-data a))

(define (blodwen-mutex) (make-mutex))
(define (blodwen-lock m) (mutex-acquire m))
(define (blodwen-unlock m) (mutex-release m))
(define (blodwen-thisthread) (get-thread-id))

(define (blodwen-condition) (make-condition))
(define (blodwen-condition-wait c m) (condition-wait c m))
(define (blodwen-condition-wait-timeout c m t)
  (let ((sec (div t 1000000))
        (micro (mod t 1000000)))
  (condition-wait c m (make-time 'time-duration (* 1000 micro) sec))))
(define (blodwen-condition-signal c) (condition-signal c))
(define (blodwen-condition-broadcast c) (condition-broadcast c))

(define (blodwen-sleep s) (sleep (make-time 'time-duration 0 s)))
(define (blodwen-usleep s)
  (let ((sec (div s 1000000))
        (micro (mod s 1000000)))
       (sleep (make-time 'time-duration (* 1000 micro) sec))))

(define (blodwen-time) (time-second (current-time)))
(define (blodwen-clock-time-utc) (current-time 'time-utc))
(define (blodwen-clock-time-monotonic) (current-time 'time-monotonic))
(define (blodwen-clock-time-duration) (current-time 'time-duration))
(define (blodwen-clock-time-process) (current-time 'time-process))
(define (blodwen-clock-time-thread) (current-time 'time-thread))
(define (blodwen-clock-time-gccpu) (current-time 'time-collector-cpu))
(define (blodwen-clock-time-gcreal) (current-time 'time-collector-real))
(define (blodwen-is-time? clk) (if (time? clk) 1 0))
(define (blodwen-clock-second time) (time-second time))
(define (blodwen-clock-nanosecond time) (time-nanosecond time))

(define (blodwen-args)
  (define (blodwen-build-args args)
    (if (null? args)
        (vector 0) ; Prelude.List
        (vector 1 (car args) (blodwen-build-args (cdr args)))))
    (blodwen-build-args (command-line)))

(define (blodwen-hasenv var)
  (if (eq? (getenv var) #f) 0 1))

(define (blodwen-system cmd)
  (system cmd))

;; Randoms
(define random-seed-register 0)
(define (initialize-random-seed-once)
  (if (= (virtual-register random-seed-register) 0)
      (let ([seed (time-nanosecond (current-time))])
        (set-virtual-register! random-seed-register seed)
        (random-seed seed))))

(define (blodwen-random-seed seed)
  (set-virtual-register! random-seed-register seed)
  (random-seed seed))
(define blodwen-random
  (case-lambda
    ;; no argument, pick a real value from [0, 1.0)
    [() (begin
          (initialize-random-seed-once)
          (random 1.0))]
    ;; single argument k, pick an integral value from [0, k)
    [(k)
      (begin
        (initialize-random-seed-once)
        (if (> k 0)
              (random k)
              (assertion-violationf 'blodwen-random "invalid range argument ~a" k)))]))

;; For finalisers

(define blodwen-finaliser (make-guardian))
(define (blodwen-register-object obj proc)
  (let [(x (cons obj proc))]
       (blodwen-finaliser x)
       x))
(define blodwen-run-finalisers
  (lambda ()
    (let run ()
      (let ([x (blodwen-finaliser)])
        (when x
          (((cdr x) (car x)) 'erased)
          (run))))))
(define PrimIO-prim__nullAnyPtr (lambda (farg-0) ((foreign-procedure #f "idris2_isNull" (void*) int) farg-0)))
(define IO-Prelude-prim__putStr (lambda (farg-0 farg-1) ((foreign-procedure #f "idris2_putStr" (string) void) farg-0) (vector 0 )))
(define IO-Prelude-prim__getString (lambda (farg-0) ((foreign-procedure #f "idris2_getString" (void*) string) farg-0)))
(define IO-Prelude-prim__getStr (lambda (farg-0) ((foreign-procedure #f "idris2_getStr" () string) )))
(define File-System-prim_fileErrno (lambda (farg-0) ((foreign-procedure #f "idris2_fileErrno" () int) )))
(define File-System-prim__readLine (lambda (farg-0 farg-1) ((foreign-procedure #f "idris2_readLine" (void*) void*) farg-0)))
(define File-System-prim__open (lambda (farg-0 farg-1 farg-2) ((foreign-procedure #f "idris2_openFile" (string string) void*) farg-0 farg-1)))
(define File-System-prim__eof (lambda (farg-0 farg-1) ((foreign-procedure #f "idris2_eof" (void*) int) farg-0)))
(define File-System-prim__close (lambda (farg-0 farg-1) ((foreign-procedure #f "idris2_closeFile" (void*) void) farg-0) (vector 0 )))
(define System-prim__getArgs (lambda (farg-0) (blodwen-args )))
(define prim__add_Int (lambda (arg-0 arg-1) (b+ arg-0 arg-1 63)))
(define prim__add_Integer (lambda (arg-0 arg-1) (+ arg-0 arg-1)))
(define prim__sub_Int (lambda (arg-0 arg-1) (b- arg-0 arg-1 63)))
(define prim__sub_Integer (lambda (arg-0 arg-1) (- arg-0 arg-1)))
(define prim__mul_Int (lambda (arg-0 arg-1) (b* arg-0 arg-1 63)))
(define prim__mul_Integer (lambda (arg-0 arg-1) (* arg-0 arg-1)))
(define prim__lt_Int (lambda (arg-0 arg-1) (or (and (< arg-0 arg-1) 1) 0)))
(define prim__lt_Integer (lambda (arg-0 arg-1) (or (and (< arg-0 arg-1) 1) 0)))
(define prim__lt_String (lambda (arg-0 arg-1) (or (and (string<? arg-0 arg-1) 1) 0)))
(define prim__lte_Int (lambda (arg-0 arg-1) (or (and (<= arg-0 arg-1) 1) 0)))
(define prim__lte_Integer (lambda (arg-0 arg-1) (or (and (<= arg-0 arg-1) 1) 0)))
(define prim__lte_Char (lambda (arg-0 arg-1) (or (and (char<=? arg-0 arg-1) 1) 0)))
(define prim__lte_String (lambda (arg-0 arg-1) (or (and (string<=? arg-0 arg-1) 1) 0)))
(define prim__eq_Int (lambda (arg-0 arg-1) (or (and (= arg-0 arg-1) 1) 0)))
(define prim__eq_Integer (lambda (arg-0 arg-1) (or (and (= arg-0 arg-1) 1) 0)))
(define prim__eq_Char (lambda (arg-0 arg-1) (or (and (char=? arg-0 arg-1) 1) 0)))
(define prim__eq_String (lambda (arg-0 arg-1) (or (and (string=? arg-0 arg-1) 1) 0)))
(define prim__gte_Int (lambda (arg-0 arg-1) (or (and (>= arg-0 arg-1) 1) 0)))
(define prim__gte_Integer (lambda (arg-0 arg-1) (or (and (>= arg-0 arg-1) 1) 0)))
(define prim__gte_Char (lambda (arg-0 arg-1) (or (and (char>=? arg-0 arg-1) 1) 0)))
(define prim__gte_String (lambda (arg-0 arg-1) (or (and (string>=? arg-0 arg-1) 1) 0)))
(define prim__gt_Int (lambda (arg-0 arg-1) (or (and (> arg-0 arg-1) 1) 0)))
(define prim__gt_Integer (lambda (arg-0 arg-1) (or (and (> arg-0 arg-1) 1) 0)))
(define prim__gt_Char (lambda (arg-0 arg-1) (or (and (char>? arg-0 arg-1) 1) 0)))
(define prim__gt_String (lambda (arg-0 arg-1) (or (and (string>? arg-0 arg-1) 1) 0)))
(define prim__strLength (lambda (arg-0) (string-length arg-0)))
(define prim__strHead (lambda (arg-0) (string-ref arg-0 0)))
(define prim__strTail (lambda (arg-0) (substring arg-0 1 (string-length arg-0))))
(define prim__strIndex (lambda (arg-0 arg-1) (string-ref arg-0 arg-1)))
(define prim__strCons (lambda (arg-0 arg-1) (string-cons arg-0 arg-1)))
(define prim__strAppend (lambda (arg-0 arg-1) (string-append arg-0 arg-1)))
(define prim__strReverse (lambda (arg-0) (string-reverse arg-0)))
(define prim__strSubstr (lambda (arg-0 arg-1 arg-2) (string-substr arg-0 arg-1 arg-2)))
(define prim__believe_me (lambda (arg-0 arg-1 arg-2) arg-2))
(define prim__cast_IntString (lambda (arg-0) (number->string arg-0)))
(define prim__cast_IntegerString (lambda (arg-0) (number->string arg-0)))
(define prim__cast_DoubleString (lambda (arg-0) (number->string arg-0)))
(define prim__cast_StringInteger (lambda (arg-0) (cast-string-int arg-0)))
(define prim__cast_IntInteger (lambda (arg-0) arg-0))
(define prim__cast_CharInteger (lambda (arg-0) (char->integer arg-0)))
(define prim__cast_IntegerInt (lambda (arg-0) arg-0))
(define prim__cast_CharInt (lambda (arg-0) (char->integer arg-0)))
(define prim__cast_StringDouble (lambda (arg-0) (cast-string-double arg-0)))
(define prim__cast_IntChar (lambda (arg-0) (cast-int-char arg-0)))
(define Main-Idris-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32main-5798 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-5)) (case (vector-ref sc0 0) ((1) (let ((e-2 (vector-ref sc0 1))) (lambda (eta-0) (Core-Core-coreRun 'erased 'erased (lambda (eta-1) (Main-Idris-runMain arg-3 e-2 eta-1)) (lambda (err) (IO-Prelude-printLn 'erased 'erased (vector 0 (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-45) (lambda (eta-1) (IO-Prelude-map_Functor__IO 'erased 'erased func arg-45 eta-1)))))) (lambda (a) (lambda (arg-112) (lambda (eta-1) arg-112))) (lambda (b) (lambda (a) (lambda (arg-113) (lambda (arg-115) (lambda (eta-1) (let ((act-17 (arg-113 eta-1))) (let ((act-16 (arg-115 eta-1))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-274) (lambda (arg-275) (lambda (eta-1) (let ((act-24 (arg-274 eta-1))) ((arg-275 act-24) eta-1))))))) (lambda (a) (lambda (arg-277) (lambda (eta-1) (let ((act-51 (arg-277 eta-1))) (act-51 eta-1)))))) (lambda (a) (lambda (arg-5832) arg-5832))) (vector 0 (lambda (x) (Core-Core-show_Show__Error x)) (lambda (d) (lambda (x) (Core-Core-showPrec_Show__Error d x))))) err)) (lambda (arg-6) (lambda (eta-1) arg-6)) eta-0)))) (else (IO-Prelude-printLn 'erased 'erased (vector 0 (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-45) (lambda (eta-0) (IO-Prelude-map_Functor__IO 'erased 'erased func arg-45 eta-0)))))) (lambda (a) (lambda (arg-112) (lambda (eta-0) arg-112))) (lambda (b) (lambda (a) (lambda (arg-113) (lambda (arg-115) (lambda (eta-0) (let ((act-17 (arg-113 eta-0))) (let ((act-16 (arg-115 eta-0))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-274) (lambda (arg-275) (lambda (eta-0) (let ((act-24 (arg-274 eta-0))) ((arg-275 act-24) eta-0))))))) (lambda (a) (lambda (arg-277) (lambda (eta-0) (let ((act-51 (arg-277 eta-0))) (act-51 eta-0)))))) (lambda (a) (lambda (arg-5832) arg-5832))) (vector 0 (lambda (x) (Show-Prelude-show_Show__String x)) (lambda (d) (lambda (x) (Show-Prelude-showPrec_Show__String d x))))) (Test-Synthesis-getAnswerFile arg-1)))))))
(define Main-Idris-case--caseC-32blockC-32inC-32main-5777 (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((1) (let ((e-2 (vector-ref sc0 1))) (lambda (eta-0) (let ((act-24 (Test-Synthesis-parseAnswers (Test-Synthesis-getAnswerFile arg-1) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((1) (let ((e-3 (vector-ref sc1 1))) (Core-Core-coreRun 'erased 'erased (lambda (eta-1) (Main-Idris-runMain e-2 e-3 eta-1)) (lambda (err) (IO-Prelude-printLn 'erased 'erased (vector 0 (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-45) (lambda (eta-1) (IO-Prelude-map_Functor__IO 'erased 'erased func arg-45 eta-1)))))) (lambda (a) (lambda (arg-112) (lambda (eta-1) arg-112))) (lambda (b) (lambda (a) (lambda (arg-113) (lambda (arg-115) (lambda (eta-1) (let ((act-17 (arg-113 eta-1))) (let ((act-16 (arg-115 eta-1))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-274) (lambda (arg-275) (lambda (eta-1) (let ((act-25 (arg-274 eta-1))) ((arg-275 act-25) eta-1))))))) (lambda (a) (lambda (arg-277) (lambda (eta-1) (let ((act-51 (arg-277 eta-1))) (act-51 eta-1)))))) (lambda (a) (lambda (arg-5832) arg-5832))) (vector 0 (lambda (x) (Core-Core-show_Show__Error x)) (lambda (d) (lambda (x) (Core-Core-showPrec_Show__Error d x))))) err)) (lambda (arg-4) (lambda (eta-1) arg-4)) eta-0))) (else ((IO-Prelude-printLn 'erased 'erased (vector 0 (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-45) (lambda (eta-1) (IO-Prelude-map_Functor__IO 'erased 'erased func arg-45 eta-1)))))) (lambda (a) (lambda (arg-112) (lambda (eta-1) arg-112))) (lambda (b) (lambda (a) (lambda (arg-113) (lambda (arg-115) (lambda (eta-1) (let ((act-17 (arg-113 eta-1))) (let ((act-16 (arg-115 eta-1))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-274) (lambda (arg-275) (lambda (eta-1) (let ((act-25 (arg-274 eta-1))) ((arg-275 act-25) eta-1))))))) (lambda (a) (lambda (arg-277) (lambda (eta-1) (let ((act-51 (arg-277 eta-1))) (act-51 eta-1)))))) (lambda (a) (lambda (arg-5832) arg-5832))) (vector 0 (lambda (x) (Show-Prelude-show_Show__String x)) (lambda (d) (lambda (x) (Show-Prelude-showPrec_Show__String d x))))) (Test-Synthesis-getAnswerFile arg-1)) eta-0)))))))) (else (let ((e-5 (vector-ref sc0 1))) (IO-Prelude-printLn 'erased 'erased (vector 0 (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-45) (lambda (eta-0) (IO-Prelude-map_Functor__IO 'erased 'erased func arg-45 eta-0)))))) (lambda (a) (lambda (arg-112) (lambda (eta-0) arg-112))) (lambda (b) (lambda (a) (lambda (arg-113) (lambda (arg-115) (lambda (eta-0) (let ((act-17 (arg-113 eta-0))) (let ((act-16 (arg-115 eta-0))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-274) (lambda (arg-275) (lambda (eta-0) (let ((act-24 (arg-274 eta-0))) ((arg-275 act-24) eta-0))))))) (lambda (a) (lambda (arg-277) (lambda (eta-0) (let ((act-51 (arg-277 eta-0))) (act-51 eta-0)))))) (lambda (a) (lambda (arg-5832) arg-5832))) (vector 0 (lambda (x) (Support-Parser-show_Show__C-40ParseErrorC-32C-36tokC-41 'erased (vector 0 (lambda (x-0) (Source-Lexer-Parser-show_Show__Token x-0)) (lambda (d) (lambda (x-0) (Source-Lexer-Parser-showPrec_Show__Token d x-0)))) x)) (lambda (d) (lambda (x) (Support-Parser-showPrec_Show__C-40ParseErrorC-32C-36tokC-41 'erased (vector 0 (lambda (x-0) (Source-Lexer-Parser-show_Show__Token x-0)) (lambda (d-0) (lambda (x-0) (Source-Lexer-Parser-showPrec_Show__Token d-0 x-0)))) d x))))) e-5)))))))
(define Main-Idris-case--main-5743 (lambda (arg-0) (let ((sc0 arg-0)) (case (vector-ref sc0 0) ((1) (let ((e-2 (vector-ref sc0 2))) (let ((sc1 e-2)) (case (vector-ref sc1 0) ((1) (let ((e-4 (vector-ref sc1 1))) (let ((e-5 (vector-ref sc1 2))) (let ((sc2 e-5)) (case (vector-ref sc2 0) ((0) (lambda (eta-0) (let ((act-24 (Source-Parser-parseFile 'erased e-4 (vector 7 1 (Parser-TTImp-prog e-4) (lambda () (lambda (p) (vector 8 1 1 (Source-Rule-Parser-eoi) (lambda (_-5874) (vector 0 p)))))) eta-0))) (let ((sc3 act-24)) (case (vector-ref sc3 0) ((1) (let ((e-3 (vector-ref sc3 1))) (let ((act-25 (Test-Synthesis-parseAnswers (Test-Synthesis-getAnswerFile e-4) eta-0))) (let ((sc4 act-25)) (case (vector-ref sc4 0) ((1) (let ((e-6 (vector-ref sc4 1))) (Core-Core-coreRun 'erased 'erased (lambda (eta-1) (Main-Idris-runMain e-3 e-6 eta-1)) (lambda (err) (IO-Prelude-printLn 'erased 'erased (vector 0 (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-45) (lambda (eta-1) (IO-Prelude-map_Functor__IO 'erased 'erased func arg-45 eta-1)))))) (lambda (a) (lambda (arg-112) (lambda (eta-1) arg-112))) (lambda (b) (lambda (a) (lambda (arg-113) (lambda (arg-115) (lambda (eta-1) (let ((act-17 (arg-113 eta-1))) (let ((act-16 (arg-115 eta-1))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-274) (lambda (arg-275) (lambda (eta-1) (let ((act-26 (arg-274 eta-1))) ((arg-275 act-26) eta-1))))))) (lambda (a) (lambda (arg-277) (lambda (eta-1) (let ((act-51 (arg-277 eta-1))) (act-51 eta-1)))))) (lambda (a) (lambda (arg-5832) arg-5832))) (vector 0 (lambda (x) (Core-Core-show_Show__Error x)) (lambda (d) (lambda (x) (Core-Core-showPrec_Show__Error d x))))) err)) (lambda (arg-1) (lambda (eta-1) arg-1)) eta-0))) (else ((IO-Prelude-printLn 'erased 'erased (vector 0 (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-45) (lambda (eta-1) (IO-Prelude-map_Functor__IO 'erased 'erased func arg-45 eta-1)))))) (lambda (a) (lambda (arg-112) (lambda (eta-1) arg-112))) (lambda (b) (lambda (a) (lambda (arg-113) (lambda (arg-115) (lambda (eta-1) (let ((act-17 (arg-113 eta-1))) (let ((act-16 (arg-115 eta-1))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-274) (lambda (arg-275) (lambda (eta-1) (let ((act-26 (arg-274 eta-1))) ((arg-275 act-26) eta-1))))))) (lambda (a) (lambda (arg-277) (lambda (eta-1) (let ((act-51 (arg-277 eta-1))) (act-51 eta-1)))))) (lambda (a) (lambda (arg-5832) arg-5832))) (vector 0 (lambda (x) (Show-Prelude-show_Show__String x)) (lambda (d) (lambda (x) (Show-Prelude-showPrec_Show__String d x))))) (Test-Synthesis-getAnswerFile e-4)) eta-0))))))) (else (let ((e-6 (vector-ref sc3 1))) ((IO-Prelude-printLn 'erased 'erased (vector 0 (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-45) (lambda (eta-1) (IO-Prelude-map_Functor__IO 'erased 'erased func arg-45 eta-1)))))) (lambda (a) (lambda (arg-112) (lambda (eta-1) arg-112))) (lambda (b) (lambda (a) (lambda (arg-113) (lambda (arg-115) (lambda (eta-1) (let ((act-17 (arg-113 eta-1))) (let ((act-16 (arg-115 eta-1))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-274) (lambda (arg-275) (lambda (eta-1) (let ((act-25 (arg-274 eta-1))) ((arg-275 act-25) eta-1))))))) (lambda (a) (lambda (arg-277) (lambda (eta-1) (let ((act-51 (arg-277 eta-1))) (act-51 eta-1)))))) (lambda (a) (lambda (arg-5832) arg-5832))) (vector 0 (lambda (x) (Support-Parser-show_Show__C-40ParseErrorC-32C-36tokC-41 'erased (vector 0 (lambda (x-0) (Source-Lexer-Parser-show_Show__Token x-0)) (lambda (d) (lambda (x-0) (Source-Lexer-Parser-showPrec_Show__Token d x-0)))) x)) (lambda (d) (lambda (x) (Support-Parser-showPrec_Show__C-40ParseErrorC-32C-36tokC-41 'erased (vector 0 (lambda (x-0) (Source-Lexer-Parser-show_Show__Token x-0)) (lambda (d-0) (lambda (x-0) (Source-Lexer-Parser-showPrec_Show__Token d-0 x-0)))) d x))))) e-6) eta-0))))))))(else (IO-Prelude-putStrLn 'erased (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-45) (lambda (eta-0) (IO-Prelude-map_Functor__IO 'erased 'erased func arg-45 eta-0)))))) (lambda (a) (lambda (arg-112) (lambda (eta-0) arg-112))) (lambda (b) (lambda (a) (lambda (arg-113) (lambda (arg-115) (lambda (eta-0) (let ((act-17 (arg-113 eta-0))) (let ((act-16 (arg-115 eta-0))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-274) (lambda (arg-275) (lambda (eta-0) (let ((act-24 (arg-274 eta-0))) ((arg-275 act-24) eta-0))))))) (lambda (a) (lambda (arg-277) (lambda (eta-0) (let ((act-51 (arg-277 eta-0))) (act-51 eta-0)))))) (lambda (a) (lambda (arg-5832) arg-5832))) "Usage: tinyidris <filename>")))))))(else (IO-Prelude-putStrLn 'erased (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-45) (lambda (eta-0) (IO-Prelude-map_Functor__IO 'erased 'erased func arg-45 eta-0)))))) (lambda (a) (lambda (arg-112) (lambda (eta-0) arg-112))) (lambda (b) (lambda (a) (lambda (arg-113) (lambda (arg-115) (lambda (eta-0) (let ((act-17 (arg-113 eta-0))) (let ((act-16 (arg-115 eta-0))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-274) (lambda (arg-275) (lambda (eta-0) (let ((act-24 (arg-274 eta-0))) ((arg-275 act-24) eta-0))))))) (lambda (a) (lambda (arg-277) (lambda (eta-0) (let ((act-51 (arg-277 eta-0))) (act-51 eta-0)))))) (lambda (a) (lambda (arg-5832) arg-5832))) "Usage: tinyidris <filename>"))))))(else (IO-Prelude-putStrLn 'erased (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-45) (lambda (eta-0) (IO-Prelude-map_Functor__IO 'erased 'erased func arg-45 eta-0)))))) (lambda (a) (lambda (arg-112) (lambda (eta-0) arg-112))) (lambda (b) (lambda (a) (lambda (arg-113) (lambda (arg-115) (lambda (eta-0) (let ((act-17 (arg-113 eta-0))) (let ((act-16 (arg-115 eta-0))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-274) (lambda (arg-275) (lambda (eta-0) (let ((act-24 (arg-274 eta-0))) ((arg-275 act-24) eta-0))))))) (lambda (a) (lambda (arg-277) (lambda (eta-0) (let ((act-51 (arg-277 eta-0))) (act-51 eta-0)))))) (lambda (a) (lambda (arg-5832) arg-5832))) "Usage: tinyidris <filename>"))))))
(define Main-Idris-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32caseC-32blockC-32inC-32caseC-32blockC-32inC-32repl-5457 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (let ((sc0 arg-6)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (lambda (eta-0) (let ((act-24 (let ((act-24 ((IO-Prelude-putStrLn 'erased (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-45) (lambda (eta-1) (IO-Prelude-map_Functor__IO 'erased 'erased func arg-45 eta-1)))))) (lambda (a) (lambda (arg-112) (lambda (eta-1) arg-112))) (lambda (b) (lambda (a) (lambda (arg-113) (lambda (arg-115) (lambda (eta-1) (let ((act-17 (arg-113 eta-1))) (let ((act-16 (arg-115 eta-1))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-274) (lambda (arg-275) (lambda (eta-1) (let ((act-24 (arg-274 eta-1))) ((arg-275 act-24) eta-1))))))) (lambda (a) (lambda (arg-277) (lambda (eta-1) (let ((act-51 (arg-277 eta-1))) (act-51 eta-1)))))) (lambda (a) (lambda (arg-5832) arg-5832))) (Strings-Types-Prelude-C-43C-43 "Checked: " (TT-Core-show_Show__C-40TermC-32C-36varsC-41 (vector 0 ) e-2))) eta-0))) (vector 1 act-24)))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-4 (vector-ref sc1 1))) (vector 0 e-4))) (else (let ((act-25 (let ((act-25 (unbox arg-2))) (vector 1 act-25)))) (let ((sc2 act-25)) (case (vector-ref sc2 0) ((0) (let ((e-4 (vector-ref sc2 1))) (vector 0 e-4))) (else (let ((e-6 (vector-ref sc2 1))) (let ((act-26 (let ((act-26 ((Normalise-Core-getTerm 'erased e-3) eta-0))) (let ((sc3 act-26)) (case (vector-ref sc3 0) ((0) (let ((e-4 (vector-ref sc3 1))) (vector 0 e-4))) (else (let ((e-7 (vector-ref sc3 1))) (let ((act-27 (Normalise-Core-normalise (vector 0 ) e-6 (vector 0 ) e-7 eta-0))) (let ((sc4 act-27)) (case (vector-ref sc4 0) ((0) (let ((e-4 (vector-ref sc4 1))) (vector 0 e-4))) (else (let ((e-8 (vector-ref sc4 1))) (let ((act-28 ((IO-Prelude-putStrLn 'erased (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-45) (lambda (eta-1) (IO-Prelude-map_Functor__IO 'erased 'erased func arg-45 eta-1)))))) (lambda (a) (lambda (arg-112) (lambda (eta-1) arg-112))) (lambda (b) (lambda (a) (lambda (arg-113) (lambda (arg-115) (lambda (eta-1) (let ((act-17 (arg-113 eta-1))) (let ((act-16 (arg-115 eta-1))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-274) (lambda (arg-275) (lambda (eta-1) (let ((act-28 (arg-274 eta-1))) ((arg-275 act-28) eta-1))))))) (lambda (a) (lambda (arg-277) (lambda (eta-1) (let ((act-51 (arg-277 eta-1))) (act-51 eta-1)))))) (lambda (a) (lambda (arg-5832) arg-5832))) (Strings-Types-Prelude-C-43C-43 "Type: " (TT-Core-show_Show__C-40TermC-32C-36varsC-41 (vector 0 ) e-8))) eta-0))) (vector 1 act-28)))))))))))))) (let ((sc3 act-26)) (case (vector-ref sc3 0) ((0) (let ((e-4 (vector-ref sc3 1))) (vector 0 e-4))) (else (let ((act-27 (Normalise-Core-normalise (vector 0 ) e-6 (vector 0 ) e-2 eta-0))) (let ((sc4 act-27)) (case (vector-ref sc4 0) ((0) (let ((e-4 (vector-ref sc4 1))) (vector 0 e-4))) (else (let ((e-8 (vector-ref sc4 1))) (let ((act-28 (let ((act-28 ((IO-Prelude-putStrLn 'erased (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-45) (lambda (eta-1) (IO-Prelude-map_Functor__IO 'erased 'erased func arg-45 eta-1)))))) (lambda (a) (lambda (arg-112) (lambda (eta-1) arg-112))) (lambda (b) (lambda (a) (lambda (arg-113) (lambda (arg-115) (lambda (eta-1) (let ((act-17 (arg-113 eta-1))) (let ((act-16 (arg-115 eta-1))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-274) (lambda (arg-275) (lambda (eta-1) (let ((act-28 (arg-274 eta-1))) ((arg-275 act-28) eta-1))))))) (lambda (a) (lambda (arg-277) (lambda (eta-1) (let ((act-51 (arg-277 eta-1))) (act-51 eta-1)))))) (lambda (a) (lambda (arg-5832) arg-5832))) (Strings-Types-Prelude-C-43C-43 "Evaluated: " (TT-Core-show_Show__C-40TermC-32C-36varsC-41 (vector 0 ) e-8))) eta-0))) (vector 1 act-28)))) (let ((sc5 act-28)) (case (vector-ref sc5 0) ((0) (let ((e-4 (vector-ref sc5 1))) (vector 0 e-4))) (else (Main-Idris-repl arg-2 arg-1 arg-0 eta-0)))))))))))))))))))))))))))))
(define Main-Idris-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32caseC-32blockC-32inC-32repl-5428 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-5)) (case (vector-ref sc0 0) ((1) (let ((e-2 (vector-ref sc0 1))) (lambda (eta-0) (let ((act-24 ((Term-Elab-TTImp-checkTerm (vector 0 ) arg-2 arg-1 (vector 0 ) e-2 (vector 0 )) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-3 (vector-ref sc1 1))) (vector 0 e-3))) (else (let ((e-5 (vector-ref sc1 1))) (let ((sc2 e-5)) (let ((e-4 (vector-ref sc2 1))) (let ((e-3 (vector-ref sc2 2))) (let ((act-25 (let ((act-25 ((IO-Prelude-putStrLn 'erased (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-45) (lambda (eta-1) (IO-Prelude-map_Functor__IO 'erased 'erased func arg-45 eta-1)))))) (lambda (a) (lambda (arg-112) (lambda (eta-1) arg-112))) (lambda (b) (lambda (a) (lambda (arg-113) (lambda (arg-115) (lambda (eta-1) (let ((act-17 (arg-113 eta-1))) (let ((act-16 (arg-115 eta-1))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-274) (lambda (arg-275) (lambda (eta-1) (let ((act-25 (arg-274 eta-1))) ((arg-275 act-25) eta-1))))))) (lambda (a) (lambda (arg-277) (lambda (eta-1) (let ((act-51 (arg-277 eta-1))) (act-51 eta-1)))))) (lambda (a) (lambda (arg-5832) arg-5832))) (Strings-Types-Prelude-C-43C-43 "Checked: " (TT-Core-show_Show__C-40TermC-32C-36varsC-41 (vector 0 ) e-4))) eta-0))) (vector 1 act-25)))) (let ((sc3 act-25)) (case (vector-ref sc3 0) ((0) (let ((e-6 (vector-ref sc3 1))) (vector 0 e-6))) (else (let ((act-26 (let ((act-26 (unbox arg-2))) (vector 1 act-26)))) (let ((sc4 act-26)) (case (vector-ref sc4 0) ((0) (let ((e-7 (vector-ref sc4 1))) (vector 0 e-7))) (else (let ((e-7 (vector-ref sc4 1))) (let ((act-27 (let ((act-27 ((Normalise-Core-getTerm 'erased e-3) eta-0))) (let ((sc5 act-27)) (case (vector-ref sc5 0) ((0) (let ((e-8 (vector-ref sc5 1))) (vector 0 e-8))) (else (let ((e-8 (vector-ref sc5 1))) (let ((act-28 (Normalise-Core-normalise (vector 0 ) e-7 (vector 0 ) e-8 eta-0))) (let ((sc6 act-28)) (case (vector-ref sc6 0) ((0) (let ((e-9 (vector-ref sc6 1))) (vector 0 e-9))) (else (let ((e-9 (vector-ref sc6 1))) (let ((act-29 ((IO-Prelude-putStrLn 'erased (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-45) (lambda (eta-1) (IO-Prelude-map_Functor__IO 'erased 'erased func arg-45 eta-1)))))) (lambda (a) (lambda (arg-112) (lambda (eta-1) arg-112))) (lambda (b) (lambda (a) (lambda (arg-113) (lambda (arg-115) (lambda (eta-1) (let ((act-17 (arg-113 eta-1))) (let ((act-16 (arg-115 eta-1))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-274) (lambda (arg-275) (lambda (eta-1) (let ((act-29 (arg-274 eta-1))) ((arg-275 act-29) eta-1))))))) (lambda (a) (lambda (arg-277) (lambda (eta-1) (let ((act-51 (arg-277 eta-1))) (act-51 eta-1)))))) (lambda (a) (lambda (arg-5832) arg-5832))) (Strings-Types-Prelude-C-43C-43 "Type: " (TT-Core-show_Show__C-40TermC-32C-36varsC-41 (vector 0 ) e-9))) eta-0))) (vector 1 act-29)))))))))))))) (let ((sc5 act-27)) (case (vector-ref sc5 0) ((0) (let ((e-8 (vector-ref sc5 1))) (vector 0 e-8))) (else (let ((act-28 (Normalise-Core-normalise (vector 0 ) e-7 (vector 0 ) e-4 eta-0))) (let ((sc6 act-28)) (case (vector-ref sc6 0) ((0) (let ((e-9 (vector-ref sc6 1))) (vector 0 e-9))) (else (let ((e-9 (vector-ref sc6 1))) (let ((act-29 (let ((act-29 ((IO-Prelude-putStrLn 'erased (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-45) (lambda (eta-1) (IO-Prelude-map_Functor__IO 'erased 'erased func arg-45 eta-1)))))) (lambda (a) (lambda (arg-112) (lambda (eta-1) arg-112))) (lambda (b) (lambda (a) (lambda (arg-113) (lambda (arg-115) (lambda (eta-1) (let ((act-17 (arg-113 eta-1))) (let ((act-16 (arg-115 eta-1))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-274) (lambda (arg-275) (lambda (eta-1) (let ((act-29 (arg-274 eta-1))) ((arg-275 act-29) eta-1))))))) (lambda (a) (lambda (arg-277) (lambda (eta-1) (let ((act-51 (arg-277 eta-1))) (act-51 eta-1)))))) (lambda (a) (lambda (arg-5832) arg-5832))) (Strings-Types-Prelude-C-43C-43 "Evaluated: " (TT-Core-show_Show__C-40TermC-32C-36varsC-41 (vector 0 ) e-9))) eta-0))) (vector 1 act-29)))) (let ((sc7 act-29)) (case (vector-ref sc7 0) ((0) (let ((e-10 (vector-ref sc7 1))) (vector 0 e-10))) (else (Main-Idris-repl arg-2 arg-1 arg-0 eta-0)))))))))))))))))))))))))))))))))) (else (let ((e-5 (vector-ref sc0 1))) (lambda (eta-0) (let ((act-24 (let ((act-24 ((IO-Prelude-printLn 'erased 'erased (vector 0 (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-45) (lambda (eta-1) (IO-Prelude-map_Functor__IO 'erased 'erased func arg-45 eta-1)))))) (lambda (a) (lambda (arg-112) (lambda (eta-1) arg-112))) (lambda (b) (lambda (a) (lambda (arg-113) (lambda (arg-115) (lambda (eta-1) (let ((act-17 (arg-113 eta-1))) (let ((act-16 (arg-115 eta-1))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-274) (lambda (arg-275) (lambda (eta-1) (let ((act-24 (arg-274 eta-1))) ((arg-275 act-24) eta-1))))))) (lambda (a) (lambda (arg-277) (lambda (eta-1) (let ((act-51 (arg-277 eta-1))) (act-51 eta-1)))))) (lambda (a) (lambda (arg-5832) arg-5832))) (vector 0 (lambda (x) (Support-Parser-show_Show__C-40ParseErrorC-32C-36tokC-41 'erased (vector 0 (lambda (x-0) (Source-Lexer-Parser-show_Show__Token x-0)) (lambda (d) (lambda (x-0) (Source-Lexer-Parser-showPrec_Show__Token d x-0)))) x)) (lambda (d) (lambda (x) (Support-Parser-showPrec_Show__C-40ParseErrorC-32C-36tokC-41 'erased (vector 0 (lambda (x-0) (Source-Lexer-Parser-show_Show__Token x-0)) (lambda (d-0) (lambda (x-0) (Source-Lexer-Parser-showPrec_Show__Token d-0 x-0)))) d x))))) e-5) eta-0))) (vector 1 act-24)))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (Main-Idris-repl arg-2 arg-1 arg-0 eta-0))))))))))))
(define Main-Idris-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32repl-5404 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-5)) (case (vector-ref sc0 0) ((0) (Main-Idris-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32caseC-32blockC-32inC-32repl-5428 arg-0 arg-1 arg-2 arg-3 arg-4 (Source-Parser-runParser 'erased 0 (vector 0 ) arg-4 (Parser-TTImp-expr "(input)" (Source-Rule-Parser-init))))) (else (let ((e-2 (vector-ref sc0 1))) (lambda (eta-0) (let ((act-24 (let ((act-24 ((IO-Prelude-putStrLn 'erased (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-45) (lambda (eta-1) (IO-Prelude-map_Functor__IO 'erased 'erased func arg-45 eta-1)))))) (lambda (a) (lambda (arg-112) (lambda (eta-1) arg-112))) (lambda (b) (lambda (a) (lambda (arg-113) (lambda (arg-115) (lambda (eta-1) (let ((act-17 (arg-113 eta-1))) (let ((act-16 (arg-115 eta-1))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-274) (lambda (arg-275) (lambda (eta-1) (let ((act-24 (arg-274 eta-1))) ((arg-275 act-24) eta-1))))))) (lambda (a) (lambda (arg-277) (lambda (eta-1) (let ((act-51 (arg-277 eta-1))) (act-51 eta-1)))))) (lambda (a) (lambda (arg-5832) arg-5832))) "Running One Test: ") eta-0))) (vector 1 act-24)))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-3 (vector-ref sc1 1))) (vector 0 e-3))) (else (let ((act-25 ((Main-Idris-runTestOne arg-2 arg-1 arg-0 e-2) eta-0))) (let ((sc2 act-25)) (case (vector-ref sc2 0) ((0) (let ((e-3 (vector-ref sc2 1))) (vector 0 e-3))) (else (Main-Idris-repl arg-2 arg-1 arg-0 eta-0))))))))))))))))
(define Main-Idris-case--caseC-32blockC-32inC-32repl-5389 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-5)) (cond ((equal? sc0 1) (Main-Idris-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32repl-5404 arg-0 arg-1 arg-2 arg-3 arg-4 (Main-Idris-isTestOne arg-4))) (else (lambda (eta-0) (let ((act-24 (let ((act-24 ((IO-Prelude-putStrLn 'erased (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-45) (lambda (eta-1) (IO-Prelude-map_Functor__IO 'erased 'erased func arg-45 eta-1)))))) (lambda (a) (lambda (arg-112) (lambda (eta-1) arg-112))) (lambda (b) (lambda (a) (lambda (arg-113) (lambda (arg-115) (lambda (eta-1) (let ((act-17 (arg-113 eta-1))) (let ((act-16 (arg-115 eta-1))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-274) (lambda (arg-275) (lambda (eta-1) (let ((act-24 (arg-274 eta-1))) ((arg-275 act-24) eta-1))))))) (lambda (a) (lambda (arg-277) (lambda (eta-1) (let ((act-51 (arg-277 eta-1))) (act-51 eta-1)))))) (lambda (a) (lambda (arg-5832) arg-5832))) "Running tests: ") eta-0))) (vector 1 act-24)))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((act-25 (Test-Synthesis-runTests arg-2 arg-1 arg-0 eta-0))) (let ((sc2 act-25)) (case (vector-ref sc2 0) ((0) (let ((e-2 (vector-ref sc2 1))) (vector 0 e-2))) (else (Main-Idris-repl arg-2 arg-1 arg-0 eta-0)))))))))))))))
(define Main-Idris-case--repl-5374 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-5)) (case (vector-ref sc0 0) ((0) (Main-Idris-case--caseC-32blockC-32inC-32repl-5389 arg-0 arg-1 arg-2 arg-3 arg-4 (Main-Idris-isTest arg-4))) (else (let ((e-2 (vector-ref sc0 1))) (lambda (eta-0) (let ((act-24 (let ((act-24 ((IO-Prelude-putStrLn 'erased (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-45) (lambda (eta-1) (IO-Prelude-map_Functor__IO 'erased 'erased func arg-45 eta-1)))))) (lambda (a) (lambda (arg-112) (lambda (eta-1) arg-112))) (lambda (b) (lambda (a) (lambda (arg-113) (lambda (arg-115) (lambda (eta-1) (let ((act-17 (arg-113 eta-1))) (let ((act-16 (arg-115 eta-1))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-274) (lambda (arg-275) (lambda (eta-1) (let ((act-24 (arg-274 eta-1))) ((arg-275 act-24) eta-1))))))) (lambda (a) (lambda (arg-277) (lambda (eta-1) (let ((act-51 (arg-277 eta-1))) (act-51 eta-1)))))) (lambda (a) (lambda (arg-5832) arg-5832))) "Running Auto Search: ") eta-0))) (vector 1 act-24)))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-3 (vector-ref sc1 1))) (vector 0 e-3))) (else (let ((act-25 ((Main-Idris-runAuto arg-2 arg-1 arg-0 e-2) eta-0))) (let ((sc2 act-25)) (case (vector-ref sc2 0) ((0) (let ((e-3 (vector-ref sc2 1))) (vector 0 e-3))) (else (Main-Idris-repl arg-2 arg-1 arg-0 eta-0))))))))))))))))
(define Main-Idris-case--caseC-32blockC-32inC-32runTestOne-5296 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-4)) (case (vector-ref sc0 0) ((0) (let ((e-0 (vector-ref sc0 1))) (lambda (eta-0) (Test-Synthesis-testOne arg-3 arg-2 arg-1 e-0 eta-0))))(else (lambda (eta-0) (let ((act-24 ((IO-Prelude-putStrLn 'erased (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-45) (lambda (eta-1) (IO-Prelude-map_Functor__IO 'erased 'erased func arg-45 eta-1)))))) (lambda (a) (lambda (arg-112) (lambda (eta-1) arg-112))) (lambda (b) (lambda (a) (lambda (arg-113) (lambda (arg-115) (lambda (eta-1) (let ((act-17 (arg-113 eta-1))) (let ((act-16 (arg-115 eta-1))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-274) (lambda (arg-275) (lambda (eta-1) (let ((act-24 (arg-274 eta-1))) ((arg-275 act-24) eta-1))))))) (lambda (a) (lambda (arg-277) (lambda (eta-1) (let ((act-51 (arg-277 eta-1))) (act-51 eta-1)))))) (lambda (a) (lambda (arg-5832) arg-5832))) "Not a hole or var") eta-0))) (vector 1 act-24))))))))
(define Main-Idris-case--runTestOne-5273 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-4)) (case (vector-ref sc0 0) ((1) (let ((e-2 (vector-ref sc0 1))) (lambda (eta-0) (let ((act-24 (let ((sc1 e-2)) (case (vector-ref sc1 0) ((0) (let ((e-0 (vector-ref sc1 1))) (Test-Synthesis-testOne arg-3 arg-2 arg-1 e-0 eta-0)))(else (let ((act-24 ((IO-Prelude-putStrLn 'erased (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-45) (lambda (eta-1) (IO-Prelude-map_Functor__IO 'erased 'erased func arg-45 eta-1)))))) (lambda (a) (lambda (arg-112) (lambda (eta-1) arg-112))) (lambda (b) (lambda (a) (lambda (arg-113) (lambda (arg-115) (lambda (eta-1) (let ((act-17 (arg-113 eta-1))) (let ((act-16 (arg-115 eta-1))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-274) (lambda (arg-275) (lambda (eta-1) (let ((act-24 (arg-274 eta-1))) ((arg-275 act-24) eta-1))))))) (lambda (a) (lambda (arg-277) (lambda (eta-1) (let ((act-51 (arg-277 eta-1))) (act-51 eta-1)))))) (lambda (a) (lambda (arg-5832) arg-5832))) "Not a hole or var") eta-0))) (vector 1 act-24))))))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-3 (vector-ref sc1 1))) (vector 0 e-3))) (else (Main-Idris-repl arg-3 arg-2 arg-1 eta-0)))))))) (else (let ((e-5 (vector-ref sc0 1))) (lambda (eta-0) (let ((act-24 (let ((act-24 ((IO-Prelude-printLn 'erased 'erased (vector 0 (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-45) (lambda (eta-1) (IO-Prelude-map_Functor__IO 'erased 'erased func arg-45 eta-1)))))) (lambda (a) (lambda (arg-112) (lambda (eta-1) arg-112))) (lambda (b) (lambda (a) (lambda (arg-113) (lambda (arg-115) (lambda (eta-1) (let ((act-17 (arg-113 eta-1))) (let ((act-16 (arg-115 eta-1))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-274) (lambda (arg-275) (lambda (eta-1) (let ((act-24 (arg-274 eta-1))) ((arg-275 act-24) eta-1))))))) (lambda (a) (lambda (arg-277) (lambda (eta-1) (let ((act-51 (arg-277 eta-1))) (act-51 eta-1)))))) (lambda (a) (lambda (arg-5832) arg-5832))) (vector 0 (lambda (x) (Support-Parser-show_Show__C-40ParseErrorC-32C-36tokC-41 'erased (vector 0 (lambda (x-0) (Source-Lexer-Parser-show_Show__Token x-0)) (lambda (d) (lambda (x-0) (Source-Lexer-Parser-showPrec_Show__Token d x-0)))) x)) (lambda (d) (lambda (x) (Support-Parser-showPrec_Show__C-40ParseErrorC-32C-36tokC-41 'erased (vector 0 (lambda (x-0) (Source-Lexer-Parser-show_Show__Token x-0)) (lambda (d-0) (lambda (x-0) (Source-Lexer-Parser-showPrec_Show__Token d-0 x-0)))) d x))))) e-5) eta-0))) (vector 1 act-24)))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (Main-Idris-repl arg-3 arg-2 arg-1 eta-0))))))))))))
(define Main-Idris-case--caseC-32blockC-32inC-32runAuto-5202 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-4)) (case (vector-ref sc0 0) ((0) (let ((e-0 (vector-ref sc0 1))) (lambda (eta-0) (let ((act-24 (Synthesise-Synthesis-run arg-3 arg-2 e-0 eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc1 1))) (Core-Core-log e-5 eta-0)))))))))(else (lambda (eta-0) (let ((act-24 ((IO-Prelude-putStrLn 'erased (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-45) (lambda (eta-1) (IO-Prelude-map_Functor__IO 'erased 'erased func arg-45 eta-1)))))) (lambda (a) (lambda (arg-112) (lambda (eta-1) arg-112))) (lambda (b) (lambda (a) (lambda (arg-113) (lambda (arg-115) (lambda (eta-1) (let ((act-17 (arg-113 eta-1))) (let ((act-16 (arg-115 eta-1))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-274) (lambda (arg-275) (lambda (eta-1) (let ((act-24 (arg-274 eta-1))) ((arg-275 act-24) eta-1))))))) (lambda (a) (lambda (arg-277) (lambda (eta-1) (let ((act-51 (arg-277 eta-1))) (act-51 eta-1)))))) (lambda (a) (lambda (arg-5832) arg-5832))) "Not a hole or var") eta-0))) (vector 1 act-24))))))))
(define Main-Idris-case--runAuto-5179 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-4)) (case (vector-ref sc0 0) ((1) (let ((e-2 (vector-ref sc0 1))) (lambda (eta-0) (let ((act-24 (let ((sc1 e-2)) (case (vector-ref sc1 0) ((0) (let ((e-0 (vector-ref sc1 1))) (let ((act-24 (Synthesise-Synthesis-run arg-3 arg-2 e-0 eta-0))) (let ((sc2 act-24)) (case (vector-ref sc2 0) ((0) (let ((e-3 (vector-ref sc2 1))) (vector 0 e-3))) (else (let ((e-5 (vector-ref sc2 1))) (Core-Core-log e-5 eta-0))))))))(else (let ((act-24 ((IO-Prelude-putStrLn 'erased (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-45) (lambda (eta-1) (IO-Prelude-map_Functor__IO 'erased 'erased func arg-45 eta-1)))))) (lambda (a) (lambda (arg-112) (lambda (eta-1) arg-112))) (lambda (b) (lambda (a) (lambda (arg-113) (lambda (arg-115) (lambda (eta-1) (let ((act-17 (arg-113 eta-1))) (let ((act-16 (arg-115 eta-1))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-274) (lambda (arg-275) (lambda (eta-1) (let ((act-24 (arg-274 eta-1))) ((arg-275 act-24) eta-1))))))) (lambda (a) (lambda (arg-277) (lambda (eta-1) (let ((act-51 (arg-277 eta-1))) (act-51 eta-1)))))) (lambda (a) (lambda (arg-5832) arg-5832))) "Not a hole or var") eta-0))) (vector 1 act-24))))))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-3 (vector-ref sc1 1))) (vector 0 e-3))) (else (Main-Idris-repl arg-3 arg-2 arg-1 eta-0)))))))) (else (let ((e-5 (vector-ref sc0 1))) (lambda (eta-0) (let ((act-24 (let ((act-24 ((IO-Prelude-printLn 'erased 'erased (vector 0 (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-45) (lambda (eta-1) (IO-Prelude-map_Functor__IO 'erased 'erased func arg-45 eta-1)))))) (lambda (a) (lambda (arg-112) (lambda (eta-1) arg-112))) (lambda (b) (lambda (a) (lambda (arg-113) (lambda (arg-115) (lambda (eta-1) (let ((act-17 (arg-113 eta-1))) (let ((act-16 (arg-115 eta-1))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-274) (lambda (arg-275) (lambda (eta-1) (let ((act-24 (arg-274 eta-1))) ((arg-275 act-24) eta-1))))))) (lambda (a) (lambda (arg-277) (lambda (eta-1) (let ((act-51 (arg-277 eta-1))) (act-51 eta-1)))))) (lambda (a) (lambda (arg-5832) arg-5832))) (vector 0 (lambda (x) (Support-Parser-show_Show__C-40ParseErrorC-32C-36tokC-41 'erased (vector 0 (lambda (x-0) (Source-Lexer-Parser-show_Show__Token x-0)) (lambda (d) (lambda (x-0) (Source-Lexer-Parser-showPrec_Show__Token d x-0)))) x)) (lambda (d) (lambda (x) (Support-Parser-showPrec_Show__C-40ParseErrorC-32C-36tokC-41 'erased (vector 0 (lambda (x-0) (Source-Lexer-Parser-show_Show__Token x-0)) (lambda (d-0) (lambda (x-0) (Source-Lexer-Parser-showPrec_Show__Token d-0 x-0)))) d x))))) e-5) eta-0))) (vector 1 act-24)))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (Main-Idris-repl arg-3 arg-2 arg-1 eta-0))))))))))))
(define Main-Idris-case--isTestOne-5142 (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (cond ((equal? sc0 0) (vector 1 (Strings-Data-strSubstr 2 (Strings-Data-strLength arg-0) arg-0))) (else (vector 0 ))))))
(define Main-Idris-case--isAuto-5125 (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (cond ((equal? sc0 0) (vector 1 (Strings-Data-strSubstr 5 (Strings-Data-strLength arg-0) arg-0))) (else (vector 0 ))))))
(define Main-Idris-runTestOne (lambda (arg-0 arg-1 arg-2 arg-3) (Main-Idris-case--runTestOne-5273 arg-3 arg-2 arg-1 arg-0 (Source-Parser-runParser 'erased 0 (vector 0 ) arg-3 (Parser-TTImp-expr "(input)" (Source-Rule-Parser-init))))))
(define Main-Idris-runMain (lambda (arg-0 arg-1 ext-0) (let ((act-24 (let ((act-24 (Context-Core-initDefs ext-0))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (Core-Core-newRef 'erased 'erased (vector "Core.Context.Ctxt" ) e-5 ext-0)))))))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (let ((act-25 (Core-Core-newRef 'erased 'erased (vector "Core.UnifyState.UST" ) (UnifyState-Core-initUState) ext-0))) (let ((sc1 act-25)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-6 (vector-ref sc1 1))) (let ((act-26 (Core-Core-newRef 'erased 'erased (vector "Synthesis.Test.Answers" ) arg-1 ext-0))) (let ((sc2 act-26)) (case (vector-ref sc2 0) ((0) (let ((e-2 (vector-ref sc2 1))) (vector 0 e-2))) (else (let ((e-7 (vector-ref sc2 1))) (let ((act-27 ((Core-Core-traverse_ 'erased 'erased (lambda (eta-0) (ProcessDecl-TTImp-processDecl e-5 e-6 eta-0)) arg-0) ext-0))) (let ((sc3 act-27)) (case (vector-ref sc3 0) ((0) (let ((e-2 (vector-ref sc3 1))) (vector 0 e-2))) (else (Main-Idris-repl e-5 e-6 e-7 ext-0))))))))))))))))))))))
(define Main-Idris-runAuto (lambda (arg-0 arg-1 arg-2 arg-3) (Main-Idris-case--runAuto-5179 arg-3 arg-2 arg-1 arg-0 (Source-Parser-runParser 'erased 0 (vector 0 ) arg-3 (Parser-TTImp-expr "(input)" (Source-Rule-Parser-init))))))
(define Main-Idris-repl (lambda (arg-0 arg-1 arg-2 ext-0) (let ((act-24 (let ((act-24 ((IO-Prelude-putStr 'erased (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-45) (lambda (eta-0) (IO-Prelude-map_Functor__IO 'erased 'erased func arg-45 eta-0)))))) (lambda (a) (lambda (arg-112) (lambda (eta-0) arg-112))) (lambda (b) (lambda (a) (lambda (arg-113) (lambda (arg-115) (lambda (eta-0) (let ((act-17 (arg-113 eta-0))) (let ((act-16 (arg-115 eta-0))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-274) (lambda (arg-275) (lambda (eta-0) (let ((act-24 (arg-274 eta-0))) ((arg-275 act-24) eta-0))))))) (lambda (a) (lambda (arg-277) (lambda (eta-0) (let ((act-51 (arg-277 eta-0))) (act-51 eta-0)))))) (lambda (a) (lambda (arg-5832) arg-5832))) "> ") ext-0))) (vector 1 act-24)))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (let ((act-25 (let ((act-25 ((IO-Prelude-getLine 'erased (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-45) (lambda (eta-0) (IO-Prelude-map_Functor__IO 'erased 'erased func arg-45 eta-0)))))) (lambda (a) (lambda (arg-112) (lambda (eta-0) arg-112))) (lambda (b) (lambda (a) (lambda (arg-113) (lambda (arg-115) (lambda (eta-0) (let ((act-17 (arg-113 eta-0))) (let ((act-16 (arg-115 eta-0))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-274) (lambda (arg-275) (lambda (eta-0) (let ((act-25 (arg-274 eta-0))) ((arg-275 act-25) eta-0))))))) (lambda (a) (lambda (arg-277) (lambda (eta-0) (let ((act-51 (arg-277 eta-0))) (act-51 eta-0)))))) (lambda (a) (lambda (arg-5832) arg-5832)))) ext-0))) (vector 1 act-25)))) (let ((sc1 act-25)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-6 (vector-ref sc1 1))) ((Main-Idris-case--repl-5374 arg-2 arg-1 arg-0 e-5 e-6 (Main-Idris-isAuto e-6)) ext-0)))))))))))))
(define Main-Idris-main (lambda (ext-0) (let ((act-24 ((System-getArgs 'erased (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-45) (lambda (eta-0) (IO-Prelude-map_Functor__IO 'erased 'erased func arg-45 eta-0)))))) (lambda (a) (lambda (arg-112) (lambda (eta-0) arg-112))) (lambda (b) (lambda (a) (lambda (arg-113) (lambda (arg-115) (lambda (eta-0) (let ((act-17 (arg-113 eta-0))) (let ((act-16 (arg-115 eta-0))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-274) (lambda (arg-275) (lambda (eta-0) (let ((act-24 (arg-274 eta-0))) ((arg-275 act-24) eta-0))))))) (lambda (a) (lambda (arg-277) (lambda (eta-0) (let ((act-51 (arg-277 eta-0))) (act-51 eta-0)))))) (lambda (a) (lambda (arg-5832) arg-5832)))) ext-0))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((1) (let ((e-2 (vector-ref sc0 2))) (let ((sc1 e-2)) (case (vector-ref sc1 0) ((1) (let ((e-4 (vector-ref sc1 1))) (let ((e-5 (vector-ref sc1 2))) (let ((sc2 e-5)) (case (vector-ref sc2 0) ((0) (let ((act-25 (Source-Parser-parseFile 'erased e-4 (vector 7 1 (Parser-TTImp-prog e-4) (lambda () (lambda (p) (vector 8 1 1 (Source-Rule-Parser-eoi) (lambda (_-5874) (vector 0 p)))))) ext-0))) (let ((sc3 act-25)) (case (vector-ref sc3 0) ((1) (let ((e-3 (vector-ref sc3 1))) (let ((act-26 (Test-Synthesis-parseAnswers (Test-Synthesis-getAnswerFile e-4) ext-0))) (let ((sc4 act-26)) (case (vector-ref sc4 0) ((1) (let ((e-6 (vector-ref sc4 1))) (Core-Core-coreRun 'erased 'erased (lambda (eta-0) (Main-Idris-runMain e-3 e-6 eta-0)) (lambda (err) (IO-Prelude-printLn 'erased 'erased (vector 0 (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-45) (lambda (eta-0) (IO-Prelude-map_Functor__IO 'erased 'erased func arg-45 eta-0)))))) (lambda (a) (lambda (arg-112) (lambda (eta-0) arg-112))) (lambda (b) (lambda (a) (lambda (arg-113) (lambda (arg-115) (lambda (eta-0) (let ((act-17 (arg-113 eta-0))) (let ((act-16 (arg-115 eta-0))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-274) (lambda (arg-275) (lambda (eta-0) (let ((act-27 (arg-274 eta-0))) ((arg-275 act-27) eta-0))))))) (lambda (a) (lambda (arg-277) (lambda (eta-0) (let ((act-51 (arg-277 eta-0))) (act-51 eta-0)))))) (lambda (a) (lambda (arg-5832) arg-5832))) (vector 0 (lambda (x) (Core-Core-show_Show__Error x)) (lambda (d) (lambda (x) (Core-Core-showPrec_Show__Error d x))))) err)) (lambda (arg-0) (lambda (eta-0) arg-0)) ext-0))) (else ((IO-Prelude-printLn 'erased 'erased (vector 0 (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-45) (lambda (eta-0) (IO-Prelude-map_Functor__IO 'erased 'erased func arg-45 eta-0)))))) (lambda (a) (lambda (arg-112) (lambda (eta-0) arg-112))) (lambda (b) (lambda (a) (lambda (arg-113) (lambda (arg-115) (lambda (eta-0) (let ((act-17 (arg-113 eta-0))) (let ((act-16 (arg-115 eta-0))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-274) (lambda (arg-275) (lambda (eta-0) (let ((act-27 (arg-274 eta-0))) ((arg-275 act-27) eta-0))))))) (lambda (a) (lambda (arg-277) (lambda (eta-0) (let ((act-51 (arg-277 eta-0))) (act-51 eta-0)))))) (lambda (a) (lambda (arg-5832) arg-5832))) (vector 0 (lambda (x) (Show-Prelude-show_Show__String x)) (lambda (d) (lambda (x) (Show-Prelude-showPrec_Show__String d x))))) (Test-Synthesis-getAnswerFile e-4)) ext-0))))))) (else (let ((e-6 (vector-ref sc3 1))) ((IO-Prelude-printLn 'erased 'erased (vector 0 (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-45) (lambda (eta-0) (IO-Prelude-map_Functor__IO 'erased 'erased func arg-45 eta-0)))))) (lambda (a) (lambda (arg-112) (lambda (eta-0) arg-112))) (lambda (b) (lambda (a) (lambda (arg-113) (lambda (arg-115) (lambda (eta-0) (let ((act-17 (arg-113 eta-0))) (let ((act-16 (arg-115 eta-0))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-274) (lambda (arg-275) (lambda (eta-0) (let ((act-26 (arg-274 eta-0))) ((arg-275 act-26) eta-0))))))) (lambda (a) (lambda (arg-277) (lambda (eta-0) (let ((act-51 (arg-277 eta-0))) (act-51 eta-0)))))) (lambda (a) (lambda (arg-5832) arg-5832))) (vector 0 (lambda (x) (Support-Parser-show_Show__C-40ParseErrorC-32C-36tokC-41 'erased (vector 0 (lambda (x-0) (Source-Lexer-Parser-show_Show__Token x-0)) (lambda (d) (lambda (x-0) (Source-Lexer-Parser-showPrec_Show__Token d x-0)))) x)) (lambda (d) (lambda (x) (Support-Parser-showPrec_Show__C-40ParseErrorC-32C-36tokC-41 'erased (vector 0 (lambda (x-0) (Source-Lexer-Parser-show_Show__Token x-0)) (lambda (d-0) (lambda (x-0) (Source-Lexer-Parser-showPrec_Show__Token d-0 x-0)))) d x))))) e-6) ext-0)))))))(else ((IO-Prelude-putStrLn 'erased (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-45) (lambda (eta-0) (IO-Prelude-map_Functor__IO 'erased 'erased func arg-45 eta-0)))))) (lambda (a) (lambda (arg-112) (lambda (eta-0) arg-112))) (lambda (b) (lambda (a) (lambda (arg-113) (lambda (arg-115) (lambda (eta-0) (let ((act-17 (arg-113 eta-0))) (let ((act-16 (arg-115 eta-0))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-274) (lambda (arg-275) (lambda (eta-0) (let ((act-25 (arg-274 eta-0))) ((arg-275 act-25) eta-0))))))) (lambda (a) (lambda (arg-277) (lambda (eta-0) (let ((act-51 (arg-277 eta-0))) (act-51 eta-0)))))) (lambda (a) (lambda (arg-5832) arg-5832))) "Usage: tinyidris <filename>") ext-0)))))))(else ((IO-Prelude-putStrLn 'erased (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-45) (lambda (eta-0) (IO-Prelude-map_Functor__IO 'erased 'erased func arg-45 eta-0)))))) (lambda (a) (lambda (arg-112) (lambda (eta-0) arg-112))) (lambda (b) (lambda (a) (lambda (arg-113) (lambda (arg-115) (lambda (eta-0) (let ((act-17 (arg-113 eta-0))) (let ((act-16 (arg-115 eta-0))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-274) (lambda (arg-275) (lambda (eta-0) (let ((act-25 (arg-274 eta-0))) ((arg-275 act-25) eta-0))))))) (lambda (a) (lambda (arg-277) (lambda (eta-0) (let ((act-51 (arg-277 eta-0))) (act-51 eta-0)))))) (lambda (a) (lambda (arg-5832) arg-5832))) "Usage: tinyidris <filename>") ext-0))))))(else ((IO-Prelude-putStrLn 'erased (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-45) (lambda (eta-0) (IO-Prelude-map_Functor__IO 'erased 'erased func arg-45 eta-0)))))) (lambda (a) (lambda (arg-112) (lambda (eta-0) arg-112))) (lambda (b) (lambda (a) (lambda (arg-113) (lambda (arg-115) (lambda (eta-0) (let ((act-17 (arg-113 eta-0))) (let ((act-16 (arg-115 eta-0))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-274) (lambda (arg-275) (lambda (eta-0) (let ((act-25 (arg-274 eta-0))) ((arg-275 act-25) eta-0))))))) (lambda (a) (lambda (arg-277) (lambda (eta-0) (let ((act-51 (arg-277 eta-0))) (act-51 eta-0)))))) (lambda (a) (lambda (arg-5832) arg-5832))) "Usage: tinyidris <filename>") ext-0)))))))
(define Main-Idris-isTestOne (lambda (arg-0) (Main-Idris-case--isTestOne-5142 arg-0 (Strings-Data-isPrefixOf "t" arg-0))))
(define Main-Idris-isTest (lambda (arg-0) (Strings-Data-isPrefixOf "test" arg-0)))
(define Main-Idris-isAuto (lambda (arg-0) (Main-Idris-case--isAuto-5125 arg-0 (Strings-Data-isPrefixOf "auto" arg-0))))
(define SortedMap-Data-case--delete-4111 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (let ((sc0 arg-6)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 1 arg-2 (+ 1 arg-4) e-2))) (else (let ((e-5 (vector-ref sc0 1))) (vector 1 arg-2 arg-4 e-5)))))))
(define SortedMap-Data-case--delete-4049 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-5)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 1 arg-2 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (let ((sc1 e-5)) (vector 0 arg-2))))))))
(define SortedMap-Data-case--insert-3897 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (let ((sc0 arg-7)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 1 arg-2 arg-3 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (vector 1 arg-2 (+ 1 arg-3) e-5)))))))
(define SortedMap-Data-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32treeDelete-3638 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11) (let ((sc0 arg-11)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 (vector 2 arg-7 arg-9 arg-6 arg-10 e-2)))) (else (let ((e-5 (vector-ref sc0 1))) (vector 0 (SortedMap-Data-merge3 'erased 'erased 'erased 'erased arg-7 arg-9 arg-6 arg-10 e-5))))))))
(define SortedMap-Data-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32treeDelete-3521 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11) (let ((sc0 arg-11)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 (vector 2 arg-7 arg-9 e-2 arg-10 arg-5)))) (else (let ((e-5 (vector-ref sc0 1))) (vector 0 (SortedMap-Data-merge2 'erased 'erased 'erased 'erased arg-7 arg-9 e-5 arg-10 arg-5))))))))
(define SortedMap-Data-case--caseC-32blockC-32inC-32treeDelete-3482 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11) (let ((sc0 arg-11)) (cond ((equal? sc0 0) (SortedMap-Data-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32treeDelete-3521 'erased 'erased 'erased arg-3 arg-4 arg-5 arg-6 arg-7 arg-10 arg-9 arg-8 (SortedMap-Data-treeDelete 'erased 'erased 'erased arg-3 (+ 1 arg-4) arg-10 arg-6))) (else (SortedMap-Data-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32treeDelete-3638 'erased 'erased 'erased arg-3 arg-4 arg-5 arg-6 arg-7 arg-10 arg-9 arg-8 (SortedMap-Data-treeDelete 'erased 'erased 'erased arg-3 (+ 1 arg-4) arg-10 arg-5)))))))
(define SortedMap-Data-case--caseC-32blockC-32inC-32treeDelete-3368 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11) (let ((sc0 arg-11)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 (vector 2 e-2 arg-9 arg-6 arg-8 arg-5)))) (else (let ((e-5 (vector-ref sc0 1))) (vector 0 (SortedMap-Data-merge1 'erased 'erased 'erased 'erased e-5 arg-9 arg-6 arg-8 arg-5))))))))
(define SortedMap-Data-case--treeDelete-3329 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11) (let ((sc0 arg-11)) (cond ((equal? sc0 0) (SortedMap-Data-case--caseC-32blockC-32inC-32treeDelete-3368 'erased 'erased 'erased arg-3 arg-4 arg-8 arg-9 arg-10 arg-7 arg-6 arg-5 (SortedMap-Data-treeDelete 'erased 'erased 'erased arg-3 (+ 1 arg-4) arg-5 arg-10))) (else (SortedMap-Data-case--caseC-32blockC-32inC-32treeDelete-3482 'erased 'erased 'erased arg-3 arg-4 arg-8 arg-9 arg-10 arg-7 arg-6 arg-5 (let ((sc1 arg-3)) (let ((e-5 (vector-ref sc1 5))) ((e-5 arg-5) arg-7)))))))))
(define SortedMap-Data-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32treeDelete-3229 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9) (let ((sc0 arg-6)) (case (vector-ref sc0 0) ((1) (let ((e-4 (vector-ref sc0 1))) (let ((e-5 (vector-ref sc0 2))) (let ((e-6 (vector-ref sc0 3))) (vector 1 (vector 2 e-4 e-5 e-6 arg-8 arg-9)))))) (else (let ((e-11 (vector-ref sc0 1))) (let ((e-12 (vector-ref sc0 2))) (let ((e-13 (vector-ref sc0 3))) (let ((e-14 (vector-ref sc0 4))) (let ((e-15 (vector-ref sc0 5))) (vector 0 (SortedMap-Data-branch4 'erased 'erased 'erased 'erased e-11 e-12 e-13 e-14 e-15 arg-8 arg-9))))))))))))
(define SortedMap-Data-case--caseC-32blockC-32inC-32treeDelete-3163 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9) (let ((sc0 arg-9)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 (vector 1 arg-6 arg-7 e-2)))) (else (let ((e-5 (vector-ref sc0 1))) (let ((sc1 arg-6)) (case (vector-ref sc1 0) ((1) (let ((e-4 (vector-ref sc1 1))) (let ((e-7 (vector-ref sc1 2))) (let ((e-6 (vector-ref sc1 3))) (vector 1 (vector 2 e-4 e-7 e-6 arg-7 e-5)))))) (else (let ((e-11 (vector-ref sc1 1))) (let ((e-12 (vector-ref sc1 2))) (let ((e-13 (vector-ref sc1 3))) (let ((e-14 (vector-ref sc1 4))) (let ((e-15 (vector-ref sc1 5))) (vector 0 (SortedMap-Data-branch4 'erased 'erased 'erased 'erased e-11 e-12 e-13 e-14 e-15 arg-7 e-5))))))))))))))))
(define SortedMap-Data-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32treeDelete-3058 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9) (let ((sc0 arg-5)) (case (vector-ref sc0 0) ((1) (let ((e-4 (vector-ref sc0 1))) (let ((e-5 (vector-ref sc0 2))) (let ((e-6 (vector-ref sc0 3))) (vector 1 (vector 2 arg-9 arg-8 e-4 e-5 e-6)))))) (else (let ((e-11 (vector-ref sc0 1))) (let ((e-12 (vector-ref sc0 2))) (let ((e-13 (vector-ref sc0 3))) (let ((e-14 (vector-ref sc0 4))) (let ((e-15 (vector-ref sc0 5))) (vector 0 (SortedMap-Data-branch4 'erased 'erased 'erased 'erased arg-9 arg-8 e-11 e-12 e-13 e-14 e-15))))))))))))
(define SortedMap-Data-case--caseC-32blockC-32inC-32treeDelete-2992 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9) (let ((sc0 arg-9)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 (vector 1 e-2 arg-7 arg-5)))) (else (let ((e-5 (vector-ref sc0 1))) (let ((sc1 arg-5)) (case (vector-ref sc1 0) ((1) (let ((e-4 (vector-ref sc1 1))) (let ((e-7 (vector-ref sc1 2))) (let ((e-6 (vector-ref sc1 3))) (vector 1 (vector 2 e-5 arg-7 e-4 e-7 e-6)))))) (else (let ((e-11 (vector-ref sc1 1))) (let ((e-12 (vector-ref sc1 2))) (let ((e-13 (vector-ref sc1 3))) (let ((e-14 (vector-ref sc1 4))) (let ((e-15 (vector-ref sc1 5))) (vector 0 (SortedMap-Data-branch4 'erased 'erased 'erased 'erased e-5 arg-7 e-11 e-12 e-13 e-14 e-15))))))))))))))))
(define SortedMap-Data-case--treeDelete-2959 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9) (let ((sc0 arg-9)) (cond ((equal? sc0 0) (SortedMap-Data-case--caseC-32blockC-32inC-32treeDelete-2992 'erased 'erased 'erased arg-3 arg-4 arg-7 arg-8 arg-6 arg-5 (SortedMap-Data-treeDelete 'erased 'erased 'erased arg-3 (+ 1 arg-4) arg-5 arg-8))) (else (SortedMap-Data-case--caseC-32blockC-32inC-32treeDelete-3163 'erased 'erased 'erased arg-3 arg-4 arg-7 arg-8 arg-6 arg-5 (SortedMap-Data-treeDelete 'erased 'erased 'erased arg-3 (+ 1 arg-4) arg-5 arg-7)))))))
(define SortedMap-Data-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32treeDelete-2859 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10) (let ((sc0 arg-10)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 (vector 2 arg-6 arg-8 arg-5 arg-9 e-2)))) (else (let ((e-5 (vector-ref sc0 1))) (let ((sc1 e-5)) (vector 0 (vector 1 arg-6 arg-8 arg-5)))))))))
(define SortedMap-Data-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32treeDelete-2748 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10) (let ((sc0 arg-10)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 (vector 2 arg-6 arg-8 e-2 arg-9 arg-4)))) (else (let ((e-5 (vector-ref sc0 1))) (let ((sc1 e-5)) (vector 0 (vector 1 arg-6 arg-8 arg-4)))))))))
(define SortedMap-Data-case--caseC-32blockC-32inC-32treeDelete-2711 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10) (let ((sc0 arg-10)) (cond ((equal? sc0 0) (SortedMap-Data-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32treeDelete-2748 'erased 'erased 'erased arg-3 arg-4 arg-5 arg-6 arg-9 arg-8 arg-7 (SortedMap-Data-treeDelete 'erased 'erased 'erased arg-3 0 arg-9 arg-5))) (else (SortedMap-Data-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32treeDelete-2859 'erased 'erased 'erased arg-3 arg-4 arg-5 arg-6 arg-9 arg-8 arg-7 (SortedMap-Data-treeDelete 'erased 'erased 'erased arg-3 0 arg-9 arg-4)))))))
(define SortedMap-Data-case--caseC-32blockC-32inC-32treeDelete-2603 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10) (let ((sc0 arg-10)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 (vector 2 e-2 arg-8 arg-5 arg-7 arg-4)))) (else (let ((e-5 (vector-ref sc0 1))) (let ((sc1 e-5)) (vector 0 (vector 1 arg-5 arg-7 arg-4)))))))))
(define SortedMap-Data-case--treeDelete-2566 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10) (let ((sc0 arg-10)) (cond ((equal? sc0 0) (SortedMap-Data-case--caseC-32blockC-32inC-32treeDelete-2603 'erased 'erased 'erased arg-3 arg-7 arg-8 arg-9 arg-6 arg-5 arg-4 (SortedMap-Data-treeDelete 'erased 'erased 'erased arg-3 0 arg-4 arg-9))) (else (SortedMap-Data-case--caseC-32blockC-32inC-32treeDelete-2711 'erased 'erased 'erased arg-3 arg-7 arg-8 arg-9 arg-6 arg-5 arg-4 (let ((sc1 arg-3)) (let ((e-5 (vector-ref sc1 5))) ((e-5 arg-4) arg-6)))))))))
(define SortedMap-Data-case--caseC-32blockC-32inC-32treeDelete-2480 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8) (let ((sc0 arg-8)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 (vector 1 arg-5 arg-6 e-2)))) (else (let ((e-5 (vector-ref sc0 1))) (let ((sc1 e-5)) (vector 1 arg-5))))))))
(define SortedMap-Data-case--caseC-32blockC-32inC-32treeDelete-2391 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8) (let ((sc0 arg-8)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 (vector 1 e-2 arg-6 arg-4)))) (else (let ((e-5 (vector-ref sc0 1))) (let ((sc1 e-5)) (vector 1 arg-4))))))))
(define SortedMap-Data-case--treeDelete-2360 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8) (let ((sc0 arg-8)) (cond ((equal? sc0 0) (SortedMap-Data-case--caseC-32blockC-32inC-32treeDelete-2391 'erased 'erased 'erased arg-3 arg-6 arg-7 arg-5 arg-4 (SortedMap-Data-treeDelete 'erased 'erased 'erased arg-3 0 arg-4 arg-7))) (else (SortedMap-Data-case--caseC-32blockC-32inC-32treeDelete-2480 'erased 'erased 'erased arg-3 arg-6 arg-7 arg-5 arg-4 (SortedMap-Data-treeDelete 'erased 'erased 'erased arg-3 0 arg-4 arg-6)))))))
(define SortedMap-Data-case--treeDelete-2281 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (let ((sc0 arg-7)) (cond ((equal? sc0 0) (vector 1 (vector 0 ))) (else (vector 0 (vector 0 arg-5 arg-6)))))))
(define SortedMap-Data-case--treeInsert-2178 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8) (let ((sc0 arg-8)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (let ((sc1 e-5)) (let ((e-8 (vector-ref sc1 1))) (let ((e-9 (vector-ref sc1 2))) (let ((sc2 e-9)) (let ((e-12 (vector-ref sc2 1))) (let ((e-13 (vector-ref sc2 2))) (vector 1 (vector 1 e-8 e-12 e-13))))))))))))))
(define SortedMap-Data-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32treeInsertC-39-2037 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-13) (let ((sc0 arg-13)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 (vector 2 arg-7 arg-11 arg-6 arg-12 e-2)))) (else (let ((e-5 (vector-ref sc0 1))) (let ((sc1 e-5)) (let ((e-8 (vector-ref sc1 1))) (let ((e-9 (vector-ref sc1 2))) (let ((sc2 e-9)) (let ((e-12 (vector-ref sc2 1))) (let ((e-13 (vector-ref sc2 2))) (vector 1 (vector 0 (vector 1 arg-7 arg-11 arg-6) (vector 0 arg-12 (vector 1 e-8 e-12 e-13))))))))))))))))
(define SortedMap-Data-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32treeInsertC-39-1879 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-13) (let ((sc0 arg-13)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 (vector 2 arg-7 arg-11 e-2 arg-12 arg-5)))) (else (let ((e-5 (vector-ref sc0 1))) (let ((sc1 e-5)) (let ((e-8 (vector-ref sc1 1))) (let ((e-9 (vector-ref sc1 2))) (let ((sc2 e-9)) (let ((e-12 (vector-ref sc2 1))) (let ((e-13 (vector-ref sc2 2))) (vector 1 (vector 0 (vector 1 arg-7 arg-11 e-8) (vector 0 e-12 (vector 1 e-13 arg-12 arg-5))))))))))))))))
(define SortedMap-Data-case--caseC-32blockC-32inC-32treeInsertC-39-1832 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-13) (let ((sc0 arg-13)) (cond ((equal? sc0 0) (SortedMap-Data-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32treeInsertC-39-1879 'erased 'erased 'erased arg-3 'erased arg-5 arg-6 arg-7 'erased arg-12 arg-11 arg-10 arg-9 (SortedMap-Data-treeInsertC-39 'erased 'erased 'erased 'erased arg-3 arg-12 arg-11 arg-6))) (else (SortedMap-Data-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32treeInsertC-39-2037 'erased 'erased 'erased arg-3 'erased arg-5 arg-6 arg-7 'erased arg-12 arg-11 arg-10 arg-9 (SortedMap-Data-treeInsertC-39 'erased 'erased 'erased 'erased arg-3 arg-12 arg-11 arg-5)))))))
(define SortedMap-Data-case--caseC-32blockC-32inC-32treeInsertC-39-1679 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-13) (let ((sc0 arg-13)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 (vector 2 e-2 arg-10 arg-6 arg-9 arg-5)))) (else (let ((e-5 (vector-ref sc0 1))) (let ((sc1 e-5)) (let ((e-8 (vector-ref sc1 1))) (let ((e-9 (vector-ref sc1 2))) (let ((sc2 e-9)) (let ((e-12 (vector-ref sc2 1))) (let ((e-13 (vector-ref sc2 2))) (vector 1 (vector 0 (vector 1 e-8 e-12 e-13) (vector 0 arg-10 (vector 1 arg-6 arg-9 arg-5))))))))))))))))
(define SortedMap-Data-case--treeInsertC-39-1632 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-13) (let ((sc0 arg-13)) (cond ((equal? sc0 0) (SortedMap-Data-case--caseC-32blockC-32inC-32treeInsertC-39-1679 'erased 'erased 'erased arg-3 'erased arg-9 arg-10 arg-11 'erased arg-8 arg-7 arg-6 arg-5 (SortedMap-Data-treeInsertC-39 'erased 'erased 'erased 'erased arg-3 arg-5 arg-6 arg-11))) (else (SortedMap-Data-case--caseC-32blockC-32inC-32treeInsertC-39-1832 'erased 'erased 'erased arg-3 'erased arg-9 arg-10 arg-11 'erased arg-8 arg-7 arg-6 arg-5 (let ((sc1 arg-3)) (let ((e-5 (vector-ref sc1 5))) ((e-5 arg-5) arg-8)))))))))
(define SortedMap-Data-case--caseC-32blockC-32inC-32treeInsertC-39-1515 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11) (let ((sc0 arg-11)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 (vector 1 arg-6 arg-8 e-2)))) (else (let ((e-5 (vector-ref sc0 1))) (let ((sc1 e-5)) (let ((e-8 (vector-ref sc1 1))) (let ((e-9 (vector-ref sc1 2))) (let ((sc2 e-9)) (let ((e-12 (vector-ref sc2 1))) (let ((e-13 (vector-ref sc2 2))) (vector 0 (vector 2 arg-6 arg-8 e-8 e-12 e-13))))))))))))))
(define SortedMap-Data-case--caseC-32blockC-32inC-32treeInsertC-39-1387 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11) (let ((sc0 arg-11)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 (vector 1 e-2 arg-8 arg-5)))) (else (let ((e-5 (vector-ref sc0 1))) (let ((sc1 e-5)) (let ((e-8 (vector-ref sc1 1))) (let ((e-9 (vector-ref sc1 2))) (let ((sc2 e-9)) (let ((e-12 (vector-ref sc2 1))) (let ((e-13 (vector-ref sc2 2))) (vector 0 (vector 2 e-8 e-12 e-13 arg-8 arg-5))))))))))))))
(define SortedMap-Data-case--treeInsertC-39-1346 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11) (let ((sc0 arg-11)) (cond ((equal? sc0 0) (SortedMap-Data-case--caseC-32blockC-32inC-32treeInsertC-39-1387 'erased 'erased 'erased arg-3 'erased arg-8 arg-9 'erased arg-7 arg-6 arg-5 (SortedMap-Data-treeInsertC-39 'erased 'erased 'erased 'erased arg-3 arg-5 arg-6 arg-9))) (else (SortedMap-Data-case--caseC-32blockC-32inC-32treeInsertC-39-1515 'erased 'erased 'erased arg-3 'erased arg-8 arg-9 'erased arg-7 arg-6 arg-5 (SortedMap-Data-treeInsertC-39 'erased 'erased 'erased 'erased arg-3 arg-5 arg-6 arg-8)))))))
(define SortedMap-Data-case--treeInsertC-39-1187 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9) (let ((sc0 arg-9)) (cond ((equal? sc0 0) (vector 1 (vector 0 (vector 0 arg-4 arg-5) (vector 0 arg-4 (vector 0 arg-6 arg-7))))) ((equal? sc0 1) (vector 0 (vector 0 arg-4 arg-5))) (else (vector 1 (vector 0 (vector 0 arg-6 arg-7) (vector 0 arg-6 (vector 0 arg-4 arg-5)))))))))
(define SortedMap-Data-case--caseC-32blockC-32inC-32treeLookup-1081 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12) (let ((sc0 arg-12)) (cond ((equal? sc0 0) (SortedMap-Data-treeLookup 'erased 'erased 'erased 'erased arg-3 arg-11 arg-6)) (else (SortedMap-Data-treeLookup 'erased 'erased 'erased 'erased arg-3 arg-11 arg-5))))))
(define SortedMap-Data-case--treeLookup-1006 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12) (let ((sc0 arg-12)) (cond ((equal? sc0 0) (SortedMap-Data-treeLookup 'erased 'erased 'erased 'erased arg-3 arg-5 arg-10)) (else (SortedMap-Data-case--caseC-32blockC-32inC-32treeLookup-1081 'erased 'erased 'erased arg-3 'erased arg-8 arg-9 arg-10 'erased arg-7 arg-6 arg-5 (let ((sc1 arg-3)) (let ((e-5 (vector-ref sc1 5))) ((e-5 arg-5) arg-7)))))))))
(define SortedMap-Data-case--treeLookup-916 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10) (let ((sc0 arg-10)) (cond ((equal? sc0 0) (SortedMap-Data-treeLookup 'erased 'erased 'erased 'erased arg-3 arg-5 arg-8)) (else (SortedMap-Data-treeLookup 'erased 'erased 'erased 'erased arg-3 arg-5 arg-7))))))
(define SortedMap-Data-case--treeLookup-841 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8) (let ((sc0 arg-8)) (cond ((equal? sc0 0) (vector 1 arg-6)) (else (vector 0 ))))))
(define SortedMap-Data-n--5351-3726-treeToListC-39 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (let ((sc0 arg-6)) (case (vector-ref sc0 0) ((0) (let ((e-3 (vector-ref sc0 1))) (let ((e-4 (vector-ref sc0 2))) (arg-5 (vector 0 e-3 e-4))))) ((1) (let ((e-9 (vector-ref sc0 1))) (let ((e-11 (vector-ref sc0 3))) (SortedMap-Data-n--5351-3726-treeToListC-39 'erased 'erased 'erased 'erased 'erased (lambda (arg-7) (vector 1 arg-7 (SortedMap-Data-n--5351-3726-treeToListC-39 'erased 'erased 'erased 'erased 'erased arg-5 e-11))) e-9)))) (else (let ((e-16 (vector-ref sc0 1))) (let ((e-18 (vector-ref sc0 3))) (let ((e-20 (vector-ref sc0 5))) (SortedMap-Data-n--5351-3726-treeToListC-39 'erased 'erased 'erased 'erased 'erased (lambda (arg-7) (vector 1 arg-7 (SortedMap-Data-n--5351-3726-treeToListC-39 'erased 'erased 'erased 'erased 'erased (lambda (arg-8) (vector 1 arg-8 (SortedMap-Data-n--5351-3726-treeToListC-39 'erased 'erased 'erased 'erased 'erased arg-5 e-20))) e-18))) e-16)))))))))
(define SortedMap-Data-treeToList (lambda (arg-0 arg-1 arg-2 arg-3 ext-0) (SortedMap-Data-n--5351-3726-treeToListC-39 'erased 'erased 'erased 'erased 'erased (lambda (arg-4) (vector 1 arg-4 (vector 0 ))) ext-0)))
(define SortedMap-Data-treeLookup (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (let ((sc0 arg-6)) (case (vector-ref sc0 0) ((0) (let ((e-3 (vector-ref sc0 1))) (let ((e-4 (vector-ref sc0 2))) (SortedMap-Data-case--treeLookup-841 'erased 'erased 'erased arg-4 arg-5 e-3 e-4 'erased (let ((sc1 (let ((sc2 arg-4)) (let ((e-1 (vector-ref sc2 1))) e-1)))) (let ((e-1 (vector-ref sc1 1))) ((e-1 arg-5) e-3))))))) ((1) (let ((e-9 (vector-ref sc0 1))) (let ((e-10 (vector-ref sc0 2))) (let ((e-11 (vector-ref sc0 3))) (SortedMap-Data-case--treeLookup-916 'erased 'erased 'erased arg-4 'erased arg-5 e-10 e-11 e-9 'erased (let ((sc1 arg-4)) (let ((e-5 (vector-ref sc1 5))) ((e-5 arg-5) e-10)))))))) (else (let ((e-16 (vector-ref sc0 1))) (let ((e-17 (vector-ref sc0 2))) (let ((e-18 (vector-ref sc0 3))) (let ((e-19 (vector-ref sc0 4))) (let ((e-20 (vector-ref sc0 5))) (SortedMap-Data-case--treeLookup-1006 'erased 'erased 'erased arg-4 'erased arg-5 e-17 e-19 e-20 e-18 e-16 'erased (let ((sc1 arg-4)) (let ((e-5 (vector-ref sc1 5))) ((e-5 arg-5) e-17))))))))))))))
(define SortedMap-Data-treeInsertC-39 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (let ((sc0 arg-7)) (case (vector-ref sc0 0) ((0) (let ((e-3 (vector-ref sc0 1))) (let ((e-4 (vector-ref sc0 2))) (SortedMap-Data-case--treeInsertC-39-1187 'erased 'erased 'erased arg-4 arg-5 arg-6 e-3 e-4 'erased (let ((sc1 arg-4)) (let ((e-2 (vector-ref sc1 2))) ((e-2 arg-5) e-3))))))) ((1) (let ((e-9 (vector-ref sc0 1))) (let ((e-10 (vector-ref sc0 2))) (let ((e-11 (vector-ref sc0 3))) (SortedMap-Data-case--treeInsertC-39-1346 'erased 'erased 'erased arg-4 'erased arg-5 arg-6 e-10 e-11 e-9 'erased (let ((sc1 arg-4)) (let ((e-5 (vector-ref sc1 5))) ((e-5 arg-5) e-10)))))))) (else (let ((e-16 (vector-ref sc0 1))) (let ((e-17 (vector-ref sc0 2))) (let ((e-18 (vector-ref sc0 3))) (let ((e-19 (vector-ref sc0 4))) (let ((e-20 (vector-ref sc0 5))) (SortedMap-Data-case--treeInsertC-39-1632 'erased 'erased 'erased arg-4 'erased arg-5 arg-6 e-17 e-19 e-20 e-18 e-16 'erased (let ((sc1 arg-4)) (let ((e-5 (vector-ref sc1 5))) ((e-5 arg-5) e-17))))))))))))))
(define SortedMap-Data-treeInsert (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (SortedMap-Data-case--treeInsert-2178 'erased 'erased 'erased 'erased arg-4 arg-5 arg-6 arg-7 (SortedMap-Data-treeInsertC-39 'erased 'erased 'erased 'erased arg-4 arg-5 arg-6 arg-7))))
(define SortedMap-Data-treeDelete (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (let ((sc0 arg-4)) (cond ((equal? sc0 0) (let ((sc1 arg-6)) (let ((e-4 (vector-ref sc1 1))) (let ((e-5 (vector-ref sc1 2))) (SortedMap-Data-case--treeDelete-2281 'erased 'erased 'erased arg-3 arg-5 e-4 e-5 (let ((sc2 (let ((sc3 arg-3)) (let ((e-1 (vector-ref sc3 1))) e-1)))) (let ((e-1 (vector-ref sc2 1))) ((e-1 arg-5) e-4))))))))(else (let ((e-0 (- arg-4 1))) (let ((sc0 e-0)) (cond ((equal? sc0 0) (let ((sc1 arg-6)) (case (vector-ref sc1 0) ((1) (let ((e-11 (vector-ref sc1 1))) (let ((e-12 (vector-ref sc1 2))) (let ((e-13 (vector-ref sc1 3))) (SortedMap-Data-case--treeDelete-2360 'erased 'erased 'erased arg-3 arg-5 e-12 e-13 e-11 (let ((sc2 arg-3)) (let ((e-5 (vector-ref sc2 5))) ((e-5 arg-5) e-12)))))))) (else (let ((e-18 (vector-ref sc1 1))) (let ((e-19 (vector-ref sc1 2))) (let ((e-20 (vector-ref sc1 3))) (let ((e-21 (vector-ref sc1 4))) (let ((e-22 (vector-ref sc1 5))) (SortedMap-Data-case--treeDelete-2566 'erased 'erased 'erased arg-3 arg-5 e-19 e-21 e-22 e-20 e-18 (let ((sc2 arg-3)) (let ((e-5 (vector-ref sc2 5))) ((e-5 arg-5) e-19)))))))))))))(else (let ((e-6 (- e-0 1))) (let ((sc0 arg-6)) (case (vector-ref sc0 0) ((1) (let ((e-27 (vector-ref sc0 1))) (let ((e-28 (vector-ref sc0 2))) (let ((e-29 (vector-ref sc0 3))) (SortedMap-Data-case--treeDelete-2959 'erased 'erased 'erased arg-3 e-6 arg-5 e-28 e-29 e-27 (let ((sc1 arg-3)) (let ((e-5 (vector-ref sc1 5))) ((e-5 arg-5) e-28)))))))) (else (let ((e-34 (vector-ref sc0 1))) (let ((e-35 (vector-ref sc0 2))) (let ((e-36 (vector-ref sc0 3))) (let ((e-37 (vector-ref sc0 4))) (let ((e-38 (vector-ref sc0 5))) (SortedMap-Data-case--treeDelete-3329 'erased 'erased 'erased arg-3 e-6 arg-5 e-35 e-37 e-38 e-36 e-34 (let ((sc1 arg-3)) (let ((e-5 (vector-ref sc1 5))) ((e-5 arg-5) e-35))))))))))))))))))))))
(define SortedMap-Data-toList (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((0) (vector 0 )) (else (let ((e-7 (vector-ref sc0 3))) (SortedMap-Data-treeToList 'erased 'erased 'erased 'erased e-7)))))))
(define SortedMap-Data-merge3 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8) (let ((sc0 arg-4)) (case (vector-ref sc0 0) ((1) (let ((e-4 (vector-ref sc0 1))) (let ((e-5 (vector-ref sc0 2))) (let ((e-6 (vector-ref sc0 3))) (let ((sc1 arg-6)) (case (vector-ref sc1 0) ((1) (let ((e-20 (vector-ref sc1 1))) (let ((e-21 (vector-ref sc1 2))) (let ((e-22 (vector-ref sc1 3))) (SortedMap-Data-branch5 'erased 'erased 'erased 'erased e-4 e-5 e-6 arg-5 e-20 e-21 e-22 arg-7 arg-8))))) (else (let ((e-27 (vector-ref sc1 1))) (let ((e-28 (vector-ref sc1 2))) (let ((e-29 (vector-ref sc1 3))) (let ((e-30 (vector-ref sc1 4))) (let ((e-31 (vector-ref sc1 5))) (SortedMap-Data-branch6 'erased 'erased 'erased 'erased e-4 e-5 e-6 arg-5 e-27 e-28 e-29 e-30 e-31 arg-7 arg-8))))))))))))) (else (let ((e-11 (vector-ref sc0 1))) (let ((e-12 (vector-ref sc0 2))) (let ((e-13 (vector-ref sc0 3))) (let ((e-14 (vector-ref sc0 4))) (let ((e-15 (vector-ref sc0 5))) (let ((sc1 arg-6)) (case (vector-ref sc1 0) ((1) (let ((e-36 (vector-ref sc1 1))) (let ((e-37 (vector-ref sc1 2))) (let ((e-38 (vector-ref sc1 3))) (SortedMap-Data-branch6 'erased 'erased 'erased 'erased e-11 e-12 e-13 e-14 e-15 arg-5 e-36 e-37 e-38 arg-7 arg-8))))) (else (let ((e-43 (vector-ref sc1 1))) (let ((e-44 (vector-ref sc1 2))) (let ((e-45 (vector-ref sc1 3))) (let ((e-46 (vector-ref sc1 4))) (let ((e-47 (vector-ref sc1 5))) (SortedMap-Data-branch7 'erased 'erased 'erased 'erased e-11 e-12 e-13 e-14 e-15 arg-5 e-43 e-44 e-45 e-46 e-47 arg-7 arg-8)))))))))))))))))))
(define SortedMap-Data-merge2 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8) (let ((sc0 arg-4)) (case (vector-ref sc0 0) ((1) (let ((e-4 (vector-ref sc0 1))) (let ((e-5 (vector-ref sc0 2))) (let ((e-6 (vector-ref sc0 3))) (let ((sc1 arg-8)) (case (vector-ref sc1 0) ((1) (let ((e-20 (vector-ref sc1 1))) (let ((e-21 (vector-ref sc1 2))) (let ((e-22 (vector-ref sc1 3))) (SortedMap-Data-branch5 'erased 'erased 'erased 'erased e-4 e-5 e-6 arg-5 arg-6 arg-7 e-20 e-21 e-22))))) (else (let ((e-27 (vector-ref sc1 1))) (let ((e-28 (vector-ref sc1 2))) (let ((e-29 (vector-ref sc1 3))) (let ((e-30 (vector-ref sc1 4))) (let ((e-31 (vector-ref sc1 5))) (SortedMap-Data-branch6 'erased 'erased 'erased 'erased e-4 e-5 e-6 arg-5 arg-6 arg-7 e-27 e-28 e-29 e-30 e-31))))))))))))) (else (let ((e-11 (vector-ref sc0 1))) (let ((e-12 (vector-ref sc0 2))) (let ((e-13 (vector-ref sc0 3))) (let ((e-14 (vector-ref sc0 4))) (let ((e-15 (vector-ref sc0 5))) (let ((sc1 arg-8)) (case (vector-ref sc1 0) ((1) (let ((e-36 (vector-ref sc1 1))) (let ((e-37 (vector-ref sc1 2))) (let ((e-38 (vector-ref sc1 3))) (SortedMap-Data-branch6 'erased 'erased 'erased 'erased e-11 e-12 e-13 e-14 e-15 arg-5 arg-6 arg-7 e-36 e-37 e-38))))) (else (let ((e-43 (vector-ref sc1 1))) (let ((e-44 (vector-ref sc1 2))) (let ((e-45 (vector-ref sc1 3))) (let ((e-46 (vector-ref sc1 4))) (let ((e-47 (vector-ref sc1 5))) (SortedMap-Data-branch7 'erased 'erased 'erased 'erased e-11 e-12 e-13 e-14 e-15 arg-5 arg-6 arg-7 e-43 e-44 e-45 e-46 e-47)))))))))))))))))))
(define SortedMap-Data-merge1 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8) (let ((sc0 arg-6)) (case (vector-ref sc0 0) ((1) (let ((e-4 (vector-ref sc0 1))) (let ((e-5 (vector-ref sc0 2))) (let ((e-6 (vector-ref sc0 3))) (let ((sc1 arg-8)) (case (vector-ref sc1 0) ((1) (let ((e-20 (vector-ref sc1 1))) (let ((e-21 (vector-ref sc1 2))) (let ((e-22 (vector-ref sc1 3))) (SortedMap-Data-branch5 'erased 'erased 'erased 'erased arg-4 arg-5 e-4 e-5 e-6 arg-7 e-20 e-21 e-22))))) (else (let ((e-27 (vector-ref sc1 1))) (let ((e-28 (vector-ref sc1 2))) (let ((e-29 (vector-ref sc1 3))) (let ((e-30 (vector-ref sc1 4))) (let ((e-31 (vector-ref sc1 5))) (SortedMap-Data-branch6 'erased 'erased 'erased 'erased arg-4 arg-5 e-4 e-5 e-6 arg-7 e-27 e-28 e-29 e-30 e-31))))))))))))) (else (let ((e-11 (vector-ref sc0 1))) (let ((e-12 (vector-ref sc0 2))) (let ((e-13 (vector-ref sc0 3))) (let ((e-14 (vector-ref sc0 4))) (let ((e-15 (vector-ref sc0 5))) (let ((sc1 arg-8)) (case (vector-ref sc1 0) ((1) (let ((e-36 (vector-ref sc1 1))) (let ((e-37 (vector-ref sc1 2))) (let ((e-38 (vector-ref sc1 3))) (SortedMap-Data-branch6 'erased 'erased 'erased 'erased arg-4 arg-5 e-11 e-12 e-13 e-14 e-15 arg-7 e-36 e-37 e-38))))) (else (let ((e-43 (vector-ref sc1 1))) (let ((e-44 (vector-ref sc1 2))) (let ((e-45 (vector-ref sc1 3))) (let ((e-46 (vector-ref sc1 4))) (let ((e-47 (vector-ref sc1 5))) (SortedMap-Data-branch7 'erased 'erased 'erased 'erased arg-4 arg-5 e-11 e-12 e-13 e-14 e-15 arg-7 e-43 e-44 e-45 e-46 e-47)))))))))))))))))))
(define SortedMap-Data-lookup (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((0) (vector 0 )) (else (let ((e-5 (vector-ref sc0 1))) (let ((e-7 (vector-ref sc0 3))) (SortedMap-Data-treeLookup 'erased 'erased 'erased 'erased e-5 arg-2 e-7))))))))
(define SortedMap-Data-insert (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-4)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 1 e-2 0 (vector 0 arg-2 arg-3)))) (else (let ((e-5 (vector-ref sc0 1))) (let ((e-6 (vector-ref sc0 2))) (let ((e-7 (vector-ref sc0 3))) (SortedMap-Data-case--insert-3897 'erased 'erased e-5 e-6 arg-2 arg-3 e-7 (SortedMap-Data-treeInsert 'erased 'erased 'erased 'erased e-5 arg-2 arg-3 e-7))))))))))
(define SortedMap-Data-fromList (lambda (arg-0 arg-1 arg-2 arg-3) (Types-Prelude-foldl_Foldable__List 'erased 'erased (lambda (eta-0) (lambda (eta-1) (Basics-Prelude-flip 'erased 'erased 'erased (lambda (eta-2) (Basics-Prelude-uncurry 'erased 'erased 'erased (lambda (eta-3) (lambda (eta-4) (lambda (eta-5) (SortedMap-Data-insert 'erased 'erased eta-3 eta-4 eta-5)))) eta-2)) eta-0 eta-1))) (SortedMap-Data-empty 'erased 'erased arg-2) arg-3)))
(define SortedMap-Data-empty (lambda (arg-0 arg-1 arg-2) (vector 0 arg-2)))
(define SortedMap-Data-delete (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (let ((e-6 (vector-ref sc0 2))) (let ((e-7 (vector-ref sc0 3))) (let ((sc1 e-6)) (cond ((equal? sc1 0) (SortedMap-Data-case--delete-4049 'erased 'erased e-5 arg-2 e-7 (SortedMap-Data-treeDelete 'erased 'erased 'erased e-5 0 arg-2 e-7)))(else (let ((e-8 (- e-6 1))) (SortedMap-Data-case--delete-4111 'erased 'erased e-5 arg-2 e-8 e-7 (SortedMap-Data-treeDelete 'erased 'erased 'erased e-5 (+ 1 e-8) arg-2 e-7))))))))))))))
(define SortedMap-Data-branch7 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-13 arg-14 arg-15 arg-16) (vector 2 (vector 2 arg-4 arg-5 arg-6 arg-7 arg-8) arg-9 (vector 1 arg-10 arg-11 arg-12) arg-13 (vector 1 arg-14 arg-15 arg-16))))
(define SortedMap-Data-branch6 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-13 arg-14) (vector 2 (vector 1 arg-4 arg-5 arg-6) arg-7 (vector 1 arg-8 arg-9 arg-10) arg-11 (vector 1 arg-12 arg-13 arg-14))))
(define SortedMap-Data-branch5 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12) (vector 1 (vector 1 arg-4 arg-5 arg-6) arg-7 (vector 2 arg-8 arg-9 arg-10 arg-11 arg-12))))
(define SortedMap-Data-branch4 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10) (vector 1 (vector 1 arg-4 arg-5 arg-6) arg-7 (vector 1 arg-8 arg-9 arg-10))))
(define Basics-Prelude-C-124C-124 (lambda (arg-0 arg-1) (let ((sc0 arg-0)) (cond ((equal? sc0 0) 0) (else (arg-1))))))
(define Basics-Prelude-uncurry (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-4)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) ((arg-3 e-2) e-3))))))
(define Basics-Prelude-the (lambda (arg-0 arg-1) arg-1))
(define Basics-Prelude-not (lambda (arg-0) (let ((sc0 arg-0)) (cond ((equal? sc0 0) 1) (else 0)))))
(define Basics-Prelude-intToBool (lambda (arg-0) (let ((sc0 arg-0)) (cond ((equal? sc0 0) 1)(else 0)))))
(define Basics-Prelude-id (lambda (arg-0 arg-1) arg-1))
(define Basics-Prelude-flip (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) ((arg-3 arg-5) arg-4)))
(define Basics-Prelude-const (lambda (arg-0 arg-1 arg-2 ext-0) arg-2))
(define Basics-Prelude-C-46 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 ext-0) (arg-3 (arg-4 ext-0))))
(define Basics-Prelude-C-38C-38 (lambda (arg-0 arg-1) (let ((sc0 arg-0)) (cond ((equal? sc0 0) (arg-1)) (else 1)))))
(define Builtin-fromString_FromString__String (lambda (arg-0) arg-0))
(define Builtin-__Impl_FromString_String (lambda (ext-0) ext-0))
(define Builtin-sym (lambda (arg-0 arg-1 arg-2 arg-3) (vector 0 )))
(define Builtin-snd (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (let ((e-3 (vector-ref sc0 2))) e-3))))
(define Builtin-rewrite__impl (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) arg-5))
(define Builtin-fst (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (let ((e-2 (vector-ref sc0 1))) e-2))))
(define Builtin-fromString (lambda (arg-0 arg-1 ext-0) (arg-1 ext-0)))
(define Builtin-believe_me (lambda (arg-0 arg-1 ext-0) ext-0))
(define Builtin-assert_total (lambda (arg-0 arg-1) arg-1))
(define Builtin-assert_smaller (lambda (arg-0 arg-1 arg-2 arg-3) arg-3))
(define Types-Prelude-case--rangeFromThen-4173 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (cond ((equal? sc0 0) (Types-Prelude-countFrom 'erased arg-1 (lambda (eta-0) (+ (Types-Prelude-minus arg-0 arg-1) eta-0)))) (else (Types-Prelude-countFrom 'erased arg-1 (lambda (n) (Types-Prelude-minus n (Types-Prelude-minus arg-1 arg-0)))))))))
(define Types-Prelude-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32rangeFromThenTo-4125 (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (cond ((equal? sc0 0) (vector 1 arg-2 (vector 0 ))) (else (vector 0 ))))))
(define Types-Prelude-case--caseC-32blockC-32inC-32rangeFromThenTo-4111 (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (cond ((equal? sc0 0) (Types-Prelude-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32rangeFromThenTo-4125 arg-0 arg-1 arg-2 (Types-Prelude-C-61C-61_Eq__Nat arg-2 arg-0))) (else (Types-Prelude-takeBefore 'erased (lambda (arg-4) (Types-Prelude-C-60_Ord__Nat arg-4 arg-0)) (Types-Prelude-countFrom 'erased arg-2 (lambda (n) (Types-Prelude-minus n (Types-Prelude-minus arg-2 arg-1))))))))))
(define Types-Prelude-case--caseC-32blockC-32inC-32rangeFromThenTo-4071 (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (cond ((equal? sc0 0) (Types-Prelude-takeBefore 'erased (lambda (arg-4) (Types-Prelude-C-62_Ord__Nat arg-4 arg-0)) (Types-Prelude-countFrom 'erased arg-2 (lambda (eta-0) (+ (Types-Prelude-minus arg-1 arg-2) eta-0))))) (else (vector 0 ))))))
(define Types-Prelude-case--rangeFromThenTo-4057 (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (cond ((equal? sc0 0) (Types-Prelude-case--caseC-32blockC-32inC-32rangeFromThenTo-4071 arg-0 arg-1 arg-2 (Types-Prelude-C-62_Ord__Nat arg-0 arg-2))) (else (Types-Prelude-case--caseC-32blockC-32inC-32rangeFromThenTo-4111 arg-0 arg-1 arg-2 (Types-Prelude-C-61C-61_Eq__Nat arg-2 arg-1)))))))
(define Types-Prelude-case--caseC-32blockC-32inC-32rangeFromTo-4022 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (cond ((equal? sc0 0) (Types-Prelude-takeUntil 'erased (lambda (arg-3) (Types-Prelude-C-60C-61_Ord__Nat arg-3 arg-0)) (Types-Prelude-countFrom 'erased arg-1 (lambda (n) (Types-Prelude-minus n (+ 1 0)))))) (else (vector 1 arg-1 (vector 0 )))))))
(define Types-Prelude-case--rangeFromTo-3994 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (cond ((equal? sc0 0) (Types-Prelude-takeUntil 'erased (lambda (arg-3) (Types-Prelude-C-62C-61_Ord__Nat arg-3 arg-0)) (Types-Prelude-countFrom 'erased arg-1 (lambda (eta-0) (+ 1 eta-0))))) (else (Types-Prelude-case--caseC-32blockC-32inC-32rangeFromTo-4022 arg-0 arg-1 (Types-Prelude-C-62_Ord__Nat arg-1 arg-0)))))))
(define Types-Prelude-case--takeBefore-3839 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-4)) (cond ((equal? sc0 0) (vector 0 )) (else (vector 1 arg-1 (Types-Prelude-takeBefore 'erased arg-3 (arg-2))))))))
(define Types-Prelude-case--takeUntil-3788 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-4)) (cond ((equal? sc0 0) (vector 1 arg-1 (vector 0 ))) (else (vector 1 arg-1 (Types-Prelude-takeUntil 'erased arg-3 (arg-2))))))))
(define Types-Prelude-case--toLower-3447 (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (cond ((equal? sc0 0) (cast-int-char (b+ (char->integer arg-0) 32 63))) (else arg-0)))))
(define Types-Prelude-case--toUpper-3433 (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (cond ((equal? sc0 0) (cast-int-char (Num-Prelude-C-45_Neg__Int (char->integer arg-0) 32))) (else arg-0)))))
(define Types-Prelude-case--unpackC-44unpackC-39-3312 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-4)) (cond ((equal? sc0 0) arg-1) (else (Types-Prelude-n--3476-3300-unpackC-39 arg-0 (Num-Prelude-C-45_Neg__Int arg-3 1) arg-2 (vector 1 (string-ref arg-2 arg-3) arg-1)))))))
(define Types-Prelude-case--substr-3246 (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (cond ((equal? sc0 0) (string-substr arg-2 arg-1 arg-0)) (else "")))))
(define Types-Prelude-case--max-564 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (cond ((equal? sc0 0) arg-1) (else arg-0)))))
(define Types-Prelude-case--min-550 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (cond ((equal? sc0 0) arg-1) (else arg-0)))))
(define Types-Prelude-case--integerToNat-439 (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (cond ((equal? sc0 0) 0) (else (+ 1 (- arg-0 1)))))))
(define Types-Prelude-n--3476-3300-unpackC-39 (lambda (arg-0 arg-1 arg-2 arg-3) (Types-Prelude-case--unpackC-44unpackC-39-3312 arg-0 arg-3 arg-2 arg-1 (EqOrd-Prelude-C-60_Ord__Int arg-1 0))))
(define Types-Prelude-n--3461-3287-toFArgs (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (case (vector-ref sc0 0) ((0) (vector 0 )) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (vector 1 (vector "Char" ) e-2 (Types-Prelude-n--3461-3287-toFArgs arg-0 e-3)))))))))
(define Types-Prelude-n--3650-3459-hexChars (lambda (arg-0) (vector 1 #\0 (vector 1 #\1 (vector 1 #\2 (vector 1 #\3 (vector 1 #\4 (vector 1 #\5 (vector 1 #\6 (vector 1 #\7 (vector 1 #\8 (vector 1 #\9 (vector 1 #\A (vector 1 #\B (vector 1 #\C (vector 1 #\D (vector 1 #\E (vector 1 #\F (vector 0 )))))))))))))))))))
(define Types-Prelude-traverse_Traversable__List (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-5)) (case (vector-ref sc0 0) ((0) (let ((sc1 arg-3)) (let ((e-2 (vector-ref sc1 2))) ((e-2 'erased) (vector 0 ))))) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 arg-3)) (let ((e-4 (vector-ref sc1 3))) ((((e-4 'erased) 'erased) (let ((sc2 arg-3)) (let ((e-6 (vector-ref sc2 3))) ((((e-6 'erased) 'erased) (let ((sc3 arg-3)) (let ((e-10 (vector-ref sc3 2))) ((e-10 'erased) (lambda (eta-0) (lambda (eta-1) (vector 1 eta-0 eta-1))))))) (arg-4 e-2))))) (Types-Prelude-traverse_Traversable__List 'erased 'erased 'erased arg-3 arg-4 e-3)))))))))))
(define Types-Prelude-rangeFrom_Range__Nat (lambda (arg-0) (Types-Prelude-countFrom 'erased arg-0 (lambda (eta-0) (+ 1 eta-0)))))
(define Types-Prelude-rangeFromTo_Range__Nat (lambda (arg-0 arg-1) (Types-Prelude-case--rangeFromTo-3994 arg-1 arg-0 (Types-Prelude-C-62_Ord__Nat arg-1 arg-0))))
(define Types-Prelude-rangeFromThen_Range__Nat (lambda (arg-0 arg-1) (Types-Prelude-case--rangeFromThen-4173 arg-1 arg-0 (Types-Prelude-C-62_Ord__Nat arg-1 arg-0))))
(define Types-Prelude-rangeFromThenTo_Range__Nat (lambda (arg-0 arg-1 arg-2) (Types-Prelude-case--rangeFromThenTo-4057 arg-2 arg-1 arg-0 (Types-Prelude-C-62_Ord__Nat arg-1 arg-0))))
(define Types-Prelude-pure_Applicative__Maybe (lambda (arg-0 ext-0) (vector 1 ext-0)))
(define Types-Prelude-pure_Applicative__List (lambda (arg-0 arg-1) (vector 1 arg-1 (vector 0 ))))
(define Types-Prelude-pure_Applicative__C-40EitherC-32C-36eC-41 (lambda (arg-0 arg-1 ext-0) (vector 1 ext-0)))
(define Types-Prelude-neutral_Monoid__String (lambda () ""))
(define Types-Prelude-neutral_Monoid__C-40ListC-32C-36aC-41 (lambda (arg-0) (vector 0 )))
(define Types-Prelude-min_Ord__Nat (lambda (arg-0 arg-1) (Types-Prelude-case--min-550 arg-1 arg-0 (Types-Prelude-C-60_Ord__Nat arg-0 arg-1))))
(define Types-Prelude-max_Ord__Nat (lambda (arg-0 arg-1) (Types-Prelude-case--max-564 arg-1 arg-0 (Types-Prelude-C-62_Ord__Nat arg-0 arg-1))))
(define Types-Prelude-map_Functor__Maybe (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((1) (let ((e-1 (vector-ref sc0 1))) (vector 1 (arg-2 e-1)))) (else (vector 0 ))))))
(define Types-Prelude-map_Functor__List (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((0) (vector 0 )) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (vector 1 (arg-2 e-2) (Types-Prelude-map_Functor__List 'erased 'erased arg-2 e-3)))))))))
(define Types-Prelude-map_Functor__C-40EitherC-32C-36eC-41 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-4)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (vector 1 (arg-3 e-5))))))))
(define Types-Prelude-join_Monad__Maybe (lambda (arg-0 arg-1) (Types-Prelude-C-62C-62C-61_Monad__Maybe 'erased 'erased arg-1 (lambda (eta-0) eta-0))))
(define Types-Prelude-join_Monad__List (lambda (arg-0 arg-1) (Types-Prelude-C-62C-62C-61_Monad__List 'erased 'erased arg-1 (lambda (eta-0) eta-0))))
(define Types-Prelude-join_Monad__C-40EitherC-32C-36eC-41 (lambda (arg-0 arg-1 arg-2) (Types-Prelude-C-62C-62C-61_Monad__C-40EitherC-32C-36eC-41 'erased 'erased 'erased arg-2 (lambda (eta-0) eta-0))))
(define Types-Prelude-fromInteger_Num__Nat (lambda (arg-0) arg-0))
(define Types-Prelude-foldr_Foldable__List (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-4)) (case (vector-ref sc0 0) ((0) arg-3) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) ((arg-2 e-2) (Types-Prelude-foldr_Foldable__List 'erased 'erased arg-2 arg-3 e-3)))))))))
(define Types-Prelude-foldl_Foldable__List (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-4)) (case (vector-ref sc0 0) ((0) arg-3) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (Types-Prelude-foldl_Foldable__List 'erased 'erased arg-2 ((arg-2 arg-3) e-2) e-3))))))))
(define Types-Prelude-compare_Ord__Nat (lambda (arg-0 arg-1) (let ((sc0 arg-0)) (cond ((equal? sc0 0) (let ((sc1 arg-1)) (cond ((equal? sc1 0) 1)(else 0))))(else (let ((e-0 (- arg-0 1))) (let ((sc0 arg-1)) (cond ((equal? sc0 0) 2)(else (let ((e-2 (- arg-1 1))) (Types-Prelude-compare_Ord__Nat e-0 e-2)))))))))))
(define Types-Prelude-cast_Cast__String_Integer (lambda (ext-0) (cast-string-int ext-0)))
(define Types-Prelude-cast_Cast__String_Double (lambda (ext-0) (cast-string-double ext-0)))
(define Types-Prelude-cast_Cast__Nat_Int (lambda (ext-0) ext-0))
(define Types-Prelude-cast_Cast__Int_Integer (lambda (ext-0) ext-0))
(define Types-Prelude-__Impl_Traversable_List (lambda () (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-45) (Types-Prelude-map_Functor__List 'erased 'erased func arg-45))))) (vector 0 (lambda (acc) (lambda (elem) (lambda (func) (lambda (init) (lambda (input) (Types-Prelude-foldr_Foldable__List 'erased 'erased func init input)))))) (lambda (elem) (lambda (acc) (lambda (func) (lambda (init) (lambda (input) (Types-Prelude-foldl_Foldable__List 'erased 'erased func init input))))))) (lambda (b) (lambda (a) (lambda (f) (lambda (i_con-0) (lambda (arg-972) (lambda (arg-974) (Types-Prelude-traverse_Traversable__List 'erased 'erased 'erased i_con-0 arg-972 arg-974))))))))))
(define Types-Prelude-__Impl_Semigroup_String (lambda (ext-0 ext-1) (Types-Prelude-C-60C-43C-62_Semigroup__String ext-0 ext-1)))
(define Types-Prelude-__Impl_Semigroup_C-40ListC-32C-36aC-41 (lambda (arg-0 ext-0 ext-1) (Types-Prelude-C-60C-43C-62_Semigroup__C-40ListC-32C-36aC-41 'erased ext-0 ext-1)))
(define Types-Prelude-__Impl_Range_Nat (lambda () (vector 0 (lambda (arg-3875) (lambda (arg-3876) (Types-Prelude-rangeFromTo_Range__Nat arg-3875 arg-3876))) (lambda (arg-3877) (lambda (arg-3878) (lambda (arg-3879) (Types-Prelude-rangeFromThenTo_Range__Nat arg-3877 arg-3878 arg-3879)))) (lambda (arg-3880) (Types-Prelude-rangeFrom_Range__Nat arg-3880)) (lambda (arg-3881) (lambda (arg-3882) (Types-Prelude-rangeFromThen_Range__Nat arg-3881 arg-3882))))))
(define Types-Prelude-__Impl_Ord_Nat (lambda () (vector 0 (vector 0 (lambda (arg-2) (lambda (arg-3) (Types-Prelude-C-61C-61_Eq__Nat arg-2 arg-3))) (lambda (arg-4) (lambda (arg-5) (Types-Prelude-C-47C-61_Eq__Nat arg-4 arg-5)))) (lambda (arg-369) (lambda (arg-370) (Types-Prelude-compare_Ord__Nat arg-369 arg-370))) (lambda (arg-371) (lambda (arg-372) (Types-Prelude-C-60_Ord__Nat arg-371 arg-372))) (lambda (arg-373) (lambda (arg-374) (Types-Prelude-C-62_Ord__Nat arg-373 arg-374))) (lambda (arg-375) (lambda (arg-376) (Types-Prelude-C-60C-61_Ord__Nat arg-375 arg-376))) (lambda (arg-377) (lambda (arg-378) (Types-Prelude-C-62C-61_Ord__Nat arg-377 arg-378))) (lambda (arg-379) (lambda (arg-380) (Types-Prelude-max_Ord__Nat arg-379 arg-380))) (lambda (arg-381) (lambda (arg-382) (Types-Prelude-min_Ord__Nat arg-381 arg-382))))))
(define Types-Prelude-__Impl_Num_Nat (lambda () (vector 0 (lambda (arg-2) (lambda (arg-3) (Types-Prelude-C-43_Num__Nat arg-2 arg-3))) (lambda (arg-4) (lambda (arg-5) (Types-Prelude-C-42_Num__Nat arg-4 arg-5))) (lambda (arg-6) (Types-Prelude-fromInteger_Num__Nat arg-6)))))
(define Types-Prelude-__Impl_Monoid_String (lambda () (vector 0 (lambda (arg-2) (lambda (arg-3) (Types-Prelude-C-60C-43C-62_Semigroup__String arg-2 arg-3))) (Types-Prelude-neutral_Monoid__String))))
(define Types-Prelude-__Impl_Monoid_C-40ListC-32C-36aC-41 (lambda (arg-0) (vector 0 (lambda (arg-2) (lambda (arg-3) (Types-Prelude-C-60C-43C-62_Semigroup__C-40ListC-32C-36aC-41 'erased arg-2 arg-3))) (Types-Prelude-neutral_Monoid__C-40ListC-32C-36aC-41 'erased))))
(define Types-Prelude-__Impl_Monad_Maybe (lambda () (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-45) (Types-Prelude-map_Functor__Maybe 'erased 'erased func arg-45))))) (lambda (a) (lambda (arg-112) (Types-Prelude-pure_Applicative__Maybe 'erased arg-112))) (lambda (b) (lambda (a) (lambda (arg-113) (lambda (arg-115) (Types-Prelude-C-60C-42C-62_Applicative__Maybe 'erased 'erased arg-113 arg-115)))))) (lambda (b) (lambda (a) (lambda (arg-274) (lambda (arg-275) (Types-Prelude-C-62C-62C-61_Monad__Maybe 'erased 'erased arg-274 arg-275))))) (lambda (a) (lambda (arg-277) (Types-Prelude-join_Monad__Maybe 'erased arg-277))))))
(define Types-Prelude-__Impl_Monad_List (lambda () (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-45) (Types-Prelude-map_Functor__List 'erased 'erased func arg-45))))) (lambda (a) (lambda (arg-112) (Types-Prelude-pure_Applicative__List 'erased arg-112))) (lambda (b) (lambda (a) (lambda (arg-113) (lambda (arg-115) (Types-Prelude-C-60C-42C-62_Applicative__List 'erased 'erased arg-113 arg-115)))))) (lambda (b) (lambda (a) (lambda (arg-274) (lambda (arg-275) (Types-Prelude-C-62C-62C-61_Monad__List 'erased 'erased arg-274 arg-275))))) (lambda (a) (lambda (arg-277) (Types-Prelude-join_Monad__List 'erased arg-277))))))
(define Types-Prelude-__Impl_Monad_C-40EitherC-32C-36eC-41 (lambda (arg-0) (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-45) (let ((sc0 arg-45)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (vector 1 (func e-5)))))))))) (lambda (a) (lambda (arg-112) (vector 1 arg-112))) (lambda (b) (lambda (a) (lambda (arg-113) (lambda (arg-115) (let ((sc0 arg-113)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (let ((sc1 arg-115)) (case (vector-ref sc1 0) ((1) (let ((e-8 (vector-ref sc1 1))) (vector 1 (e-5 e-8)))) (else (let ((e-11 (vector-ref sc1 1))) (vector 0 e-11)))))))))))))) (lambda (b) (lambda (a) (lambda (arg-274) (lambda (arg-275) (Types-Prelude-C-62C-62C-61_Monad__C-40EitherC-32C-36eC-41 'erased 'erased 'erased arg-274 arg-275))))) (lambda (a) (lambda (arg-277) (Types-Prelude-join_Monad__C-40EitherC-32C-36eC-41 'erased 'erased arg-277))))))
(define Types-Prelude-__Impl_Functor_Maybe (lambda (ext-0 ext-1 ext-2 ext-3) (Types-Prelude-map_Functor__Maybe 'erased 'erased ext-2 ext-3)))
(define Types-Prelude-__Impl_Functor_List (lambda (ext-0 ext-1 ext-2 ext-3) (Types-Prelude-map_Functor__List 'erased 'erased ext-2 ext-3)))
(define Types-Prelude-__Impl_Functor_C-40EitherC-32C-36eC-41 (lambda (arg-0 ext-0 ext-1 ext-2 ext-3) (let ((sc0 ext-3)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (vector 1 (ext-2 e-5))))))))
(define Types-Prelude-__Impl_Foldable_List (lambda () (vector 0 (lambda (acc) (lambda (elem) (lambda (func) (lambda (init) (lambda (input) (Types-Prelude-foldr_Foldable__List 'erased 'erased func init input)))))) (lambda (elem) (lambda (acc) (lambda (func) (lambda (init) (lambda (input) (Types-Prelude-foldl_Foldable__List 'erased 'erased func init input)))))))))
(define Types-Prelude-__Impl_Eq_Nat (lambda () (vector 0 (lambda (arg-2) (lambda (arg-3) (Types-Prelude-C-61C-61_Eq__Nat arg-2 arg-3))) (lambda (arg-4) (lambda (arg-5) (Types-Prelude-C-47C-61_Eq__Nat arg-4 arg-5))))))
(define Types-Prelude-__Impl_Cast_Nat_Int (lambda (ext-0) (Types-Prelude-cast_Cast__Nat_Int ext-0)))
(define Types-Prelude-__Impl_Applicative_Maybe (lambda () (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-45) (Types-Prelude-map_Functor__Maybe 'erased 'erased func arg-45))))) (lambda (a) (lambda (arg-112) (Types-Prelude-pure_Applicative__Maybe 'erased arg-112))) (lambda (b) (lambda (a) (lambda (arg-113) (lambda (arg-115) (Types-Prelude-C-60C-42C-62_Applicative__Maybe 'erased 'erased arg-113 arg-115))))))))
(define Types-Prelude-__Impl_Applicative_List (lambda () (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-45) (Types-Prelude-map_Functor__List 'erased 'erased func arg-45))))) (lambda (a) (lambda (arg-112) (Types-Prelude-pure_Applicative__List 'erased arg-112))) (lambda (b) (lambda (a) (lambda (arg-113) (lambda (arg-115) (Types-Prelude-C-60C-42C-62_Applicative__List 'erased 'erased arg-113 arg-115))))))))
(define Types-Prelude-__Impl_Applicative_C-40EitherC-32C-36eC-41 (lambda (arg-0) (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-45) (let ((sc0 arg-45)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (vector 1 (func e-5)))))))))) (lambda (a) (lambda (arg-112) (vector 1 arg-112))) (lambda (b) (lambda (a) (lambda (arg-113) (lambda (arg-115) (let ((sc0 arg-113)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (let ((sc1 arg-115)) (case (vector-ref sc1 0) ((1) (let ((e-8 (vector-ref sc1 1))) (vector 1 (e-5 e-8)))) (else (let ((e-11 (vector-ref sc1 1))) (vector 0 e-11))))))))))))))))
(define Types-Prelude-C-62_Ord__Nat (lambda (arg-0 arg-1) (EqOrd-Prelude-C-61C-61_Eq__Ordering (Types-Prelude-compare_Ord__Nat arg-0 arg-1) 2)))
(define Types-Prelude-C-62C-62C-61_Monad__Maybe (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((0) (vector 0 )) (else (let ((e-2 (vector-ref sc0 1))) (arg-3 e-2)))))))
(define Types-Prelude-C-62C-62C-61_Monad__List (lambda (arg-0 arg-1 arg-2 arg-3) ((Interfaces-Prelude-concatMap 'erased 'erased 'erased (vector 0 (vector 0 (lambda (acc) (lambda (elem) (lambda (func) (lambda (init) (lambda (input) (Types-Prelude-foldr_Foldable__List 'erased 'erased func init input)))))) (lambda (elem) (lambda (acc) (lambda (func) (lambda (init) (lambda (input) (Types-Prelude-foldl_Foldable__List 'erased 'erased func init input))))))) (vector 0 (lambda (arg-4) (lambda (arg-5) (Types-Prelude-C-60C-43C-62_Semigroup__C-40ListC-32C-36aC-41 'erased arg-4 arg-5))) (Types-Prelude-neutral_Monoid__C-40ListC-32C-36aC-41 'erased))) arg-3) arg-2)))
(define Types-Prelude-C-62C-62C-61_Monad__C-40EitherC-32C-36eC-41 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (arg-4 e-5)))))))
(define Types-Prelude-C-62C-61_Ord__Nat (lambda (arg-0 arg-1) (EqOrd-Prelude-C-47C-61_Eq__Ordering (Types-Prelude-compare_Ord__Nat arg-0 arg-1) 0)))
(define Types-Prelude-C-61C-61_Eq__Nat (lambda (arg-0 arg-1) (let ((sc0 arg-0)) (cond ((equal? sc0 0) (let ((sc1 arg-1)) (cond ((equal? sc1 0) 0)(else 1))))(else (let ((e-0 (- arg-0 1))) (let ((sc0 arg-1)) (cond ((equal? sc0 0) 1)(else (let ((e-1 (- arg-1 1))) (Types-Prelude-C-61C-61_Eq__Nat e-0 e-1)))))))))))
(define Types-Prelude-C-60_Ord__Nat (lambda (arg-0 arg-1) (EqOrd-Prelude-C-61C-61_Eq__Ordering (Types-Prelude-compare_Ord__Nat arg-0 arg-1) 0)))
(define Types-Prelude-C-60C-61_Ord__Nat (lambda (arg-0 arg-1) (EqOrd-Prelude-C-47C-61_Eq__Ordering (Types-Prelude-compare_Ord__Nat arg-0 arg-1) 2)))
(define Types-Prelude-C-60C-43C-62_Semigroup__String (lambda (ext-0 ext-1) (Strings-Types-Prelude-C-43C-43 ext-0 ext-1)))
(define Types-Prelude-C-60C-43C-62_Semigroup__C-40ListC-32C-36aC-41 (lambda (arg-0 ext-0 ext-1) (List-Types-Prelude-C-43C-43 'erased ext-0 ext-1)))
(define Types-Prelude-C-60C-42C-62_Applicative__Maybe (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((1) (let ((e-1 (vector-ref sc0 1))) (let ((sc1 arg-3)) (case (vector-ref sc1 0) ((1) (let ((e-3 (vector-ref sc1 1))) (vector 1 (e-1 e-3))))(else (vector 0 ))))))(else (vector 0 ))))))
(define Types-Prelude-C-60C-42C-62_Applicative__List (lambda (arg-0 arg-1 arg-2 arg-3) ((Interfaces-Prelude-concatMap 'erased 'erased 'erased (vector 0 (vector 0 (lambda (acc) (lambda (elem) (lambda (func) (lambda (init) (lambda (input) (Types-Prelude-foldr_Foldable__List 'erased 'erased func init input)))))) (lambda (elem) (lambda (acc) (lambda (func) (lambda (init) (lambda (input) (Types-Prelude-foldl_Foldable__List 'erased 'erased func init input))))))) (vector 0 (lambda (arg-4) (lambda (arg-5) (Types-Prelude-C-60C-43C-62_Semigroup__C-40ListC-32C-36aC-41 'erased arg-4 arg-5))) (Types-Prelude-neutral_Monoid__C-40ListC-32C-36aC-41 'erased))) (lambda (f) (Types-Prelude-map_Functor__List 'erased 'erased f arg-3))) arg-2)))
(define Types-Prelude-C-60C-42C-62_Applicative__C-40EitherC-32C-36eC-41 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (let ((sc1 arg-4)) (case (vector-ref sc1 0) ((1) (let ((e-8 (vector-ref sc1 1))) (vector 1 (e-5 e-8)))) (else (let ((e-11 (vector-ref sc1 1))) (vector 0 e-11)))))))))))
(define Types-Prelude-C-47C-61_Eq__Nat (lambda (arg-0 arg-1) (Basics-Prelude-not (Types-Prelude-C-61C-61_Eq__Nat arg-0 arg-1))))
(define Types-Prelude-C-43_Num__Nat (lambda (ext-0 ext-1) (+ ext-0 ext-1)))
(define Types-Prelude-C-42_Num__Nat (lambda (ext-0 ext-1) (* ext-0 ext-1)))
(define Types-Prelude-unpack (lambda (arg-0) (Types-Prelude-n--3476-3300-unpackC-39 arg-0 (Num-Prelude-C-45_Neg__Int (Strings-Types-Prelude-length arg-0) 1) arg-0 (vector 0 ))))
(define Types-Prelude-toUpper (lambda (arg-0) (Types-Prelude-case--toUpper-3433 arg-0 (Types-Prelude-isLower arg-0))))
(define Types-Prelude-toLower (lambda (arg-0) (Types-Prelude-case--toLower-3447 arg-0 (Types-Prelude-isUpper arg-0))))
(define Types-Prelude-takeUntil (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (let ((e-1 (vector-ref sc0 1))) (let ((e-2 (vector-ref sc0 2))) (Types-Prelude-case--takeUntil-3788 'erased e-1 e-2 arg-1 (arg-1 e-1)))))))
(define Types-Prelude-takeBefore (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (let ((e-1 (vector-ref sc0 1))) (let ((e-2 (vector-ref sc0 2))) (Types-Prelude-case--takeBefore-3839 'erased e-1 e-2 arg-1 (arg-1 e-1)))))))
(define Types-Prelude-substr (lambda (arg-0 arg-1 arg-2) (Types-Prelude-case--substr-3246 arg-2 arg-1 arg-0 (EqOrd-Prelude-C-60_Ord__Integer arg-0 (Strings-Types-Prelude-length arg-2)))))
(define Types-Prelude-strCons (lambda (ext-0 ext-1) (string-cons ext-0 ext-1)))
(define Types-Prelude-reverse (lambda (ext-0) (string-reverse ext-0)))
(define Types-Prelude-rangeFromTo (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (let ((e-1 (vector-ref sc0 1))) (lambda (arg-2) (lambda (arg-3) ((e-1 arg-2) arg-3)))))))
(define Types-Prelude-plus (lambda (arg-0 arg-1) (let ((sc0 arg-0)) (cond ((equal? sc0 0) arg-1)(else (let ((e-0 (- arg-0 1))) (+ 1 (+ e-0 arg-1))))))))
(define Types-Prelude-pack (lambda (arg-0) (let ((sc0 arg-0)) (case (vector-ref sc0 0) ((0) "") (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (Types-Prelude-strCons e-2 (Types-Prelude-pack e-3)))))))))
(define Types-Prelude-natToInteger (lambda (arg-0) (let ((sc0 arg-0)) (cond ((equal? sc0 0) 0)(else (let ((e-0 (- arg-0 1))) (+ 1 e-0)))))))
(define Types-Prelude-mult (lambda (arg-0 arg-1) (let ((sc0 arg-0)) (cond ((equal? sc0 0) 0)(else (let ((e-0 (- arg-0 1))) (+ arg-1 (* e-0 arg-1))))))))
(define Types-Prelude-minus (lambda (arg-0 arg-1) (let ((sc0 arg-0)) (cond ((equal? sc0 0) 0)(else (let ((sc0 arg-1)) (cond ((equal? sc0 0) arg-0)(else (let ((sc0 arg-0)) (cond ((equal? sc0 0) (blodwen-error-quit "Nat case not covered"))(else (let ((e-0 (- arg-0 1))) (let ((sc0 arg-1)) (cond ((equal? sc0 0) (blodwen-error-quit "Nat case not covered"))(else (let ((e-1 (- arg-1 1))) (Types-Prelude-minus e-0 e-1)))))))))))))))))
(define Types-Prelude-maybe (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-4)) (case (vector-ref sc0 0) ((0) (arg-2)) (else (let ((e-2 (vector-ref sc0 1))) ((arg-3) e-2)))))))
(define Strings-Types-Prelude-length (lambda (arg-0) (Types-Prelude-fromInteger_Num__Nat (string-length arg-0))))
(define List-Types-Prelude-length (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (case (vector-ref sc0 0) ((0) 0) (else (let ((e-3 (vector-ref sc0 2))) (+ 1 (List-Types-Prelude-length 'erased e-3))))))))
(define Types-Prelude-isUpper (lambda (arg-0) (Basics-Prelude-C-38C-38 (EqOrd-Prelude-C-62C-61_Ord__Char arg-0 #\A) (lambda () (EqOrd-Prelude-C-60C-61_Ord__Char arg-0 #\Z)))))
(define Types-Prelude-isSpace (lambda (arg-0) (Basics-Prelude-C-124C-124 (EqOrd-Prelude-C-61C-61_Eq__Char arg-0 #\ ) (lambda () (Basics-Prelude-C-124C-124 (EqOrd-Prelude-C-61C-61_Eq__Char arg-0 (integer->char 9)) (lambda () (Basics-Prelude-C-124C-124 (EqOrd-Prelude-C-61C-61_Eq__Char arg-0 (integer->char 13)) (lambda () (Basics-Prelude-C-124C-124 (EqOrd-Prelude-C-61C-61_Eq__Char arg-0 (integer->char 10)) (lambda () (Basics-Prelude-C-124C-124 (EqOrd-Prelude-C-61C-61_Eq__Char arg-0 (integer->char 12)) (lambda () (Basics-Prelude-C-124C-124 (EqOrd-Prelude-C-61C-61_Eq__Char arg-0 (integer->char 11)) (lambda () (EqOrd-Prelude-C-61C-61_Eq__Char arg-0 (integer->char 160))))))))))))))))
(define Types-Prelude-isOctDigit (lambda (arg-0) (Basics-Prelude-C-38C-38 (EqOrd-Prelude-C-62C-61_Ord__Char arg-0 #\0) (lambda () (EqOrd-Prelude-C-60C-61_Ord__Char arg-0 #\7)))))
(define Types-Prelude-isNL (lambda (arg-0) (Basics-Prelude-C-124C-124 (EqOrd-Prelude-C-61C-61_Eq__Char arg-0 (integer->char 13)) (lambda () (EqOrd-Prelude-C-61C-61_Eq__Char arg-0 (integer->char 10))))))
(define Types-Prelude-isLower (lambda (arg-0) (Basics-Prelude-C-38C-38 (EqOrd-Prelude-C-62C-61_Ord__Char arg-0 #\a) (lambda () (EqOrd-Prelude-C-60C-61_Ord__Char arg-0 #\z)))))
(define Types-Prelude-isHexDigit (lambda (arg-0) (Types-Prelude-elem 'erased (vector 0 (lambda (arg-2) (lambda (arg-3) (EqOrd-Prelude-C-61C-61_Eq__Char arg-2 arg-3))) (lambda (arg-4) (lambda (arg-5) (EqOrd-Prelude-C-47C-61_Eq__Char arg-4 arg-5)))) (Types-Prelude-toUpper arg-0) (Types-Prelude-n--3650-3459-hexChars arg-0))))
(define Types-Prelude-isDigit (lambda (arg-0) (Basics-Prelude-C-38C-38 (EqOrd-Prelude-C-62C-61_Ord__Char arg-0 #\0) (lambda () (EqOrd-Prelude-C-60C-61_Ord__Char arg-0 #\9)))))
(define Types-Prelude-isAlphaNum (lambda (arg-0) (Basics-Prelude-C-124C-124 (Types-Prelude-isDigit arg-0) (lambda () (Types-Prelude-isAlpha arg-0)))))
(define Types-Prelude-isAlpha (lambda (arg-0) (Basics-Prelude-C-124C-124 (Types-Prelude-isUpper arg-0) (lambda () (Types-Prelude-isLower arg-0)))))
(define Types-Prelude-integerToNat (lambda (arg-0) (Types-Prelude-case--integerToNat-439 arg-0 (let ((sc0 (or (and (<= arg-0 0) 1) 0))) (cond ((equal? sc0 0) 1)(else 0))))))
(define Types-Prelude-fastPack (lambda (arg-0) (PrimIO-unsafePerformIO 'erased (lambda (eta-0) (apply string (blodwen-read-args (Types-Prelude-n--3461-3287-toFArgs arg-0 arg-0)))))))
(define Types-Prelude-elem (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((0) 1) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (Basics-Prelude-C-124C-124 (let ((sc1 arg-1)) (let ((e-1 (vector-ref sc1 1))) ((e-1 arg-2) e-2))) (lambda () (Types-Prelude-elem 'erased arg-1 arg-2 e-3))))))))))
(define Types-Prelude-either (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-5)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) ((arg-3) e-2))) (else (let ((e-5 (vector-ref sc0 1))) ((arg-4) e-5)))))))
(define Types-Prelude-countFrom (lambda (arg-0 arg-1 arg-2) (vector 0 arg-1 (lambda () (Types-Prelude-countFrom 'erased (arg-2 arg-1) arg-2)))))
(define Types-Prelude-chr (lambda (ext-0) (cast-int-char ext-0)))
(define Types-Prelude-cast (lambda (arg-0 arg-1 arg-2 ext-0) (arg-2 ext-0)))
(define Strings-Types-Prelude-C-43C-43 (lambda (arg-0 arg-1) (string-append arg-0 arg-1)))
(define List-Types-Prelude-C-43C-43 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-1)) (case (vector-ref sc0 0) ((0) arg-2) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (vector 1 e-2 (List-Types-Prelude-C-43C-43 'erased e-3 arg-2)))))))))
(define Num-Prelude-fromInteger_Num__Integer (lambda (ext-0) ext-0))
(define Num-Prelude-fromInteger_Num__Int (lambda (ext-0) ext-0))
(define Num-Prelude-__Impl_Num_Int (lambda () (vector 0 (lambda (arg-2) (lambda (arg-3) (b+ arg-2 arg-3 63))) (lambda (arg-4) (lambda (arg-5) (b* arg-4 arg-5 63))) (lambda (arg-6) arg-6))))
(define Num-Prelude-C-45_Neg__Int (lambda (ext-0 ext-1) (b- ext-0 ext-1 63)))
(define Num-Prelude-C-43_Num__Integer (lambda (ext-0 ext-1) (+ ext-0 ext-1)))
(define Num-Prelude-C-43_Num__Int (lambda (ext-0 ext-1) (b+ ext-0 ext-1 63)))
(define Num-Prelude-C-42_Num__Int (lambda (ext-0 ext-1) (b* ext-0 ext-1 63)))
(define Num-Prelude-fromInteger (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (let ((e-3 (vector-ref sc0 3))) (lambda (arg-2) (e-3 arg-2))))))
(define Num-Prelude-C-43 (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (let ((e-1 (vector-ref sc0 1))) (lambda (arg-2) (lambda (arg-3) ((e-1 arg-2) arg-3)))))))
(define EqOrd-Prelude-case--caseC-32blockC-32inC-32compare-1963 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (cond ((equal? sc0 0) 1) (else 2)))))
(define EqOrd-Prelude-case--compare-1946 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (cond ((equal? sc0 0) 0) (else (EqOrd-Prelude-case--caseC-32blockC-32inC-32compare-1963 arg-0 arg-1 (EqOrd-Prelude-C-61C-61_Eq__String arg-1 arg-0)))))))
(define EqOrd-Prelude-case--max-1929 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (cond ((equal? sc0 0) arg-1) (else arg-0)))))
(define EqOrd-Prelude-case--min-1915 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (cond ((equal? sc0 0) arg-1) (else arg-0)))))
(define EqOrd-Prelude-case--caseC-32blockC-32inC-32compare-1279 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (cond ((equal? sc0 0) 1) (else 2)))))
(define EqOrd-Prelude-case--compare-1262 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (cond ((equal? sc0 0) 0) (else (EqOrd-Prelude-case--caseC-32blockC-32inC-32compare-1279 arg-0 arg-1 (EqOrd-Prelude-C-61C-61_Eq__Integer arg-1 arg-0)))))))
(define EqOrd-Prelude-case--max-1245 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (cond ((equal? sc0 0) arg-1) (else arg-0)))))
(define EqOrd-Prelude-case--min-1231 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (cond ((equal? sc0 0) arg-1) (else arg-0)))))
(define EqOrd-Prelude-case--caseC-32blockC-32inC-32compare-1165 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (cond ((equal? sc0 0) 1) (else 2)))))
(define EqOrd-Prelude-case--compare-1148 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (cond ((equal? sc0 0) 0) (else (EqOrd-Prelude-case--caseC-32blockC-32inC-32compare-1165 arg-0 arg-1 (EqOrd-Prelude-C-61C-61_Eq__Int arg-1 arg-0)))))))
(define EqOrd-Prelude-case--max-1131 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (cond ((equal? sc0 0) arg-1) (else arg-0)))))
(define EqOrd-Prelude-case--min-1117 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (cond ((equal? sc0 0) arg-1) (else arg-0)))))
(define EqOrd-Prelude-min_Ord__String (lambda (arg-0 arg-1) (EqOrd-Prelude-case--min-1915 arg-1 arg-0 (EqOrd-Prelude-C-60_Ord__String arg-0 arg-1))))
(define EqOrd-Prelude-min_Ord__Integer (lambda (arg-0 arg-1) (EqOrd-Prelude-case--min-1231 arg-1 arg-0 (EqOrd-Prelude-C-60_Ord__Integer arg-0 arg-1))))
(define EqOrd-Prelude-min_Ord__Int (lambda (arg-0 arg-1) (EqOrd-Prelude-case--min-1117 arg-1 arg-0 (EqOrd-Prelude-C-60_Ord__Int arg-0 arg-1))))
(define EqOrd-Prelude-max_Ord__String (lambda (arg-0 arg-1) (EqOrd-Prelude-case--max-1929 arg-1 arg-0 (EqOrd-Prelude-C-62_Ord__String arg-0 arg-1))))
(define EqOrd-Prelude-max_Ord__Integer (lambda (arg-0 arg-1) (EqOrd-Prelude-case--max-1245 arg-1 arg-0 (EqOrd-Prelude-C-62_Ord__Integer arg-0 arg-1))))
(define EqOrd-Prelude-max_Ord__Int (lambda (arg-0 arg-1) (EqOrd-Prelude-case--max-1131 arg-1 arg-0 (EqOrd-Prelude-C-62_Ord__Int arg-0 arg-1))))
(define EqOrd-Prelude-compare_Ord__String (lambda (arg-0 arg-1) (EqOrd-Prelude-case--compare-1946 arg-1 arg-0 (EqOrd-Prelude-C-60_Ord__String arg-0 arg-1))))
(define EqOrd-Prelude-compare_Ord__Integer (lambda (arg-0 arg-1) (EqOrd-Prelude-case--compare-1262 arg-1 arg-0 (EqOrd-Prelude-C-60_Ord__Integer arg-0 arg-1))))
(define EqOrd-Prelude-compare_Ord__Int (lambda (arg-0 arg-1) (EqOrd-Prelude-case--compare-1148 arg-1 arg-0 (EqOrd-Prelude-C-60_Ord__Int arg-0 arg-1))))
(define EqOrd-Prelude-__Ord_C-40EqC-32tyC-41 (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (let ((e-1 (vector-ref sc0 1))) e-1))))
(define EqOrd-Prelude-__Impl_Ord_String (lambda () (vector 0 (vector 0 (lambda (arg-2) (lambda (arg-3) (EqOrd-Prelude-C-61C-61_Eq__String arg-2 arg-3))) (lambda (arg-4) (lambda (arg-5) (EqOrd-Prelude-C-47C-61_Eq__String arg-4 arg-5)))) (lambda (arg-369) (lambda (arg-370) (EqOrd-Prelude-compare_Ord__String arg-369 arg-370))) (lambda (arg-371) (lambda (arg-372) (EqOrd-Prelude-C-60_Ord__String arg-371 arg-372))) (lambda (arg-373) (lambda (arg-374) (EqOrd-Prelude-C-62_Ord__String arg-373 arg-374))) (lambda (arg-375) (lambda (arg-376) (EqOrd-Prelude-C-60C-61_Ord__String arg-375 arg-376))) (lambda (arg-377) (lambda (arg-378) (EqOrd-Prelude-C-62C-61_Ord__String arg-377 arg-378))) (lambda (arg-379) (lambda (arg-380) (EqOrd-Prelude-max_Ord__String arg-379 arg-380))) (lambda (arg-381) (lambda (arg-382) (EqOrd-Prelude-min_Ord__String arg-381 arg-382))))))
(define EqOrd-Prelude-__Impl_Ord_Integer (lambda () (vector 0 (vector 0 (lambda (arg-2) (lambda (arg-3) (EqOrd-Prelude-C-61C-61_Eq__Integer arg-2 arg-3))) (lambda (arg-4) (lambda (arg-5) (EqOrd-Prelude-C-47C-61_Eq__Integer arg-4 arg-5)))) (lambda (arg-369) (lambda (arg-370) (EqOrd-Prelude-compare_Ord__Integer arg-369 arg-370))) (lambda (arg-371) (lambda (arg-372) (EqOrd-Prelude-C-60_Ord__Integer arg-371 arg-372))) (lambda (arg-373) (lambda (arg-374) (EqOrd-Prelude-C-62_Ord__Integer arg-373 arg-374))) (lambda (arg-375) (lambda (arg-376) (EqOrd-Prelude-C-60C-61_Ord__Integer arg-375 arg-376))) (lambda (arg-377) (lambda (arg-378) (EqOrd-Prelude-C-62C-61_Ord__Integer arg-377 arg-378))) (lambda (arg-379) (lambda (arg-380) (EqOrd-Prelude-max_Ord__Integer arg-379 arg-380))) (lambda (arg-381) (lambda (arg-382) (EqOrd-Prelude-min_Ord__Integer arg-381 arg-382))))))
(define EqOrd-Prelude-__Impl_Ord_Int (lambda () (vector 0 (vector 0 (lambda (arg-2) (lambda (arg-3) (EqOrd-Prelude-C-61C-61_Eq__Int arg-2 arg-3))) (lambda (arg-4) (lambda (arg-5) (EqOrd-Prelude-C-47C-61_Eq__Int arg-4 arg-5)))) (lambda (arg-369) (lambda (arg-370) (EqOrd-Prelude-compare_Ord__Int arg-369 arg-370))) (lambda (arg-371) (lambda (arg-372) (EqOrd-Prelude-C-60_Ord__Int arg-371 arg-372))) (lambda (arg-373) (lambda (arg-374) (EqOrd-Prelude-C-62_Ord__Int arg-373 arg-374))) (lambda (arg-375) (lambda (arg-376) (EqOrd-Prelude-C-60C-61_Ord__Int arg-375 arg-376))) (lambda (arg-377) (lambda (arg-378) (EqOrd-Prelude-C-62C-61_Ord__Int arg-377 arg-378))) (lambda (arg-379) (lambda (arg-380) (EqOrd-Prelude-max_Ord__Int arg-379 arg-380))) (lambda (arg-381) (lambda (arg-382) (EqOrd-Prelude-min_Ord__Int arg-381 arg-382))))))
(define EqOrd-Prelude-__Impl_Eq_String (lambda () (vector 0 (lambda (arg-2) (lambda (arg-3) (EqOrd-Prelude-C-61C-61_Eq__String arg-2 arg-3))) (lambda (arg-4) (lambda (arg-5) (EqOrd-Prelude-C-47C-61_Eq__String arg-4 arg-5))))))
(define EqOrd-Prelude-__Impl_Eq_Ordering (lambda () (vector 0 (lambda (arg-2) (lambda (arg-3) (EqOrd-Prelude-C-61C-61_Eq__Ordering arg-2 arg-3))) (lambda (arg-4) (lambda (arg-5) (EqOrd-Prelude-C-47C-61_Eq__Ordering arg-4 arg-5))))))
(define EqOrd-Prelude-__Impl_Eq_Integer (lambda () (vector 0 (lambda (arg-2) (lambda (arg-3) (EqOrd-Prelude-C-61C-61_Eq__Integer arg-2 arg-3))) (lambda (arg-4) (lambda (arg-5) (EqOrd-Prelude-C-47C-61_Eq__Integer arg-4 arg-5))))))
(define EqOrd-Prelude-__Impl_Eq_Int (lambda () (vector 0 (lambda (arg-2) (lambda (arg-3) (EqOrd-Prelude-C-61C-61_Eq__Int arg-2 arg-3))) (lambda (arg-4) (lambda (arg-5) (EqOrd-Prelude-C-47C-61_Eq__Int arg-4 arg-5))))))
(define EqOrd-Prelude-__Impl_Eq_Char (lambda () (vector 0 (lambda (arg-2) (lambda (arg-3) (EqOrd-Prelude-C-61C-61_Eq__Char arg-2 arg-3))) (lambda (arg-4) (lambda (arg-5) (EqOrd-Prelude-C-47C-61_Eq__Char arg-4 arg-5))))))
(define EqOrd-Prelude-__Impl_Eq_Bool (lambda () (vector 0 (lambda (arg-2) (lambda (arg-3) (EqOrd-Prelude-C-61C-61_Eq__Bool arg-2 arg-3))) (lambda (arg-4) (lambda (arg-5) (EqOrd-Prelude-C-47C-61_Eq__Bool arg-4 arg-5))))))
(define EqOrd-Prelude-C-62_Ord__String (lambda (arg-0 arg-1) (let ((sc0 (or (and (string>? arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 1)(else 0)))))
(define EqOrd-Prelude-C-62_Ord__Integer (lambda (arg-0 arg-1) (let ((sc0 (or (and (> arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 1)(else 0)))))
(define EqOrd-Prelude-C-62_Ord__Int (lambda (arg-0 arg-1) (let ((sc0 (or (and (> arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 1)(else 0)))))
(define EqOrd-Prelude-C-62_Ord__Char (lambda (arg-0 arg-1) (let ((sc0 (or (and (char>? arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 1)(else 0)))))
(define EqOrd-Prelude-C-62C-61_Ord__String (lambda (arg-0 arg-1) (let ((sc0 (or (and (string>=? arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 1)(else 0)))))
(define EqOrd-Prelude-C-62C-61_Ord__Integer (lambda (arg-0 arg-1) (let ((sc0 (or (and (>= arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 1)(else 0)))))
(define EqOrd-Prelude-C-62C-61_Ord__Int (lambda (arg-0 arg-1) (let ((sc0 (or (and (>= arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 1)(else 0)))))
(define EqOrd-Prelude-C-62C-61_Ord__Char (lambda (arg-0 arg-1) (let ((sc0 (or (and (char>=? arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 1)(else 0)))))
(define EqOrd-Prelude-C-61C-61_Eq__String (lambda (arg-0 arg-1) (let ((sc0 (or (and (string=? arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 1)(else 0)))))
(define EqOrd-Prelude-C-61C-61_Eq__Ordering (lambda (arg-0 arg-1) (let ((sc0 arg-0)) (cond ((equal? sc0 0) (let ((sc1 arg-1)) (cond ((equal? sc1 0) 0)(else 1)))) ((equal? sc0 1) (let ((sc1 arg-1)) (cond ((equal? sc1 1) 0)(else 1)))) ((equal? sc0 2) (let ((sc1 arg-1)) (cond ((equal? sc1 2) 0)(else 1))))(else 1)))))
(define EqOrd-Prelude-C-61C-61_Eq__Integer (lambda (arg-0 arg-1) (let ((sc0 (or (and (= arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 1)(else 0)))))
(define EqOrd-Prelude-C-61C-61_Eq__Int (lambda (arg-0 arg-1) (let ((sc0 (or (and (= arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 1)(else 0)))))
(define EqOrd-Prelude-C-61C-61_Eq__Char (lambda (arg-0 arg-1) (let ((sc0 (or (and (char=? arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 1)(else 0)))))
(define EqOrd-Prelude-C-61C-61_Eq__Bool (lambda (arg-0 arg-1) (let ((sc0 arg-0)) (cond ((equal? sc0 0) (let ((sc1 arg-1)) (cond ((equal? sc1 0) 0)(else 1)))) ((equal? sc0 1) (let ((sc1 arg-1)) (cond ((equal? sc1 1) 0)(else 1))))(else 1)))))
(define EqOrd-Prelude-C-60_Ord__String (lambda (arg-0 arg-1) (let ((sc0 (or (and (string<? arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 1)(else 0)))))
(define EqOrd-Prelude-C-60_Ord__Integer (lambda (arg-0 arg-1) (let ((sc0 (or (and (< arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 1)(else 0)))))
(define EqOrd-Prelude-C-60_Ord__Int (lambda (arg-0 arg-1) (let ((sc0 (or (and (< arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 1)(else 0)))))
(define EqOrd-Prelude-C-60C-61_Ord__String (lambda (arg-0 arg-1) (let ((sc0 (or (and (string<=? arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 1)(else 0)))))
(define EqOrd-Prelude-C-60C-61_Ord__Integer (lambda (arg-0 arg-1) (let ((sc0 (or (and (<= arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 1)(else 0)))))
(define EqOrd-Prelude-C-60C-61_Ord__Int (lambda (arg-0 arg-1) (let ((sc0 (or (and (<= arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 1)(else 0)))))
(define EqOrd-Prelude-C-60C-61_Ord__Char (lambda (arg-0 arg-1) (let ((sc0 (or (and (char<=? arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 1)(else 0)))))
(define EqOrd-Prelude-C-47C-61_Eq__String (lambda (arg-0 arg-1) (Basics-Prelude-not (EqOrd-Prelude-C-61C-61_Eq__String arg-0 arg-1))))
(define EqOrd-Prelude-C-47C-61_Eq__Ordering (lambda (arg-0 arg-1) (Basics-Prelude-not (EqOrd-Prelude-C-61C-61_Eq__Ordering arg-0 arg-1))))
(define EqOrd-Prelude-C-47C-61_Eq__Integer (lambda (arg-0 arg-1) (Basics-Prelude-not (EqOrd-Prelude-C-61C-61_Eq__Integer arg-0 arg-1))))
(define EqOrd-Prelude-C-47C-61_Eq__Int (lambda (arg-0 arg-1) (Basics-Prelude-not (EqOrd-Prelude-C-61C-61_Eq__Int arg-0 arg-1))))
(define EqOrd-Prelude-C-47C-61_Eq__Char (lambda (arg-0 arg-1) (Basics-Prelude-not (EqOrd-Prelude-C-61C-61_Eq__Char arg-0 arg-1))))
(define EqOrd-Prelude-C-47C-61_Eq__Bool (lambda (arg-0 arg-1) (Basics-Prelude-not (EqOrd-Prelude-C-61C-61_Eq__Bool arg-0 arg-1))))
(define EqOrd-Prelude-compare (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (let ((e-2 (vector-ref sc0 2))) (lambda (arg-2) (lambda (arg-3) ((e-2 arg-2) arg-3)))))))
(define EqOrd-Prelude-C-62 (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (let ((e-4 (vector-ref sc0 4))) (lambda (arg-2) (lambda (arg-3) ((e-4 arg-2) arg-3)))))))
(define EqOrd-Prelude-C-61C-61 (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (let ((e-1 (vector-ref sc0 1))) (lambda (arg-2) (lambda (arg-3) ((e-1 arg-2) arg-3)))))))
(define EqOrd-Prelude-C-60C-61 (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (let ((e-5 (vector-ref sc0 5))) (lambda (arg-2) (lambda (arg-3) ((e-5 arg-2) arg-3)))))))
(define EqOrd-Prelude-C-60 (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (let ((e-3 (vector-ref sc0 3))) (lambda (arg-2) (lambda (arg-3) ((e-3 arg-2) arg-3)))))))
(define EqOrd-Prelude-C-47C-61 (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (let ((e-2 (vector-ref sc0 2))) (lambda (arg-2) (lambda (arg-3) ((e-2 arg-2) arg-3)))))))
(define Interfaces-Prelude-__Monoid_C-40SemigroupC-32tyC-41 (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (let ((e-1 (vector-ref sc0 1))) e-1))))
(define Interfaces-Prelude-__Monad_C-40ApplicativeC-32mC-41 (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (let ((e-1 (vector-ref sc0 1))) e-1))))
(define Interfaces-Prelude-traverse (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-5)) (let ((e-3 (vector-ref sc0 3))) (lambda (arg-6) (lambda (arg-7) ((((((e-3 'erased) 'erased) 'erased) arg-4) arg-6) arg-7)))))))
(define Interfaces-Prelude-sum (lambda (arg-0 arg-1 arg-2) (let ((sc0 (Builtin-fst 'erased 'erased arg-2))) (let ((e-1 (vector-ref sc0 1))) (lambda (arg-3) (((((e-1 'erased) 'erased) (let ((sc1 (Builtin-snd 'erased 'erased arg-2))) (let ((e-5 (vector-ref sc1 1))) (lambda (arg-4) (lambda (arg-5) ((e-5 arg-4) arg-5)))))) (let ((sc1 (Builtin-snd 'erased 'erased arg-2))) (let ((e-3 (vector-ref sc1 3))) (e-3 0)))) arg-3))))))
(define Interfaces-Prelude-pure (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (let ((e-2 (vector-ref sc0 2))) (lambda (arg-3) ((e-2 'erased) arg-3))))))
(define Interfaces-Prelude-neutral (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (let ((e-2 (vector-ref sc0 2))) e-2))))
(define Interfaces-Prelude-map (lambda (arg-0 arg-1 arg-2 arg-3 ext-0 ext-1) ((((arg-3 'erased) 'erased) ext-0) ext-1)))
(define Interfaces-Prelude-foldr (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (let ((e-1 (vector-ref sc0 1))) (lambda (arg-4) (lambda (arg-5) (lambda (arg-6) (((((e-1 'erased) 'erased) arg-4) arg-5) arg-6))))))))
(define Interfaces-Prelude-foldl (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (let ((e-2 (vector-ref sc0 2))) (lambda (arg-4) (lambda (arg-5) (lambda (arg-6) (((((e-2 'erased) 'erased) arg-4) arg-5) arg-6))))))))
(define Interfaces-Prelude-concatMap (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 (Builtin-fst 'erased 'erased arg-3))) (let ((e-1 (vector-ref sc0 1))) (lambda (arg-5) (((((e-1 'erased) 'erased) (lambda (eta-0) (lambda (arg-6) (let ((sc1 (Builtin-snd 'erased 'erased arg-3))) (let ((e-4 (vector-ref sc1 1))) ((e-4 (arg-4 eta-0)) arg-6)))))) (let ((sc1 (Builtin-snd 'erased 'erased arg-3))) (let ((e-3 (vector-ref sc1 2))) e-3))) arg-5))))))
(define Interfaces-Prelude-concat (lambda (arg-0 arg-1 arg-2) (let ((sc0 (Builtin-fst 'erased 'erased arg-2))) (let ((e-1 (vector-ref sc0 1))) (lambda (arg-3) (((((e-1 'erased) 'erased) (lambda (arg-4) (lambda (arg-5) (let ((sc1 (Builtin-snd 'erased 'erased arg-2))) (let ((e-4 (vector-ref sc1 1))) ((e-4 arg-4) arg-5)))))) (let ((sc1 (Builtin-snd 'erased 'erased arg-2))) (let ((e-3 (vector-ref sc1 2))) e-3))) arg-3))))))
(define Interfaces-Prelude-any (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-2)) (let ((e-2 (vector-ref sc0 2))) (lambda (arg-4) (((((e-2 'erased) 'erased) (lambda (x) (lambda (y) (Basics-Prelude-C-124C-124 x (lambda () (arg-3 y)))))) 1) arg-4))))))
(define Interfaces-Prelude-C-62C-62C-61 (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (let ((e-2 (vector-ref sc0 2))) (lambda (arg-4) (lambda (arg-5) ((((e-2 'erased) 'erased) arg-4) arg-5)))))))
(define Interfaces-Prelude-C-60C-43C-62 (lambda (arg-0 arg-1 ext-0 ext-1) ((arg-1 ext-0) ext-1)))
(define Interfaces-Prelude-C-60C-42C-62 (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (let ((e-3 (vector-ref sc0 3))) (lambda (arg-4) (lambda (arg-5) ((((e-3 'erased) 'erased) arg-4) arg-5)))))))
(define Interfaces-Prelude-C-60C-36C-62 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) ((((arg-3 'erased) 'erased) arg-4) arg-5)))
(define PrimIO-case--unsafePerformIO-401 (lambda (arg-0 arg-1 arg-2 arg-3) (PrimIO-unsafeDestroyWorld 'erased 'erased arg-3)))
(define PrimIO-case--caseC-32blockC-32inC-32io_bind-326 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (arg-7 arg-6)))
(define PrimIO-case--io_bind-304 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (PrimIO-case--caseC-32blockC-32inC-32io_bind-326 'erased 'erased 'erased 'erased 'erased arg-5 'erased (arg-3 arg-5))))
(define PrimIO-unsafePerformIO (lambda (arg-0 arg-1) (PrimIO-unsafeCreateWorld 'erased (lambda (w) (PrimIO-case--unsafePerformIO-401 'erased 'erased 'erased (arg-1 w))))))
(define PrimIO-unsafeDestroyWorld (lambda (arg-0 arg-1 arg-2) arg-2))
(define PrimIO-unsafeCreateWorld (lambda (arg-0 arg-1) (arg-1 #f)))
(define PrimIO-schemeCall (lambda (arg-0 arg-1 arg-2 ext-0) (apply (eval (string->symbol arg-1)) (blodwen-read-args arg-2))))
(define PrimIO-prim__schemeCall (lambda (arg-0 arg-1 arg-2 arg-3) (apply (eval (string->symbol arg-1)) (blodwen-read-args arg-2))))
(define PrimIO-prim__nullPtr (lambda (arg-0 arg-1) (PrimIO-prim__nullAnyPtr (PrimIO-prim__forgetPtr 'erased arg-1))))
(define PrimIO-prim__forgetPtr (lambda (arg-0 ext-0) (Builtin-believe_me 'erased 'erased ext-0)))
(define PrimIO-io_pure (lambda (arg-0 arg-1 ext-0) arg-1))
(define PrimIO-io_bind (lambda (arg-0 arg-1 arg-2 arg-3 ext-0) (PrimIO-case--io_bind-304 'erased 'erased 'erased arg-3 'erased (arg-2 ext-0))))
(define PrimIO-fromPrim (lambda (arg-0 arg-1) arg-1))
(define Show-Prelude-case--caseC-32blockC-32inC-32showLitChar-5250 (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (cond ((equal? sc0 0) (lambda (eta-0) (Types-Prelude-strCons #\\ (Show-Prelude-protectEsc (lambda (eta-1) (Types-Prelude-isDigit eta-1)) (Show-Prelude-show_Show__Int (char->integer arg-0)) eta-0)))) (else (lambda (eta-0) (Types-Prelude-strCons arg-0 eta-0)))))))
(define Show-Prelude-case--showLitChar-5227 (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (case (vector-ref sc0 0) ((1) (let ((e-1 (vector-ref sc0 1))) (lambda (eta-0) (Types-Prelude-strCons #\\ (Strings-Types-Prelude-C-43C-43 e-1 eta-0))))) (else (Show-Prelude-case--caseC-32blockC-32inC-32showLitChar-5250 arg-0 (EqOrd-Prelude-C-62_Ord__Char arg-0 (integer->char 127))))))))
(define Show-Prelude-case--protectEsc-4974 (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (cond ((equal? sc0 0) "\\&") (else "")))))
(define Show-Prelude-case--max-4716 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (cond ((equal? sc0 0) arg-1) (else arg-0)))))
(define Show-Prelude-case--min-4702 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (cond ((equal? sc0 0) arg-1) (else arg-0)))))
(define Show-Prelude-n--2035-5537-showC-39 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-4)) (case (vector-ref sc0 0) ((0) arg-3) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 e-3)) (case (vector-ref sc1 0) ((0) (Strings-Types-Prelude-C-43C-43 arg-3 (let ((sc2 arg-1)) (let ((e-1 (vector-ref sc2 1))) (e-1 e-2)))))(else (Show-Prelude-n--2035-5537-showC-39 'erased arg-1 arg-2 (Strings-Types-Prelude-C-43C-43 arg-3 (Strings-Types-Prelude-C-43C-43 (let ((sc1 arg-1)) (let ((e-1 (vector-ref sc1 1))) (e-1 e-2))) ", ")) e-3)))))))))))
(define Show-Prelude-n--1504-5044-getAt (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-1)) (cond ((equal? sc0 0) (let ((sc1 arg-2)) (case (vector-ref sc1 0) ((1) (let ((e-3 (vector-ref sc1 1))) (vector 1 e-3)))(else (let ((sc1 arg-2)) (vector 0 ))))))(else (let ((e-1 (- arg-1 1))) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((1) (let ((e-7 (vector-ref sc0 2))) (Show-Prelude-n--1504-5044-getAt arg-0 e-1 e-7)))(else (let ((sc0 arg-2)) (vector 0 )))))))))))
(define Show-Prelude-n--1504-5043-asciiTab (lambda (arg-0) (vector 1 "NUL" (vector 1 "SOH" (vector 1 "STX" (vector 1 "ETX" (vector 1 "EOT" (vector 1 "ENQ" (vector 1 "ACK" (vector 1 "BEL" (vector 1 "BS" (vector 1 "HT" (vector 1 "LF" (vector 1 "VT" (vector 1 "FF" (vector 1 "CR" (vector 1 "SO" (vector 1 "SI" (vector 1 "DLE" (vector 1 "DC1" (vector 1 "DC2" (vector 1 "DC3" (vector 1 "DC4" (vector 1 "NAK" (vector 1 "SYN" (vector 1 "ETB" (vector 1 "CAN" (vector 1 "EM" (vector 1 "SUB" (vector 1 "ESC" (vector 1 "FS" (vector 1 "GS" (vector 1 "RS" (vector 1 "US" (vector 0 )))))))))))))))))))))))))))))))))))
(define Show-Prelude-show_Show__String (lambda (arg-0) (Types-Prelude-strCons #\" ((Show-Prelude-showLitString (Types-Prelude-unpack arg-0)) "\""))))
(define Show-Prelude-show_Show__Nat (lambda (arg-0) (Show-Prelude-show_Show__Integer arg-0)))
(define Show-Prelude-show_Show__Integer (lambda (arg-0) (Show-Prelude-showPrec_Show__Integer (vector 0 ) arg-0)))
(define Show-Prelude-show_Show__Int (lambda (arg-0) (Show-Prelude-showPrec_Show__Int (vector 0 ) arg-0)))
(define Show-Prelude-show_Show__Double (lambda (arg-0) (Show-Prelude-showPrec_Show__Double (vector 0 ) arg-0)))
(define Show-Prelude-show_Show__C-40C-124C-40C-40BuiltinC-46PairC-32C-36aC-41C-32C-36bC-41C-44C-40C-40BuiltinC-46MkPairC-32C-36aC-41C-32C-36bC-41C-124C-41 (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (Strings-Types-Prelude-C-43C-43 "(" (Strings-Types-Prelude-C-43C-43 (let ((sc1 (Builtin-fst 'erased 'erased arg-2))) (let ((e-1 (vector-ref sc1 1))) (e-1 e-2))) (Strings-Types-Prelude-C-43C-43 ", " (Strings-Types-Prelude-C-43C-43 (let ((sc1 (Builtin-snd 'erased 'erased arg-2))) (let ((e-1 (vector-ref sc1 1))) (e-1 e-3))) ")")))))))))
(define Show-Prelude-show_Show__C-40ListC-32C-36aC-41 (lambda (arg-0 arg-1 arg-2) (Strings-Types-Prelude-C-43C-43 "[" (Strings-Types-Prelude-C-43C-43 (Show-Prelude-n--2035-5537-showC-39 'erased arg-1 arg-2 "" arg-2) "]"))))
(define Show-Prelude-showPrec_Show__String (lambda (arg-0 arg-1) (Show-Prelude-show_Show__String arg-1)))
(define Show-Prelude-showPrec_Show__Nat (lambda (arg-0 arg-1) (Show-Prelude-show_Show__Nat arg-1)))
(define Show-Prelude-showPrec_Show__Integer (lambda (ext-0 ext-1) (Show-Prelude-primNumShow 'erased (lambda (eta-0) (number->string eta-0)) ext-0 ext-1)))
(define Show-Prelude-showPrec_Show__Int (lambda (ext-0 ext-1) (Show-Prelude-primNumShow 'erased (lambda (eta-0) (number->string eta-0)) ext-0 ext-1)))
(define Show-Prelude-showPrec_Show__Double (lambda (ext-0 ext-1) (Show-Prelude-primNumShow 'erased (lambda (eta-0) (number->string eta-0)) ext-0 ext-1)))
(define Show-Prelude-showPrec_Show__C-40C-124C-40C-40BuiltinC-46PairC-32C-36aC-41C-32C-36bC-41C-44C-40C-40BuiltinC-46MkPairC-32C-36aC-41C-32C-36bC-41C-124C-41 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (Show-Prelude-show_Show__C-40C-124C-40C-40BuiltinC-46PairC-32C-36aC-41C-32C-36bC-41C-44C-40C-40BuiltinC-46MkPairC-32C-36aC-41C-32C-36bC-41C-124C-41 'erased 'erased arg-2 arg-4)))
(define Show-Prelude-showPrec_Show__C-40ListC-32C-36aC-41 (lambda (arg-0 arg-1 arg-2 arg-3) (Show-Prelude-show_Show__C-40ListC-32C-36aC-41 'erased arg-1 arg-3)))
(define Show-Prelude-min_Ord__Prec (lambda (arg-0 arg-1) (Show-Prelude-case--min-4702 arg-1 arg-0 (Show-Prelude-C-60_Ord__Prec arg-0 arg-1))))
(define Show-Prelude-max_Ord__Prec (lambda (arg-0 arg-1) (Show-Prelude-case--max-4716 arg-1 arg-0 (Show-Prelude-C-62_Ord__Prec arg-0 arg-1))))
(define Show-Prelude-compare_Ord__Prec (lambda (arg-0 arg-1) (let ((sc0 arg-0)) (case (vector-ref sc0 0) ((4) (let ((e-0 (vector-ref sc0 1))) (let ((sc1 arg-1)) (case (vector-ref sc1 0) ((4) (let ((e-1 (vector-ref sc1 1))) (Types-Prelude-compare_Ord__Nat e-0 e-1)))(else (EqOrd-Prelude-compare_Ord__Integer (Show-Prelude-precCon arg-0) (Show-Prelude-precCon arg-1)))))))(else (EqOrd-Prelude-compare_Ord__Integer (Show-Prelude-precCon arg-0) (Show-Prelude-precCon arg-1)))))))
(define Show-Prelude-__Impl_Show_String (lambda () (vector 0 (lambda (x) (Show-Prelude-show_Show__String x)) (lambda (d) (lambda (x) (Show-Prelude-showPrec_Show__String d x))))))
(define Show-Prelude-__Impl_Show_Nat (lambda () (vector 0 (lambda (x) (Show-Prelude-show_Show__Nat x)) (lambda (d) (lambda (x) (Show-Prelude-showPrec_Show__Nat d x))))))
(define Show-Prelude-__Impl_Show_Integer (lambda () (vector 0 (lambda (x) (Show-Prelude-show_Show__Integer x)) (lambda (d) (lambda (x) (Show-Prelude-showPrec_Show__Integer d x))))))
(define Show-Prelude-__Impl_Show_Int (lambda () (vector 0 (lambda (x) (Show-Prelude-show_Show__Int x)) (lambda (d) (lambda (x) (Show-Prelude-showPrec_Show__Int d x))))))
(define Show-Prelude-__Impl_Show_Double (lambda () (vector 0 (lambda (x) (Show-Prelude-show_Show__Double x)) (lambda (d) (lambda (x) (Show-Prelude-showPrec_Show__Double d x))))))
(define Show-Prelude-__Impl_Show_C-40C-124C-40C-40BuiltinC-46PairC-32C-36aC-41C-32C-36bC-41C-44C-40C-40BuiltinC-46MkPairC-32C-36aC-41C-32C-36bC-41C-124C-41 (lambda (arg-0 arg-1 arg-2) (vector 0 (lambda (x) (Show-Prelude-show_Show__C-40C-124C-40C-40BuiltinC-46PairC-32C-36aC-41C-32C-36bC-41C-44C-40C-40BuiltinC-46MkPairC-32C-36aC-41C-32C-36bC-41C-124C-41 'erased 'erased arg-2 x)) (lambda (d) (lambda (x) (Show-Prelude-showPrec_Show__C-40C-124C-40C-40BuiltinC-46PairC-32C-36aC-41C-32C-36bC-41C-44C-40C-40BuiltinC-46MkPairC-32C-36aC-41C-32C-36bC-41C-124C-41 'erased 'erased arg-2 d x))))))
(define Show-Prelude-__Impl_Show_C-40ListC-32C-36aC-41 (lambda (arg-0 arg-1) (vector 0 (lambda (x) (Show-Prelude-show_Show__C-40ListC-32C-36aC-41 'erased arg-1 x)) (lambda (d) (lambda (x) (Show-Prelude-showPrec_Show__C-40ListC-32C-36aC-41 'erased arg-1 d x))))))
(define Show-Prelude-__Impl_Ord_Prec (lambda () (vector 0 (vector 0 (lambda (arg-2) (lambda (arg-3) (Show-Prelude-C-61C-61_Eq__Prec arg-2 arg-3))) (lambda (arg-4) (lambda (arg-5) (Show-Prelude-C-47C-61_Eq__Prec arg-4 arg-5)))) (lambda (arg-369) (lambda (arg-370) (Show-Prelude-compare_Ord__Prec arg-369 arg-370))) (lambda (arg-371) (lambda (arg-372) (Show-Prelude-C-60_Ord__Prec arg-371 arg-372))) (lambda (arg-373) (lambda (arg-374) (Show-Prelude-C-62_Ord__Prec arg-373 arg-374))) (lambda (arg-375) (lambda (arg-376) (Show-Prelude-C-60C-61_Ord__Prec arg-375 arg-376))) (lambda (arg-377) (lambda (arg-378) (Show-Prelude-C-62C-61_Ord__Prec arg-377 arg-378))) (lambda (arg-379) (lambda (arg-380) (Show-Prelude-max_Ord__Prec arg-379 arg-380))) (lambda (arg-381) (lambda (arg-382) (Show-Prelude-min_Ord__Prec arg-381 arg-382))))))
(define Show-Prelude-__Impl_Eq_Prec (lambda () (vector 0 (lambda (arg-2) (lambda (arg-3) (Show-Prelude-C-61C-61_Eq__Prec arg-2 arg-3))) (lambda (arg-4) (lambda (arg-5) (Show-Prelude-C-47C-61_Eq__Prec arg-4 arg-5))))))
(define Show-Prelude-C-62_Ord__Prec (lambda (arg-0 arg-1) (EqOrd-Prelude-C-61C-61_Eq__Ordering (Show-Prelude-compare_Ord__Prec arg-0 arg-1) 2)))
(define Show-Prelude-C-62C-61_Ord__Prec (lambda (arg-0 arg-1) (EqOrd-Prelude-C-47C-61_Eq__Ordering (Show-Prelude-compare_Ord__Prec arg-0 arg-1) 0)))
(define Show-Prelude-C-61C-61_Eq__Prec (lambda (arg-0 arg-1) (let ((sc0 arg-0)) (case (vector-ref sc0 0) ((4) (let ((e-0 (vector-ref sc0 1))) (let ((sc1 arg-1)) (case (vector-ref sc1 0) ((4) (let ((e-1 (vector-ref sc1 1))) (Types-Prelude-C-61C-61_Eq__Nat e-0 e-1)))(else (EqOrd-Prelude-C-61C-61_Eq__Integer (Show-Prelude-precCon arg-0) (Show-Prelude-precCon arg-1)))))))(else (EqOrd-Prelude-C-61C-61_Eq__Integer (Show-Prelude-precCon arg-0) (Show-Prelude-precCon arg-1)))))))
(define Show-Prelude-C-60_Ord__Prec (lambda (arg-0 arg-1) (EqOrd-Prelude-C-61C-61_Eq__Ordering (Show-Prelude-compare_Ord__Prec arg-0 arg-1) 0)))
(define Show-Prelude-C-60C-61_Ord__Prec (lambda (arg-0 arg-1) (EqOrd-Prelude-C-47C-61_Eq__Ordering (Show-Prelude-compare_Ord__Prec arg-0 arg-1) 2)))
(define Show-Prelude-C-47C-61_Eq__Prec (lambda (arg-0 arg-1) (Basics-Prelude-not (Show-Prelude-C-61C-61_Eq__Prec arg-0 arg-1))))
(define Show-Prelude-showPrec (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (let ((e-2 (vector-ref sc0 2))) (lambda (arg-2) (lambda (arg-3) ((e-2 arg-2) arg-3)))))))
(define Show-Prelude-showParens (lambda (arg-0 arg-1) (let ((sc0 arg-0)) (cond ((equal? sc0 1) arg-1) (else (Strings-Types-Prelude-C-43C-43 "(" (Strings-Types-Prelude-C-43C-43 arg-1 ")")))))))
(define Show-Prelude-showLitString (lambda (arg-0) (let ((sc0 arg-0)) (case (vector-ref sc0 0) ((0) (lambda (eta-0) eta-0)) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 e-2)) (cond ((equal? sc1 #\") (lambda (eta-0) (Strings-Types-Prelude-C-43C-43 "\\\"" ((Show-Prelude-showLitString e-3) eta-0))))(else (lambda (eta-0) ((Show-Prelude-showLitChar e-2) ((Show-Prelude-showLitString e-3) eta-0)))))))))))))
(define Show-Prelude-showLitChar (lambda (arg-0) (let ((sc0 arg-0)) (cond ((equal? sc0 (integer->char 7)) (lambda (arg-1) (Strings-Types-Prelude-C-43C-43 "\\a" arg-1))) ((equal? sc0 (integer->char 8)) (lambda (arg-1) (Strings-Types-Prelude-C-43C-43 "\\b" arg-1))) ((equal? sc0 (integer->char 12)) (lambda (arg-1) (Strings-Types-Prelude-C-43C-43 "\\f" arg-1))) ((equal? sc0 (integer->char 10)) (lambda (arg-1) (Strings-Types-Prelude-C-43C-43 "\\n" arg-1))) ((equal? sc0 (integer->char 13)) (lambda (arg-1) (Strings-Types-Prelude-C-43C-43 "\\r" arg-1))) ((equal? sc0 (integer->char 9)) (lambda (arg-1) (Strings-Types-Prelude-C-43C-43 "\\t" arg-1))) ((equal? sc0 (integer->char 11)) (lambda (arg-1) (Strings-Types-Prelude-C-43C-43 "\\v" arg-1))) ((equal? sc0 (integer->char 14)) (lambda (eta-0) (Show-Prelude-protectEsc (lambda (arg-1) (EqOrd-Prelude-C-61C-61_Eq__Char arg-1 #\H)) "\\SO" eta-0))) ((equal? sc0 (integer->char 127)) (lambda (arg-1) (Strings-Types-Prelude-C-43C-43 "\\DEL" arg-1))) ((equal? sc0 #\\) (lambda (arg-1) (Strings-Types-Prelude-C-43C-43 "\\\\" arg-1)))(else (Show-Prelude-case--showLitChar-5227 arg-0 (Show-Prelude-n--1504-5044-getAt arg-0 (Types-Prelude-fromInteger_Num__Nat (char->integer arg-0)) (Show-Prelude-n--1504-5043-asciiTab arg-0))))))))
(define Show-Prelude-show (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (let ((e-1 (vector-ref sc0 1))) (lambda (arg-2) (e-1 arg-2))))))
(define Show-Prelude-protectEsc (lambda (arg-0 arg-1 arg-2) (Strings-Types-Prelude-C-43C-43 arg-1 (Strings-Types-Prelude-C-43C-43 (Show-Prelude-case--protectEsc-4974 arg-2 arg-1 arg-0 (Show-Prelude-firstCharIs arg-0 arg-2)) arg-2))))
(define Show-Prelude-primNumShow (lambda (arg-0 arg-1 arg-2 arg-3) (let ((str (arg-1 arg-3))) (Show-Prelude-showParens (Basics-Prelude-C-38C-38 (Show-Prelude-C-62C-61_Ord__Prec arg-2 (vector 5 )) (lambda () (Show-Prelude-firstCharIs (lambda (arg-4) (EqOrd-Prelude-C-61C-61_Eq__Char arg-4 #\-)) str))) str))))
(define Show-Prelude-precCon (lambda (arg-0) (let ((sc0 arg-0)) (case (vector-ref sc0 0) ((0) 0) ((1) 1) ((2) 2) ((3) 3) ((4) 4) ((5) 5) (else 6)))))
(define Show-Prelude-firstCharIs (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (cond ((equal? sc0 "") 1)(else (arg-0 (string-ref arg-1 0)))))))
(define IO-Prelude-pure_Applicative__IO (lambda (arg-0 arg-1 ext-0) arg-1))
(define IO-Prelude-map_Functor__IO (lambda (arg-0 arg-1 arg-2 arg-3 ext-0) (let ((act-3 (arg-3 ext-0))) (arg-2 act-3))))
(define IO-Prelude-liftIO_HasIO__IO (lambda (arg-0 arg-1) arg-1))
(define IO-Prelude-join_Monad__IO (lambda (arg-0 arg-1 ext-0) (let ((act-2 (arg-1 ext-0))) (act-2 ext-0))))
(define IO-Prelude-__Impl_Monad_IO (lambda () (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-45) (lambda (eta-0) (IO-Prelude-map_Functor__IO 'erased 'erased func arg-45 eta-0)))))) (lambda (a) (lambda (arg-112) (lambda (eta-0) arg-112))) (lambda (b) (lambda (a) (lambda (arg-113) (lambda (arg-115) (lambda (eta-0) (let ((act-17 (arg-113 eta-0))) (let ((act-16 (arg-115 eta-0))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-274) (lambda (arg-275) (lambda (eta-0) (let ((act-24 (arg-274 eta-0))) ((arg-275 act-24) eta-0))))))) (lambda (a) (lambda (arg-277) (lambda (eta-0) (let ((act-29 (arg-277 eta-0))) (act-29 eta-0))))))))
(define IO-Prelude-__Impl_HasIO_IO (lambda () (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-45) (lambda (eta-0) (IO-Prelude-map_Functor__IO 'erased 'erased func arg-45 eta-0)))))) (lambda (a) (lambda (arg-112) (lambda (eta-0) arg-112))) (lambda (b) (lambda (a) (lambda (arg-113) (lambda (arg-115) (lambda (eta-0) (let ((act-17 (arg-113 eta-0))) (let ((act-16 (arg-115 eta-0))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-274) (lambda (arg-275) (lambda (eta-0) (let ((act-24 (arg-274 eta-0))) ((arg-275 act-24) eta-0))))))) (lambda (a) (lambda (arg-277) (lambda (eta-0) (let ((act-51 (arg-277 eta-0))) (act-51 eta-0)))))) (lambda (a) (lambda (arg-5832) arg-5832)))))
(define IO-Prelude-__Impl_Functor_IO (lambda (ext-4 ext-1 ext-2 ext-3 ext-0) (IO-Prelude-map_Functor__IO 'erased 'erased ext-2 ext-3 ext-0)))
(define IO-Prelude-__Impl_Applicative_IO (lambda () (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-45) (lambda (eta-0) (IO-Prelude-map_Functor__IO 'erased 'erased func arg-45 eta-0)))))) (lambda (a) (lambda (arg-112) (lambda (eta-0) arg-112))) (lambda (b) (lambda (a) (lambda (arg-113) (lambda (arg-115) (lambda (eta-0) (let ((act-17 (arg-113 eta-0))) (let ((act-16 (arg-115 eta-0))) (act-17 act-16)))))))))))
(define IO-Prelude-__HasIO_C-40MonadC-32ioC-41 (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (let ((e-1 (vector-ref sc0 1))) e-1))))
(define IO-Prelude-C-62C-62C-61_Monad__IO (lambda (arg-0 arg-1 arg-2 arg-3 ext-0) (let ((act-1 (arg-2 ext-0))) ((arg-3 act-1) ext-0))))
(define IO-Prelude-C-60C-42C-62_Applicative__IO (lambda (arg-0 arg-1 arg-2 arg-3 ext-0) (let ((act-6 (arg-2 ext-0))) (let ((act-5 (arg-3 ext-0))) (act-6 act-5)))))
(define IO-Prelude-putStrLn (lambda (arg-0 arg-1 arg-2) (IO-Prelude-putStr 'erased arg-1 (string-append arg-2 "\xa;"))))
(define IO-Prelude-putStr (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-1)) (let ((e-2 (vector-ref sc0 2))) ((e-2 'erased) (lambda (eta-0) (IO-Prelude-prim__putStr arg-2 eta-0)))))))
(define IO-Prelude-printLn (lambda (arg-0 arg-1 arg-2 arg-3) (IO-Prelude-putStrLn 'erased (Builtin-fst 'erased 'erased arg-2) (let ((sc0 (Builtin-snd 'erased 'erased arg-2))) (let ((e-1 (vector-ref sc0 1))) (e-1 arg-3))))))
(define IO-Prelude-primIO (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-2)) (let ((e-2 (vector-ref sc0 2))) ((e-2 'erased) arg-3)))))
(define IO-Prelude-liftIO (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (let ((e-2 (vector-ref sc0 2))) (lambda (arg-3) ((e-2 'erased) arg-3))))))
(define IO-Prelude-getLine (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (let ((e-2 (vector-ref sc0 2))) ((e-2 'erased) (lambda (eta-0) (IO-Prelude-prim__getStr eta-0)))))))
(define List-Data-case--mapMaybe-2522 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-5)) (case (vector-ref sc0 0) ((0) (List-Data-mapMaybe 'erased 'erased arg-4 arg-3)) (else (let ((e-2 (vector-ref sc0 1))) (vector 1 e-2 (List-Data-mapMaybe 'erased 'erased arg-4 arg-3))))))))
(define List-Data-case--split-1623 (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 e-3)) (case (vector-ref sc1 0) ((0) (vector 0 e-2 (vector 0 ))) (else (let ((e-7 (vector-ref sc1 2))) (vector 0 e-2 (List1-Data-toList 'erased (List-Data-split 'erased arg-2 e-7))))))))))))
(define List-Data-case--caseC-32blockC-32inC-32span-1549 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-4)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (vector 0 (vector 1 arg-3 e-2) e-3))))))
(define List-Data-case--span-1529 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-4)) (cond ((equal? sc0 0) (List-Data-case--caseC-32blockC-32inC-32span-1549 'erased arg-2 arg-3 arg-1 (List-Data-span 'erased arg-3 arg-2))) (else (vector 0 (vector 0 ) (vector 1 arg-1 arg-2)))))))
(define List-Data-case--deleteBy-1410 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-5)) (cond ((equal? sc0 0) arg-3) (else (vector 1 arg-2 (List-Data-deleteBy 'erased arg-4 arg-1 arg-3)))))))
(define List-Data-case--nubByC-44nubByC-39-1327 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-5)) (cond ((equal? sc0 0) (List-Data-n--2432-1309-nubByC-39 'erased arg-4 arg-3 arg-2)) (else (vector 1 arg-1 (List-Data-n--2432-1309-nubByC-39 'erased (vector 1 arg-1 arg-4) arg-3 arg-2)))))))
(define List-Data-case--lookupBy-1206 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (let ((sc0 arg-7)) (cond ((equal? sc0 0) (vector 1 arg-4)) (else (List-Data-lookupBy 'erased 'erased arg-6 arg-2 arg-5))))))
(define List-Data-case--filter-1081 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-4)) (cond ((equal? sc0 0) (vector 1 arg-1 (List-Data-filter 'erased arg-3 arg-2))) (else (List-Data-filter 'erased arg-3 arg-2))))))
(define List-Data-n--2432-1309-nubByC-39 (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((0) (vector 0 )) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (List-Data-case--nubByC-44nubByC-39-1327 'erased e-2 e-3 arg-2 arg-1 (List-Data-elemBy 'erased arg-2 e-2 arg-1)))))))))
(define List-Data-zipWith (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-4)) (case (vector-ref sc0 0) ((0) (vector 0 ))(else (let ((sc0 arg-5)) (case (vector-ref sc0 0) ((0) (vector 0 ))(else (let ((sc0 arg-4)) (let ((e-1 (vector-ref sc0 1))) (let ((e-2 (vector-ref sc0 2))) (let ((sc1 arg-5)) (let ((e-4 (vector-ref sc1 1))) (let ((e-5 (vector-ref sc1 2))) (vector 1 ((arg-3 e-1) e-4) (List-Data-zipWith 'erased 'erased 'erased arg-3 e-2 e-5))))))))))))))))
(define List-Data-zip (lambda (arg-0 arg-1 ext-0 ext-1) (List-Data-zipWith 'erased 'erased 'erased (lambda (x) (lambda (y) (vector 0 x y))) ext-0 ext-1)))
(define List-Data-unionBy (lambda (arg-0 arg-1 arg-2 arg-3) (List-Types-Prelude-C-43C-43 'erased arg-2 (Types-Prelude-foldl_Foldable__List 'erased 'erased (lambda (eta-0) (lambda (eta-1) (Basics-Prelude-flip 'erased 'erased 'erased (lambda (eta-2) (lambda (eta-3) (List-Data-deleteBy 'erased arg-1 eta-2 eta-3))) eta-0 eta-1))) (List-Data-nubBy 'erased arg-1 arg-3) arg-2))))
(define List-Data-union (lambda (arg-0 arg-1 ext-0 ext-1) (List-Data-unionBy 'erased (let ((sc0 arg-1)) (let ((e-1 (vector-ref sc0 1))) (lambda (arg-2) (lambda (arg-3) ((e-1 arg-2) arg-3))))) ext-0 ext-1)))
(define List-Data-take (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-1)) (cond ((equal? sc0 0) (vector 0 ))(else (let ((e-0 (- arg-1 1))) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((1) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (vector 1 e-2 (List-Data-take 'erased e-0 e-3)))))(else (vector 0 ))))))))))
(define List-Data-split (lambda (arg-0 arg-1 arg-2) (List-Data-case--split-1623 'erased arg-2 arg-1 (List-Data-break 'erased arg-1 arg-2))))
(define List-Data-span (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((0) (vector 0 (vector 0 ) (vector 0 ))) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (List-Data-case--span-1529 'erased e-2 e-3 arg-1 (arg-1 e-2)))))))))
(define List-Data-reverseOnto (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((0) arg-1) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (List-Data-reverseOnto 'erased (vector 1 e-2 arg-1) e-3))))))))
(define List-Data-reverse (lambda (arg-0 ext-0) (List-Data-reverseOnto 'erased (vector 0 ) ext-0)))
(define List-Data-replicate (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-1)) (cond ((equal? sc0 0) (vector 0 ))(else (let ((e-0 (- arg-1 1))) (vector 1 arg-2 (List-Data-replicate 'erased e-0 arg-2))))))))
(define List-Data-nubBy (lambda (arg-0 ext-0 ext-1) (List-Data-n--2432-1309-nubByC-39 'erased (vector 0 ) ext-0 ext-1)))
(define List-Data-mapMaybe (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((0) (vector 0 )) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (List-Data-case--mapMaybe-2522 'erased 'erased e-2 e-3 arg-2 (arg-2 e-2)))))))))
(define List-Data-lookupBy (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-4)) (case (vector-ref sc0 0) ((0) (vector 0 )) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 e-2)) (let ((e-6 (vector-ref sc1 1))) (let ((e-7 (vector-ref sc1 2))) (List-Data-case--lookupBy-1206 'erased 'erased arg-3 e-6 e-7 e-3 arg-2 ((arg-2 arg-3) e-6))))))))))))
(define List-Data-lookup (lambda (arg-0 arg-1 arg-2 ext-0 ext-1) (List-Data-lookupBy 'erased 'erased (let ((sc0 arg-2)) (let ((e-1 (vector-ref sc0 1))) (lambda (arg-3) (lambda (arg-4) ((e-1 arg-3) arg-4))))) ext-0 ext-1)))
(define List-Data-isSuffixOfBy (lambda (arg-0 arg-1 arg-2 arg-3) (List-Data-isPrefixOfBy 'erased arg-1 (List-Data-reverse 'erased arg-2) (List-Data-reverse 'erased arg-3))))
(define List-Data-isSuffixOf (lambda (arg-0 arg-1 ext-0 ext-1) (List-Data-isSuffixOfBy 'erased (let ((sc0 arg-1)) (let ((e-1 (vector-ref sc0 1))) (lambda (arg-2) (lambda (arg-3) ((e-1 arg-2) arg-3))))) ext-0 ext-1)))
(define List-Data-isPrefixOfBy (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((0) 0)(else (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((0) 1)(else (let ((sc0 arg-2)) (let ((e-1 (vector-ref sc0 1))) (let ((e-2 (vector-ref sc0 2))) (let ((sc1 arg-3)) (let ((e-4 (vector-ref sc1 1))) (let ((e-5 (vector-ref sc1 2))) (Basics-Prelude-C-38C-38 ((arg-1 e-1) e-4) (lambda () (List-Data-isPrefixOfBy 'erased arg-1 e-2 e-5)))))))))))))))))
(define List-Data-isPrefixOf (lambda (arg-0 arg-1 ext-0 ext-1) (List-Data-isPrefixOfBy 'erased (let ((sc0 arg-1)) (let ((e-1 (vector-ref sc0 1))) (lambda (arg-2) (lambda (arg-3) ((e-1 arg-2) arg-3))))) ext-0 ext-1)))
(define List-Data-filter (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((0) (vector 0 )) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (List-Data-case--filter-1081 'erased e-2 e-3 arg-1 (arg-1 e-2)))))))))
(define List-Data-elemBy (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((0) 1) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (Basics-Prelude-C-124C-124 ((arg-1 arg-2) e-2) (lambda () (List-Data-elemBy 'erased arg-1 arg-2 e-3))))))))))
(define List-Data-drop (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-1)) (cond ((equal? sc0 0) arg-2)(else (let ((e-0 (- arg-1 1))) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((0) (vector 0 )) (else (let ((e-4 (vector-ref sc0 2))) (List-Data-drop 'erased e-0 e-4)))))))))))
(define List-Data-deleteBy (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((0) (vector 0 )) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (List-Data-case--deleteBy-1410 'erased arg-2 e-2 e-3 arg-1 ((arg-1 arg-2) e-2)))))))))
(define List-Data-break (lambda (arg-0 arg-1 arg-2) (List-Data-span 'erased (lambda (eta-0) (Basics-Prelude-not (arg-1 eta-0))) arg-2)))
(define List-Data-appendNilRightNeutral (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (case (vector-ref sc0 0) ((0) (vector 0 )) (else (vector 0 ))))))
(define List-Data-appendAssociative (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-1)) (case (vector-ref sc0 0) ((0) (vector 0 )) (else (vector 0 ))))))
(define List1-Data-map_Functor__List1 (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (let ((e-1 (vector-ref sc0 1))) (let ((e-2 (vector-ref sc0 2))) (vector 0 (arg-2 e-1) (Types-Prelude-map_Functor__List 'erased 'erased arg-2 e-2)))))))
(define List1-Data-toList (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (let ((e-1 (vector-ref sc0 1))) (let ((e-2 (vector-ref sc0 2))) (vector 1 e-1 e-2))))))
(define List1-Data-reverseOnto (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((0) arg-1) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (List1-Data-reverseOnto 'erased (vector 0 e-2 (List1-Data-toList 'erased arg-1)) e-3))))))))
(define List1-Data-reverse (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (let ((e-1 (vector-ref sc0 1))) (let ((e-2 (vector-ref sc0 2))) (List1-Data-reverseOnto 'erased (vector 0 e-1 (vector 0 )) e-2))))))
(define Strings-Data-case--span-959 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (vector 0 (Types-Prelude-pack e-2) (Types-Prelude-pack e-3)))))))
(define Strings-Data-case--ltrimC-44ltrimChars-914 (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (cond ((equal? sc0 0) (Strings-Data-n--2013-904-ltrimChars arg-0 arg-2)) (else (vector 1 arg-1 arg-2))))))
(define Strings-Data-case--caseC-32blockC-32inC-32linesC-39-852 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((0) (vector 0 )) (else (let ((e-3 (vector-ref sc0 2))) (Strings-Data-linesC-39 e-3)))))))
(define Strings-Data-case--linesC-39-838 (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (vector 1 e-2 (let ((sc1 e-3)) (case (vector-ref sc1 0) ((0) (vector 0 )) (else (let ((e-4 (vector-ref sc1 2))) (Strings-Data-linesC-39 e-4)))))))))))
(define Strings-Data-n--1857-747-toFArgs (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (case (vector-ref sc0 0) ((0) (vector 0 )) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (vector 1 (vector "String" ) e-2 (Strings-Data-n--1857-747-toFArgs arg-0 e-3)))))))))
(define Strings-Data-n--2013-904-ltrimChars (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (case (vector-ref sc0 0) ((0) (vector 0 )) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (Strings-Data-case--ltrimC-44ltrimChars-914 arg-0 e-2 e-3 (Types-Prelude-isSpace e-2)))))))))
(define Strings-Data-unlinesC-39 (lambda (arg-0) (let ((sc0 arg-0)) (case (vector-ref sc0 0) ((0) (vector 0 )) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (List-Types-Prelude-C-43C-43 'erased e-2 (vector 1 (integer->char 10) (Strings-Data-unlinesC-39 e-3))))))))))
(define Strings-Data-unlines (lambda (ext-0) (Types-Prelude-pack (Strings-Data-unlinesC-39 (Types-Prelude-map_Functor__List 'erased 'erased (lambda (eta-0) (Types-Prelude-unpack eta-0)) ext-0)))))
(define Strings-Data-trim (lambda (ext-0) (Strings-Data-ltrim (Types-Prelude-reverse (Strings-Data-ltrim (Types-Prelude-reverse ext-0))))))
(define Strings-Data-strTail (lambda (ext-0) (substring ext-0 1 (string-length ext-0))))
(define Strings-Data-strSubstr (lambda (ext-0 ext-1 ext-2) (string-substr ext-0 ext-1 ext-2)))
(define Strings-Data-strLength (lambda (ext-0) (string-length ext-0)))
(define Strings-Data-split (lambda (arg-0 arg-1) (List1-Data-map_Functor__List1 'erased 'erased (lambda (eta-0) (Types-Prelude-pack eta-0)) (List-Data-split 'erased arg-0 (Types-Prelude-unpack arg-1)))))
(define Strings-Data-span (lambda (arg-0 arg-1) (Strings-Data-case--span-959 arg-1 arg-0 (List-Data-span 'erased arg-0 (Types-Prelude-unpack arg-1)))))
(define Strings-Data-ltrim (lambda (arg-0) (Types-Prelude-pack (Strings-Data-n--2013-904-ltrimChars arg-0 (Types-Prelude-unpack arg-0)))))
(define Strings-Data-linesC-39 (lambda (arg-0) (let ((sc0 arg-0)) (case (vector-ref sc0 0) ((0) (vector 0 ))(else (Strings-Data-case--linesC-39-838 arg-0 (List-Data-break 'erased (lambda (eta-0) (Types-Prelude-isNL eta-0)) arg-0)))))))
(define Strings-Data-lines (lambda (arg-0) (Types-Prelude-map_Functor__List 'erased 'erased (lambda (eta-0) (Types-Prelude-pack eta-0)) (Strings-Data-linesC-39 (Types-Prelude-unpack arg-0)))))
(define Strings-Data-isSuffixOf (lambda (arg-0 arg-1) (List-Data-isSuffixOf 'erased (vector 0 (lambda (arg-2) (lambda (arg-3) (EqOrd-Prelude-C-61C-61_Eq__Char arg-2 arg-3))) (lambda (arg-4) (lambda (arg-5) (EqOrd-Prelude-C-47C-61_Eq__Char arg-4 arg-5)))) (Types-Prelude-unpack arg-0) (Types-Prelude-unpack arg-1))))
(define Strings-Data-isPrefixOf (lambda (arg-0 arg-1) (List-Data-isPrefixOf 'erased (vector 0 (lambda (arg-2) (lambda (arg-3) (EqOrd-Prelude-C-61C-61_Eq__Char arg-2 arg-3))) (lambda (arg-4) (lambda (arg-5) (EqOrd-Prelude-C-47C-61_Eq__Char arg-4 arg-5)))) (Types-Prelude-unpack arg-0) (Types-Prelude-unpack arg-1))))
(define Strings-Data-fastAppend (lambda (arg-0) (PrimIO-unsafePerformIO 'erased (lambda (eta-0) (apply string-append (blodwen-read-args (Strings-Data-n--1857-747-toFArgs arg-0 arg-0)))))))
(define Strings-Data-break (lambda (arg-0 ext-0) (Strings-Data-span (lambda (eta-0) (Basics-Prelude-not (arg-0 eta-0))) ext-0)))
(define File-System-case--caseC-32blockC-32inC-32readFile-1600 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-5)) (case (vector-ref sc0 0) ((1) (let ((e-2 (vector-ref sc0 1))) (let ((sc1 (let ((sc2 arg-1)) (let ((e-1 (vector-ref sc2 1))) e-1)))) (let ((e-4 (vector-ref sc1 2))) ((((e-4 'erased) 'erased) (File-System-closeFile 'erased arg-1 arg-3)) (lambda (_-1622) (let ((sc2 (let ((sc3 (let ((sc4 arg-1)) (let ((e-6 (vector-ref sc4 1))) e-6)))) (let ((e-7 (vector-ref sc3 1))) e-7)))) (let ((e-6 (vector-ref sc2 2))) ((e-6 'erased) (vector 1 (Strings-Data-fastAppend e-2))))))))))) (else (let ((sc1 (let ((sc2 arg-1)) (let ((e-1 (vector-ref sc2 1))) e-1)))) (let ((e-2 (vector-ref sc1 2))) ((((e-2 'erased) 'erased) (File-System-closeFile 'erased arg-1 arg-3)) (lambda (_-1660) (File-System-returnError 'erased 'erased arg-1))))))))))
(define File-System-case--readFile-1576 (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((1) (let ((e-2 (vector-ref sc0 1))) (let ((sc1 (let ((sc2 arg-1)) (let ((e-1 (vector-ref sc2 1))) e-1)))) (let ((e-4 (vector-ref sc1 2))) ((((e-4 'erased) 'erased) (File-System-n--3079-1458-read 'erased arg-1 arg-2 (vector 0 ) e-2)) (lambda (_-0) (let ((sc2 _-0)) (case (vector-ref sc2 0) ((1) (let ((e-5 (vector-ref sc2 1))) (let ((sc3 (let ((sc4 arg-1)) (let ((e-7 (vector-ref sc4 1))) e-7)))) (let ((e-7 (vector-ref sc3 2))) ((((e-7 'erased) 'erased) (File-System-closeFile 'erased arg-1 e-2)) (lambda (_-1622) (let ((sc4 (let ((sc5 (let ((sc6 arg-1)) (let ((e-10 (vector-ref sc6 1))) e-10)))) (let ((e-11 (vector-ref sc5 1))) e-11)))) (let ((e-10 (vector-ref sc4 2))) ((e-10 'erased) (vector 1 (Strings-Data-fastAppend e-5))))))))))) (else (let ((sc3 (let ((sc4 arg-1)) (let ((e-7 (vector-ref sc4 1))) e-7)))) (let ((e-7 (vector-ref sc3 2))) ((((e-7 'erased) 'erased) (File-System-closeFile 'erased arg-1 e-2)) (lambda (_-1660) (File-System-returnError 'erased 'erased arg-1)))))))))))))) (else (File-System-returnError 'erased 'erased arg-1))))))
(define File-System-case--caseC-32blockC-32inC-32readFileC-44read-1522 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (let ((sc0 arg-6)) (case (vector-ref sc0 0) ((1) (let ((e-2 (vector-ref sc0 1))) (File-System-n--3079-1458-read 'erased arg-1 arg-2 (vector 1 e-2 arg-4) arg-3))) (else (File-System-returnError 'erased 'erased arg-1))))))
(define File-System-case--readFileC-44read-1473 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-5)) (cond ((equal? sc0 0) (let ((sc1 (let ((sc2 (let ((sc3 arg-1)) (let ((e-1 (vector-ref sc3 1))) e-1)))) (let ((e-1 (vector-ref sc2 1))) e-1)))) (let ((e-2 (vector-ref sc1 2))) ((e-2 'erased) (vector 1 (List-Data-reverse 'erased arg-4)))))) (else (let ((sc1 (let ((sc2 arg-1)) (let ((e-1 (vector-ref sc2 1))) e-1)))) (let ((e-2 (vector-ref sc1 2))) ((((e-2 'erased) 'erased) (File-System-fGetLine 'erased arg-1 arg-3)) (lambda (_-0) (let ((sc2 _-0)) (case (vector-ref sc2 0) ((1) (let ((e-4 (vector-ref sc2 1))) (File-System-n--3079-1458-read 'erased arg-1 arg-2 (vector 1 e-4 arg-4) arg-3))) (else (File-System-returnError 'erased 'erased arg-1)))))))))))))
(define File-System-case--fGetLine-760 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-4)) (cond ((equal? sc0 0) (File-System-returnError 'erased 'erased arg-1)) (else (File-System-ok 'erased 'erased arg-1 (IO-Prelude-prim__getString arg-3)))))))
(define File-System-case--openFile-653 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-5)) (cond ((equal? sc0 0) (File-System-returnError 'erased 'erased arg-1)) (else (File-System-ok 'erased 'erased arg-1 arg-4))))))
(define File-System-case--returnError-445 (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (cond ((equal? sc0 0) (let ((sc1 (let ((sc2 (let ((sc3 arg-2)) (let ((e-1 (vector-ref sc3 1))) e-1)))) (let ((e-1 (vector-ref sc2 1))) e-1)))) (let ((e-2 (vector-ref sc1 2))) ((e-2 'erased) (vector 0 (vector 1 )))))) ((equal? sc0 1) (let ((sc1 (let ((sc2 (let ((sc3 arg-2)) (let ((e-1 (vector-ref sc3 1))) e-1)))) (let ((e-1 (vector-ref sc2 1))) e-1)))) (let ((e-2 (vector-ref sc1 2))) ((e-2 'erased) (vector 0 (vector 2 )))))) ((equal? sc0 2) (let ((sc1 (let ((sc2 (let ((sc3 arg-2)) (let ((e-1 (vector-ref sc3 1))) e-1)))) (let ((e-1 (vector-ref sc2 1))) e-1)))) (let ((e-2 (vector-ref sc1 2))) ((e-2 'erased) (vector 0 (vector 3 )))))) ((equal? sc0 3) (let ((sc1 (let ((sc2 (let ((sc3 arg-2)) (let ((e-1 (vector-ref sc3 1))) e-1)))) (let ((e-1 (vector-ref sc2 1))) e-1)))) (let ((e-2 (vector-ref sc1 2))) ((e-2 'erased) (vector 0 (vector 4 )))))) ((equal? sc0 4) (let ((sc1 (let ((sc2 (let ((sc3 arg-2)) (let ((e-1 (vector-ref sc3 1))) e-1)))) (let ((e-1 (vector-ref sc2 1))) e-1)))) (let ((e-2 (vector-ref sc1 2))) ((e-2 'erased) (vector 0 (vector 5 ))))))(else (let ((sc0 (let ((sc1 (let ((sc2 arg-2)) (let ((e-1 (vector-ref sc2 1))) e-1)))) (let ((e-1 (vector-ref sc1 1))) e-1)))) (let ((e-2 (vector-ref sc0 2))) ((e-2 'erased) (vector 0 (vector 0 (Num-Prelude-C-45_Neg__Int arg-3 5)))))))))))
(define File-System-case--modeStr-414 (lambda (arg-0) (let ((sc0 arg-0)) (cond ((equal? sc0 0) "ab+") (else "a+")))))
(define File-System-case--modeStr-404 (lambda (arg-0) (let ((sc0 arg-0)) (cond ((equal? sc0 0) "wb+") (else "w+")))))
(define File-System-case--modeStr-394 (lambda (arg-0) (let ((sc0 arg-0)) (cond ((equal? sc0 0) "rb+") (else "r+")))))
(define File-System-case--modeStr-384 (lambda (arg-0) (let ((sc0 arg-0)) (cond ((equal? sc0 0) "ab") (else "a")))))
(define File-System-case--modeStr-374 (lambda (arg-0) (let ((sc0 arg-0)) (cond ((equal? sc0 0) "wb") (else "w")))))
(define File-System-case--modeStr-364 (lambda (arg-0) (let ((sc0 arg-0)) (cond ((equal? sc0 0) "rb") (else "r")))))
(define File-System-n--3079-1458-read (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 (let ((sc1 arg-1)) (let ((e-1 (vector-ref sc1 1))) e-1)))) (let ((e-2 (vector-ref sc0 2))) ((((e-2 'erased) 'erased) (File-System-fEOF 'erased arg-1 arg-4)) (lambda (eof) (let ((sc1 eof)) (cond ((equal? sc1 0) (let ((sc2 (let ((sc3 (let ((sc4 arg-1)) (let ((e-5 (vector-ref sc4 1))) e-5)))) (let ((e-6 (vector-ref sc3 1))) e-6)))) (let ((e-5 (vector-ref sc2 2))) ((e-5 'erased) (vector 1 (List-Data-reverse 'erased arg-3)))))) (else (let ((sc2 (let ((sc3 arg-1)) (let ((e-5 (vector-ref sc3 1))) e-5)))) (let ((e-5 (vector-ref sc2 2))) ((((e-5 'erased) 'erased) (File-System-fGetLine 'erased arg-1 arg-4)) (lambda (_-0) (let ((sc3 _-0)) (case (vector-ref sc3 0) ((1) (let ((e-7 (vector-ref sc3 1))) (File-System-n--3079-1458-read 'erased arg-1 arg-2 (vector 1 e-7 arg-3) arg-4))) (else (File-System-returnError 'erased 'erased arg-1)))))))))))))))))
(define File-System-show_Show__FileError (lambda (arg-0) (let ((sc0 arg-0)) (case (vector-ref sc0 0) ((0) (let ((e-0 (vector-ref sc0 1))) (Strings-Types-Prelude-C-43C-43 "File error: " (Show-Prelude-show_Show__Int e-0)))) ((1) "File Read Error") ((2) "File Write Error") ((3) "File Not Found") ((4) "Permission Denied") (else "File Exists")))))
(define File-System-returnError (lambda (arg-0 arg-1 arg-2) (let ((sc0 (let ((sc1 arg-2)) (let ((e-1 (vector-ref sc1 1))) e-1)))) (let ((e-2 (vector-ref sc0 2))) ((((e-2 'erased) 'erased) (let ((sc1 arg-2)) (let ((e-4 (vector-ref sc1 2))) ((e-4 'erased) (lambda (eta-0) (File-System-prim_fileErrno eta-0)))))) (lambda (err) (let ((sc1 err)) (cond ((equal? sc1 0) (let ((sc2 (let ((sc3 (let ((sc4 arg-2)) (let ((e-5 (vector-ref sc4 1))) e-5)))) (let ((e-6 (vector-ref sc3 1))) e-6)))) (let ((e-5 (vector-ref sc2 2))) ((e-5 'erased) (vector 0 (vector 1 )))))) ((equal? sc1 1) (let ((sc2 (let ((sc3 (let ((sc4 arg-2)) (let ((e-5 (vector-ref sc4 1))) e-5)))) (let ((e-6 (vector-ref sc3 1))) e-6)))) (let ((e-5 (vector-ref sc2 2))) ((e-5 'erased) (vector 0 (vector 2 )))))) ((equal? sc1 2) (let ((sc2 (let ((sc3 (let ((sc4 arg-2)) (let ((e-5 (vector-ref sc4 1))) e-5)))) (let ((e-6 (vector-ref sc3 1))) e-6)))) (let ((e-5 (vector-ref sc2 2))) ((e-5 'erased) (vector 0 (vector 3 )))))) ((equal? sc1 3) (let ((sc2 (let ((sc3 (let ((sc4 arg-2)) (let ((e-5 (vector-ref sc4 1))) e-5)))) (let ((e-6 (vector-ref sc3 1))) e-6)))) (let ((e-5 (vector-ref sc2 2))) ((e-5 'erased) (vector 0 (vector 4 )))))) ((equal? sc1 4) (let ((sc2 (let ((sc3 (let ((sc4 arg-2)) (let ((e-5 (vector-ref sc4 1))) e-5)))) (let ((e-6 (vector-ref sc3 1))) e-6)))) (let ((e-5 (vector-ref sc2 2))) ((e-5 'erased) (vector 0 (vector 5 ))))))(else (let ((sc1 (let ((sc2 (let ((sc3 arg-2)) (let ((e-5 (vector-ref sc3 1))) e-5)))) (let ((e-6 (vector-ref sc2 1))) e-6)))) (let ((e-5 (vector-ref sc1 2))) ((e-5 'erased) (vector 0 (vector 0 (Num-Prelude-C-45_Neg__Int err 5)))))))))))))))
(define File-System-readFile (lambda (arg-0 arg-1 arg-2) (let ((sc0 (let ((sc1 arg-1)) (let ((e-1 (vector-ref sc1 1))) e-1)))) (let ((e-2 (vector-ref sc0 2))) ((((e-2 'erased) 'erased) (File-System-openFile 'erased arg-1 arg-2 (vector 0 ))) (lambda (_-0) (let ((sc1 _-0)) (case (vector-ref sc1 0) ((1) (let ((e-4 (vector-ref sc1 1))) (let ((sc2 (let ((sc3 arg-1)) (let ((e-6 (vector-ref sc3 1))) e-6)))) (let ((e-6 (vector-ref sc2 2))) ((((e-6 'erased) 'erased) (File-System-n--3079-1458-read 'erased arg-1 arg-2 (vector 0 ) e-4)) (lambda (_-1) (let ((sc3 _-1)) (case (vector-ref sc3 0) ((1) (let ((e-8 (vector-ref sc3 1))) (let ((sc4 (let ((sc5 arg-1)) (let ((e-10 (vector-ref sc5 1))) e-10)))) (let ((e-10 (vector-ref sc4 2))) ((((e-10 'erased) 'erased) (File-System-closeFile 'erased arg-1 e-4)) (lambda (_-1622) (let ((sc5 (let ((sc6 (let ((sc7 arg-1)) (let ((e-13 (vector-ref sc7 1))) e-13)))) (let ((e-14 (vector-ref sc6 1))) e-14)))) (let ((e-13 (vector-ref sc5 2))) ((e-13 'erased) (vector 1 (Strings-Data-fastAppend e-8))))))))))) (else (let ((sc4 (let ((sc5 arg-1)) (let ((e-10 (vector-ref sc5 1))) e-10)))) (let ((e-10 (vector-ref sc4 2))) ((((e-10 'erased) 'erased) (File-System-closeFile 'erased arg-1 e-4)) (lambda (_-1660) (File-System-returnError 'erased 'erased arg-1)))))))))))))) (else (File-System-returnError 'erased 'erased arg-1))))))))))
(define File-System-openFile (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 (let ((sc1 arg-1)) (let ((e-1 (vector-ref sc1 1))) e-1)))) (let ((e-2 (vector-ref sc0 2))) ((((e-2 'erased) 'erased) (let ((sc1 arg-1)) (let ((e-4 (vector-ref sc1 2))) ((e-4 'erased) (lambda (eta-0) (File-System-prim__open arg-2 (File-System-modeStr arg-3) eta-0)))))) (lambda (res) (File-System-case--openFile-653 'erased arg-1 arg-3 arg-2 res (EqOrd-Prelude-C-47C-61_Eq__Int (PrimIO-prim__nullAnyPtr res) 0))))))))
(define File-System-ok (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 (let ((sc1 (let ((sc2 arg-2)) (let ((e-1 (vector-ref sc2 1))) e-1)))) (let ((e-1 (vector-ref sc1 1))) e-1)))) (let ((e-2 (vector-ref sc0 2))) ((e-2 'erased) (vector 1 arg-3))))))
(define File-System-modeStr (lambda (arg-0) (let ((sc0 arg-0)) (case (vector-ref sc0 0) ((0) (File-System-case--modeStr-364 (Info-System-isWindows))) ((1) (File-System-case--modeStr-374 (Info-System-isWindows))) ((2) (File-System-case--modeStr-384 (Info-System-isWindows))) ((3) (File-System-case--modeStr-394 (Info-System-isWindows))) ((4) (File-System-case--modeStr-404 (Info-System-isWindows))) (else (File-System-case--modeStr-414 (Info-System-isWindows)))))))
(define File-System-fGetLine (lambda (arg-0 arg-1 arg-2) (let ((sc0 (let ((sc1 arg-1)) (let ((e-1 (vector-ref sc1 1))) e-1)))) (let ((e-2 (vector-ref sc0 2))) ((((e-2 'erased) 'erased) (let ((sc1 arg-1)) (let ((e-4 (vector-ref sc1 2))) ((e-4 'erased) (lambda (eta-0) (File-System-prim__readLine arg-2 eta-0)))))) (lambda (res) (File-System-case--fGetLine-760 'erased arg-1 arg-2 res (EqOrd-Prelude-C-47C-61_Eq__Int (PrimIO-prim__nullAnyPtr (PrimIO-prim__forgetPtr 'erased res)) 0))))))))
(define File-System-fEOF (lambda (arg-0 arg-1 arg-2) (let ((sc0 (let ((sc1 arg-1)) (let ((e-1 (vector-ref sc1 1))) e-1)))) (let ((e-2 (vector-ref sc0 2))) ((((e-2 'erased) 'erased) (let ((sc1 arg-1)) (let ((e-4 (vector-ref sc1 2))) ((e-4 'erased) (lambda (eta-0) (File-System-prim__eof arg-2 eta-0)))))) (lambda (res) (let ((sc1 (let ((sc2 (let ((sc3 arg-1)) (let ((e-5 (vector-ref sc3 1))) e-5)))) (let ((e-6 (vector-ref sc2 1))) e-6)))) (let ((e-5 (vector-ref sc1 2))) ((e-5 'erased) (EqOrd-Prelude-C-47C-61_Eq__Int res 0))))))))))
(define File-System-closeFile (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-1)) (let ((e-2 (vector-ref sc0 2))) ((e-2 'erased) (lambda (eta-0) (File-System-prim__close arg-2 eta-0)))))))
(define Info-System-prim__os (lambda () (blodwen-os)))
(define Info-System-os (lambda () (blodwen-os)))
(define Info-System-isWindows (lambda () (Types-Prelude-elem 'erased (vector 0 (lambda (arg-2) (lambda (arg-3) (EqOrd-Prelude-C-61C-61_Eq__String arg-2 arg-3))) (lambda (arg-4) (lambda (arg-5) (EqOrd-Prelude-C-47C-61_Eq__String arg-4 arg-5)))) (Info-System-os) (vector 1 "windows" (vector 1 "mingw32" (vector 1 "cygwin32" (vector 0 )))))))
(define System-getArgs (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (let ((e-2 (vector-ref sc0 2))) ((e-2 'erased) (lambda (eta-0) (System-prim__getArgs eta-0)))))))
(define Test-Synthesis-case--testOne-3951 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-5)) (case (vector-ref sc0 0) ((1) (let ((e-1 (vector-ref sc0 1))) (lambda (eta-0) (let ((act-24 ((Test-Synthesis-test arg-3 arg-2 arg-1 (vector 0 arg-0 e-1)) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (vector 1 (vector 0 )))))))))(else (lambda (eta-0) (Core-Core-log "Name not in context" eta-0)))))))
(define Test-Synthesis-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32caseC-32blockC-32inC-32test-3763 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-13 arg-14 arg-15 arg-16) (let ((sc0 arg-14)) (cond ((equal? sc0 0) (lambda (eta-0) (vector 1 (+ 1 0)))) (else (lambda (eta-0) (vector 1 0)))))))
(define Test-Synthesis-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32caseC-32blockC-32inC-32test-3679 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-13 arg-14) (let ((sc0 arg-14)) (cond ((equal? sc0 0) "Success") (else "Fail")))))
(define Test-Synthesis-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32test-3640 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11) (let ((sc0 arg-11)) (case (vector-ref sc0 0) ((1) (let ((e-1 (vector-ref sc0 1))) (lambda (eta-0) (let ((act-24 (Synthesise-Synthesis-run arg-4 arg-3 (vector 0 arg-0) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc1 1))) (let ((test (EqOrd-Prelude-C-61C-61_Eq__String (Strings-Data-trim e-5) (Strings-Data-trim e-1)))) (let ((result (let ((sc2 test)) (cond ((equal? sc2 0) "Success") (else "Fail"))))) (let ((act-25 (Core-Core-log (Strings-Types-Prelude-C-43C-43 "Test: " (Strings-Types-Prelude-C-43C-43 arg-0 (Strings-Types-Prelude-C-43C-43 " | Result " (Strings-Types-Prelude-C-43C-43 result (Strings-Types-Prelude-C-43C-43 " | Expected: " (Strings-Types-Prelude-C-43C-43 e-1 (Strings-Types-Prelude-C-43C-43 " | Actual: " e-5))))))) eta-0))) (let ((sc2 act-25)) (case (vector-ref sc2 0) ((0) (let ((e-2 (vector-ref sc2 1))) (vector 0 e-2))) (else (let ((sc3 test)) (cond ((equal? sc3 0) (vector 1 (+ 1 0))) (else (vector 1 0))))))))))))))))))(else (lambda (eta-0) (let ((act-24 (Core-Core-log "no answer" eta-0))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (vector 1 0)))))))))))
(define Test-Synthesis-case--caseC-32blockC-32inC-32test-3613 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8) (let ((sc0 arg-8)) (case (vector-ref sc0 0) ((5) (lambda (eta-0) (let ((act-24 (Test-Synthesis-lookupAnswer arg-2 arg-0 eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-3 (vector-ref sc1 1))) (vector 0 e-3))) (else (let ((e-5 (vector-ref sc1 1))) (let ((sc2 e-5)) (case (vector-ref sc2 0) ((1) (let ((e-3 (vector-ref sc2 1))) (let ((act-25 (Synthesise-Synthesis-run arg-4 arg-3 (vector 0 arg-0) eta-0))) (let ((sc3 act-25)) (case (vector-ref sc3 0) ((0) (let ((e-4 (vector-ref sc3 1))) (vector 0 e-4))) (else (let ((e-6 (vector-ref sc3 1))) (let ((test (EqOrd-Prelude-C-61C-61_Eq__String (Strings-Data-trim e-6) (Strings-Data-trim e-3)))) (let ((result (let ((sc4 test)) (cond ((equal? sc4 0) "Success") (else "Fail"))))) (let ((act-26 (Core-Core-log (Strings-Types-Prelude-C-43C-43 "Test: " (Strings-Types-Prelude-C-43C-43 arg-0 (Strings-Types-Prelude-C-43C-43 " | Result " (Strings-Types-Prelude-C-43C-43 result (Strings-Types-Prelude-C-43C-43 " | Expected: " (Strings-Types-Prelude-C-43C-43 e-3 (Strings-Types-Prelude-C-43C-43 " | Actual: " e-6))))))) eta-0))) (let ((sc4 act-26)) (case (vector-ref sc4 0) ((0) (let ((e-4 (vector-ref sc4 1))) (vector 0 e-4))) (else (let ((sc5 test)) (cond ((equal? sc5 0) (vector 1 (+ 1 0))) (else (vector 1 0)))))))))))))))))(else (let ((act-25 (Core-Core-log "no answer" eta-0))) (let ((sc2 act-25)) (case (vector-ref sc2 0) ((0) (let ((e-3 (vector-ref sc2 1))) (vector 0 e-3))) (else (vector 1 0)))))))))))))))(else (lambda (eta-0) (vector 1 0)))))))
(define Test-Synthesis-case--test-3596 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (let ((sc0 arg-6)) (case (vector-ref sc0 0) ((1) (let ((e-1 (vector-ref sc0 1))) (let ((_-0 (vector 1 e-1))) (Test-Synthesis-case--caseC-32blockC-32inC-32test-3613 arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 e-1 _-0 (let ((sc1 e-1)) (let ((e-2 (vector-ref sc1 2))) e-2))))))(else (lambda (eta-0) (let ((act-24 (Core-Core-log "Name not in context" eta-0))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (vector 1 0)))))))))))
(define Test-Synthesis-case--caseC-32blockC-32inC-32parseAnswers-3538 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-4)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((bC-39 (Types-Prelude-pack (List-Data-drop 'erased (+ 1 0) (Types-Prelude-unpack e-3))))) (vector 0 (Strings-Data-trim e-2) (Strings-Data-trim bC-39))))))))
(define Test-Synthesis-case--parseAnswers-3508 (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (case (vector-ref sc0 0) ((1) (let ((e-2 (vector-ref sc0 1))) (lambda (eta-0) (vector 1 (SortedMap-Data-fromList 'erased 'erased (vector 0 (vector 0 (lambda (arg-2) (lambda (arg-3) (EqOrd-Prelude-C-61C-61_Eq__String arg-2 arg-3))) (lambda (arg-4) (lambda (arg-5) (EqOrd-Prelude-C-47C-61_Eq__String arg-4 arg-5)))) (lambda (arg-369) (lambda (arg-370) (EqOrd-Prelude-compare_Ord__String arg-369 arg-370))) (lambda (arg-371) (lambda (arg-372) (EqOrd-Prelude-C-60_Ord__String arg-371 arg-372))) (lambda (arg-373) (lambda (arg-374) (EqOrd-Prelude-C-62_Ord__String arg-373 arg-374))) (lambda (arg-375) (lambda (arg-376) (EqOrd-Prelude-C-60C-61_Ord__String arg-375 arg-376))) (lambda (arg-377) (lambda (arg-378) (EqOrd-Prelude-C-62C-61_Ord__String arg-377 arg-378))) (lambda (arg-379) (lambda (arg-380) (EqOrd-Prelude-max_Ord__String arg-379 arg-380))) (lambda (arg-381) (lambda (arg-382) (EqOrd-Prelude-min_Ord__String arg-381 arg-382)))) (Types-Prelude-map_Functor__List 'erased 'erased (lambda (s) (let ((_-0 (vector 1 e-2))) (Test-Synthesis-case--caseC-32blockC-32inC-32parseAnswers-3538 arg-0 e-2 _-0 s (Strings-Data-break (lambda (c) (EqOrd-Prelude-C-61C-61_Eq__Char c #\!)) s)))) (Strings-Data-lines e-2))))))) (else (let ((e-5 (vector-ref sc0 1))) (lambda (eta-0) (vector 0 e-5))))))))
(define Test-Synthesis-case--getAnswerFile-3481 (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (let ((e-2 (vector-ref sc0 1))) (Strings-Types-Prelude-C-43C-43 "Test/AnswerFiles/" (Strings-Types-Prelude-C-43C-43 (Types-Prelude-pack e-2) ".ans"))))))
(define Test-Synthesis-testOne (lambda (arg-0 arg-1 arg-2 arg-3 ext-0) (let ((act-24 (let ((act-24 (unbox arg-0))) (vector 1 act-24)))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (let ((act-25 (Context-Core-lookupDef arg-3 e-5 ext-0))) (let ((sc1 act-25)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-6 (vector-ref sc1 1))) (let ((sc2 e-6)) (case (vector-ref sc2 0) ((1) (let ((e-1 (vector-ref sc2 1))) (let ((act-26 ((Test-Synthesis-test arg-0 arg-1 arg-2 (vector 0 arg-3 e-1)) ext-0))) (let ((sc3 act-26)) (case (vector-ref sc3 0) ((0) (let ((e-2 (vector-ref sc3 1))) (vector 0 e-2))) (else (vector 1 (vector 0 ))))))))(else (Core-Core-log "Name not in context" ext-0))))))))))))))))
(define Test-Synthesis-test (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 e-2)) (case (vector-ref sc1 0) ((0) (let ((e-4 (vector-ref sc1 1))) (lambda (eta-0) (let ((act-24 (let ((act-24 (unbox arg-0))) (vector 1 act-24)))) (let ((sc2 act-24)) (case (vector-ref sc2 0) ((0) (let ((e-5 (vector-ref sc2 1))) (vector 0 e-5))) (else (let ((e-5 (vector-ref sc2 1))) (let ((act-25 (Context-Core-lookupDef (vector 0 e-4) e-5 eta-0))) (let ((sc3 act-25)) (case (vector-ref sc3 0) ((0) (let ((e-6 (vector-ref sc3 1))) (vector 0 e-6))) (else (let ((e-6 (vector-ref sc3 1))) (let ((sc4 e-6)) (case (vector-ref sc4 0) ((1) (let ((e-1 (vector-ref sc4 1))) (let ((_-0 (vector 1 e-1))) ((Test-Synthesis-case--caseC-32blockC-32inC-32test-3613 e-4 e-3 arg-2 arg-1 arg-0 e-5 e-1 _-0 (let ((sc5 e-1)) (let ((e-7 (vector-ref sc5 2))) e-7))) eta-0))))(else (let ((act-26 (Core-Core-log "Name not in context" eta-0))) (let ((sc4 act-26)) (case (vector-ref sc4 0) ((0) (let ((e-7 (vector-ref sc4 1))) (vector 0 e-7))) (else (vector 1 0)))))))))))))))))))))(else (lambda (eta-0) (vector 1 0))))))))))
(define Test-Synthesis-runTests (lambda (arg-0 arg-1 arg-2 ext-0) (let ((act-24 (Context-Core-mapDefsC-39 'erased arg-0 (lambda (eta-0) (Test-Synthesis-test arg-0 arg-1 arg-2 eta-0)) ext-0))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (let ((act-25 ((Core-Core-traverse 'erased 'erased (lambda (eta-0) eta-0) e-5) ext-0))) (let ((sc1 act-25)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-6 (vector-ref sc1 1))) (Core-Core-log (Strings-Types-Prelude-C-43C-43 "Total successes " (Show-Prelude-show_Show__Nat ((Interfaces-Prelude-sum 'erased 'erased (vector 0 (vector 0 (lambda (acc) (lambda (elem) (lambda (func) (lambda (init) (lambda (input) (Types-Prelude-foldr_Foldable__List 'erased 'erased func init input)))))) (lambda (elem) (lambda (acc) (lambda (func) (lambda (init) (lambda (input) (Types-Prelude-foldl_Foldable__List 'erased 'erased func init input))))))) (vector 0 (lambda (arg-3) (lambda (arg-4) (Types-Prelude-C-43_Num__Nat arg-3 arg-4))) (lambda (arg-4) (lambda (arg-5) (Types-Prelude-C-42_Num__Nat arg-4 arg-5))) (lambda (arg-6) (Types-Prelude-fromInteger_Num__Nat arg-6))))) e-6))) ext-0)))))))))))))
(define Test-Synthesis-parseAnswers (lambda (arg-0 ext-0) (let ((act-24 ((File-System-readFile 'erased (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-45) (lambda (eta-0) (IO-Prelude-map_Functor__IO 'erased 'erased func arg-45 eta-0)))))) (lambda (a) (lambda (arg-112) (lambda (eta-0) arg-112))) (lambda (b) (lambda (a) (lambda (arg-113) (lambda (arg-115) (lambda (eta-0) (let ((act-17 (arg-113 eta-0))) (let ((act-16 (arg-115 eta-0))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-274) (lambda (arg-275) (lambda (eta-0) (let ((act-24 (arg-274 eta-0))) ((arg-275 act-24) eta-0))))))) (lambda (a) (lambda (arg-277) (lambda (eta-0) (let ((act-51 (arg-277 eta-0))) (act-51 eta-0)))))) (lambda (a) (lambda (arg-5832) arg-5832))) arg-0) ext-0))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((1) (let ((e-2 (vector-ref sc0 1))) (vector 1 (SortedMap-Data-fromList 'erased 'erased (vector 0 (vector 0 (lambda (arg-2) (lambda (arg-3) (EqOrd-Prelude-C-61C-61_Eq__String arg-2 arg-3))) (lambda (arg-4) (lambda (arg-5) (EqOrd-Prelude-C-47C-61_Eq__String arg-4 arg-5)))) (lambda (arg-369) (lambda (arg-370) (EqOrd-Prelude-compare_Ord__String arg-369 arg-370))) (lambda (arg-371) (lambda (arg-372) (EqOrd-Prelude-C-60_Ord__String arg-371 arg-372))) (lambda (arg-373) (lambda (arg-374) (EqOrd-Prelude-C-62_Ord__String arg-373 arg-374))) (lambda (arg-375) (lambda (arg-376) (EqOrd-Prelude-C-60C-61_Ord__String arg-375 arg-376))) (lambda (arg-377) (lambda (arg-378) (EqOrd-Prelude-C-62C-61_Ord__String arg-377 arg-378))) (lambda (arg-379) (lambda (arg-380) (EqOrd-Prelude-max_Ord__String arg-379 arg-380))) (lambda (arg-381) (lambda (arg-382) (EqOrd-Prelude-min_Ord__String arg-381 arg-382)))) (Types-Prelude-map_Functor__List 'erased 'erased (lambda (s) (let ((_-0 (vector 1 e-2))) (Test-Synthesis-case--caseC-32blockC-32inC-32parseAnswers-3538 arg-0 e-2 _-0 s (Strings-Data-break (lambda (c) (EqOrd-Prelude-C-61C-61_Eq__Char c #\!)) s)))) (Strings-Data-lines e-2)))))) (else (let ((e-5 (vector-ref sc0 1))) (vector 0 e-5))))))))
(define Test-Synthesis-lookupAnswer (lambda (arg-0 arg-1 ext-0) (let ((act-24 (let ((act-24 (unbox arg-0))) (vector 1 act-24)))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (vector 1 (SortedMap-Data-lookup 'erased 'erased arg-1 e-5)))))))))
(define Test-Synthesis-getAnswerFile (lambda (arg-0) (Test-Synthesis-case--getAnswerFile-3481 arg-0 (List-Data-break 'erased (lambda (c) (EqOrd-Prelude-C-61C-61_Eq__Char c #\.)) (List-Data-drop 'erased (+ 1 (+ 1 (+ 1 (+ 1 (+ 1 (+ 1 (+ 1 (+ 1 (+ 1 (+ 1 (+ 1 (+ 1 (+ 1 (+ 1 (+ 1 0))))))))))))))) (Types-Prelude-unpack arg-0))))))
(define Test-Synthesis-Sheet (lambda () (vector "Data.SortedMap.SortedMap" (vector "String" ) (vector "String" ))))
(define UnifyState-Core-case--addFunction-6081 (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (let ((e-0 (vector-ref sc0 1))) (let ((e-1 (vector-ref sc0 2))) (let ((e-2 (vector-ref sc0 3))) (let ((e-3 (vector-ref sc0 4))) (let ((e-4 (vector-ref sc0 5))) (let ((e-5 (vector-ref sc0 6))) (let ((e-6 (vector-ref sc0 7))) (vector 0 e-0 e-1 e-2 e-3 e-4 (SortedMap-Data-insert 'erased 'erased arg-1 arg-0 e-5) e-6)))))))))))
(define UnifyState-Core-case--deleteConstraint-5792 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (let ((e-0 (vector-ref sc0 1))) (let ((e-1 (vector-ref sc0 2))) (let ((e-2 (vector-ref sc0 3))) (let ((e-3 (vector-ref sc0 4))) (let ((e-4 (vector-ref sc0 5))) (let ((e-5 (vector-ref sc0 6))) (let ((e-6 (vector-ref sc0 7))) (vector 0 e-0 e-1 (SortedMap-Data-delete 'erased 'erased arg-0 e-2) e-3 e-4 e-5 e-6)))))))))))
(define UnifyState-Core-case--addConstraint-5750 (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-2)) (let ((e-0 (vector-ref sc0 1))) (let ((e-1 (vector-ref sc0 2))) (let ((e-2 (vector-ref sc0 3))) (let ((e-3 (vector-ref sc0 4))) (let ((e-5 (vector-ref sc0 6))) (let ((e-6 (vector-ref sc0 7))) (vector 0 e-0 e-1 (SortedMap-Data-insert 'erased 'erased arg-3 arg-0 e-2) e-3 (b+ arg-3 1 63) e-5 e-6))))))))))
(define UnifyState-Core-case--removeHole-5708 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (let ((e-0 (vector-ref sc0 1))) (let ((e-1 (vector-ref sc0 2))) (let ((e-2 (vector-ref sc0 3))) (let ((e-3 (vector-ref sc0 4))) (let ((e-4 (vector-ref sc0 5))) (let ((e-5 (vector-ref sc0 6))) (let ((e-6 (vector-ref sc0 7))) (vector 0 (SortedSet-Data-delete 'erased arg-0 e-0) e-1 e-2 e-3 e-4 e-5 e-6)))))))))))
(define UnifyState-Core-case--addGuessName-5674 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (let ((e-0 (vector-ref sc0 1))) (let ((e-1 (vector-ref sc0 2))) (let ((e-2 (vector-ref sc0 3))) (let ((e-3 (vector-ref sc0 4))) (let ((e-4 (vector-ref sc0 5))) (let ((e-5 (vector-ref sc0 6))) (let ((e-6 (vector-ref sc0 7))) (vector 0 e-0 (SortedSet-Data-insert 'erased arg-0 e-1) e-2 e-3 e-4 e-5 e-6)))))))))))
(define UnifyState-Core-case--addHoleName-5640 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (let ((e-0 (vector-ref sc0 1))) (let ((e-1 (vector-ref sc0 2))) (let ((e-2 (vector-ref sc0 3))) (let ((e-3 (vector-ref sc0 4))) (let ((e-4 (vector-ref sc0 5))) (let ((e-5 (vector-ref sc0 6))) (let ((e-6 (vector-ref sc0 7))) (vector 0 (SortedSet-Data-insert 'erased arg-0 e-0) e-1 e-2 e-3 e-4 e-5 e-6)))))))))))
(define UnifyState-Core-case--genName-5603 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (let ((e-0 (vector-ref sc0 1))) (let ((e-1 (vector-ref sc0 2))) (let ((e-2 (vector-ref sc0 3))) (let ((e-3 (vector-ref sc0 4))) (let ((e-4 (vector-ref sc0 5))) (let ((e-5 (vector-ref sc0 6))) (let ((e-6 (vector-ref sc0 7))) (vector 0 e-0 e-1 e-2 (b+ e-3 1 63) e-4 e-5 e-6)))))))))))
(define UnifyState-Core-n--3520-6004-envArgs (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (let ((args (List-Data-reverse 'erased (UnifyState-Core-mkConstantAppArgs 'erased arg-1 arg-4 (vector 0 ))))) args)))
(define UnifyState-Core-n--3448-5933-envArgs (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (let ((args (List-Data-reverse 'erased (UnifyState-Core-mkConstantAppArgs 'erased arg-1 arg-4 (vector 0 ))))) args)))
(define UnifyState-Core-removeHole (lambda (arg-0 arg-1 ext-0) (let ((act-24 (let ((act-24 (unbox arg-0))) (vector 1 act-24)))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (let ((act-25 (set-box! arg-0 (let ((sc1 e-5)) (let ((e-0 (vector-ref sc1 1))) (let ((e-1 (vector-ref sc1 2))) (let ((e-2 (vector-ref sc1 3))) (let ((e-3 (vector-ref sc1 4))) (let ((e-4 (vector-ref sc1 5))) (let ((e-7 (vector-ref sc1 6))) (let ((e-6 (vector-ref sc1 7))) (vector 0 (SortedSet-Data-delete 'erased arg-1 e-0) e-1 e-2 e-3 e-4 e-7 e-6)))))))))))) (vector 1 act-25)))))))))
(define UState-UnifyState-Core-nextName (lambda (arg-0) (let ((sc0 arg-0)) (let ((e-3 (vector-ref sc0 4))) e-3))))
(define UState-UnifyState-Core-nextConstraint (lambda (arg-0) (let ((sc0 arg-0)) (let ((e-4 (vector-ref sc0 5))) e-4))))
(define UnifyState-Core-newMeta (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (let ((hty (UnifyState-Core-abstractEnvType arg-0 arg-3 arg-5))) (let ((hole (Context-Core-newDef hty arg-6))) (lambda (eta-0) (let ((act-24 (Context-Core-addDef arg-1 arg-4 hole eta-0))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((act-25 (UnifyState-Core-addHoleName arg-2 arg-4 eta-0))) (let ((sc1 act-25)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (vector 1 (vector 2 arg-4 (UnifyState-Core-n--3448-5933-envArgs arg-6 arg-0 arg-5 arg-4 arg-3 arg-2 arg-1))))))))))))))))
(define UnifyState-Core-newConstant (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (let ((def (UnifyState-Core-mkConstant arg-0 arg-3 arg-4))) (let ((defty (UnifyState-Core-abstractEnvType arg-0 arg-3 arg-5))) (lambda (eta-0) (let ((act-24 (UnifyState-Core-genName arg-1 "postpone" eta-0))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (let ((guess (Context-Core-newDef defty (vector 6 def arg-6)))) (let ((act-25 (Context-Core-addDef arg-2 e-5 guess eta-0))) (let ((sc1 act-25)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((act-26 (UnifyState-Core-addGuessName arg-1 e-5 eta-0))) (let ((sc2 act-26)) (case (vector-ref sc2 0) ((0) (let ((e-2 (vector-ref sc2 1))) (vector 0 e-2))) (else (vector 1 (vector 2 e-5 (UnifyState-Core-n--3520-6004-envArgs arg-6 arg-0 arg-5 arg-4 arg-3 arg-2 arg-1))))))))))))))))))))))
(define UnifyState-Core-mkConstantAppArgs (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-1)) (case (vector-ref sc0 0) ((0) (let ((sc1 arg-2)) (vector 0 ))) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 arg-2)) (let ((e-9 (vector-ref sc1 2))) (let ((rec (UnifyState-Core-mkConstantAppArgs 'erased e-3 e-9 (List-Types-Prelude-C-43C-43 'erased arg-3 (vector 1 e-2 (vector 0 )))))) (vector 1 (vector 0 (List-Types-Prelude-length 'erased arg-3)) rec)))))))))))
(define UnifyState-Core-mkConstant (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-0)) (case (vector-ref sc0 0) ((0) (let ((sc1 arg-1)) arg-2)) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 arg-1)) (let ((e-8 (vector-ref sc1 1))) (let ((e-9 (vector-ref sc1 2))) (let ((ty (TT-Core-binderType 'erased e-8))) (UnifyState-Core-mkConstant e-3 e-9 (vector 3 e-2 (vector 0 (vector 1 "_" 0) (vector 1 ) ty) arg-2)))))))))))))
(define UnifyState-Core-initUState (lambda () (vector 0 (SortedSet-Data-empty 'erased (vector 0 (vector 0 (lambda (arg-2) (lambda (arg-3) (TT-Core-C-61C-61_Eq__Name arg-2 arg-3))) (lambda (arg-4) (lambda (arg-5) (TT-Core-C-47C-61_Eq__Name arg-4 arg-5)))) (lambda (arg-369) (lambda (arg-370) (TT-Core-compare_Ord__Name arg-369 arg-370))) (lambda (arg-371) (lambda (arg-372) (TT-Core-C-60_Ord__Name arg-371 arg-372))) (lambda (arg-373) (lambda (arg-374) (TT-Core-C-62_Ord__Name arg-373 arg-374))) (lambda (arg-375) (lambda (arg-376) (TT-Core-C-60C-61_Ord__Name arg-375 arg-376))) (lambda (arg-377) (lambda (arg-378) (TT-Core-C-62C-61_Ord__Name arg-377 arg-378))) (lambda (arg-379) (lambda (arg-380) (TT-Core-max_Ord__Name arg-379 arg-380))) (lambda (arg-381) (lambda (arg-382) (TT-Core-min_Ord__Name arg-381 arg-382))))) (SortedSet-Data-empty 'erased (vector 0 (vector 0 (lambda (arg-2) (lambda (arg-3) (TT-Core-C-61C-61_Eq__Name arg-2 arg-3))) (lambda (arg-4) (lambda (arg-5) (TT-Core-C-47C-61_Eq__Name arg-4 arg-5)))) (lambda (arg-369) (lambda (arg-370) (TT-Core-compare_Ord__Name arg-369 arg-370))) (lambda (arg-371) (lambda (arg-372) (TT-Core-C-60_Ord__Name arg-371 arg-372))) (lambda (arg-373) (lambda (arg-374) (TT-Core-C-62_Ord__Name arg-373 arg-374))) (lambda (arg-375) (lambda (arg-376) (TT-Core-C-60C-61_Ord__Name arg-375 arg-376))) (lambda (arg-377) (lambda (arg-378) (TT-Core-C-62C-61_Ord__Name arg-377 arg-378))) (lambda (arg-379) (lambda (arg-380) (TT-Core-max_Ord__Name arg-379 arg-380))) (lambda (arg-381) (lambda (arg-382) (TT-Core-min_Ord__Name arg-381 arg-382))))) (SortedMap-Data-empty 'erased 'erased (vector 0 (vector 0 (lambda (arg-2) (lambda (arg-3) (EqOrd-Prelude-C-61C-61_Eq__Int arg-2 arg-3))) (lambda (arg-4) (lambda (arg-5) (EqOrd-Prelude-C-47C-61_Eq__Int arg-4 arg-5)))) (lambda (arg-369) (lambda (arg-370) (EqOrd-Prelude-compare_Ord__Int arg-369 arg-370))) (lambda (arg-371) (lambda (arg-372) (EqOrd-Prelude-C-60_Ord__Int arg-371 arg-372))) (lambda (arg-373) (lambda (arg-374) (EqOrd-Prelude-C-62_Ord__Int arg-373 arg-374))) (lambda (arg-375) (lambda (arg-376) (EqOrd-Prelude-C-60C-61_Ord__Int arg-375 arg-376))) (lambda (arg-377) (lambda (arg-378) (EqOrd-Prelude-C-62C-61_Ord__Int arg-377 arg-378))) (lambda (arg-379) (lambda (arg-380) (EqOrd-Prelude-max_Ord__Int arg-379 arg-380))) (lambda (arg-381) (lambda (arg-382) (EqOrd-Prelude-min_Ord__Int arg-381 arg-382))))) 0 0 (SortedMap-Data-empty 'erased 'erased (vector 0 (vector 0 (lambda (arg-2) (lambda (arg-3) (TT-Core-C-61C-61_Eq__Name arg-2 arg-3))) (lambda (arg-4) (lambda (arg-5) (TT-Core-C-47C-61_Eq__Name arg-4 arg-5)))) (lambda (arg-369) (lambda (arg-370) (TT-Core-compare_Ord__Name arg-369 arg-370))) (lambda (arg-371) (lambda (arg-372) (TT-Core-C-60_Ord__Name arg-371 arg-372))) (lambda (arg-373) (lambda (arg-374) (TT-Core-C-62_Ord__Name arg-373 arg-374))) (lambda (arg-375) (lambda (arg-376) (TT-Core-C-60C-61_Ord__Name arg-375 arg-376))) (lambda (arg-377) (lambda (arg-378) (TT-Core-C-62C-61_Ord__Name arg-377 arg-378))) (lambda (arg-379) (lambda (arg-380) (TT-Core-max_Ord__Name arg-379 arg-380))) (lambda (arg-381) (lambda (arg-382) (TT-Core-min_Ord__Name arg-381 arg-382))))) (SortedMap-Data-empty 'erased 'erased (vector 0 (vector 0 (lambda (arg-2) (lambda (arg-3) (TT-Core-C-61C-61_Eq__Name arg-2 arg-3))) (lambda (arg-4) (lambda (arg-5) (TT-Core-C-47C-61_Eq__Name arg-4 arg-5)))) (lambda (arg-369) (lambda (arg-370) (TT-Core-compare_Ord__Name arg-369 arg-370))) (lambda (arg-371) (lambda (arg-372) (TT-Core-C-60_Ord__Name arg-371 arg-372))) (lambda (arg-373) (lambda (arg-374) (TT-Core-C-62_Ord__Name arg-373 arg-374))) (lambda (arg-375) (lambda (arg-376) (TT-Core-C-60C-61_Ord__Name arg-375 arg-376))) (lambda (arg-377) (lambda (arg-378) (TT-Core-C-62C-61_Ord__Name arg-377 arg-378))) (lambda (arg-379) (lambda (arg-380) (TT-Core-max_Ord__Name arg-379 arg-380))) (lambda (arg-381) (lambda (arg-382) (TT-Core-min_Ord__Name arg-381 arg-382))))))))
(define UState-UnifyState-Core-guesses (lambda (arg-0) (let ((sc0 arg-0)) (let ((e-1 (vector-ref sc0 2))) e-1))))
(define UnifyState-Core-genName (lambda (arg-0 arg-1 ext-0) (let ((act-24 (let ((act-24 (unbox arg-0))) (vector 1 act-24)))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (let ((act-25 (let ((act-25 (set-box! arg-0 (let ((sc1 e-5)) (let ((e-0 (vector-ref sc1 1))) (let ((e-1 (vector-ref sc1 2))) (let ((e-2 (vector-ref sc1 3))) (let ((e-3 (vector-ref sc1 4))) (let ((e-4 (vector-ref sc1 5))) (let ((e-7 (vector-ref sc1 6))) (let ((e-6 (vector-ref sc1 7))) (vector 0 e-0 e-1 e-2 (b+ e-3 1 63) e-4 e-7 e-6)))))))))))) (vector 1 act-25)))) (let ((sc1 act-25)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (vector 1 (vector 1 arg-1 (let ((sc2 e-5)) (let ((e-3 (vector-ref sc2 4))) e-3)))))))))))))))
(define UnifyState-Core-deleteConstraint (lambda (arg-0 arg-1 ext-0) (let ((act-24 (let ((act-24 (unbox arg-0))) (vector 1 act-24)))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (let ((act-25 (set-box! arg-0 (let ((sc1 e-5)) (let ((e-0 (vector-ref sc1 1))) (let ((e-1 (vector-ref sc1 2))) (let ((e-2 (vector-ref sc1 3))) (let ((e-3 (vector-ref sc1 4))) (let ((e-4 (vector-ref sc1 5))) (let ((e-7 (vector-ref sc1 6))) (let ((e-6 (vector-ref sc1 7))) (vector 0 e-0 e-1 (SortedMap-Data-delete 'erased 'erased arg-1 e-2) e-3 e-4 e-7 e-6)))))))))))) (vector 1 act-25)))))))))
(define UState-UnifyState-Core-constraints (lambda (arg-0) (let ((sc0 arg-0)) (let ((e-2 (vector-ref sc0 3))) e-2))))
(define UnifyState-Core-addHoleName (lambda (arg-0 arg-1 ext-0) (let ((act-24 (let ((act-24 (unbox arg-0))) (vector 1 act-24)))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (let ((act-25 (set-box! arg-0 (let ((sc1 e-5)) (let ((e-0 (vector-ref sc1 1))) (let ((e-1 (vector-ref sc1 2))) (let ((e-2 (vector-ref sc1 3))) (let ((e-3 (vector-ref sc1 4))) (let ((e-4 (vector-ref sc1 5))) (let ((e-7 (vector-ref sc1 6))) (let ((e-6 (vector-ref sc1 7))) (vector 0 (SortedSet-Data-insert 'erased arg-1 e-0) e-1 e-2 e-3 e-4 e-7 e-6)))))))))))) (vector 1 act-25)))))))))
(define UnifyState-Core-addGuessName (lambda (arg-0 arg-1 ext-0) (let ((act-24 (let ((act-24 (unbox arg-0))) (vector 1 act-24)))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (let ((act-25 (set-box! arg-0 (let ((sc1 e-5)) (let ((e-0 (vector-ref sc1 1))) (let ((e-1 (vector-ref sc1 2))) (let ((e-2 (vector-ref sc1 3))) (let ((e-3 (vector-ref sc1 4))) (let ((e-4 (vector-ref sc1 5))) (let ((e-7 (vector-ref sc1 6))) (let ((e-6 (vector-ref sc1 7))) (vector 0 e-0 (SortedSet-Data-insert 'erased arg-1 e-1) e-2 e-3 e-4 e-7 e-6)))))))))))) (vector 1 act-25)))))))))
(define UnifyState-Core-addFunction (lambda (arg-0 arg-1 arg-2 ext-0) (let ((act-24 (let ((act-24 (unbox arg-0))) (vector 1 act-24)))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (let ((act-25 (set-box! arg-0 (let ((sc1 e-5)) (let ((e-0 (vector-ref sc1 1))) (let ((e-1 (vector-ref sc1 2))) (let ((e-2 (vector-ref sc1 3))) (let ((e-3 (vector-ref sc1 4))) (let ((e-4 (vector-ref sc1 5))) (let ((e-7 (vector-ref sc1 6))) (let ((e-6 (vector-ref sc1 7))) (vector 0 e-0 e-1 e-2 e-3 e-4 (SortedMap-Data-insert 'erased 'erased arg-1 arg-2 e-7) e-6)))))))))))) (vector 1 act-25)))))))))
(define UnifyState-Core-addConstraint (lambda (arg-0 arg-1 ext-0) (let ((act-24 (let ((act-24 (unbox arg-0))) (vector 1 act-24)))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (let ((cid (let ((sc1 e-5)) (let ((e-4 (vector-ref sc1 5))) e-4)))) (let ((act-25 (let ((act-25 (set-box! arg-0 (let ((sc1 e-5)) (let ((e-0 (vector-ref sc1 1))) (let ((e-1 (vector-ref sc1 2))) (let ((e-2 (vector-ref sc1 3))) (let ((e-3 (vector-ref sc1 4))) (let ((e-7 (vector-ref sc1 6))) (let ((e-6 (vector-ref sc1 7))) (vector 0 e-0 e-1 (SortedMap-Data-insert 'erased 'erased cid arg-1 e-2) e-3 (b+ cid 1 63) e-7 e-6))))))))))) (vector 1 act-25)))) (let ((sc1 act-25)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (vector 1 cid)))))))))))))
(define UnifyState-Core-abstractEnvType (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-0)) (case (vector-ref sc0 0) ((0) (let ((sc1 arg-1)) arg-2)) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 arg-1)) (let ((e-8 (vector-ref sc1 1))) (let ((e-9 (vector-ref sc1 2))) (let ((sc2 e-8)) (case (vector-ref sc2 0) ((1) (let ((e-11 (vector-ref sc2 1))) (let ((e-12 (vector-ref sc2 2))) (let ((e-13 (vector-ref sc2 3))) (UnifyState-Core-abstractEnvType e-3 e-9 (vector 3 e-2 (vector 1 e-11 e-12 e-13) arg-2))))))(else (UnifyState-Core-abstractEnvType e-3 e-9 (vector 3 e-2 (vector 1 (vector 1 "_" 0) (vector 1 ) (TT-Core-binderType 'erased e-8)) arg-2)))))))))))))))
(define SortedSet-Data-case--toList-5203 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (let ((e-2 (vector-ref sc0 1))) e-2))))
(define SortedSet-Data-toList (lambda (arg-0 arg-1) (Types-Prelude-map_Functor__List 'erased 'erased (lambda (lamc-0) (let ((sc0 lamc-0)) (let ((e-2 (vector-ref sc0 1))) e-2))) (SortedMap-Data-toList 'erased 'erased arg-1))))
(define SortedSet-Data-insert (lambda (arg-0 arg-1 arg-2) (SortedMap-Data-insert 'erased 'erased arg-1 (vector 0 ) arg-2)))
(define SortedSet-Data-empty (lambda (arg-0 arg-1) (SortedMap-Data-empty 'erased 'erased arg-1)))
(define SortedSet-Data-delete (lambda (arg-0 arg-1 arg-2) (SortedMap-Data-delete 'erased 'erased arg-1 arg-2)))
(define Maybe-Data-isJust (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (case (vector-ref sc0 0) ((0) 1) (else 0)))))
(define Maybe-Data-fromMaybe (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((0) (arg-1)) (else (let ((e-2 (vector-ref sc0 1))) e-2))))))
(define TT-Core-with--withC-32blockC-32inC-32nameEq-4754 (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((0) (let ((e-1 (vector-ref sc0 1))) (let ((sc1 e-1)) (vector 1 (vector 0 ))))) (else (vector 0 ))))))
(define TT-Core-with--nameEq-4739 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((0) (let ((e-1 (vector-ref sc0 1))) (let ((sc1 e-1)) (TT-Core-with--withC-32blockC-32inC-32nameEq-4754 arg-4 arg-3 (Equality-Decidable-decEq_DecEq__Int arg-3 arg-4) arg-0)))) (else (vector 0 ))))))
(define TT-Core-with--nameEq-4712 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((0) (let ((e-1 (vector-ref sc0 1))) (let ((sc1 e-1)) (vector 1 (vector 0 ))))) (else (vector 0 ))))))
(define TT-Core-case--show-7689 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (TT-Core-n--4979-7408-showApp arg-0 arg-1 arg-0 e-2 e-3))))))
(define TT-Core-case--shrinkTerm-7165 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (let ((sc0 arg-6)) (case (vector-ref sc0 0) ((0) (vector 0 )) (else (let ((e-2 (vector-ref sc0 1))) (vector 1 (vector 0 e-2))))))))
(define TT-Core-case--subElem-6957 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10) (vector 1 (+ 1 arg-10))))
(define TT-Core-case--subElem-6875 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9) (vector 1 arg-9)))
(define TT-Core-case--substName-6669 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-5)) (case (vector-ref sc0 0) ((0) (vector 1 arg-2 arg-1)) (else (let ((e-2 (vector-ref sc0 1))) (let ((sc1 e-2)) arg-3)))))))
(define TT-Core-case--resolveNames-6320 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((1) (let ((e-1 (vector-ref sc0 1))) (vector 0 e-1)))(else (vector 1 (vector 1 ) arg-0))))))
(define TT-Core-case--mkLocals-6144 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (vector 0 arg-7)))
(define TT-Core-case--caseC-32blockC-32inC-32resolveRef-6034 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11) (vector 1 (vector 0 arg-11))))
(define TT-Core-case--resolveRef-5984 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9) (let ((sc0 arg-9)) (cond ((equal? sc0 0) (TT-Core-case--caseC-32blockC-32inC-32resolveRef-6034 'erased arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 'erased 'erased 'erased 'erased (TT-Core-weakenNVar 'erased 'erased (List-Types-Prelude-C-43C-43 'erased arg-6 arg-5) 0 'erased))) (else (TT-Core-resolveRef 'erased 'erased arg-6 (List-Types-Prelude-C-43C-43 'erased arg-5 (vector 1 arg-3 (vector 0 ))) arg-1 arg-4))))))
(define TT-Core-case--addVars-5928 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9) (+ 1 arg-9)))
(define TT-Core-case--insertNames-5633 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (vector 0 arg-6)))
(define TT-Core-case--insertNVarNames-5580 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (+ 1 arg-7)))
(define TT-Core-case--caseC-32blockC-32inC-32isVar-5469 (lambda (arg-0 arg-1 arg-2 arg-3) (Types-Prelude-pure_Applicative__Maybe 'erased (+ 1 arg-3))))
(define TT-Core-case--isVar-5450 (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((0) (Types-Prelude-C-62C-62C-61_Monad__Maybe 'erased 'erased (TT-Core-isVar arg-2 arg-1) (lambda (_-0) (Types-Prelude-pure_Applicative__Maybe 'erased (+ 1 _-0))))) (else (let ((e-2 (vector-ref sc0 1))) (let ((sc1 e-2)) (Types-Prelude-pure_Applicative__Maybe 'erased 0))))))))
(define TT-Core-case--weakenNVar-5148 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (+ 1 arg-6)))
(define TT-Core-case--compare-4935 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-4)) (cond ((equal? sc0 1) (EqOrd-Prelude-compare_Ord__Int arg-0 arg-2))(else arg-4)))))
(define TT-Core-case--max-4890 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (cond ((equal? sc0 0) arg-1) (else arg-0)))))
(define TT-Core-case--min-4876 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (cond ((equal? sc0 0) arg-1) (else arg-0)))))
(define TT-Core-n--4979-7408-showApp (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((0) (let ((e-3 (vector-ref sc0 1))) (let ((sc1 arg-4)) (case (vector-ref sc1 0) ((0) (Strings-Types-Prelude-C-43C-43 (TT-Core-show_Show__Name (TT-Core-nameAt 'erased arg-2 e-3 'erased)) (Strings-Types-Prelude-C-43C-43 "[" (Strings-Types-Prelude-C-43C-43 (Show-Prelude-show_Show__Nat e-3) "]"))))(else (let ((sc1 arg-4)) (case (vector-ref sc1 0) ((0) "???")(else (Strings-Types-Prelude-C-43C-43 "(" (Strings-Types-Prelude-C-43C-43 (TT-Core-show_Show__C-40TermC-32C-36varsC-41 arg-2 arg-3) (Strings-Types-Prelude-C-43C-43 " " (Strings-Types-Prelude-C-43C-43 (TT-Core-showSep " " (Types-Prelude-map_Functor__List 'erased 'erased (lambda (arg-5) (TT-Core-show_Show__C-40TermC-32C-36varsC-41 arg-2 arg-5)) arg-4)) ")")))))))))))) ((1) (let ((e-7 (vector-ref sc0 2))) (let ((sc1 arg-4)) (case (vector-ref sc1 0) ((0) (TT-Core-show_Show__Name e-7))(else (let ((sc1 arg-4)) (case (vector-ref sc1 0) ((0) "???")(else (Strings-Types-Prelude-C-43C-43 "(" (Strings-Types-Prelude-C-43C-43 (TT-Core-show_Show__C-40TermC-32C-36varsC-41 arg-2 arg-3) (Strings-Types-Prelude-C-43C-43 " " (Strings-Types-Prelude-C-43C-43 (TT-Core-showSep " " (Types-Prelude-map_Functor__List 'erased 'erased (lambda (arg-5) (TT-Core-show_Show__C-40TermC-32C-36varsC-41 arg-2 arg-5)) arg-4)) ")")))))))))))) ((2) (let ((e-9 (vector-ref sc0 1))) (let ((e-10 (vector-ref sc0 2))) (let ((sc1 arg-4)) (case (vector-ref sc1 0) ((0) (Strings-Types-Prelude-C-43C-43 "?" (Strings-Types-Prelude-C-43C-43 (TT-Core-show_Show__Name e-9) (Strings-Types-Prelude-C-43C-43 "_" (Show-Prelude-show_Show__C-40ListC-32C-36aC-41 'erased (vector 0 (lambda (x) (TT-Core-show_Show__C-40TermC-32C-36varsC-41 arg-2 x)) (lambda (d) (lambda (x) (TT-Core-showPrec_Show__C-40TermC-32C-36varsC-41 arg-2 d x)))) e-10)))))(else (let ((sc1 arg-4)) (case (vector-ref sc1 0) ((0) "???")(else (Strings-Types-Prelude-C-43C-43 "(" (Strings-Types-Prelude-C-43C-43 (TT-Core-show_Show__C-40TermC-32C-36varsC-41 arg-2 arg-3) (Strings-Types-Prelude-C-43C-43 " " (Strings-Types-Prelude-C-43C-43 (TT-Core-showSep " " (Types-Prelude-map_Functor__List 'erased 'erased (lambda (arg-5) (TT-Core-show_Show__C-40TermC-32C-36varsC-41 arg-2 arg-5)) arg-4)) ")"))))))))))))) ((3) (let ((e-12 (vector-ref sc0 1))) (let ((e-13 (vector-ref sc0 2))) (let ((e-14 (vector-ref sc0 3))) (let ((sc1 e-13)) (case (vector-ref sc1 0) ((0) (let ((e-26 (vector-ref sc1 3))) (let ((sc2 arg-4)) (case (vector-ref sc2 0) ((0) (Strings-Types-Prelude-C-43C-43 "Bind " (Strings-Types-Prelude-C-43C-43 (TT-Core-show_Show__Name e-12) (Strings-Types-Prelude-C-43C-43 " lam " (Strings-Types-Prelude-C-43C-43 " " (Strings-Types-Prelude-C-43C-43 (TT-Core-show_Show__C-40TermC-32C-36varsC-41 arg-2 e-26) (Strings-Types-Prelude-C-43C-43 " => " (TT-Core-show_Show__C-40TermC-32C-36varsC-41 (vector 1 e-12 arg-2) e-14))))))))(else (let ((sc2 arg-4)) (case (vector-ref sc2 0) ((0) "???")(else (Strings-Types-Prelude-C-43C-43 "(" (Strings-Types-Prelude-C-43C-43 (TT-Core-show_Show__C-40TermC-32C-36varsC-41 arg-2 arg-3) (Strings-Types-Prelude-C-43C-43 " " (Strings-Types-Prelude-C-43C-43 (TT-Core-showSep " " (Types-Prelude-map_Functor__List 'erased 'erased (lambda (arg-5) (TT-Core-show_Show__C-40TermC-32C-36varsC-41 arg-2 arg-5)) arg-4)) ")")))))))))))) ((1) (let ((e-29 (vector-ref sc1 2))) (let ((e-30 (vector-ref sc1 3))) (let ((sc2 e-29)) (case (vector-ref sc2 0) ((1) (let ((sc3 arg-4)) (case (vector-ref sc3 0) ((0) (Strings-Types-Prelude-C-43C-43 "(bind " (Strings-Types-Prelude-C-43C-43 (TT-Core-show_Show__Name e-12) (Strings-Types-Prelude-C-43C-43 " (pi exp " (Strings-Types-Prelude-C-43C-43 (TT-Core-show_Show__C-40TermC-32C-36varsC-41 arg-2 e-30) (Strings-Types-Prelude-C-43C-43 ") -> " (Strings-Types-Prelude-C-43C-43 (TT-Core-show_Show__C-40TermC-32C-36varsC-41 (vector 1 e-12 arg-2) e-14) ")")))))))(else (let ((sc3 arg-4)) (case (vector-ref sc3 0) ((0) "???")(else (Strings-Types-Prelude-C-43C-43 "(" (Strings-Types-Prelude-C-43C-43 (TT-Core-show_Show__C-40TermC-32C-36varsC-41 arg-2 arg-3) (Strings-Types-Prelude-C-43C-43 " " (Strings-Types-Prelude-C-43C-43 (TT-Core-showSep " " (Types-Prelude-map_Functor__List 'erased 'erased (lambda (arg-5) (TT-Core-show_Show__C-40TermC-32C-36varsC-41 arg-2 arg-5)) arg-4)) ")"))))))))))) ((0) (let ((sc3 arg-4)) (case (vector-ref sc3 0) ((0) (Strings-Types-Prelude-C-43C-43 "{bind" (Strings-Types-Prelude-C-43C-43 (TT-Core-show_Show__Name e-12) (Strings-Types-Prelude-C-43C-43 " pi imp " (Strings-Types-Prelude-C-43C-43 (TT-Core-show_Show__C-40TermC-32C-36varsC-41 arg-2 e-30) (Strings-Types-Prelude-C-43C-43 "} -> " (TT-Core-show_Show__C-40TermC-32C-36varsC-41 (vector 1 e-12 arg-2) e-14)))))))(else (let ((sc3 arg-4)) (case (vector-ref sc3 0) ((0) "???")(else (Strings-Types-Prelude-C-43C-43 "(" (Strings-Types-Prelude-C-43C-43 (TT-Core-show_Show__C-40TermC-32C-36varsC-41 arg-2 arg-3) (Strings-Types-Prelude-C-43C-43 " " (Strings-Types-Prelude-C-43C-43 (TT-Core-showSep " " (Types-Prelude-map_Functor__List 'erased 'erased (lambda (arg-5) (TT-Core-show_Show__C-40TermC-32C-36varsC-41 arg-2 arg-5)) arg-4)) ")")))))))))))(else (let ((sc2 arg-4)) (case (vector-ref sc2 0) ((0) "???")(else (Strings-Types-Prelude-C-43C-43 "(" (Strings-Types-Prelude-C-43C-43 (TT-Core-show_Show__C-40TermC-32C-36varsC-41 arg-2 arg-3) (Strings-Types-Prelude-C-43C-43 " " (Strings-Types-Prelude-C-43C-43 (TT-Core-showSep " " (Types-Prelude-map_Functor__List 'erased 'erased (lambda (arg-5) (TT-Core-show_Show__C-40TermC-32C-36varsC-41 arg-2 arg-5)) arg-4)) ")"))))))))))))) ((2) (let ((e-33 (vector-ref sc1 2))) (let ((sc2 arg-4)) (case (vector-ref sc2 0) ((0) (Strings-Types-Prelude-C-43C-43 "bind pat " (Strings-Types-Prelude-C-43C-43 (TT-Core-show_Show__Name e-12) (Strings-Types-Prelude-C-43C-43 " pvar " (Strings-Types-Prelude-C-43C-43 (TT-Core-show_Show__C-40TermC-32C-36varsC-41 arg-2 e-33) (Strings-Types-Prelude-C-43C-43 " => " (TT-Core-show_Show__C-40TermC-32C-36varsC-41 (vector 1 e-12 arg-2) e-14)))))))(else (let ((sc2 arg-4)) (case (vector-ref sc2 0) ((0) "???")(else (Strings-Types-Prelude-C-43C-43 "(" (Strings-Types-Prelude-C-43C-43 (TT-Core-show_Show__C-40TermC-32C-36varsC-41 arg-2 arg-3) (Strings-Types-Prelude-C-43C-43 " " (Strings-Types-Prelude-C-43C-43 (TT-Core-showSep " " (Types-Prelude-map_Functor__List 'erased 'erased (lambda (arg-5) (TT-Core-show_Show__C-40TermC-32C-36varsC-41 arg-2 arg-5)) arg-4)) ")")))))))))))) ((3) (let ((e-35 (vector-ref sc1 1))) (let ((sc2 arg-4)) (case (vector-ref sc2 0) ((0) (Strings-Types-Prelude-C-43C-43 "bind pty " (Strings-Types-Prelude-C-43C-43 (TT-Core-show_Show__Name e-12) (Strings-Types-Prelude-C-43C-43 " pty " (Strings-Types-Prelude-C-43C-43 (TT-Core-show_Show__C-40TermC-32C-36varsC-41 arg-2 e-35) (Strings-Types-Prelude-C-43C-43 " => " (TT-Core-show_Show__C-40TermC-32C-36varsC-41 (vector 1 e-12 arg-2) e-14)))))))(else (let ((sc2 arg-4)) (case (vector-ref sc2 0) ((0) "???")(else (Strings-Types-Prelude-C-43C-43 "(" (Strings-Types-Prelude-C-43C-43 (TT-Core-show_Show__C-40TermC-32C-36varsC-41 arg-2 arg-3) (Strings-Types-Prelude-C-43C-43 " " (Strings-Types-Prelude-C-43C-43 (TT-Core-showSep " " (Types-Prelude-map_Functor__List 'erased 'erased (lambda (arg-5) (TT-Core-show_Show__C-40TermC-32C-36varsC-41 arg-2 arg-5)) arg-4)) ")"))))))))))))(else (let ((sc1 arg-4)) (case (vector-ref sc1 0) ((0) "???")(else (Strings-Types-Prelude-C-43C-43 "(" (Strings-Types-Prelude-C-43C-43 (TT-Core-show_Show__C-40TermC-32C-36varsC-41 arg-2 arg-3) (Strings-Types-Prelude-C-43C-43 " " (Strings-Types-Prelude-C-43C-43 (TT-Core-showSep " " (Types-Prelude-map_Functor__List 'erased 'erased (lambda (arg-5) (TT-Core-show_Show__C-40TermC-32C-36varsC-41 arg-2 arg-5)) arg-4)) ")")))))))))))))) ((4) (let ((sc1 arg-4)) (case (vector-ref sc1 0) ((0) "[can't happen]")(else (let ((sc1 arg-4)) (case (vector-ref sc1 0) ((0) "???")(else (Strings-Types-Prelude-C-43C-43 "(" (Strings-Types-Prelude-C-43C-43 (TT-Core-show_Show__C-40TermC-32C-36varsC-41 arg-2 arg-3) (Strings-Types-Prelude-C-43C-43 " " (Strings-Types-Prelude-C-43C-43 (TT-Core-showSep " " (Types-Prelude-map_Functor__List 'erased 'erased (lambda (arg-5) (TT-Core-show_Show__C-40TermC-32C-36varsC-41 arg-2 arg-5)) arg-4)) ")"))))))))))) ((5) (let ((sc1 arg-4)) (case (vector-ref sc1 0) ((0) "Type")(else (let ((sc1 arg-4)) (case (vector-ref sc1 0) ((0) "???")(else (Strings-Types-Prelude-C-43C-43 "(" (Strings-Types-Prelude-C-43C-43 (TT-Core-show_Show__C-40TermC-32C-36varsC-41 arg-2 arg-3) (Strings-Types-Prelude-C-43C-43 " " (Strings-Types-Prelude-C-43C-43 (TT-Core-showSep " " (Types-Prelude-map_Functor__List 'erased 'erased (lambda (arg-5) (TT-Core-show_Show__C-40TermC-32C-36varsC-41 arg-2 arg-5)) arg-4)) ")"))))))))))) ((6) (let ((sc1 arg-4)) (case (vector-ref sc1 0) ((0) "[_]")(else (let ((sc1 arg-4)) (case (vector-ref sc1 0) ((0) "???")(else (Strings-Types-Prelude-C-43C-43 "(" (Strings-Types-Prelude-C-43C-43 (TT-Core-show_Show__C-40TermC-32C-36varsC-41 arg-2 arg-3) (Strings-Types-Prelude-C-43C-43 " " (Strings-Types-Prelude-C-43C-43 (TT-Core-showSep " " (Types-Prelude-map_Functor__List 'erased 'erased (lambda (arg-5) (TT-Core-show_Show__C-40TermC-32C-36varsC-41 arg-2 arg-5)) arg-4)) ")")))))))))))(else (let ((sc0 arg-4)) (case (vector-ref sc0 0) ((0) "???")(else (Strings-Types-Prelude-C-43C-43 "(" (Strings-Types-Prelude-C-43C-43 (TT-Core-show_Show__C-40TermC-32C-36varsC-41 arg-2 arg-3) (Strings-Types-Prelude-C-43C-43 " " (Strings-Types-Prelude-C-43C-43 (TT-Core-showSep " " (Types-Prelude-map_Functor__List 'erased 'erased (lambda (arg-5) (TT-Core-show_Show__C-40TermC-32C-36varsC-41 arg-2 arg-5)) arg-4)) ")"))))))))))))
(define TT-Core-n--2770-5427-getFA (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((4) (let ((e-1 (vector-ref sc0 1))) (let ((e-2 (vector-ref sc0 2))) (TT-Core-n--2770-5427-getFA 'erased arg-1 (vector 1 e-2 arg-2) e-1))))(else (vector 0 arg-3 arg-2))))))
(define TT-Core-weaken_Weaken__Var (lambda (arg-0 arg-1 arg-2) (+ 1 arg-2)))
(define TT-Core-weaken_Weaken__Term (lambda (arg-0 arg-1 ext-0) (TT-Core-weakenNs_Weaken__Term arg-1 (vector 1 arg-0 (vector 0 )) ext-0)))
(define TT-Core-weakenNs_Weaken__Var (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-1)) (case (vector-ref sc0 0) ((0) arg-2) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (TT-Core-weaken_Weaken__Var e-2 (List-Types-Prelude-C-43C-43 'erased e-3 arg-0) (TT-Core-weakenNs_Weaken__Var arg-0 e-3 arg-2)))))))))
(define TT-Core-weakenNs_Weaken__Term (lambda (arg-0 arg-1 arg-2) (TT-Core-insertNames (vector 0 ) arg-0 arg-1 arg-2)))
(define TT-Core-show_Show__NameType (lambda (arg-0) (let ((sc0 arg-0)) (case (vector-ref sc0 0) ((0) "Func") ((2) (let ((e-0 (vector-ref sc0 1))) (let ((e-1 (vector-ref sc0 2))) (Strings-Types-Prelude-C-43C-43 "DataCon " (Show-Prelude-show_Show__C-40C-124C-40C-40BuiltinC-46PairC-32C-36aC-41C-32C-36bC-41C-44C-40C-40BuiltinC-46MkPairC-32C-36aC-41C-32C-36bC-41C-124C-41 'erased 'erased (vector 0 (vector 0 (lambda (x) (Show-Prelude-show_Show__Int x)) (lambda (d) (lambda (x) (Show-Prelude-showPrec_Show__Int d x)))) (vector 0 (lambda (x) (Show-Prelude-show_Show__Nat x)) (lambda (d) (lambda (x) (Show-Prelude-showPrec_Show__Nat d x))))) (vector 0 e-0 e-1)))))) ((3) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (Strings-Types-Prelude-C-43C-43 "TyCon " (Show-Prelude-show_Show__C-40C-124C-40C-40BuiltinC-46PairC-32C-36aC-41C-32C-36bC-41C-44C-40C-40BuiltinC-46MkPairC-32C-36aC-41C-32C-36bC-41C-124C-41 'erased 'erased (vector 0 (vector 0 (lambda (x) (Show-Prelude-show_Show__Int x)) (lambda (d) (lambda (x) (Show-Prelude-showPrec_Show__Int d x)))) (vector 0 (lambda (x) (Show-Prelude-show_Show__Nat x)) (lambda (d) (lambda (x) (Show-Prelude-showPrec_Show__Nat d x))))) (vector 0 e-2 e-3)))))) (else "Bound")))))
(define TT-Core-show_Show__Name (lambda (arg-0) (let ((sc0 arg-0)) (case (vector-ref sc0 0) ((0) (let ((e-0 (vector-ref sc0 1))) e-0)) (else (let ((e-1 (vector-ref sc0 1))) (let ((e-2 (vector-ref sc0 2))) (Strings-Types-Prelude-C-43C-43 "{" (Strings-Types-Prelude-C-43C-43 e-1 (Strings-Types-Prelude-C-43C-43 ":" (Strings-Types-Prelude-C-43C-43 (Show-Prelude-show_Show__Int e-2) "}")))))))))))
(define TT-Core-show_Show__C-40TermC-32C-36varsC-41 (lambda (arg-0 arg-1) (TT-Core-case--show-7689 arg-0 arg-1 (TT-Core-getFnArgs 'erased arg-1))))
(define TT-Core-showPrec_Show__NameType (lambda (arg-0 arg-1) (TT-Core-show_Show__NameType arg-1)))
(define TT-Core-showPrec_Show__Name (lambda (arg-0 arg-1) (TT-Core-show_Show__Name arg-1)))
(define TT-Core-showPrec_Show__C-40TermC-32C-36varsC-41 (lambda (arg-0 arg-1 arg-2) (TT-Core-show_Show__C-40TermC-32C-36varsC-41 arg-0 arg-2)))
(define TT-Core-min_Ord__Name (lambda (arg-0 arg-1) (TT-Core-case--min-4876 arg-1 arg-0 (TT-Core-C-60_Ord__Name arg-0 arg-1))))
(define TT-Core-max_Ord__Name (lambda (arg-0 arg-1) (TT-Core-case--max-4890 arg-1 arg-0 (TT-Core-C-62_Ord__Name arg-0 arg-1))))
(define TT-Core-map_Functor__Binder (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((0) (let ((e-1 (vector-ref sc0 1))) (let ((e-2 (vector-ref sc0 2))) (let ((e-3 (vector-ref sc0 3))) (vector 0 e-1 e-2 (arg-2 e-3)))))) ((1) (let ((e-5 (vector-ref sc0 1))) (let ((e-6 (vector-ref sc0 2))) (let ((e-7 (vector-ref sc0 3))) (vector 1 e-5 e-6 (arg-2 e-7)))))) ((2) (let ((e-9 (vector-ref sc0 1))) (let ((e-10 (vector-ref sc0 2))) (vector 2 e-9 (arg-2 e-10))))) (else (let ((e-12 (vector-ref sc0 1))) (vector 3 (arg-2 e-12))))))))
(define TT-Core-compare_Ord__Name (lambda (arg-0 arg-1) (let ((sc0 arg-0)) (case (vector-ref sc0 0) ((0) (let ((e-0 (vector-ref sc0 1))) (let ((sc1 arg-1)) (case (vector-ref sc1 0) ((0) (let ((e-3 (vector-ref sc1 1))) (EqOrd-Prelude-compare_Ord__String e-0 e-3)))(else (EqOrd-Prelude-compare_Ord__Int (TT-Core-nameTag arg-0) (TT-Core-nameTag arg-1))))))) ((1) (let ((e-1 (vector-ref sc0 1))) (let ((e-2 (vector-ref sc0 2))) (let ((sc1 arg-1)) (case (vector-ref sc1 0) ((1) (let ((e-4 (vector-ref sc1 1))) (let ((e-5 (vector-ref sc1 2))) (TT-Core-case--compare-4935 e-2 e-1 e-5 e-4 (EqOrd-Prelude-compare_Ord__String e-1 e-4)))))(else (EqOrd-Prelude-compare_Ord__Int (TT-Core-nameTag arg-0) (TT-Core-nameTag arg-1))))))))(else (EqOrd-Prelude-compare_Ord__Int (TT-Core-nameTag arg-0) (TT-Core-nameTag arg-1)))))))
(define TT-Core-__Impl_Weaken_Var (lambda () (vector 0 (lambda (n) (lambda (vars) (lambda (arg-5303) (TT-Core-weaken_Weaken__Var n vars arg-5303)))) (lambda (vars) (lambda (ns) (lambda (arg-5307) (TT-Core-weakenNs_Weaken__Var vars ns arg-5307)))))))
(define TT-Core-__Impl_Weaken_Term (lambda () (vector 0 (lambda (n) (lambda (vars) (lambda (arg-5303) (TT-Core-weaken_Weaken__Term n vars arg-5303)))) (lambda (vars) (lambda (ns) (lambda (arg-5307) (TT-Core-weakenNs_Weaken__Term vars ns arg-5307)))))))
(define TT-Core-__Impl_Show_NameType (lambda () (vector 0 (lambda (x) (TT-Core-show_Show__NameType x)) (lambda (d) (lambda (x) (TT-Core-showPrec_Show__NameType d x))))))
(define TT-Core-__Impl_Show_Name (lambda () (vector 0 (lambda (x) (TT-Core-show_Show__Name x)) (lambda (d) (lambda (x) (TT-Core-showPrec_Show__Name d x))))))
(define TT-Core-__Impl_Show_C-40TermC-32C-36varsC-41 (lambda (arg-0) (vector 0 (lambda (x) (TT-Core-show_Show__C-40TermC-32C-36varsC-41 arg-0 x)) (lambda (d) (lambda (x) (TT-Core-showPrec_Show__C-40TermC-32C-36varsC-41 arg-0 d x))))))
(define TT-Core-__Impl_Ord_Name (lambda () (vector 0 (vector 0 (lambda (arg-2) (lambda (arg-3) (TT-Core-C-61C-61_Eq__Name arg-2 arg-3))) (lambda (arg-4) (lambda (arg-5) (TT-Core-C-47C-61_Eq__Name arg-4 arg-5)))) (lambda (arg-369) (lambda (arg-370) (TT-Core-compare_Ord__Name arg-369 arg-370))) (lambda (arg-371) (lambda (arg-372) (TT-Core-C-60_Ord__Name arg-371 arg-372))) (lambda (arg-373) (lambda (arg-374) (TT-Core-C-62_Ord__Name arg-373 arg-374))) (lambda (arg-375) (lambda (arg-376) (TT-Core-C-60C-61_Ord__Name arg-375 arg-376))) (lambda (arg-377) (lambda (arg-378) (TT-Core-C-62C-61_Ord__Name arg-377 arg-378))) (lambda (arg-379) (lambda (arg-380) (TT-Core-max_Ord__Name arg-379 arg-380))) (lambda (arg-381) (lambda (arg-382) (TT-Core-min_Ord__Name arg-381 arg-382))))))
(define TT-Core-__Impl_Functor_Binder (lambda (ext-0 ext-1 ext-2 ext-3) (TT-Core-map_Functor__Binder 'erased 'erased ext-2 ext-3)))
(define TT-Core-__Impl_Eq_Name (lambda () (vector 0 (lambda (arg-2) (lambda (arg-3) (TT-Core-C-61C-61_Eq__Name arg-2 arg-3))) (lambda (arg-4) (lambda (arg-5) (TT-Core-C-47C-61_Eq__Name arg-4 arg-5))))))
(define TT-Core-C-62_Ord__Name (lambda (arg-0 arg-1) (EqOrd-Prelude-C-61C-61_Eq__Ordering (TT-Core-compare_Ord__Name arg-0 arg-1) 2)))
(define TT-Core-C-62C-61_Ord__Name (lambda (arg-0 arg-1) (EqOrd-Prelude-C-47C-61_Eq__Ordering (TT-Core-compare_Ord__Name arg-0 arg-1) 0)))
(define TT-Core-C-61C-61_Eq__Name (lambda (arg-0 arg-1) (let ((sc0 arg-0)) (case (vector-ref sc0 0) ((0) (let ((e-0 (vector-ref sc0 1))) (let ((sc1 arg-1)) (case (vector-ref sc1 0) ((0) (let ((e-3 (vector-ref sc1 1))) (EqOrd-Prelude-C-61C-61_Eq__String e-0 e-3)))(else 1))))) ((1) (let ((e-1 (vector-ref sc0 1))) (let ((e-2 (vector-ref sc0 2))) (let ((sc1 arg-1)) (case (vector-ref sc1 0) ((1) (let ((e-4 (vector-ref sc1 1))) (let ((e-5 (vector-ref sc1 2))) (Basics-Prelude-C-38C-38 (EqOrd-Prelude-C-61C-61_Eq__Int e-2 e-5) (lambda () (EqOrd-Prelude-C-61C-61_Eq__String e-1 e-4))))))(else 1))))))(else 1)))))
(define TT-Core-C-60_Ord__Name (lambda (arg-0 arg-1) (EqOrd-Prelude-C-61C-61_Eq__Ordering (TT-Core-compare_Ord__Name arg-0 arg-1) 0)))
(define TT-Core-C-60C-61_Ord__Name (lambda (arg-0 arg-1) (EqOrd-Prelude-C-47C-61_Eq__Ordering (TT-Core-compare_Ord__Name arg-0 arg-1) 2)))
(define TT-Core-C-47C-61_Eq__Name (lambda (arg-0 arg-1) (Basics-Prelude-not (TT-Core-C-61C-61_Eq__Name arg-0 arg-1))))
(define TT-Core-weakenNs (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (let ((e-2 (vector-ref sc0 2))) (lambda (arg-3) (lambda (arg-4) (((e-2 arg-1) arg-3) arg-4)))))))
(define TT-Core-weakenNVar (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((0) arg-3) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (TT-Core-case--weakenNVar-5148 'erased 'erased arg-3 e-2 e-3 'erased (TT-Core-weakenNVar 'erased 'erased e-3 arg-3 'erased)))))))))
(define TT-Core-weaken (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (let ((e-1 (vector-ref sc0 1))) (lambda (arg-4) (((e-1 arg-1) arg-2) arg-4))))))
(define SubstEnv-TT-Core-substs (lambda (arg-0 arg-1 arg-2 arg-3) (SubstEnv-TT-Core-substEnv arg-0 arg-1 (vector 0 ) arg-2 arg-3)))
(define TT-Core-substName (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((1) (let ((e-1 (vector-ref sc0 1))) (let ((e-2 (vector-ref sc0 2))) (TT-Core-case--substName-6669 arg-0 e-2 e-1 arg-2 arg-1 (TT-Core-nameEq arg-1 e-2))))) ((2) (let ((e-4 (vector-ref sc0 1))) (let ((e-5 (vector-ref sc0 2))) (vector 2 e-4 (Types-Prelude-map_Functor__List 'erased 'erased (lambda (eta-0) (TT-Core-substName arg-0 arg-1 arg-2 eta-0)) e-5))))) ((3) (let ((e-7 (vector-ref sc0 1))) (let ((e-8 (vector-ref sc0 2))) (let ((e-9 (vector-ref sc0 3))) (vector 3 e-7 (TT-Core-map_Functor__Binder 'erased 'erased (lambda (eta-0) (TT-Core-substName arg-0 arg-1 arg-2 eta-0)) e-8) (TT-Core-substName (vector 1 e-7 arg-0) arg-1 (TT-Core-weaken_Weaken__Term e-7 arg-0 arg-2) e-9)))))) ((4) (let ((e-11 (vector-ref sc0 1))) (let ((e-12 (vector-ref sc0 2))) (vector 4 (TT-Core-substName arg-0 arg-1 arg-2 e-11) (TT-Core-substName arg-0 arg-1 arg-2 e-12)))))(else arg-3)))))
(define SubstEnv-TT-Core-substEnv (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-4)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (SubstEnv-TT-Core-find 'erased arg-0 arg-1 arg-2 e-2 'erased arg-3))) ((1) (let ((e-5 (vector-ref sc0 1))) (let ((e-6 (vector-ref sc0 2))) (vector 1 e-5 e-6)))) ((2) (let ((e-8 (vector-ref sc0 1))) (let ((e-9 (vector-ref sc0 2))) (vector 2 e-8 (Types-Prelude-map_Functor__List 'erased 'erased (lambda (eta-0) (SubstEnv-TT-Core-substEnv arg-0 arg-1 arg-2 arg-3 eta-0)) e-9))))) ((3) (let ((e-11 (vector-ref sc0 1))) (let ((e-12 (vector-ref sc0 2))) (let ((e-13 (vector-ref sc0 3))) (vector 3 e-11 (TT-Core-map_Functor__Binder 'erased 'erased (lambda (eta-0) (SubstEnv-TT-Core-substEnv arg-0 arg-1 arg-2 arg-3 eta-0)) e-12) (SubstEnv-TT-Core-substEnv arg-0 arg-1 (vector 1 e-11 arg-2) arg-3 e-13)))))) ((4) (let ((e-15 (vector-ref sc0 1))) (let ((e-16 (vector-ref sc0 2))) (vector 4 (SubstEnv-TT-Core-substEnv arg-0 arg-1 arg-2 arg-3 e-15) (SubstEnv-TT-Core-substEnv arg-0 arg-1 arg-2 arg-3 e-16))))) ((6) (vector 6 )) (else (vector 5 ))))))
(define TT-Core-subElem (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-5)) (case (vector-ref sc0 0) ((0) (vector 1 arg-3))(else (let ((sc0 arg-3)) (cond ((equal? sc0 0) (let ((sc1 arg-5)) (case (vector-ref sc1 0) ((1) (vector 0 )) (else (vector 1 0)))))(else (let ((e-0 (- arg-3 1))) (let ((sc0 arg-5)) (case (vector-ref sc0 0) ((1) (let ((e-12 (vector-ref sc0 1))) (Types-Prelude-C-62C-62C-61_Monad__Maybe 'erased 'erased (TT-Core-subElem 'erased 'erased 'erased e-0 'erased e-12) (lambda (_-0) (vector 1 _-0))))) (else (let ((e-16 (vector-ref sc0 1))) (Types-Prelude-C-62C-62C-61_Monad__Maybe 'erased 'erased (TT-Core-subElem 'erased 'erased 'erased e-0 'erased e-16) (lambda (_-0) (vector 1 (+ 1 _-0)))))))))))))))))
(define TT-Core-shrinkTerm (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (TT-Core-case--shrinkTerm-7165 'erased 'erased 'erased e-2 'erased arg-3 (TT-Core-subElem 'erased 'erased 'erased e-2 'erased arg-3)))) ((1) (let ((e-5 (vector-ref sc0 1))) (let ((e-6 (vector-ref sc0 2))) (vector 1 (vector 1 e-5 e-6))))) ((2) (let ((e-8 (vector-ref sc0 1))) (let ((e-9 (vector-ref sc0 2))) (Types-Prelude-C-62C-62C-61_Monad__Maybe 'erased 'erased (Types-Prelude-traverse_Traversable__List 'erased 'erased 'erased (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-45) (Types-Prelude-map_Functor__Maybe 'erased 'erased func arg-45))))) (lambda (a) (lambda (arg-112) (Types-Prelude-pure_Applicative__Maybe 'erased arg-112))) (lambda (b) (lambda (a) (lambda (arg-113) (lambda (arg-115) (Types-Prelude-C-60C-42C-62_Applicative__Maybe 'erased 'erased arg-113 arg-115)))))) (lambda (x) (TT-Core-shrinkTerm 'erased 'erased x arg-3)) e-9) (lambda (xsC-39) (vector 1 (vector 2 e-8 xsC-39))))))) ((3) (let ((e-11 (vector-ref sc0 1))) (let ((e-12 (vector-ref sc0 2))) (let ((e-13 (vector-ref sc0 3))) (Types-Prelude-C-62C-62C-61_Monad__Maybe 'erased 'erased (TT-Core-shrinkBinder 'erased 'erased e-12 arg-3) (lambda (bind-0) (Types-Prelude-C-62C-62C-61_Monad__Maybe 'erased 'erased (TT-Core-shrinkTerm 'erased 'erased e-13 (vector 2 arg-3)) (lambda (bind-1) (vector 1 (vector 3 e-11 bind-0 bind-1)))))))))) ((4) (let ((e-15 (vector-ref sc0 1))) (let ((e-16 (vector-ref sc0 2))) (Types-Prelude-C-62C-62C-61_Monad__Maybe 'erased 'erased (TT-Core-shrinkTerm 'erased 'erased e-15 arg-3) (lambda (bind-0) (Types-Prelude-C-62C-62C-61_Monad__Maybe 'erased 'erased (TT-Core-shrinkTerm 'erased 'erased e-16 arg-3) (lambda (bind-1) (vector 1 (vector 4 bind-0 bind-1))))))))) ((6) (vector 1 (vector 6 ))) (else (vector 1 (vector 5 )))))))
(define TT-Core-shrinkBinder (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((0) (let ((e-1 (vector-ref sc0 1))) (let ((e-2 (vector-ref sc0 2))) (let ((e-3 (vector-ref sc0 3))) (Types-Prelude-C-62C-62C-61_Monad__Maybe 'erased 'erased (TT-Core-shrinkTerm 'erased 'erased e-3 arg-3) (lambda (bind-0) (vector 1 (vector 0 e-1 e-2 bind-0)))))))) ((1) (let ((e-5 (vector-ref sc0 1))) (let ((e-6 (vector-ref sc0 2))) (let ((e-7 (vector-ref sc0 3))) (Types-Prelude-C-62C-62C-61_Monad__Maybe 'erased 'erased (TT-Core-shrinkTerm 'erased 'erased e-7 arg-3) (lambda (bind-0) (vector 1 (vector 1 e-5 e-6 bind-0)))))))) ((2) (let ((e-9 (vector-ref sc0 1))) (let ((e-10 (vector-ref sc0 2))) (Types-Prelude-C-62C-62C-61_Monad__Maybe 'erased 'erased (TT-Core-shrinkTerm 'erased 'erased e-10 arg-3) (lambda (bind-0) (vector 1 (vector 2 e-9 bind-0))))))) (else (let ((e-12 (vector-ref sc0 1))) (Types-Prelude-C-62C-62C-61_Monad__Maybe 'erased 'erased (TT-Core-shrinkTerm 'erased 'erased e-12 arg-3) (lambda (bind-0) (vector 1 (vector 3 bind-0))))))))))
(define TT-Core-showSep (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (case (vector-ref sc0 0) ((0) "") (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 e-3)) (case (vector-ref sc1 0) ((0) e-2)(else (Strings-Types-Prelude-C-43C-43 e-2 (Strings-Types-Prelude-C-43C-43 arg-0 (TT-Core-showSep arg-0 e-3)))))))))))))
(define TT-Core-resolveRef (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-4)) (case (vector-ref sc0 0) ((0) (vector 0 )) (else (let ((e-1 (vector-ref sc0 1))) (let ((e-2 (vector-ref sc0 2))) (let ((e-3 (vector-ref sc0 3))) (TT-Core-case--resolveRef-5984 'erased e-3 e-2 e-1 arg-5 arg-3 arg-2 'erased 'erased (TT-Core-C-61C-61_Eq__Name arg-5 e-2))))))))))
(define TT-Core-resolveNames (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (case (vector-ref sc0 0) ((1) (let ((e-1 (vector-ref sc0 1))) (let ((e-2 (vector-ref sc0 2))) (let ((sc1 e-1)) (case (vector-ref sc1 0) ((1) (TT-Core-case--resolveNames-6320 e-2 arg-0 (TT-Core-isVar e-2 arg-0)))(else arg-1)))))) ((2) (let ((e-4 (vector-ref sc0 1))) (let ((e-5 (vector-ref sc0 2))) (vector 2 e-4 (Types-Prelude-map_Functor__List 'erased 'erased (lambda (eta-0) (TT-Core-resolveNames arg-0 eta-0)) e-5))))) ((3) (let ((e-7 (vector-ref sc0 1))) (let ((e-8 (vector-ref sc0 2))) (let ((e-9 (vector-ref sc0 3))) (vector 3 e-7 (TT-Core-map_Functor__Binder 'erased 'erased (lambda (eta-0) (TT-Core-resolveNames arg-0 eta-0)) e-8) (TT-Core-resolveNames (vector 1 e-7 arg-0) e-9)))))) ((4) (let ((e-11 (vector-ref sc0 1))) (let ((e-12 (vector-ref sc0 2))) (vector 4 (TT-Core-resolveNames arg-0 e-11) (TT-Core-resolveNames arg-0 e-12)))))(else arg-1)))))
(define TT-Core-renameVars (lambda (arg-0 arg-1 arg-2 arg-3) (Builtin-believe_me 'erased 'erased arg-3)))
(define TT-Core-renameTop (lambda (arg-0 arg-1 arg-2 arg-3) (TT-Core-renameVars 'erased 'erased (vector 1 (vector 0 )) arg-3)))
(define TT-Core-refsToLocals (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-1)) (case (vector-ref sc0 0) ((0) (let ((sc1 arg-2)) (case (vector-ref sc1 0) ((0) arg-3)(else (TT-Core-mkLocals 'erased (vector 0 ) arg-1 arg-2 arg-3)))))(else (TT-Core-mkLocals 'erased (vector 0 ) arg-1 arg-2 arg-3))))))
(define TT-Core-nameTag (lambda (arg-0) (let ((sc0 arg-0)) (case (vector-ref sc0 0) ((0) 0) (else 1)))))
(define TT-Core-nameEq (lambda (arg-0 arg-1) (let ((sc0 arg-0)) (case (vector-ref sc0 0) ((0) (let ((e-0 (vector-ref sc0 1))) (let ((sc1 arg-1)) (case (vector-ref sc1 0) ((0) (let ((e-3 (vector-ref sc1 1))) (TT-Core-with--nameEq-4712 e-0 e-3 (Equality-Decidable-decEq_DecEq__String e-0 e-3))))(else (vector 0 )))))) ((1) (let ((e-1 (vector-ref sc0 1))) (let ((e-2 (vector-ref sc0 2))) (let ((sc1 arg-1)) (case (vector-ref sc1 0) ((1) (let ((e-4 (vector-ref sc1 1))) (let ((e-5 (vector-ref sc1 2))) (TT-Core-with--nameEq-4739 e-1 e-4 (Equality-Decidable-decEq_DecEq__String e-1 e-4) e-2 e-5))))(else (vector 0 )))))))(else (vector 0 ))))))
(define TT-Core-nameAt (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-1)) (let ((e-1 (vector-ref sc0 1))) (let ((e-2 (vector-ref sc0 2))) (let ((sc1 arg-2)) (cond ((equal? sc1 0) e-1)(else (let ((e-3 (- arg-2 1))) (TT-Core-nameAt 'erased e-2 e-3 'erased))))))))))
(define TT-Core-mkLocals (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-4)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (TT-Core-case--mkLocals-6144 'erased arg-1 arg-2 'erased e-2 'erased arg-3 (TT-Core-addVars 'erased 'erased arg-1 arg-2 e-2 arg-3 'erased)))) ((1) (let ((e-5 (vector-ref sc0 1))) (let ((e-6 (vector-ref sc0 2))) (let ((sc1 e-5)) (case (vector-ref sc1 0) ((1) (Types-Prelude-maybe 'erased 'erased (lambda () (vector 1 (vector 1 ) e-6)) (lambda () (lambda (eta-0) eta-0)) (TT-Core-resolveRef 'erased 'erased arg-1 (vector 0 ) arg-3 e-6)))(else (vector 1 e-5 e-6))))))) ((2) (let ((e-8 (vector-ref sc0 1))) (let ((e-9 (vector-ref sc0 2))) (Types-Prelude-maybe 'erased 'erased (lambda () (vector 2 e-8 (Types-Prelude-map_Functor__List 'erased 'erased (lambda (eta-0) (TT-Core-mkLocals 'erased arg-1 arg-2 arg-3 eta-0)) e-9))) (lambda () (lambda (eta-0) eta-0)) (TT-Core-resolveRef 'erased 'erased arg-1 (vector 0 ) arg-3 e-8))))) ((3) (let ((e-11 (vector-ref sc0 1))) (let ((e-12 (vector-ref sc0 2))) (let ((e-13 (vector-ref sc0 3))) (vector 3 e-11 (TT-Core-map_Functor__Binder 'erased 'erased (lambda (eta-0) (TT-Core-mkLocals 'erased arg-1 arg-2 arg-3 eta-0)) e-12) (TT-Core-mkLocals 'erased (vector 1 e-11 arg-1) arg-2 arg-3 e-13)))))) ((4) (let ((e-15 (vector-ref sc0 1))) (let ((e-16 (vector-ref sc0 2))) (vector 4 (TT-Core-mkLocals 'erased arg-1 arg-2 arg-3 e-15) (TT-Core-mkLocals 'erased arg-1 arg-2 arg-3 e-16))))) ((6) (vector 6 )) (else (vector 5 ))))))
(define TT-Core-isVar (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (case (vector-ref sc0 0) ((0) (vector 0 )) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (TT-Core-case--isVar-5450 e-2 e-3 arg-0 (TT-Core-nameEq arg-0 e-2)))))))))
(define TT-Core-insertNames (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (TT-Core-case--insertNames-5633 arg-0 arg-1 'erased e-2 'erased arg-2 (TT-Core-insertNVarNames 'erased 'erased arg-0 arg-2 e-2 'erased)))) ((1) (let ((e-5 (vector-ref sc0 1))) (let ((e-6 (vector-ref sc0 2))) (vector 1 e-5 e-6)))) ((2) (let ((e-8 (vector-ref sc0 1))) (let ((e-9 (vector-ref sc0 2))) (vector 2 e-8 (Types-Prelude-map_Functor__List 'erased 'erased (lambda (eta-0) (TT-Core-insertNames arg-0 arg-1 arg-2 eta-0)) e-9))))) ((3) (let ((e-11 (vector-ref sc0 1))) (let ((e-12 (vector-ref sc0 2))) (let ((e-13 (vector-ref sc0 3))) (vector 3 e-11 (TT-Core-map_Functor__Binder 'erased 'erased (lambda (eta-0) (TT-Core-insertNames arg-0 arg-1 arg-2 eta-0)) e-12) (TT-Core-insertNames (vector 1 e-11 arg-0) arg-1 arg-2 e-13)))))) ((4) (let ((e-15 (vector-ref sc0 1))) (let ((e-16 (vector-ref sc0 2))) (vector 4 (TT-Core-insertNames arg-0 arg-1 arg-2 e-15) (TT-Core-insertNames arg-0 arg-1 arg-2 e-16))))) ((6) (vector 6 )) (else (vector 5 ))))))
(define TT-Core-insertNVarNames (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((0) (TT-Core-weakenNVar 'erased 'erased arg-3 arg-4 'erased)) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 arg-4)) (cond ((equal? sc1 0) 0)(else (let ((e-4 (- arg-4 1))) (TT-Core-case--insertNVarNames-5580 'erased 'erased e-2 e-3 e-4 'erased arg-3 (TT-Core-insertNVarNames 'erased 'erased e-3 arg-3 e-4 'erased)))))))))))))
(define TT-Core-getFnArgs (lambda (arg-0 arg-1) (TT-Core-n--2770-5427-getFA 'erased arg-1 (vector 0 ) arg-1)))
(define SubstEnv-TT-Core-findDrop (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((0) (vector 0 arg-3)) (else (let ((e-3 (vector-ref sc0 2))) (let ((sc1 arg-3)) (cond ((equal? sc1 0) (let ((sc2 arg-5)) (let ((e-8 (vector-ref sc2 1))) e-8)))(else (let ((e-4 (- arg-3 1))) (let ((sc1 arg-5)) (let ((e-14 (vector-ref sc1 2))) (SubstEnv-TT-Core-findDrop 'erased 'erased e-3 e-4 'erased e-14)))))))))))))
(define SubstEnv-TT-Core-find (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((0) (SubstEnv-TT-Core-findDrop 'erased 'erased arg-1 arg-4 'erased arg-6)) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 arg-4)) (cond ((equal? sc1 0) (vector 0 0))(else (let ((e-4 (- arg-4 1))) (TT-Core-weaken_Weaken__Term e-2 (List-Types-Prelude-C-43C-43 'erased e-3 arg-2) (SubstEnv-TT-Core-find 'erased arg-1 arg-2 e-3 e-4 'erased arg-6)))))))))))))
(define TT-Core-embed (lambda (arg-0 arg-1 arg-2) (Builtin-believe_me 'erased 'erased arg-2)))
(define TT-Core-dropVar (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-1)) (let ((e-1 (vector-ref sc0 1))) (let ((e-2 (vector-ref sc0 2))) (let ((sc1 arg-2)) (cond ((equal? sc1 0) e-2)(else (let ((e-3 (- arg-2 1))) (vector 1 e-1 (TT-Core-dropVar 'erased e-2 e-3 'erased)))))))))))
(define TT-Core-dropFirst (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((0) (vector 0 )) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 e-2)) (cond ((equal? sc1 0) (TT-Core-dropFirst 'erased 'erased e-3))(else (let ((e-8 (- e-2 1))) (vector 1 e-8 (TT-Core-dropFirst 'erased 'erased e-3)))))))))))))
(define TT-Core-binderType (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (case (vector-ref sc0 0) ((0) (let ((e-3 (vector-ref sc0 3))) e-3)) ((1) (let ((e-7 (vector-ref sc0 3))) e-7)) ((2) (let ((e-10 (vector-ref sc0 2))) e-10)) (else (let ((e-12 (vector-ref sc0 1))) e-12))))))
(define TT-Core-apply (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((0) arg-1) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (TT-Core-apply 'erased (vector 4 arg-1 e-2) e-3))))))))
(define TT-Core-addVars (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((0) (TT-Core-weakenNVar 'erased 'erased arg-3 arg-4 'erased)) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 arg-4)) (cond ((equal? sc1 0) 0)(else (let ((e-4 (- arg-4 1))) (let ((idx (+ 1 e-4))) (TT-Core-case--addVars-5928 'erased 'erased arg-3 e-4 e-2 e-3 'erased arg-5 idx (TT-Core-addVars 'erased 'erased e-3 arg-3 e-4 arg-5 'erased))))))))))))))
(define Equality-Decidable-case--decEq-4679 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (cond ((equal? sc0 0) (vector 0 (Equality-Decidable-n--3301-4643-primitiveEq arg-0 arg-1 'erased 'erased 'erased))) (else (vector 1 (lambda (eta-0) (Equality-Decidable-n--3301-4644-primitiveNotEq arg-0 arg-1 'erased 'erased 'erased eta-0))))))))
(define Equality-Decidable-case--decEq-4487 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (cond ((equal? sc0 0) (vector 0 (Equality-Decidable-n--3097-4451-primitiveEq arg-0 arg-1 'erased 'erased 'erased))) (else (vector 1 (lambda (eta-0) (Equality-Decidable-n--3097-4452-primitiveNotEq arg-0 arg-1 'erased 'erased 'erased eta-0))))))))
(define Equality-Decidable-n--3301-4644-primitiveNotEq (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (Builtin-believe_me 'erased 'erased (vector 0 ))))
(define Equality-Decidable-n--3097-4452-primitiveNotEq (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (Builtin-believe_me 'erased 'erased (vector 0 ))))
(define Equality-Decidable-n--3301-4643-primitiveEq (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (Builtin-believe_me 'erased 'erased (vector 0 ))))
(define Equality-Decidable-n--3097-4451-primitiveEq (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (Builtin-believe_me 'erased 'erased (vector 0 ))))
(define Equality-Decidable-decEq_DecEq__String (lambda (arg-0 arg-1) (Equality-Decidable-case--decEq-4679 arg-1 arg-0 (EqOrd-Prelude-C-61C-61_Eq__String arg-0 arg-1))))
(define Equality-Decidable-decEq_DecEq__Int (lambda (arg-0 arg-1) (Equality-Decidable-case--decEq-4487 arg-1 arg-0 (EqOrd-Prelude-C-61C-61_Eq__Int arg-0 arg-1))))
(define Env-Core-case--caseC-32blockC-32inC-32defined-3784 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (Types-Prelude-pure_Applicative__Maybe 'erased (+ 1 arg-5))))
(define Env-Core-case--defined-3759 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-5)) (case (vector-ref sc0 0) ((0) (Types-Prelude-C-62C-62C-61_Monad__Maybe 'erased 'erased (Env-Core-defined arg-1 arg-4 arg-2) (lambda (_-0) (Types-Prelude-pure_Applicative__Maybe 'erased (+ 1 _-0))))) (else (let ((e-2 (vector-ref sc0 1))) (let ((sc1 e-2)) (vector 1 0))))))))
(define Env-Core-revOnto (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((0) (vector 0 )) (else (vector 0 ))))))
(define Env-Core-mkEnv (lambda (arg-0) (let ((sc0 arg-0)) (case (vector-ref sc0 0) ((0) (vector 0 )) (else (let ((e-3 (vector-ref sc0 2))) (vector 1 (vector 2 (vector 1 "_" 0) (vector 6 )) (Env-Core-mkEnv e-3))))))))
(define Env-Core-getBinderUnder (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (let ((sc0 arg-3)) (let ((e-1 (vector-ref sc0 1))) (let ((e-2 (vector-ref sc0 2))) (let ((sc1 arg-4)) (cond ((equal? sc1 0) (let ((sc2 arg-7)) (let ((e-7 (vector-ref sc2 1))) (TT-Core-map_Functor__Binder 'erased 'erased (let ((sc3 arg-2)) (let ((e-3 (vector-ref sc3 2))) (lambda (arg-8) (((e-3 e-2) (List-Data-reverse 'erased (vector 1 e-1 arg-5))) arg-8)))) e-7))))(else (let ((e-3 (- arg-4 1))) (let ((sc1 arg-7)) (let ((e-13 (vector-ref sc1 2))) (Env-Core-getBinderUnder 'erased 'erased arg-2 e-2 e-3 (vector 1 e-1 arg-5) 'erased e-13))))))))))))
(define Env-Core-getBinder (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (Env-Core-getBinderUnder 'erased 'erased arg-2 arg-3 arg-4 (vector 0 ) 'erased arg-6)))
(define Env-Core-defined (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-0)) (case (vector-ref sc0 0) ((0) (let ((sc1 arg-2)) (vector 0 ))) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 arg-2)) (let ((e-8 (vector-ref sc1 1))) (let ((e-9 (vector-ref sc1 2))) (Env-Core-case--defined-3759 e-2 e-3 e-9 e-8 arg-1 (TT-Core-nameEq arg-1 e-2))))))))))))
(define Core-Core-case--caseC-32blockC-32inC-32catch-2509 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) arg-5))
(define Core-Core-case--catch-2495 (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (let ((pC-39 (vector 0 e-2))) (Core-Core-case--caseC-32blockC-32inC-32catch-2509 'erased arg-1 arg-2 e-2 pC-39 (arg-2 e-2))))) (else (let ((e-5 (vector-ref sc0 1))) (lambda (eta-0) (vector 1 e-5))))))))
(define Core-Core-case--C-62C-62C-61-2306 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-4)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (lambda (eta-0) (vector 0 e-2)))) (else (let ((e-5 (vector-ref sc0 1))) (arg-3 e-5)))))))
(define Core-Core-throw_Catchable__Core_Error (lambda (arg-0 ext-1 ext-0) (Core-Core-coreFail 'erased ext-1 ext-0)))
(define Core-Core-show_Show__Error (lambda (arg-0) (let ((sc0 arg-0)) (case (vector-ref sc0 0) ((0) (let ((e-0 (vector-ref sc0 1))) (let ((e-2 (vector-ref sc0 3))) (let ((e-3 (vector-ref sc0 4))) (Strings-Types-Prelude-C-43C-43 "Type mismatch: " (Strings-Types-Prelude-C-43C-43 (TT-Core-show_Show__C-40TermC-32C-36varsC-41 e-0 e-2) (Strings-Types-Prelude-C-43C-43 " and " (TT-Core-show_Show__C-40TermC-32C-36varsC-41 e-0 e-3)))))))) ((1) (let ((e-4 (vector-ref sc0 1))) (Strings-Types-Prelude-C-43C-43 "Undefined name " (TT-Core-show_Show__Name e-4)))) ((3) (let ((e-5 (vector-ref sc0 1))) e-5)) ((2) (let ((e-6 (vector-ref sc0 1))) (let ((e-7 (vector-ref sc0 2))) (let ((sc1 e-7)) (case (vector-ref sc1 0) ((0) (Strings-Types-Prelude-C-43C-43 "Patterns for " (Strings-Types-Prelude-C-43C-43 (TT-Core-show_Show__Name e-6) " have different numbers of arguments"))) ((1) (Strings-Types-Prelude-C-43C-43 "Patterns for " (Strings-Types-Prelude-C-43C-43 (TT-Core-show_Show__Name e-6) " require matching on different types"))) ((4) (Strings-Types-Prelude-C-43C-43 "Can't infer type to match in " (TT-Core-show_Show__Name e-6))) ((2) (let ((e-10 (vector-ref sc1 1))) (let ((sc2 e-10)) (let ((e-14 (vector-ref sc2 1))) (let ((e-15 (vector-ref sc2 2))) (let ((sc3 e-15)) (let ((e-19 (vector-ref sc3 2))) (Strings-Types-Prelude-C-43C-43 "Attempt to match on erased argument " (Strings-Types-Prelude-C-43C-43 (TT-Core-show_Show__C-40TermC-32C-36varsC-41 e-14 e-19) (Strings-Types-Prelude-C-43C-43 " in " (TT-Core-show_Show__Name e-6))))))))))) (else (let ((e-11 (vector-ref sc1 1))) (Strings-Types-Prelude-C-43C-43 "Constructor " (Strings-Types-Prelude-C-43C-43 (TT-Core-show_Show__Name e-11) " is not fully applied"))))))))) (else (let ((e-8 (vector-ref sc0 1))) (let ((e-9 (vector-ref sc0 2))) (Strings-Types-Prelude-C-43C-43 "File error (" (Strings-Types-Prelude-C-43C-43 e-8 (Strings-Types-Prelude-C-43C-43 "): " (File-System-show_Show__FileError e-9)))))))))))
(define Core-Core-showPrec_Show__Error (lambda (arg-0 arg-1) (Core-Core-show_Show__Error arg-1)))
(define Core-Core-catch_Catchable__Core_Error (lambda (arg-0 arg-1 arg-2 ext-0) (let ((act-24 (arg-1 ext-0))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (let ((pC-39 (vector 0 e-2))) ((Core-Core-case--caseC-32blockC-32inC-32catch-2509 'erased arg-1 arg-2 e-2 pC-39 (arg-2 e-2)) ext-0)))) (else (let ((e-5 (vector-ref sc0 1))) (vector 1 e-5))))))))
(define Core-Core-__Impl_Show_Error (lambda () (vector 0 (lambda (x) (Core-Core-show_Show__Error x)) (lambda (d) (lambda (x) (Core-Core-showPrec_Show__Error d x))))))
(define Core-Core-__Impl_Catchable_Core_Error (lambda () (vector 0 (lambda (a) (lambda (arg-2409) (lambda (eta-0) (Core-Core-throw_Catchable__Core_Error 'erased arg-2409 eta-0)))) (lambda (a) (lambda (arg-2410) (lambda (arg-2411) (lambda (eta-0) (Core-Core-catch_Catchable__Core_Error 'erased arg-2410 arg-2411 eta-0))))))))
(define Core-Core-when (lambda (arg-0 arg-1) (let ((sc0 arg-0)) (cond ((equal? sc0 0) (arg-1)) (else (lambda (eta-0) (vector 1 (vector 0 ))))))))
(define Core-Core-traverse_ (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((0) (lambda (eta-0) (vector 1 (vector 0 )))) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (lambda (eta-0) (let ((act-24 ((arg-2 e-2) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-4 (vector-ref sc1 1))) (vector 0 e-4))) (else ((Core-Core-traverse_ 'erased 'erased arg-2 e-3) eta-0)))))))))))))
(define Core-Core-traverseC-39 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((0) (lambda (eta-0) (vector 1 (List-Data-reverse 'erased arg-4)))) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (lambda (eta-0) (let ((act-24 ((arg-2 e-2) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-4 (vector-ref sc1 1))) (vector 0 e-4))) (else (let ((e-5 (vector-ref sc1 1))) ((Core-Core-traverseC-39 'erased 'erased arg-2 e-3 (vector 1 e-5 arg-4)) eta-0))))))))))))))
(define Core-Core-traverse (lambda (arg-0 arg-1 arg-2 arg-3) (Core-Core-traverseC-39 'erased 'erased arg-2 arg-3 (vector 0 ))))
(define Binder-Core-Core-traverse (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((0) (let ((e-1 (vector-ref sc0 1))) (let ((e-2 (vector-ref sc0 2))) (let ((e-3 (vector-ref sc0 3))) (lambda (eta-0) (let ((act-24 ((arg-2 e-3) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-4 (vector-ref sc1 1))) (vector 0 e-4))) (else (let ((e-5 (vector-ref sc1 1))) (vector 1 (vector 0 e-1 e-2 e-5)))))))))))) ((1) (let ((e-5 (vector-ref sc0 1))) (let ((e-6 (vector-ref sc0 2))) (let ((e-7 (vector-ref sc0 3))) (lambda (eta-0) (let ((act-24 ((arg-2 e-7) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-8 (vector-ref sc1 1))) (vector 1 (vector 1 e-5 e-6 e-8)))))))))))) ((2) (let ((e-9 (vector-ref sc0 1))) (let ((e-10 (vector-ref sc0 2))) (lambda (eta-0) (let ((act-24 ((arg-2 e-10) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc1 1))) (vector 1 (vector 2 e-9 e-5))))))))))) (else (let ((e-12 (vector-ref sc0 1))) (lambda (eta-0) (let ((act-24 ((arg-2 e-12) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc1 1))) (vector 1 (vector 3 e-5))))))))))))))
(define Core-Core-throw (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (let ((e-2 (vector-ref sc0 1))) (lambda (arg-4) ((e-2 'erased) arg-4))))))
(define Core-Core-Core-runCore (lambda (arg-0 arg-1) arg-1))
(define Core-Core-put (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 ext-0) (let ((act-24 (set-box! arg-3 arg-4))) (vector 1 act-24))))
(define Core-Core-pure (lambda (arg-0 arg-1 ext-0) (vector 1 arg-1)))
(define Core-Core-newRef (lambda (arg-0 arg-1 arg-2 arg-3 ext-0) (let ((act-24 (let ((act-24 ((IORef-Data-newIORef 'erased 'erased (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-45) (lambda (eta-0) (IO-Prelude-map_Functor__IO 'erased 'erased func arg-45 eta-0)))))) (lambda (a) (lambda (arg-112) (lambda (eta-0) arg-112))) (lambda (b) (lambda (a) (lambda (arg-113) (lambda (arg-115) (lambda (eta-0) (let ((act-17 (arg-113 eta-0))) (let ((act-16 (arg-115 eta-0))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-274) (lambda (arg-275) (lambda (eta-0) (let ((act-24 (arg-274 eta-0))) ((arg-275 act-24) eta-0))))))) (lambda (a) (lambda (arg-277) (lambda (eta-0) (let ((act-51 (arg-277 eta-0))) (act-51 eta-0)))))) (lambda (a) (lambda (arg-5832) arg-5832))) arg-3) ext-0))) (vector 1 act-24)))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (vector 1 e-5))))))))
(define Core-Core-log (lambda (ext-0 ext-1) (let ((act-24 ((IO-Prelude-putStrLn 'erased (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-45) (lambda (eta-0) (IO-Prelude-map_Functor__IO 'erased 'erased func arg-45 eta-0)))))) (lambda (a) (lambda (arg-112) (lambda (eta-0) arg-112))) (lambda (b) (lambda (a) (lambda (arg-113) (lambda (arg-115) (lambda (eta-0) (let ((act-17 (arg-113 eta-0))) (let ((act-16 (arg-115 eta-0))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-274) (lambda (arg-275) (lambda (eta-0) (let ((act-24 (arg-274 eta-0))) ((arg-275 act-24) eta-0))))))) (lambda (a) (lambda (arg-277) (lambda (eta-0) (let ((act-51 (arg-277 eta-0))) (act-51 eta-0)))))) (lambda (a) (lambda (arg-5832) arg-5832))) ext-0) ext-1))) (vector 1 act-24))))
(define Core-Core-get (lambda (arg-0 arg-1 arg-2 arg-3 ext-0) (let ((act-24 (unbox arg-3))) (vector 1 act-24))))
(define Core-Core-coreRun (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 ext-0) (let ((act-24 (arg-2 ext-0))) ((Types-Prelude-either 'erased 'erased 'erased (lambda () arg-3) (lambda () arg-4) act-24) ext-0))))
(define Core-Core-coreLift (lambda (arg-0 arg-1 ext-0) (let ((act-24 (arg-1 ext-0))) (vector 1 act-24))))
(define Core-Core-coreFail (lambda (arg-0 arg-1 ext-0) (vector 0 arg-1)))
(define Core-Core-C-62C-62C-61 (lambda (arg-0 arg-1 arg-2 arg-3 ext-0) (let ((act-24 (arg-2 ext-0))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) ((arg-3 e-5) ext-0))))))))
(define IORef-Data-writeIORef (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-2)) (let ((e-2 (vector-ref sc0 2))) ((e-2 'erased) (lambda (eta-0) (set-box! arg-3 arg-4)))))))
(define IORef-Data-readIORef (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-2)) (let ((e-2 (vector-ref sc0 2))) ((e-2 'erased) (lambda (eta-0) (unbox arg-3)))))))
(define IORef-Data-prim__writeIORef (lambda (arg-0 arg-1 arg-2 arg-3) (set-box! arg-1 arg-2)))
(define IORef-Data-prim__readIORef (lambda (arg-0 arg-1 arg-2) (unbox arg-1)))
(define IORef-Data-prim__newIORef (lambda (arg-0 arg-1 arg-2) (box arg-1)))
(define IORef-Data-newIORef (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 (let ((sc1 arg-2)) (let ((e-1 (vector-ref sc1 1))) e-1)))) (let ((e-2 (vector-ref sc0 2))) ((((e-2 'erased) 'erased) (let ((sc1 arg-2)) (let ((e-4 (vector-ref sc1 2))) ((e-4 'erased) (lambda (eta-0) (box arg-3)))))) (lambda (m) (let ((sc1 (let ((sc2 (let ((sc3 arg-2)) (let ((e-5 (vector-ref sc3 1))) e-5)))) (let ((e-6 (vector-ref sc2 1))) e-6)))) (let ((e-5 (vector-ref sc1 2))) ((e-5 'erased) m)))))))))
(define Context-Core-case--updateDef-5212 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-4)) (case (vector-ref sc0 0) ((1) (let ((e-1 (vector-ref sc0 1))) (lambda (eta-0) (Context-Core-addDef arg-2 arg-1 (arg-0 e-1) eta-0)))) (else (lambda (eta-0) (Core-Core-throw_Catchable__Core_Error 'erased (vector 1 arg-1) eta-0)))))))
(define Context-Core-updateDef (lambda (arg-0 arg-1 arg-2 ext-0) (let ((act-24 (let ((act-24 (unbox arg-0))) (vector 1 act-24)))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (let ((act-25 (Context-Core-lookupDef arg-1 e-5 ext-0))) (let ((sc1 act-25)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-6 (vector-ref sc1 1))) (let ((sc2 e-6)) (case (vector-ref sc2 0) ((1) (let ((e-1 (vector-ref sc2 1))) (Context-Core-addDef arg-0 arg-1 (arg-2 e-1) ext-0))) (else (Core-Core-throw_Catchable__Core_Error 'erased (vector 1 arg-1) ext-0))))))))))))))))
(define GlobalDef-Context-Core-type (lambda (arg-0) (let ((sc0 arg-0)) (let ((e-0 (vector-ref sc0 1))) e-0))))
(define Context-Core-newDef (lambda (arg-0 arg-1) (vector 0 arg-0 arg-1)))
(define Context-Core-mapDefsC-39 (lambda (arg-0 arg-1 arg-2 ext-0) (let ((act-24 (let ((act-24 (unbox arg-1))) (vector 1 act-24)))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (vector 1 (Types-Prelude-map_Functor__List 'erased 'erased arg-2 (SortedMap-Data-toList 'erased 'erased e-5))))))))))
(define Context-Core-lookupDef (lambda (arg-0 arg-1 ext-0) (vector 1 (SortedMap-Data-lookup 'erased 'erased arg-0 arg-1))))
(define Context-Core-initDefs (lambda (ext-0) (vector 1 (SortedMap-Data-empty 'erased 'erased (vector 0 (vector 0 (lambda (arg-2) (lambda (arg-3) (TT-Core-C-61C-61_Eq__Name arg-2 arg-3))) (lambda (arg-4) (lambda (arg-5) (TT-Core-C-47C-61_Eq__Name arg-4 arg-5)))) (lambda (arg-369) (lambda (arg-370) (TT-Core-compare_Ord__Name arg-369 arg-370))) (lambda (arg-371) (lambda (arg-372) (TT-Core-C-60_Ord__Name arg-371 arg-372))) (lambda (arg-373) (lambda (arg-374) (TT-Core-C-62_Ord__Name arg-373 arg-374))) (lambda (arg-375) (lambda (arg-376) (TT-Core-C-60C-61_Ord__Name arg-375 arg-376))) (lambda (arg-377) (lambda (arg-378) (TT-Core-C-62C-61_Ord__Name arg-377 arg-378))) (lambda (arg-379) (lambda (arg-380) (TT-Core-max_Ord__Name arg-379 arg-380))) (lambda (arg-381) (lambda (arg-382) (TT-Core-min_Ord__Name arg-381 arg-382))))))))
(define GlobalDef-Context-Core-definition (lambda (arg-0) (let ((sc0 arg-0)) (let ((e-1 (vector-ref sc0 2))) e-1))))
(define Context-Core-clearDefs (lambda (arg-0 ext-0) (vector 1 (SortedMap-Data-empty 'erased 'erased (vector 0 (vector 0 (lambda (arg-2) (lambda (arg-3) (TT-Core-C-61C-61_Eq__Name arg-2 arg-3))) (lambda (arg-4) (lambda (arg-5) (TT-Core-C-47C-61_Eq__Name arg-4 arg-5)))) (lambda (arg-369) (lambda (arg-370) (TT-Core-compare_Ord__Name arg-369 arg-370))) (lambda (arg-371) (lambda (arg-372) (TT-Core-C-60_Ord__Name arg-371 arg-372))) (lambda (arg-373) (lambda (arg-374) (TT-Core-C-62_Ord__Name arg-373 arg-374))) (lambda (arg-375) (lambda (arg-376) (TT-Core-C-60C-61_Ord__Name arg-375 arg-376))) (lambda (arg-377) (lambda (arg-378) (TT-Core-C-62C-61_Ord__Name arg-377 arg-378))) (lambda (arg-379) (lambda (arg-380) (TT-Core-max_Ord__Name arg-379 arg-380))) (lambda (arg-381) (lambda (arg-382) (TT-Core-min_Ord__Name arg-381 arg-382))))))))
(define Context-Core-addDef (lambda (arg-0 arg-1 arg-2 ext-0) (let ((act-24 (let ((act-24 (unbox arg-0))) (vector 1 act-24)))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (let ((act-25 (set-box! arg-0 (SortedMap-Data-insert 'erased 'erased arg-1 arg-2 e-5)))) (vector 1 act-25)))))))))
(define Context-Core-Defs (lambda () (vector "Data.SortedMap.SortedMap" (vector "Core.TT.Name" ) (vector "Core.Context.GlobalDef" ))))
(define CaseTree-Core-case--mkTerm-3739 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((1) (let ((e-1 (vector-ref sc0 1))) (vector 0 e-1)))(else (vector 1 (vector 1 ) arg-0))))))
(define CaseTree-Core-case--insertCaseNames-3491 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8) (vector 0 arg-0 (List-Types-Prelude-C-43C-43 'erased arg-2 (List-Types-Prelude-C-43C-43 'erased arg-7 arg-1)) arg-8 (TT-Core-insertNames arg-2 arg-1 arg-7 arg-4) (Types-Prelude-map_Functor__List 'erased 'erased (lambda (eta-0) (CaseTree-Core-insertCaseAltNames arg-2 arg-1 arg-7 eta-0)) arg-3))))
(define CaseTree-Core-weaken_Weaken__CaseTree (lambda (arg-0 arg-1 ext-0) (CaseTree-Core-weakenNs_Weaken__CaseTree arg-1 (vector 1 arg-0 (vector 0 )) ext-0)))
(define CaseTree-Core-weakenNs_Weaken__CaseTree (lambda (arg-0 arg-1 arg-2) (CaseTree-Core-insertCaseNames (vector 0 ) arg-0 arg-1 arg-2)))
(define CaseTree-Core-__Impl_Weaken_CaseTree (lambda () (vector 0 (lambda (n) (lambda (vars) (lambda (arg-5303) (CaseTree-Core-weaken_Weaken__CaseTree n vars arg-5303)))) (lambda (vars) (lambda (ns) (lambda (arg-5307) (CaseTree-Core-weakenNs_Weaken__CaseTree vars ns arg-5307)))))))
(define CaseTree-Core-mkTerm (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (case (vector-ref sc0 0) ((0) (let ((e-0 (vector-ref sc0 1))) (let ((e-1 (vector-ref sc0 2))) (let ((e-2 (vector-ref sc0 3))) (let ((e-3 (vector-ref sc0 4))) (TT-Core-apply 'erased (vector 1 (vector 2 e-1 e-2) e-0) (Types-Prelude-map_Functor__List 'erased 'erased (lambda (eta-0) (CaseTree-Core-mkTerm arg-0 eta-0)) e-3))))))) ((1) (let ((e-4 (vector-ref sc0 1))) (CaseTree-Core-case--mkTerm-3739 e-4 arg-0 (TT-Core-isVar e-4 arg-0)))) (else (let ((e-5 (vector-ref sc0 1))) (TT-Core-embed 'erased 'erased e-5)))))))
(define CaseTree-Core-mkPatC-39 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((1) (let ((e-1 (vector-ref sc0 1))) (let ((e-2 (vector-ref sc0 2))) (let ((sc1 e-1)) (case (vector-ref sc1 0) ((1) (vector 1 e-2)) ((2) (let ((e-6 (vector-ref sc1 1))) (let ((e-7 (vector-ref sc1 2))) (vector 0 e-2 e-6 e-7 arg-0))))(else (vector 2 arg-1))))))) ((4) (let ((e-4 (vector-ref sc0 1))) (let ((e-5 (vector-ref sc0 2))) (let ((parg (CaseTree-Core-mkPatC-39 (vector 0 ) e-5 e-5))) (CaseTree-Core-mkPatC-39 (vector 1 parg arg-0) arg-1 e-4)))))(else (vector 2 arg-1))))))
(define CaseTree-Core-insertCaseNames (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((0) (let ((e-0 (vector-ref sc0 1))) (let ((e-2 (vector-ref sc0 3))) (let ((e-4 (vector-ref sc0 4))) (let ((e-5 (vector-ref sc0 5))) (CaseTree-Core-case--insertCaseNames-3491 e-0 arg-1 arg-0 e-5 e-4 e-2 'erased arg-2 (TT-Core-insertNVarNames 'erased 'erased arg-0 arg-2 e-2 'erased))))))) ((1) (let ((e-7 (vector-ref sc0 1))) (vector 1 (TT-Core-insertNames arg-0 arg-1 arg-2 e-7)))) ((2) (let ((e-9 (vector-ref sc0 1))) (vector 2 e-9))) (else (vector 3 ))))))
(define CaseTree-Core-insertCaseAltNames (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((0) (let ((e-1 (vector-ref sc0 1))) (let ((e-2 (vector-ref sc0 2))) (let ((e-3 (vector-ref sc0 3))) (let ((e-4 (vector-ref sc0 4))) (vector 0 e-1 e-2 e-3 (CaseTree-Core-insertCaseNames (List-Types-Prelude-C-43C-43 'erased e-3 arg-0) arg-1 arg-2 e-4))))))) (else (let ((e-6 (vector-ref sc0 1))) (vector 1 (CaseTree-Core-insertCaseNames arg-0 arg-1 arg-2 e-6))))))))
(define CaseTree-Core-argToPat (lambda (arg-0) (CaseTree-Core-mkPatC-39 (vector 0 ) arg-0 arg-0)))
(define Synthesise-Synthesis-case--caseC-32blockC-32inC-32run-7849 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (let ((sc0 arg-6)) (case (vector-ref sc0 0) ((0) (lambda (eta-0) (let ((act-24 (Core-Core-log "none" eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (vector 1 ""))))))) ((1) (lambda (eta-0) (let ((act-24 (Core-Core-log "pm" eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (vector 1 ""))))))) ((2) (lambda (eta-0) (let ((act-24 (Core-Core-log "dcon" eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-4 (vector-ref sc1 1))) (vector 0 e-4))) (else (vector 1 ""))))))) ((3) (lambda (eta-0) (let ((act-24 (Core-Core-log "tcon" eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (vector 1 ""))))))) ((4) (lambda (eta-0) (let ((act-24 (Core-Core-log "hole" eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (vector 1 ""))))))) ((5) (lambda (eta-0) (let ((act-24 (Core-Core-log "meta" eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (vector 1 ""))))))) (else (lambda (eta-0) (let ((act-24 (Core-Core-log "guess" eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (vector 1 "")))))))))))
(define Synthesise-Synthesis-case--run-7830 (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((1) (let ((e-1 (vector-ref sc0 1))) (lambda (eta-0) (let ((act-24 (let ((act-24 (unbox arg-1))) (vector 1 act-24)))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc1 1))) (let ((_-0 (vector 1 e-1))) ((Synthesise-Synthesis-case--caseC-32blockC-32inC-32run-7849 arg-0 arg-1 arg-2 e-1 _-0 e-5 (let ((sc2 e-1)) (let ((e-2 (vector-ref sc2 2))) e-2))) eta-0))))))))))(else (lambda (eta-0) (vector 1 "Invalid Name")))))))
(define Synthesise-Synthesis-run (lambda (arg-0 arg-1 arg-2 ext-0) (let ((act-24 (let ((act-24 (let ((act-24 (unbox arg-0))) (vector 1 act-24)))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (Context-Core-lookupDef arg-2 e-5 ext-0)))))))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (let ((sc1 e-5)) (case (vector-ref sc1 0) ((1) (let ((e-1 (vector-ref sc1 1))) (let ((act-25 (let ((act-25 (unbox arg-1))) (vector 1 act-25)))) (let ((sc2 act-25)) (case (vector-ref sc2 0) ((0) (let ((e-2 (vector-ref sc2 1))) (vector 0 e-2))) (else (let ((e-6 (vector-ref sc2 1))) (let ((_-0 (vector 1 e-1))) ((Synthesise-Synthesis-case--caseC-32blockC-32inC-32run-7849 arg-2 arg-1 arg-0 e-1 _-0 e-6 (let ((sc3 e-1)) (let ((e-2 (vector-ref sc3 2))) e-2))) ext-0)))))))))(else (vector 1 "Invalid Name")))))))))))
(define TTImp-TTImp-apply (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (case (vector-ref sc0 0) ((0) arg-0) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (TTImp-TTImp-apply (vector 4 arg-0 e-2) e-3))))))))
(define Term-Elab-TTImp-case--checkTerm-1744 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (let ((sc0 arg-7)) (case (vector-ref sc0 0) ((0) (lambda (eta-0) (let ((act-24 ((Normalise-Core-getTerm 'erased arg-2) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc1 1))) (let ((act-25 ((UnifyState-Core-newMeta arg-0 arg-5 arg-4 arg-3 arg-1 e-5 (vector 5 arg-0 arg-3 e-5)) eta-0))) (let ((sc2 act-25)) (case (vector-ref sc2 0) ((0) (let ((e-2 (vector-ref sc2 1))) (vector 0 e-2))) (else (let ((e-6 (vector-ref sc2 1))) (vector 1 (vector 0 e-6 arg-2))))))))))))))(else (lambda (eta-0) (Core-Core-throw_Catchable__Core_Error 'erased (vector 3 (Strings-Types-Prelude-C-43C-43 (TT-Core-show_Show__Name arg-1) " already defined")) eta-0)))))))
(define Term-Elab-TTImp-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32checkTerm-1424 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11) (let ((sc0 arg-10)) (case (vector-ref sc0 0) ((0) (let ((e-1 (vector-ref sc0 1))) (lambda (eta-0) (Core-Core-log (TT-Core-show_Show__Name e-1) eta-0)))) ((1) (let ((e-5 (vector-ref sc0 1))) (let ((sc1 e-5)) (case (vector-ref sc1 0) ((0) (let ((e-21 (vector-ref sc1 1))) (lambda (eta-0) (Core-Core-log (Strings-Types-Prelude-C-43C-43 "loc" (Show-Prelude-show_Show__Nat e-21)) eta-0)))) ((1) (let ((e-24 (vector-ref sc1 1))) (let ((e-25 (vector-ref sc1 2))) (lambda (eta-0) (Core-Core-log (Strings-Types-Prelude-C-43C-43 "ref" (Strings-Types-Prelude-C-43C-43 (TT-Core-show_Show__NameType e-24) (Strings-Types-Prelude-C-43C-43 " " (TT-Core-show_Show__Name e-25)))) eta-0))))) (else (let ((e-27 (vector-ref sc1 1))) (lambda (eta-0) (Core-Core-log (Strings-Types-Prelude-C-43C-43 "Meta" (TT-Core-show_Show__Name e-27)) eta-0)))))))) ((2) (let ((e-8 (vector-ref sc0 1))) (lambda (eta-0) (Core-Core-log (Strings-Types-Prelude-C-43C-43 "data " (TT-Core-show_Show__Name e-8)) eta-0)))) ((3) (let ((e-13 (vector-ref sc0 1))) (lambda (eta-0) (Core-Core-log (Strings-Types-Prelude-C-43C-43 "typeC " (TT-Core-show_Show__Name e-13)) eta-0)))) ((4) (lambda (eta-0) (Core-Core-log "NTY" eta-0))) (else (lambda (eta-0) (Core-Core-log "erased" eta-0)))))))
(define Term-Elab-TTImp-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32checkTerm-1337 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-13 arg-14 arg-15 arg-16 arg-17) (let ((sc0 arg-17)) (let ((e-2 (vector-ref sc0 1))) (lambda (eta-0) (let ((act-24 (((arg-13 arg-16) (Normalise-Core-toClosure 'erased arg-4 e-2)) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-4 (vector-ref sc1 1))) (vector 0 e-4))) (else (let ((e-5 (vector-ref sc1 1))) ((Term-Elab-TTImp-checkExp arg-0 arg-6 arg-5 arg-4 (vector 4 arg-7 e-2) (Normalise-Core-glueBack arg-0 arg-16 arg-4 e-5) arg-3) eta-0)))))))))))
(define Term-Elab-TTImp-case--caseC-32blockC-32inC-32checkTerm-1284 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10) (let ((sc0 arg-10)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 2))) (let ((e-3 (vector-ref sc0 3))) (let ((sc1 e-2)) (case (vector-ref sc1 0) ((1) (let ((e-7 (vector-ref sc1 3))) (lambda (eta-0) (let ((act-24 (let ((act-24 (unbox arg-6))) (vector 1 act-24)))) (let ((sc2 act-24)) (case (vector-ref sc2 0) ((0) (let ((e-4 (vector-ref sc2 1))) (vector 0 e-4))) (else (let ((e-8 (vector-ref sc2 1))) (let ((act-25 ((Term-Elab-TTImp-checkTerm arg-0 arg-6 arg-5 arg-4 arg-1 (vector 1 (Normalise-Core-glueBack arg-0 e-8 arg-4 e-7))) eta-0))) (let ((sc3 act-25)) (case (vector-ref sc3 0) ((0) (let ((e-4 (vector-ref sc3 1))) (vector 0 e-4))) (else (let ((e-9 (vector-ref sc3 1))) (let ((sc4 e-9)) (let ((e-10 (vector-ref sc4 1))) (let ((act-26 (((e-3 e-8) (Normalise-Core-toClosure 'erased arg-4 e-10)) eta-0))) (let ((sc5 act-26)) (case (vector-ref sc5 0) ((0) (let ((e-11 (vector-ref sc5 1))) (vector 0 e-11))) (else (let ((e-11 (vector-ref sc5 1))) ((Term-Elab-TTImp-checkExp arg-0 arg-6 arg-5 arg-4 (vector 4 arg-7 e-10) (Normalise-Core-glueBack arg-0 e-8 arg-4 e-11) arg-3) eta-0)))))))))))))))))))))(else (lambda (eta-0) (let ((act-24 (let ((sc1 arg-10)) (case (vector-ref sc1 0) ((0) (let ((e-6 (vector-ref sc1 1))) (Core-Core-log (TT-Core-show_Show__Name e-6) eta-0))) ((1) (let ((e-5 (vector-ref sc1 1))) (let ((sc2 e-5)) (case (vector-ref sc2 0) ((0) (let ((e-21 (vector-ref sc2 1))) (Core-Core-log (Strings-Types-Prelude-C-43C-43 "loc" (Show-Prelude-show_Show__Nat e-21)) eta-0))) ((1) (let ((e-24 (vector-ref sc2 1))) (let ((e-25 (vector-ref sc2 2))) (Core-Core-log (Strings-Types-Prelude-C-43C-43 "ref" (Strings-Types-Prelude-C-43C-43 (TT-Core-show_Show__NameType e-24) (Strings-Types-Prelude-C-43C-43 " " (TT-Core-show_Show__Name e-25)))) eta-0)))) (else (let ((e-27 (vector-ref sc2 1))) (Core-Core-log (Strings-Types-Prelude-C-43C-43 "Meta" (TT-Core-show_Show__Name e-27)) eta-0))))))) ((2) (let ((e-8 (vector-ref sc1 1))) (Core-Core-log (Strings-Types-Prelude-C-43C-43 "data " (TT-Core-show_Show__Name e-8)) eta-0))) ((3) (let ((e-13 (vector-ref sc1 1))) (Core-Core-log (Strings-Types-Prelude-C-43C-43 "typeC " (TT-Core-show_Show__Name e-13)) eta-0))) ((4) (Core-Core-log "NTY" eta-0)) (else (Core-Core-log "erased" eta-0)))))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-4 (vector-ref sc1 1))) (vector 0 e-4))) (else (Core-Core-throw_Catchable__Core_Error 'erased (vector 3 "Not a function type") eta-0))))))))))))(else (lambda (eta-0) (let ((act-24 (let ((sc0 arg-10)) (case (vector-ref sc0 0) ((0) (let ((e-1 (vector-ref sc0 1))) (Core-Core-log (TT-Core-show_Show__Name e-1) eta-0))) ((1) (let ((e-5 (vector-ref sc0 1))) (let ((sc1 e-5)) (case (vector-ref sc1 0) ((0) (let ((e-21 (vector-ref sc1 1))) (Core-Core-log (Strings-Types-Prelude-C-43C-43 "loc" (Show-Prelude-show_Show__Nat e-21)) eta-0))) ((1) (let ((e-24 (vector-ref sc1 1))) (let ((e-25 (vector-ref sc1 2))) (Core-Core-log (Strings-Types-Prelude-C-43C-43 "ref" (Strings-Types-Prelude-C-43C-43 (TT-Core-show_Show__NameType e-24) (Strings-Types-Prelude-C-43C-43 " " (TT-Core-show_Show__Name e-25)))) eta-0)))) (else (let ((e-27 (vector-ref sc1 1))) (Core-Core-log (Strings-Types-Prelude-C-43C-43 "Meta" (TT-Core-show_Show__Name e-27)) eta-0))))))) ((2) (let ((e-8 (vector-ref sc0 1))) (Core-Core-log (Strings-Types-Prelude-C-43C-43 "data " (TT-Core-show_Show__Name e-8)) eta-0))) ((3) (let ((e-13 (vector-ref sc0 1))) (Core-Core-log (Strings-Types-Prelude-C-43C-43 "typeC " (TT-Core-show_Show__Name e-13)) eta-0))) ((4) (Core-Core-log "NTY" eta-0)) (else (Core-Core-log "erased" eta-0)))))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (Core-Core-throw_Catchable__Core_Error 'erased (vector 3 "Not a function type") eta-0)))))))))))
(define Term-Elab-TTImp-case--checkTerm-1255 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (let ((sc0 arg-7)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (lambda (eta-0) (let ((act-24 ((Normalise-Core-getNF 'erased arg-6 e-3) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-4 (vector-ref sc1 1))) (vector 0 e-4))) (else (let ((e-5 (vector-ref sc1 1))) (let ((sc2 e-5)) (case (vector-ref sc2 0) ((0) (let ((e-6 (vector-ref sc2 2))) (let ((e-4 (vector-ref sc2 3))) (let ((sc3 e-6)) (case (vector-ref sc3 0) ((1) (let ((e-7 (vector-ref sc3 3))) (let ((act-25 (let ((act-25 (unbox arg-6))) (vector 1 act-25)))) (let ((sc4 act-25)) (case (vector-ref sc4 0) ((0) (let ((e-10 (vector-ref sc4 1))) (vector 0 e-10))) (else (let ((e-10 (vector-ref sc4 1))) (let ((act-26 ((Term-Elab-TTImp-checkTerm arg-0 arg-6 arg-5 arg-4 arg-1 (vector 1 (Normalise-Core-glueBack arg-0 e-10 arg-4 e-7))) eta-0))) (let ((sc5 act-26)) (case (vector-ref sc5 0) ((0) (let ((e-11 (vector-ref sc5 1))) (vector 0 e-11))) (else (let ((e-11 (vector-ref sc5 1))) (let ((sc6 e-11)) (let ((e-13 (vector-ref sc6 1))) (let ((act-27 (((e-4 e-10) (Normalise-Core-toClosure 'erased arg-4 e-13)) eta-0))) (let ((sc7 act-27)) (case (vector-ref sc7 0) ((0) (let ((e-14 (vector-ref sc7 1))) (vector 0 e-14))) (else (let ((e-14 (vector-ref sc7 1))) ((Term-Elab-TTImp-checkExp arg-0 arg-6 arg-5 arg-4 (vector 4 e-2 e-13) (Normalise-Core-glueBack arg-0 e-10 arg-4 e-14) arg-3) eta-0))))))))))))))))))))(else (let ((act-25 (let ((sc3 e-5)) (case (vector-ref sc3 0) ((0) (let ((e-9 (vector-ref sc3 1))) (Core-Core-log (TT-Core-show_Show__Name e-9) eta-0))) ((1) (let ((e-8 (vector-ref sc3 1))) (let ((sc4 e-8)) (case (vector-ref sc4 0) ((0) (let ((e-21 (vector-ref sc4 1))) (Core-Core-log (Strings-Types-Prelude-C-43C-43 "loc" (Show-Prelude-show_Show__Nat e-21)) eta-0))) ((1) (let ((e-24 (vector-ref sc4 1))) (let ((e-25 (vector-ref sc4 2))) (Core-Core-log (Strings-Types-Prelude-C-43C-43 "ref" (Strings-Types-Prelude-C-43C-43 (TT-Core-show_Show__NameType e-24) (Strings-Types-Prelude-C-43C-43 " " (TT-Core-show_Show__Name e-25)))) eta-0)))) (else (let ((e-27 (vector-ref sc4 1))) (Core-Core-log (Strings-Types-Prelude-C-43C-43 "Meta" (TT-Core-show_Show__Name e-27)) eta-0))))))) ((2) (let ((e-8 (vector-ref sc3 1))) (Core-Core-log (Strings-Types-Prelude-C-43C-43 "data " (TT-Core-show_Show__Name e-8)) eta-0))) ((3) (let ((e-13 (vector-ref sc3 1))) (Core-Core-log (Strings-Types-Prelude-C-43C-43 "typeC " (TT-Core-show_Show__Name e-13)) eta-0))) ((4) (Core-Core-log "NTY" eta-0)) (else (Core-Core-log "erased" eta-0)))))) (let ((sc3 act-25)) (case (vector-ref sc3 0) ((0) (let ((e-7 (vector-ref sc3 1))) (vector 0 e-7))) (else (Core-Core-throw_Catchable__Core_Error 'erased (vector 3 "Not a function type") eta-0)))))))))))(else (let ((act-25 (let ((sc2 e-5)) (case (vector-ref sc2 0) ((0) (let ((e-1 (vector-ref sc2 1))) (Core-Core-log (TT-Core-show_Show__Name e-1) eta-0))) ((1) (let ((e-7 (vector-ref sc2 1))) (let ((sc3 e-7)) (case (vector-ref sc3 0) ((0) (let ((e-21 (vector-ref sc3 1))) (Core-Core-log (Strings-Types-Prelude-C-43C-43 "loc" (Show-Prelude-show_Show__Nat e-21)) eta-0))) ((1) (let ((e-24 (vector-ref sc3 1))) (let ((e-25 (vector-ref sc3 2))) (Core-Core-log (Strings-Types-Prelude-C-43C-43 "ref" (Strings-Types-Prelude-C-43C-43 (TT-Core-show_Show__NameType e-24) (Strings-Types-Prelude-C-43C-43 " " (TT-Core-show_Show__Name e-25)))) eta-0)))) (else (let ((e-27 (vector-ref sc3 1))) (Core-Core-log (Strings-Types-Prelude-C-43C-43 "Meta" (TT-Core-show_Show__Name e-27)) eta-0))))))) ((2) (let ((e-8 (vector-ref sc2 1))) (Core-Core-log (Strings-Types-Prelude-C-43C-43 "data " (TT-Core-show_Show__Name e-8)) eta-0))) ((3) (let ((e-13 (vector-ref sc2 1))) (Core-Core-log (Strings-Types-Prelude-C-43C-43 "typeC " (TT-Core-show_Show__Name e-13)) eta-0))) ((4) (Core-Core-log "NTY" eta-0)) (else (Core-Core-log "erased" eta-0)))))) (let ((sc2 act-25)) (case (vector-ref sc2 0) ((0) (let ((e-4 (vector-ref sc2 1))) (vector 0 e-4))) (else (Core-Core-throw_Catchable__Core_Error 'erased (vector 3 "Not a function type") eta-0)))))))))))))))))))
(define Term-Elab-TTImp-case--caseC-32blockC-32inC-32checkTerm-1195 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12) (let ((sc0 arg-12)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (lambda (eta-0) (let ((act-24 ((Normalise-Core-getTerm 'erased e-3) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-4 (vector-ref sc1 1))) (vector 0 e-4))) (else (let ((e-5 (vector-ref sc1 1))) ((Term-Elab-TTImp-checkExp arg-0 arg-7 arg-6 arg-5 (vector 3 arg-3 (vector 2 arg-3 arg-8) e-2) (Normalise-Core-gnf arg-0 arg-5 (vector 3 arg-3 (vector 3 arg-8) e-5)) arg-4) eta-0))))))))))))
(define Term-Elab-TTImp-case--checkTerm-1153 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8) (let ((sc0 arg-8)) (let ((e-2 (vector-ref sc0 1))) (let ((envC-39 (vector 1 (vector 2 arg-3 e-2) arg-5))) (lambda (eta-0) (let ((act-24 ((Term-Elab-TTImp-checkTerm (vector 1 arg-3 arg-0) arg-7 arg-6 envC-39 arg-1 (vector 0 )) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-4 (vector-ref sc1 1))) (vector 0 e-4))) (else (let ((e-5 (vector-ref sc1 1))) (let ((sc2 e-5)) (let ((e-6 (vector-ref sc2 1))) (let ((e-4 (vector-ref sc2 2))) (let ((act-25 ((Normalise-Core-getTerm 'erased e-4) eta-0))) (let ((sc3 act-25)) (case (vector-ref sc3 0) ((0) (let ((e-7 (vector-ref sc3 1))) (vector 0 e-7))) (else (let ((e-7 (vector-ref sc3 1))) ((Term-Elab-TTImp-checkExp arg-0 arg-7 arg-6 arg-5 (vector 3 arg-3 (vector 2 arg-3 e-2) e-6) (Normalise-Core-gnf arg-0 arg-5 (vector 3 arg-3 (vector 3 e-2) e-7)) arg-4) eta-0))))))))))))))))))))
(define Term-Elab-TTImp-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32checkTerm-1025 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-13 arg-14 arg-15 arg-16 arg-17 arg-18 arg-19 arg-20 arg-21 arg-22 arg-23 arg-24) (let ((sc0 arg-24)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (lambda (eta-0) (let ((act-24 ((Normalise-Core-getTerm 'erased e-3) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-4 (vector-ref sc1 1))) (vector 0 e-4))) (else (let ((e-5 (vector-ref sc1 1))) ((Term-Elab-TTImp-checkExp arg-0 arg-8 arg-7 arg-6 (vector 3 arg-9 (vector 0 arg-9 arg-4 arg-10) e-2) (Normalise-Core-gnf arg-0 arg-6 (vector 3 arg-9 (vector 1 arg-9 arg-4 arg-10) e-5)) (vector 1 arg-5)) eta-0))))))))))))
(define Term-Elab-TTImp-case--caseC-32blockC-32inC-32checkTerm-956 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-13 arg-14 arg-15 arg-16) (let ((sc0 arg-16)) (case (vector-ref sc0 0) ((3) (let ((e-2 (vector-ref sc0 2))) (let ((e-3 (vector-ref sc0 3))) (let ((sc1 e-2)) (case (vector-ref sc1 0) ((1) (let ((envC-39 (vector 1 (vector 0 arg-9 arg-4 arg-10) arg-6))) (let ((scty (TT-Core-renameTop 'erased 'erased arg-9 e-3))) (lambda (eta-0) (let ((act-24 ((Term-Elab-TTImp-checkTerm (vector 1 arg-9 arg-0) arg-8 arg-7 envC-39 arg-1 (vector 1 (Normalise-Core-gnf (vector 1 arg-9 arg-0) envC-39 scty))) eta-0))) (let ((sc2 act-24)) (case (vector-ref sc2 0) ((0) (let ((e-4 (vector-ref sc2 1))) (vector 0 e-4))) (else (let ((e-8 (vector-ref sc2 1))) (let ((sc3 e-8)) (let ((e-9 (vector-ref sc3 1))) (let ((e-4 (vector-ref sc3 2))) (let ((act-25 ((Normalise-Core-getTerm 'erased e-4) eta-0))) (let ((sc4 act-25)) (case (vector-ref sc4 0) ((0) (let ((e-10 (vector-ref sc4 1))) (vector 0 e-10))) (else (let ((e-10 (vector-ref sc4 1))) ((Term-Elab-TTImp-checkExp arg-0 arg-8 arg-7 arg-6 (vector 3 arg-9 (vector 0 arg-9 arg-4 arg-10) e-9) (Normalise-Core-gnf arg-0 arg-6 (vector 3 arg-9 (vector 1 arg-9 arg-4 arg-10) e-10)) (vector 1 arg-5)) eta-0))))))))))))))))))(else (lambda (eta-0) (Core-Core-throw_Catchable__Core_Error 'erased (vector 3 "Lambda must have a function type") eta-0))))))))(else (lambda (eta-0) (Core-Core-throw_Catchable__Core_Error 'erased (vector 3 "Lambda must have a function type") eta-0)))))))
(define Term-Elab-TTImp-case--checkTerm-894 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10) (let ((sc0 arg-10)) (let ((e-2 (vector-ref sc0 1))) (lambda (eta-0) (let ((act-24 ((Normalise-Core-getNF 'erased arg-8 arg-5) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-4 (vector-ref sc1 1))) (vector 0 e-4))) (else (let ((e-5 (vector-ref sc1 1))) (let ((act-25 (let ((act-25 (unbox arg-8))) (vector 1 act-25)))) (let ((sc2 act-25)) (case (vector-ref sc2 0) ((0) (let ((e-4 (vector-ref sc2 1))) (vector 0 e-4))) (else (let ((e-6 (vector-ref sc2 1))) (let ((act-26 (Normalise-Core-quote_Quote__NF arg-0 e-6 arg-6 e-5 eta-0))) (let ((sc3 act-26)) (case (vector-ref sc3 0) ((0) (let ((e-4 (vector-ref sc3 1))) (vector 0 e-4))) (else (let ((e-7 (vector-ref sc3 1))) (let ((sc4 e-7)) (case (vector-ref sc4 0) ((3) (let ((e-8 (vector-ref sc4 2))) (let ((e-4 (vector-ref sc4 3))) (let ((sc5 e-8)) (case (vector-ref sc5 0) ((1) (let ((envC-39 (vector 1 (vector 0 arg-9 arg-4 e-2) arg-6))) (let ((scty (TT-Core-renameTop 'erased 'erased arg-9 e-4))) (let ((act-27 ((Term-Elab-TTImp-checkTerm (vector 1 arg-9 arg-0) arg-8 arg-7 envC-39 arg-1 (vector 1 (Normalise-Core-gnf (vector 1 arg-9 arg-0) envC-39 scty))) eta-0))) (let ((sc6 act-27)) (case (vector-ref sc6 0) ((0) (let ((e-12 (vector-ref sc6 1))) (vector 0 e-12))) (else (let ((e-12 (vector-ref sc6 1))) (let ((sc7 e-12)) (let ((e-14 (vector-ref sc7 1))) (let ((e-13 (vector-ref sc7 2))) (let ((act-28 ((Normalise-Core-getTerm 'erased e-13) eta-0))) (let ((sc8 act-28)) (case (vector-ref sc8 0) ((0) (let ((e-15 (vector-ref sc8 1))) (vector 0 e-15))) (else (let ((e-15 (vector-ref sc8 1))) ((Term-Elab-TTImp-checkExp arg-0 arg-8 arg-7 arg-6 (vector 3 arg-9 (vector 0 arg-9 arg-4 e-2) e-14) (Normalise-Core-gnf arg-0 arg-6 (vector 3 arg-9 (vector 1 arg-9 arg-4 e-2) e-15)) (vector 1 arg-5)) eta-0)))))))))))))))))(else (Core-Core-throw_Catchable__Core_Error 'erased (vector 3 "Lambda must have a function type") eta-0)))))))(else (Core-Core-throw_Catchable__Core_Error 'erased (vector 3 "Lambda must have a function type") eta-0))))))))))))))))))))))))
(define Term-Elab-TTImp-case--caseC-32blockC-32inC-32checkTerm-817 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-13 arg-14) (let ((sc0 arg-14)) (let ((e-2 (vector-ref sc0 1))) (Term-Elab-TTImp-checkExp arg-0 arg-8 arg-7 arg-6 (vector 3 arg-9 (vector 1 arg-9 arg-4 arg-10) e-2) (Normalise-Core-gType 'erased) arg-5)))))
(define Term-Elab-TTImp-case--checkTerm-769 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10) (let ((sc0 arg-10)) (let ((e-2 (vector-ref sc0 1))) (let ((envC-39 (vector 1 (vector 1 arg-9 arg-4 e-2) arg-6))) (lambda (eta-0) (let ((act-24 ((Term-Elab-TTImp-checkTerm (vector 1 arg-9 arg-0) arg-8 arg-7 envC-39 arg-1 (vector 1 (Normalise-Core-gType 'erased))) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-4 (vector-ref sc1 1))) (vector 0 e-4))) (else (let ((e-5 (vector-ref sc1 1))) (let ((sc2 e-5)) (let ((e-6 (vector-ref sc2 1))) ((Term-Elab-TTImp-checkExp arg-0 arg-8 arg-7 arg-6 (vector 3 arg-9 (vector 1 arg-9 arg-4 e-2) e-6) (Normalise-Core-gType 'erased) arg-5) eta-0))))))))))))))
(define Term-Elab-TTImp-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32checkTerm-658 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9) (let ((sc0 arg-9)) (case (vector-ref sc0 0) ((2) (let ((e-0 (vector-ref sc0 1))) (let ((e-1 (vector-ref sc0 2))) (vector 2 e-0 e-1)))) ((3) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (vector 3 e-2 e-3))))(else (vector 0 ))))))
(define Term-Elab-TTImp-case--caseC-32blockC-32inC-32checkTerm-638 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (let ((sc0 arg-7)) (case (vector-ref sc0 0) ((1) (let ((e-1 (vector-ref sc0 1))) (let ((nt (let ((_-0 (vector 1 e-1))) (Term-Elab-TTImp-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32checkTerm-658 arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 e-1 _-0 (let ((sc1 e-1)) (let ((e-2 (vector-ref sc1 2))) e-2)))))) (Term-Elab-TTImp-checkExp arg-0 arg-5 arg-4 arg-3 (vector 1 nt arg-1) (Normalise-Core-gnf arg-0 arg-3 (TT-Core-embed 'erased 'erased (let ((sc1 e-1)) (let ((e-0 (vector-ref sc1 1))) e-0)))) arg-2)))) (else (lambda (eta-0) (Core-Core-throw_Catchable__Core_Error 'erased (vector 1 arg-1) eta-0)))))))
(define Term-Elab-TTImp-case--checkTerm-573 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (let ((sc0 arg-6)) (case (vector-ref sc0 0) ((1) (let ((e-1 (vector-ref sc0 1))) (let ((binder (Env-Core-getBinder 'erased 'erased (vector 0 (lambda (n) (lambda (vars) (lambda (arg-5303) (TT-Core-weaken_Weaken__Term n vars arg-5303)))) (lambda (vars) (lambda (ns) (lambda (arg-5307) (TT-Core-weakenNs_Weaken__Term vars ns arg-5307))))) arg-0 e-1 'erased arg-3))) (Term-Elab-TTImp-checkExp arg-0 arg-5 arg-4 arg-3 (vector 0 e-1) (Normalise-Core-gnf arg-0 arg-3 (TT-Core-binderType 'erased binder)) arg-2)))) (else (lambda (eta-0) (let ((act-24 (let ((act-24 (unbox arg-5))) (vector 1 act-24)))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc1 1))) (let ((act-25 (Context-Core-lookupDef arg-1 e-5 eta-0))) (let ((sc2 act-25)) (case (vector-ref sc2 0) ((0) (let ((e-2 (vector-ref sc2 1))) (vector 0 e-2))) (else (let ((e-6 (vector-ref sc2 1))) (let ((sc3 e-6)) (case (vector-ref sc3 0) ((1) (let ((e-1 (vector-ref sc3 1))) (let ((nt (let ((_-0 (vector 1 e-1))) (Term-Elab-TTImp-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32checkTerm-658 arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 e-5 e-1 _-0 (let ((sc4 e-1)) (let ((e-2 (vector-ref sc4 2))) e-2)))))) ((Term-Elab-TTImp-checkExp arg-0 arg-5 arg-4 arg-3 (vector 1 nt arg-1) (Normalise-Core-gnf arg-0 arg-3 (TT-Core-embed 'erased 'erased (let ((sc4 e-1)) (let ((e-0 (vector-ref sc4 1))) e-0)))) arg-2) eta-0)))) (else (Core-Core-throw_Catchable__Core_Error 'erased (vector 1 arg-1) eta-0))))))))))))))))))))
(define Term-Elab-TTImp-case--checkExp-483 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9) (let ((sc0 arg-9)) (case (vector-ref sc0 0) ((0) (lambda (eta-0) (let ((act-24 (let ((sc1 (let ((sc2 arg-8)) (let ((e-1 (vector-ref sc2 2))) e-1)))) (cond ((equal? sc1 0) (Unify-Core-solveConstraints arg-6 arg-5 eta-0)) (else (vector 1 (vector 0 ))))))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (vector 1 (vector 0 arg-3 arg-1))))))))(else (lambda (eta-0) (let ((act-24 ((Normalise-Core-getTerm 'erased arg-1) eta-0))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (let ((act-25 ((UnifyState-Core-newConstant arg-0 arg-5 arg-6 arg-4 arg-3 e-5 arg-9) eta-0))) (let ((sc1 act-25)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-6 (vector-ref sc1 1))) (vector 1 (vector 0 e-6 arg-2))))))))))))))))))
(define (Term-Elab-TTImp-fdsfd . any-args) (blodwen-error-quit "Encountered unimplemented hole TTImp.Elab.Term.fdsfd"))
(define Term-Elab-TTImp-checkTerm (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-4)) (case (vector-ref sc0 0) ((0) (let ((e-0 (vector-ref sc0 1))) (Term-Elab-TTImp-case--checkTerm-573 arg-0 e-0 arg-5 arg-3 arg-2 arg-1 (Env-Core-defined arg-0 e-0 arg-3)))) ((1) (let ((e-1 (vector-ref sc0 1))) (let ((e-2 (vector-ref sc0 2))) (let ((e-3 (vector-ref sc0 3))) (let ((e-4 (vector-ref sc0 4))) (let ((n (Maybe-Data-fromMaybe 'erased (lambda () (vector 1 "_" 0)) e-2))) (lambda (eta-0) (let ((act-24 ((Term-Elab-TTImp-checkTerm arg-0 arg-1 arg-2 arg-3 e-3 (vector 1 (Normalise-Core-gType 'erased))) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-5 (vector-ref sc1 1))) (vector 0 e-5))) (else (let ((e-5 (vector-ref sc1 1))) (let ((sc2 e-5)) (let ((e-7 (vector-ref sc2 1))) (let ((envC-39 (vector 1 (vector 1 n e-1 e-7) arg-3))) (let ((act-25 ((Term-Elab-TTImp-checkTerm (vector 1 n arg-0) arg-1 arg-2 envC-39 e-4 (vector 1 (Normalise-Core-gType 'erased))) eta-0))) (let ((sc3 act-25)) (case (vector-ref sc3 0) ((0) (let ((e-8 (vector-ref sc3 1))) (vector 0 e-8))) (else (let ((e-8 (vector-ref sc3 1))) (let ((sc4 e-8)) (let ((e-10 (vector-ref sc4 1))) ((Term-Elab-TTImp-checkExp arg-0 arg-1 arg-2 arg-3 (vector 3 n (vector 1 n e-1 e-7) e-10) (Normalise-Core-gType 'erased) arg-5) eta-0))))))))))))))))))))))) ((2) (let ((e-5 (vector-ref sc0 1))) (let ((e-6 (vector-ref sc0 2))) (let ((e-7 (vector-ref sc0 3))) (let ((e-8 (vector-ref sc0 4))) (let ((sc1 arg-5)) (case (vector-ref sc1 0) ((0) (lambda (eta-0) (Core-Core-throw_Catchable__Core_Error 'erased (vector 3 "Can't infer type for lambda") eta-0))) (else (let ((e-17 (vector-ref sc1 1))) (let ((n (Maybe-Data-fromMaybe 'erased (lambda () (vector 1 "_" 0)) e-6))) (lambda (eta-0) (let ((act-24 ((Term-Elab-TTImp-checkTerm arg-0 arg-1 arg-2 arg-3 e-7 (vector 1 (Normalise-Core-gType 'erased))) eta-0))) (let ((sc2 act-24)) (case (vector-ref sc2 0) ((0) (let ((e-2 (vector-ref sc2 1))) (vector 0 e-2))) (else (let ((e-9 (vector-ref sc2 1))) (let ((sc3 e-9)) (let ((e-2 (vector-ref sc3 1))) (let ((act-25 ((Normalise-Core-getNF 'erased arg-1 e-17) eta-0))) (let ((sc4 act-25)) (case (vector-ref sc4 0) ((0) (let ((e-4 (vector-ref sc4 1))) (vector 0 e-4))) (else (let ((e-10 (vector-ref sc4 1))) (let ((act-26 (let ((act-26 (unbox arg-1))) (vector 1 act-26)))) (let ((sc5 act-26)) (case (vector-ref sc5 0) ((0) (let ((e-4 (vector-ref sc5 1))) (vector 0 e-4))) (else (let ((e-11 (vector-ref sc5 1))) (let ((act-27 (Normalise-Core-quote_Quote__NF arg-0 e-11 arg-3 e-10 eta-0))) (let ((sc6 act-27)) (case (vector-ref sc6 0) ((0) (let ((e-4 (vector-ref sc6 1))) (vector 0 e-4))) (else (let ((e-12 (vector-ref sc6 1))) (let ((sc7 e-12)) (case (vector-ref sc7 0) ((3) (let ((e-13 (vector-ref sc7 2))) (let ((e-4 (vector-ref sc7 3))) (let ((sc8 e-13)) (case (vector-ref sc8 0) ((1) (let ((envC-39 (vector 1 (vector 0 n e-5 e-2) arg-3))) (let ((scty (TT-Core-renameTop 'erased 'erased n e-4))) (let ((act-28 ((Term-Elab-TTImp-checkTerm (vector 1 n arg-0) arg-1 arg-2 envC-39 e-8 (vector 1 (Normalise-Core-gnf (vector 1 n arg-0) envC-39 scty))) eta-0))) (let ((sc9 act-28)) (case (vector-ref sc9 0) ((0) (let ((e-18 (vector-ref sc9 1))) (vector 0 e-18))) (else (let ((e-18 (vector-ref sc9 1))) (let ((sc10 e-18)) (let ((e-20 (vector-ref sc10 1))) (let ((e-19 (vector-ref sc10 2))) (let ((act-29 ((Normalise-Core-getTerm 'erased e-19) eta-0))) (let ((sc11 act-29)) (case (vector-ref sc11 0) ((0) (let ((e-21 (vector-ref sc11 1))) (vector 0 e-21))) (else (let ((e-21 (vector-ref sc11 1))) ((Term-Elab-TTImp-checkExp arg-0 arg-1 arg-2 arg-3 (vector 3 n (vector 0 n e-5 e-2) e-20) (Normalise-Core-gnf arg-0 arg-3 (vector 3 n (vector 1 n e-5 e-2) e-21)) (vector 1 e-17)) eta-0)))))))))))))))))(else (Core-Core-throw_Catchable__Core_Error 'erased (vector 3 "Lambda must have a function type") eta-0)))))))(else (Core-Core-throw_Catchable__Core_Error 'erased (vector 3 "Lambda must have a function type") eta-0))))))))))))))))))))))))))))))))))))) ((3) (let ((e-9 (vector-ref sc0 1))) (let ((e-10 (vector-ref sc0 2))) (let ((e-11 (vector-ref sc0 3))) (lambda (eta-0) (let ((act-24 ((Term-Elab-TTImp-checkTerm arg-0 arg-1 arg-2 arg-3 e-10 (vector 1 (Normalise-Core-gType 'erased))) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc1 1))) (let ((sc2 e-5)) (let ((e-2 (vector-ref sc2 1))) (let ((envC-39 (vector 1 (vector 2 e-9 e-2) arg-3))) (let ((act-25 ((Term-Elab-TTImp-checkTerm (vector 1 e-9 arg-0) arg-1 arg-2 envC-39 e-11 (vector 0 )) eta-0))) (let ((sc3 act-25)) (case (vector-ref sc3 0) ((0) (let ((e-4 (vector-ref sc3 1))) (vector 0 e-4))) (else (let ((e-6 (vector-ref sc3 1))) (let ((sc4 e-6)) (let ((e-7 (vector-ref sc4 1))) (let ((e-4 (vector-ref sc4 2))) (let ((act-26 ((Normalise-Core-getTerm 'erased e-4) eta-0))) (let ((sc5 act-26)) (case (vector-ref sc5 0) ((0) (let ((e-8 (vector-ref sc5 1))) (vector 0 e-8))) (else (let ((e-8 (vector-ref sc5 1))) ((Term-Elab-TTImp-checkExp arg-0 arg-1 arg-2 arg-3 (vector 3 e-9 (vector 2 e-9 e-2) e-7) (Normalise-Core-gnf arg-0 arg-3 (vector 3 e-9 (vector 3 e-2) e-8)) arg-5) eta-0))))))))))))))))))))))))))) ((4) (let ((e-12 (vector-ref sc0 1))) (let ((e-13 (vector-ref sc0 2))) (lambda (eta-0) (let ((act-24 ((Term-Elab-TTImp-checkTerm arg-0 arg-1 arg-2 arg-3 e-12 (vector 0 )) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc1 1))) (let ((sc2 e-5)) (let ((e-2 (vector-ref sc2 1))) (let ((e-3 (vector-ref sc2 2))) (let ((act-25 ((Normalise-Core-getNF 'erased arg-1 e-3) eta-0))) (let ((sc3 act-25)) (case (vector-ref sc3 0) ((0) (let ((e-4 (vector-ref sc3 1))) (vector 0 e-4))) (else (let ((e-6 (vector-ref sc3 1))) (let ((sc4 e-6)) (case (vector-ref sc4 0) ((0) (let ((e-7 (vector-ref sc4 2))) (let ((e-4 (vector-ref sc4 3))) (let ((sc5 e-7)) (case (vector-ref sc5 0) ((1) (let ((e-8 (vector-ref sc5 3))) (let ((act-26 (let ((act-26 (unbox arg-1))) (vector 1 act-26)))) (let ((sc6 act-26)) (case (vector-ref sc6 0) ((0) (let ((e-11 (vector-ref sc6 1))) (vector 0 e-11))) (else (let ((e-11 (vector-ref sc6 1))) (let ((act-27 ((Term-Elab-TTImp-checkTerm arg-0 arg-1 arg-2 arg-3 e-13 (vector 1 (Normalise-Core-glueBack arg-0 e-11 arg-3 e-8))) eta-0))) (let ((sc7 act-27)) (case (vector-ref sc7 0) ((0) (let ((e-14 (vector-ref sc7 1))) (vector 0 e-14))) (else (let ((e-14 (vector-ref sc7 1))) (let ((sc8 e-14)) (let ((e-16 (vector-ref sc8 1))) (let ((act-28 (((e-4 e-11) (Normalise-Core-toClosure 'erased arg-3 e-16)) eta-0))) (let ((sc9 act-28)) (case (vector-ref sc9 0) ((0) (let ((e-17 (vector-ref sc9 1))) (vector 0 e-17))) (else (let ((e-17 (vector-ref sc9 1))) ((Term-Elab-TTImp-checkExp arg-0 arg-1 arg-2 arg-3 (vector 4 e-2 e-16) (Normalise-Core-glueBack arg-0 e-11 arg-3 e-17) arg-5) eta-0))))))))))))))))))))(else (let ((act-26 (let ((sc5 e-6)) (case (vector-ref sc5 0) ((0) (let ((e-10 (vector-ref sc5 1))) (Core-Core-log (TT-Core-show_Show__Name e-10) eta-0))) ((1) (let ((e-9 (vector-ref sc5 1))) (let ((sc6 e-9)) (case (vector-ref sc6 0) ((0) (let ((e-21 (vector-ref sc6 1))) (Core-Core-log (Strings-Types-Prelude-C-43C-43 "loc" (Show-Prelude-show_Show__Nat e-21)) eta-0))) ((1) (let ((e-24 (vector-ref sc6 1))) (let ((e-25 (vector-ref sc6 2))) (Core-Core-log (Strings-Types-Prelude-C-43C-43 "ref" (Strings-Types-Prelude-C-43C-43 (TT-Core-show_Show__NameType e-24) (Strings-Types-Prelude-C-43C-43 " " (TT-Core-show_Show__Name e-25)))) eta-0)))) (else (let ((e-27 (vector-ref sc6 1))) (Core-Core-log (Strings-Types-Prelude-C-43C-43 "Meta" (TT-Core-show_Show__Name e-27)) eta-0))))))) ((2) (let ((e-8 (vector-ref sc5 1))) (Core-Core-log (Strings-Types-Prelude-C-43C-43 "data " (TT-Core-show_Show__Name e-8)) eta-0))) ((3) (let ((e-17 (vector-ref sc5 1))) (Core-Core-log (Strings-Types-Prelude-C-43C-43 "typeC " (TT-Core-show_Show__Name e-17)) eta-0))) ((4) (Core-Core-log "NTY" eta-0)) (else (Core-Core-log "erased" eta-0)))))) (let ((sc5 act-26)) (case (vector-ref sc5 0) ((0) (let ((e-8 (vector-ref sc5 1))) (vector 0 e-8))) (else (Core-Core-throw_Catchable__Core_Error 'erased (vector 3 "Not a function type") eta-0)))))))))))(else (let ((act-26 (let ((sc4 e-6)) (case (vector-ref sc4 0) ((0) (let ((e-1 (vector-ref sc4 1))) (Core-Core-log (TT-Core-show_Show__Name e-1) eta-0))) ((1) (let ((e-8 (vector-ref sc4 1))) (let ((sc5 e-8)) (case (vector-ref sc5 0) ((0) (let ((e-21 (vector-ref sc5 1))) (Core-Core-log (Strings-Types-Prelude-C-43C-43 "loc" (Show-Prelude-show_Show__Nat e-21)) eta-0))) ((1) (let ((e-24 (vector-ref sc5 1))) (let ((e-25 (vector-ref sc5 2))) (Core-Core-log (Strings-Types-Prelude-C-43C-43 "ref" (Strings-Types-Prelude-C-43C-43 (TT-Core-show_Show__NameType e-24) (Strings-Types-Prelude-C-43C-43 " " (TT-Core-show_Show__Name e-25)))) eta-0)))) (else (let ((e-27 (vector-ref sc5 1))) (Core-Core-log (Strings-Types-Prelude-C-43C-43 "Meta" (TT-Core-show_Show__Name e-27)) eta-0))))))) ((2) (let ((e-8 (vector-ref sc4 1))) (Core-Core-log (Strings-Types-Prelude-C-43C-43 "data " (TT-Core-show_Show__Name e-8)) eta-0))) ((3) (let ((e-17 (vector-ref sc4 1))) (Core-Core-log (Strings-Types-Prelude-C-43C-43 "typeC " (TT-Core-show_Show__Name e-17)) eta-0))) ((4) (Core-Core-log "NTY" eta-0)) (else (Core-Core-log "erased" eta-0)))))) (let ((sc4 act-26)) (case (vector-ref sc4 0) ((0) (let ((e-4 (vector-ref sc4 1))) (vector 0 e-4))) (else (Core-Core-throw_Catchable__Core_Error 'erased (vector 3 "Not a function type") eta-0))))))))))))))))))))))))) ((6) (let ((sc1 arg-5)) (case (vector-ref sc1 0) ((0) (lambda (eta-0) (Core-Core-throw_Catchable__Core_Error 'erased (vector 3 "Unknown type for implicit") eta-0))) (else (let ((e-20 (vector-ref sc1 1))) (lambda (eta-0) (let ((act-24 ((Normalise-Core-getTerm 'erased e-20) eta-0))) (let ((sc2 act-24)) (case (vector-ref sc2 0) ((0) (let ((e-2 (vector-ref sc2 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc2 1))) (let ((act-25 (UnifyState-Core-genName arg-2 "_" eta-0))) (let ((sc3 act-25)) (case (vector-ref sc3 0) ((0) (let ((e-2 (vector-ref sc3 1))) (vector 0 e-2))) (else (let ((e-6 (vector-ref sc3 1))) (let ((act-26 ((UnifyState-Core-newMeta arg-0 arg-1 arg-2 arg-3 e-6 e-5 (vector 4 )) eta-0))) (let ((sc4 act-26)) (case (vector-ref sc4 0) ((0) (let ((e-2 (vector-ref sc4 1))) (vector 0 e-2))) (else (let ((e-7 (vector-ref sc4 1))) (vector 1 (vector 0 e-7 e-20))))))))))))))))))))))) ((7) (Term-Elab-TTImp-checkExp arg-0 arg-1 arg-2 arg-3 (vector 5 ) (Normalise-Core-gType 'erased) arg-5)) (else (let ((e-14 (vector-ref sc0 1))) (let ((sc1 arg-5)) (case (vector-ref sc1 0) ((0) ((((((Term-Elab-TTImp-fdsfd) 'erased) 'erased) 'erased) 'erased) 'erased)) (else (let ((e-23 (vector-ref sc1 1))) (lambda (eta-0) (let ((act-24 (let ((act-24 (unbox arg-1))) (vector 1 act-24)))) (let ((sc2 act-24)) (case (vector-ref sc2 0) ((0) (let ((e-2 (vector-ref sc2 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc2 1))) (let ((act-25 (Context-Core-lookupDef e-14 e-5 eta-0))) (let ((sc3 act-25)) (case (vector-ref sc3 0) ((0) (let ((e-2 (vector-ref sc3 1))) (vector 0 e-2))) (else (let ((e-6 (vector-ref sc3 1))) (let ((sc4 e-6)) (case (vector-ref sc4 0) ((0) (let ((act-26 ((Normalise-Core-getTerm 'erased e-23) eta-0))) (let ((sc5 act-26)) (case (vector-ref sc5 0) ((0) (let ((e-2 (vector-ref sc5 1))) (vector 0 e-2))) (else (let ((e-7 (vector-ref sc5 1))) (let ((act-27 ((UnifyState-Core-newMeta arg-0 arg-1 arg-2 arg-3 e-14 e-7 (vector 5 arg-0 arg-3 e-7)) eta-0))) (let ((sc6 act-27)) (case (vector-ref sc6 0) ((0) (let ((e-2 (vector-ref sc6 1))) (vector 0 e-2))) (else (let ((e-8 (vector-ref sc6 1))) (vector 1 (vector 0 e-8 e-23)))))))))))))(else (Core-Core-throw_Catchable__Core_Error 'erased (vector 3 (Strings-Types-Prelude-C-43C-43 (TT-Core-show_Show__Name e-14) " already defined")) eta-0)))))))))))))))))))))))))
(define Term-Elab-TTImp-checkExp (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (let ((sc0 arg-6)) (case (vector-ref sc0 0) ((0) (lambda (eta-0) (vector 1 (vector 0 arg-4 arg-5)))) (else (let ((e-2 (vector-ref sc0 1))) (lambda (eta-0) (let ((act-24 (let ((act-24 (unbox arg-1))) (vector 1 act-24)))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-3 (vector-ref sc1 1))) (vector 0 e-3))) (else (let ((e-5 (vector-ref sc1 1))) (let ((act-25 (let ((act-25 ((Normalise-Core-getNF 'erased arg-1 arg-5) eta-0))) (let ((sc2 act-25)) (case (vector-ref sc2 0) ((0) (let ((e-3 (vector-ref sc2 1))) (vector 0 e-3))) (else (let ((e-6 (vector-ref sc2 1))) (let ((act-26 ((Normalise-Core-getNF 'erased arg-1 e-2) eta-0))) (let ((sc3 act-26)) (case (vector-ref sc3 0) ((0) (let ((e-3 (vector-ref sc3 1))) (vector 0 e-3))) (else (let ((e-7 (vector-ref sc3 1))) ((Unify-Core-unify_Unify__NF arg-0 arg-1 arg-2 arg-3 e-6 e-7) eta-0))))))))))))) (let ((sc2 act-25)) (case (vector-ref sc2 0) ((0) (let ((e-3 (vector-ref sc2 1))) (vector 0 e-3))) (else (let ((e-6 (vector-ref sc2 1))) ((Term-Elab-TTImp-case--checkExp-483 arg-0 e-2 arg-5 arg-4 arg-3 arg-2 arg-1 e-5 e-6 (let ((sc3 e-6)) (let ((e-0 (vector-ref sc3 1))) e-0))) eta-0))))))))))))))))))
(define Unify-Core-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32caseC-32blockC-32inC-32retryGuess-8629 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10) (let ((sc0 arg-4)) (let ((e-0 (vector-ref sc0 1))) (vector 0 e-0 (vector 6 arg-7 arg-10))))))
(define Unify-Core-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32caseC-32blockC-32inC-32retryGuess-8568 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9) (let ((sc0 arg-4)) (let ((e-0 (vector-ref sc0 1))) (vector 0 e-0 (vector 1 (vector 0 ) (vector 1 arg-7)))))))
(define Unify-Core-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32retryGuess-8527 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10) (let ((sc0 arg-10)) (case (vector-ref sc0 0) ((0) (let ((gdef (let ((sc1 arg-4)) (let ((e-0 (vector-ref sc1 1))) (vector 0 e-0 (vector 1 (vector 0 ) (vector 1 arg-7))))))) (lambda (eta-0) (let ((act-24 (Context-Core-updateDef arg-2 arg-0 (lambda (eta-1) gdef) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (vector 1 0))))))))(else (let ((gdef (let ((sc0 arg-4)) (let ((e-0 (vector-ref sc0 1))) (vector 0 e-0 (vector 6 arg-7 arg-10)))))) (lambda (eta-0) (let ((act-24 (Context-Core-updateDef arg-2 arg-0 (lambda (eta-1) gdef) eta-0))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (vector 1 1))))))))))))
(define Unify-Core-case--caseC-32blockC-32inC-32retryGuess-8499 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (let ((sc0 arg-6)) (case (vector-ref sc0 0) ((6) (let ((e-0 (vector-ref sc0 1))) (let ((e-1 (vector-ref sc0 2))) (lambda (eta-0) (let ((act-24 ((Core-Core-traverse 'erased 'erased (lambda (eta-1) (lambda (eta-2) (Unify-Core-retry arg-2 arg-1 eta-1 eta-2))) e-1) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc1 1))) (let ((csAll (Unify-Core-unionAll e-5))) ((Unify-Core-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32retryGuess-8527 arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 e-1 e-0 e-5 csAll (let ((sc2 csAll)) (let ((e-3 (vector-ref sc2 1))) e-3))) eta-0)))))))))))(else (lambda (eta-0) (vector 1 1)))))))
(define Unify-Core-case--retryGuess-8475 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-4)) (case (vector-ref sc0 0) ((0) (lambda (eta-0) (vector 1 1))) (else (let ((e-2 (vector-ref sc0 1))) (let ((bind-0 (vector 1 e-2))) (Unify-Core-case--caseC-32blockC-32inC-32retryGuess-8499 arg-0 arg-1 arg-2 arg-3 e-2 bind-0 (let ((sc1 e-2)) (let ((e-1 (vector-ref sc1 2))) e-1))))))))))
(define Unify-Core-case--caseC-32blockC-32inC-32retry-8406 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9) (let ((sc0 arg-9)) (case (vector-ref sc0 0) ((0) (lambda (eta-0) (let ((act-24 (UnifyState-Core-deleteConstraint arg-2 arg-1 eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (vector 1 arg-8)))))))(else (lambda (eta-0) (vector 1 arg-8)))))))
(define Unify-Core-case--caseC-32blockC-32inC-32retry-8326 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9) (let ((sc0 arg-9)) (case (vector-ref sc0 0) ((0) (lambda (eta-0) (let ((act-24 (UnifyState-Core-deleteConstraint arg-2 arg-1 eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (vector 1 arg-8)))))))(else (lambda (eta-0) (vector 1 arg-8)))))))
(define Unify-Core-case--retry-8273 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-4)) (case (vector-ref sc0 0) ((0) (lambda (eta-0) (vector 1 (Unify-Core-success)))) (else (let ((e-2 (vector-ref sc0 1))) (let ((sc1 e-2)) (case (vector-ref sc1 0) ((2) (lambda (eta-0) (vector 1 (Unify-Core-success)))) ((0) (let ((e-3 (vector-ref sc1 1))) (let ((e-4 (vector-ref sc1 2))) (let ((e-5 (vector-ref sc1 3))) (let ((e-6 (vector-ref sc1 4))) (lambda (eta-0) (let ((act-24 (Unify-Core-unify_Unify__Term e-3 arg-0 arg-2 e-4 e-5 e-6 eta-0))) (let ((sc2 act-24)) (case (vector-ref sc2 0) ((0) (let ((e-7 (vector-ref sc2 1))) (vector 0 e-7))) (else (let ((e-7 (vector-ref sc2 1))) ((Unify-Core-case--caseC-32blockC-32inC-32retry-8326 arg-0 arg-1 arg-2 arg-3 e-3 e-6 e-5 e-4 e-7 (let ((sc3 e-7)) (let ((e-0 (vector-ref sc3 1))) e-0))) eta-0)))))))))))) (else (let ((e-7 (vector-ref sc1 1))) (let ((e-8 (vector-ref sc1 2))) (let ((e-9 (vector-ref sc1 3))) (let ((e-10 (vector-ref sc1 4))) (lambda (eta-0) (let ((act-24 ((Unify-Core-unifyArgs 'erased (vector 0 (lambda (vars) (lambda (c) (lambda (u) (lambda (arg-5433) (lambda (arg-5435) (lambda (arg-5436) (lambda (eta-1) (Unify-Core-unify_Unify__Term vars c u arg-5433 arg-5435 arg-5436 eta-1)))))))) (vector 0 (lambda (vars) (lambda (arg-1506) (lambda (arg-1507) (lambda (arg-1509) (lambda (eta-1) (Normalise-Core-quote_Quote__Term vars arg-1506 arg-1507 arg-1509 eta-1)))))) (lambda (vars) (lambda (arg-1511) (lambda (arg-1513) (lambda (arg-1514) (lambda (arg-1516) (lambda (eta-1) (Normalise-Core-quoteGen_Quote__Term vars arg-1511 arg-1513 arg-1514 arg-1516 eta-1))))))))) e-7 arg-0 arg-2 e-8 e-9 e-10) eta-0))) (let ((sc2 act-24)) (case (vector-ref sc2 0) ((0) (let ((e-3 (vector-ref sc2 1))) (vector 0 e-3))) (else (let ((e-5 (vector-ref sc2 1))) ((Unify-Core-case--caseC-32blockC-32inC-32retry-8406 arg-0 arg-1 arg-2 arg-3 e-7 e-10 e-9 e-8 e-5 (let ((sc3 e-5)) (let ((e-0 (vector-ref sc3 1))) e-0))) eta-0))))))))))))))))))))
(define Unify-Core-case--unify-8010 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-13 arg-14) (let ((sc0 arg-14)) (cond ((equal? sc0 0) (Unify-Core-unifyArgs 'erased (vector 0 (lambda (vars) (lambda (c) (lambda (u) (lambda (arg-5433) (lambda (arg-5435) (lambda (arg-5436) (lambda (eta-0) (Unify-Core-unify_Unify__Closure vars c u arg-5433 arg-5435 arg-5436 eta-0)))))))) (vector 0 (lambda (vars) (lambda (arg-1506) (lambda (arg-1507) (lambda (arg-1509) (lambda (eta-0) (Normalise-Core-quote_Quote__Closure vars arg-1506 arg-1507 arg-1509 eta-0)))))) (lambda (vars) (lambda (arg-1511) (lambda (arg-1513) (lambda (arg-1514) (lambda (arg-1516) (lambda (eta-0) (Normalise-Core-quoteGen_Quote__Closure vars arg-1511 arg-1513 arg-1514 arg-1516 eta-0))))))))) arg-0 arg-13 arg-12 arg-11 arg-6 arg-1)) (else (lambda (eta-0) (Unify-Core-convertError 'erased arg-0 arg-13 arg-11 arg-10 arg-5 eta-0)))))))
(define Unify-Core-case--unify-7929 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-13 arg-14) (let ((sc0 arg-14)) (cond ((equal? sc0 0) (Unify-Core-unifyArgs 'erased (vector 0 (lambda (vars) (lambda (c) (lambda (u) (lambda (arg-5433) (lambda (arg-5435) (lambda (arg-5436) (lambda (eta-0) (Unify-Core-unify_Unify__Closure vars c u arg-5433 arg-5435 arg-5436 eta-0)))))))) (vector 0 (lambda (vars) (lambda (arg-1506) (lambda (arg-1507) (lambda (arg-1509) (lambda (eta-0) (Normalise-Core-quote_Quote__Closure vars arg-1506 arg-1507 arg-1509 eta-0)))))) (lambda (vars) (lambda (arg-1511) (lambda (arg-1513) (lambda (arg-1514) (lambda (arg-1516) (lambda (eta-0) (Normalise-Core-quoteGen_Quote__Closure vars arg-1511 arg-1513 arg-1514 arg-1516 eta-0))))))))) arg-0 arg-13 arg-12 arg-11 arg-6 arg-1)) (else (lambda (eta-0) (Unify-Core-convertError 'erased arg-0 arg-13 arg-11 arg-10 arg-5 eta-0)))))))
(define Unify-Core-case--unify-7525 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-13 arg-14 arg-15 arg-16 arg-17 arg-18 arg-19 arg-20) (let ((sc0 arg-20)) (case (vector-ref sc0 0) ((0) (lambda (eta-0) (let ((act-24 (((arg-4 arg-14) (Normalise-Core-toClosure 'erased arg-11 (vector 1 (vector 1 ) arg-18))) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc1 1))) (let ((act-25 (((arg-9 arg-14) (Normalise-Core-toClosure 'erased arg-11 (vector 1 (vector 1 ) arg-18))) eta-0))) (let ((sc2 act-25)) (case (vector-ref sc2 0) ((0) (let ((e-2 (vector-ref sc2 1))) (vector 0 e-2))) (else (let ((e-6 (vector-ref sc2 1))) (let ((act-26 (Normalise-Core-quote_Quote__NF arg-0 arg-15 arg-11 e-5 eta-0))) (let ((sc3 act-26)) (case (vector-ref sc3 0) ((0) (let ((e-2 (vector-ref sc3 1))) (vector 0 e-2))) (else (let ((e-7 (vector-ref sc3 1))) (let ((act-27 (Normalise-Core-quote_Quote__NF arg-0 arg-15 arg-11 e-6 eta-0))) (let ((sc4 act-27)) (case (vector-ref sc4 0) ((0) (let ((e-2 (vector-ref sc4 1))) (vector 0 e-2))) (else (let ((e-8 (vector-ref sc4 1))) (Unify-Core-unify_Unify__Term (vector 1 arg-5 arg-0) arg-13 arg-12 arg-19 (TT-Core-refsToLocals 'erased (vector 1 arg-5 (vector 0 )) (vector 1 arg-5 arg-18 (vector 0 )) e-7) (TT-Core-refsToLocals 'erased (vector 1 arg-5 (vector 0 )) (vector 1 arg-5 arg-18 (vector 0 )) e-8) eta-0))))))))))))))))))))))) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (lambda (eta-0) (let ((act-24 (Normalise-Core-quote_Quote__NF arg-0 arg-15 arg-11 arg-1 eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-4 (vector-ref sc1 1))) (vector 0 e-4))) (else (let ((e-5 (vector-ref sc1 1))) (let ((act-25 (Normalise-Core-quote_Quote__NF arg-0 arg-15 arg-11 arg-6 eta-0))) (let ((sc2 act-25)) (case (vector-ref sc2 0) ((0) (let ((e-4 (vector-ref sc2 1))) (vector 0 e-4))) (else (let ((e-6 (vector-ref sc2 1))) (let ((act-26 ((UnifyState-Core-newConstant arg-0 arg-12 arg-13 arg-11 (vector 3 arg-5 (vector 0 arg-8 (vector 1 ) e-5) (vector 0 0)) (vector 3 arg-5 (vector 1 arg-8 (vector 1 ) e-5) (TT-Core-weaken_Weaken__Term arg-5 arg-0 e-6)) (vector 1 e-2 e-3)) eta-0))) (let ((sc3 act-26)) (case (vector-ref sc3 0) ((0) (let ((e-4 (vector-ref sc3 1))) (vector 0 e-4))) (else (let ((act-27 (((arg-4 arg-14) (Normalise-Core-toClosure 'erased arg-11 (vector 1 (vector 1 ) arg-18))) eta-0))) (let ((sc4 act-27)) (case (vector-ref sc4 0) ((0) (let ((e-4 (vector-ref sc4 1))) (vector 0 e-4))) (else (let ((e-8 (vector-ref sc4 1))) (let ((act-28 (((arg-9 arg-14) (Normalise-Core-toClosure 'erased arg-11 (vector 1 (vector 1 ) arg-18))) eta-0))) (let ((sc5 act-28)) (case (vector-ref sc5 0) ((0) (let ((e-4 (vector-ref sc5 1))) (vector 0 e-4))) (else (let ((e-9 (vector-ref sc5 1))) (let ((act-29 (Normalise-Core-quote_Quote__NF arg-0 arg-15 arg-11 e-8 eta-0))) (let ((sc6 act-29)) (case (vector-ref sc6 0) ((0) (let ((e-4 (vector-ref sc6 1))) (vector 0 e-4))) (else (let ((e-10 (vector-ref sc6 1))) (let ((act-30 (Normalise-Core-quote_Quote__NF arg-0 arg-15 arg-11 e-9 eta-0))) (let ((sc7 act-30)) (case (vector-ref sc7 0) ((0) (let ((e-4 (vector-ref sc7 1))) (vector 0 e-4))) (else (let ((e-11 (vector-ref sc7 1))) (let ((act-31 (Unify-Core-unify_Unify__Term (vector 1 arg-5 arg-0) arg-13 arg-12 arg-19 (TT-Core-refsToLocals 'erased (vector 1 arg-5 (vector 0 )) (vector 1 arg-5 arg-18 (vector 0 )) e-10) (TT-Core-refsToLocals 'erased (vector 1 arg-5 (vector 0 )) (vector 1 arg-5 arg-18 (vector 0 )) e-11) eta-0))) (let ((sc8 act-31)) (case (vector-ref sc8 0) ((0) (let ((e-4 (vector-ref sc8 1))) (vector 0 e-4))) (else (let ((e-12 (vector-ref sc8 1))) (vector 1 (Unify-Core-union arg-17 e-12)))))))))))))))))))))))))))))))))))))))))))))))))
(define Unify-Core-case--unifyApp-7387 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8) (let ((sc0 arg-8)) (cond ((equal? sc0 0) (lambda (eta-0) (vector 1 (Unify-Core-success)))) (else (lambda (eta-0) (Unify-Core-postpone arg-0 arg-6 arg-5 arg-4 (vector 1 arg-3 arg-2) arg-1 eta-0)))))))
(define Unify-Core-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32unifyApp-7280 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-13 arg-14 arg-15 arg-16 arg-17) (let ((sc0 arg-17)) (case (vector-ref sc0 0) ((1) (let ((e-1 (vector-ref sc0 1))) (lambda (eta-0) (let ((act-24 ((Unify-Core-instantiate arg-7 arg-6 arg-0 arg-9 arg-5 arg-2 e-1 arg-10 arg-16) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (vector 1 (Unify-Core-solvedHole))))))))) (else (lambda (eta-0) (Core-Core-throw_Catchable__Core_Error 'erased (vector 1 arg-2) eta-0)))))))
(define Unify-Core-case--caseC-32blockC-32inC-32unifyApp-7197 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-13 arg-14 arg-15 arg-16) (let ((sc0 arg-16)) (case (vector-ref sc0 0) ((0) (lambda (eta-0) (Unify-Core-postpone arg-0 arg-7 arg-6 arg-5 (vector 1 (vector 2 arg-2 arg-1) arg-4) arg-3 eta-0))) (else (let ((e-2 (vector-ref sc0 1))) (lambda (eta-0) (let ((act-24 (Context-Core-lookupDef arg-2 arg-13 eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-3 (vector-ref sc1 1))) (vector 0 e-3))) (else (let ((e-5 (vector-ref sc1 1))) (let ((sc2 e-5)) (case (vector-ref sc2 0) ((1) (let ((e-1 (vector-ref sc2 1))) (let ((act-25 ((Unify-Core-instantiate arg-7 arg-6 arg-0 arg-9 arg-5 arg-2 e-1 arg-10 e-2) eta-0))) (let ((sc3 act-25)) (case (vector-ref sc3 0) ((0) (let ((e-3 (vector-ref sc3 1))) (vector 0 e-3))) (else (vector 1 (Unify-Core-solvedHole)))))))) (else (Core-Core-throw_Catchable__Core_Error 'erased (vector 1 arg-2) eta-0))))))))))))))))
(define Unify-Core-case--unifyApp-7117 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9) (let ((sc0 arg-9)) (case (vector-ref sc0 0) ((0) (lambda (eta-0) (Unify-Core-postpone arg-0 arg-7 arg-6 arg-5 (vector 1 (vector 2 arg-2 arg-1) arg-4) arg-3 eta-0))) (else (let ((e-2 (vector-ref sc0 1))) (let ((sc1 e-2)) (let ((e-5 (vector-ref sc1 1))) (let ((e-6 (vector-ref sc1 2))) (let ((sc2 e-6)) (let ((e-9 (vector-ref sc2 1))) (let ((e-10 (vector-ref sc2 2))) (lambda (eta-0) (let ((act-24 (let ((act-24 (unbox arg-7))) (vector 1 act-24)))) (let ((sc3 act-24)) (case (vector-ref sc3 0) ((0) (let ((e-3 (vector-ref sc3 1))) (vector 0 e-3))) (else (let ((e-7 (vector-ref sc3 1))) (let ((act-25 (Context-Core-clearDefs e-7 eta-0))) (let ((sc4 act-25)) (case (vector-ref sc4 0) ((0) (let ((e-3 (vector-ref sc4 1))) (vector 0 e-3))) (else (let ((e-8 (vector-ref sc4 1))) (let ((act-26 (Normalise-Core-quote_Quote__NF arg-0 e-8 arg-5 arg-3 eta-0))) (let ((sc5 act-26)) (case (vector-ref sc5 0) ((0) (let ((e-3 (vector-ref sc5 1))) (vector 0 e-3))) (else (let ((e-11 (vector-ref sc5 1))) (let ((bind-0 (vector 1 (vector 0 e-5 (vector 0 e-9 e-10))))) ((Unify-Core-case--caseC-32blockC-32inC-32unifyApp-7197 arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 e-5 e-9 e-10 bind-0 e-7 e-8 e-11 (TT-Core-shrinkTerm 'erased 'erased e-11 e-10)) eta-0))))))))))))))))))))))))))))))
(define Unify-Core-case--caseC-32blockC-32inC-32unifyIfEq-7061 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8) (let ((sc0 arg-4)) (cond ((equal? sc0 0) (lambda (eta-0) (Unify-Core-postpone arg-0 arg-6 arg-5 arg-3 arg-2 arg-1 eta-0))) (else (lambda (eta-0) (Unify-Core-convertError 'erased arg-0 arg-6 arg-3 arg-2 arg-1 eta-0)))))))
(define Unify-Core-case--unifyIfEq-7024 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8) (let ((sc0 arg-8)) (cond ((equal? sc0 0) (lambda (eta-0) (vector 1 (Unify-Core-success)))) (else (let ((sc1 arg-4)) (cond ((equal? sc1 0) (lambda (eta-0) (Unify-Core-postpone arg-0 arg-6 arg-5 arg-3 arg-2 arg-1 eta-0))) (else (lambda (eta-0) (Unify-Core-convertError 'erased arg-0 arg-6 arg-3 arg-2 arg-1 eta-0))))))))))
(define Unify-Core-case--instantiate-6957 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11) (let ((sc0 arg-4)) (let ((e-0 (vector-ref sc0 1))) (vector 0 e-0 (vector 1 (vector 0 ) (vector 1 arg-11)))))))
(define Unify-Core-case--instantiateC-44mkDef-6830 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-13 arg-14) (let ((sc0 arg-14)) (case (vector-ref sc0 0) ((1) (let ((e-1 (vector-ref sc0 1))) (lambda (eta-0) (vector 1 e-1)))) (else (lambda (eta-0) (Unify-Core-ufail 'erased (Strings-Types-Prelude-C-43C-43 "Can't make solution for " (TT-Core-show_Show__Name arg-5)) eta-0)))))))
(define Unify-Core-case--instantiateC-44updateIVars-6531 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-13 arg-14 arg-15) (vector 1 (vector 0 arg-15))))
(define Unify-Core-case--caseC-32blockC-32inC-32instantiateC-44updateIVar-6439 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-13 arg-14 arg-15 arg-16 arg-17 arg-18 arg-19) (vector 1 (+ 1 arg-19))))
(define Unify-Core-case--instantiateC-44updateIVar-6339 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-13 arg-14 arg-15 arg-16 arg-17 arg-18 arg-19) (let ((sc0 arg-19)) (cond ((equal? sc0 0) (vector 1 0)) (else (Types-Prelude-C-62C-62C-61_Monad__Maybe 'erased 'erased (Unify-Core-n--4410-6236-updateIVar arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 'erased arg-17 'erased 'erased arg-16 'erased) (lambda (_-0) (vector 1 (+ 1 _-0)))))))))
(define Unify-Core-case--instantiateC-44updateIVar-6269 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-13 arg-14 arg-15 arg-16) (vector 1 (+ 1 arg-16))))
(define Unify-Core-case--caseC-32blockC-32inC-32patternEnv-6028 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9) (let ((sc0 arg-9)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (lambda (eta-0) (vector 1 (vector 1 (vector 0 e-2 (vector 0 (Unify-Core-n--4015-5874-updateVars arg-0 arg-1 arg-2 arg-3 arg-4 'erased arg-8 e-3) e-3))))))))))
(define Unify-Core-case--patternEnv-5983 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8) (let ((sc0 arg-8)) (case (vector-ref sc0 0) ((0) (lambda (eta-0) (vector 1 (vector 0 )))) (else (let ((e-2 (vector-ref sc0 1))) (Unify-Core-case--caseC-32blockC-32inC-32patternEnv-6028 arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 e-2 (Unify-Core-toSubVars arg-0 e-2))))))))
(define Unify-Core-case--patternEnvC-44updateVars-5899 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11) (let ((sc0 arg-11)) (case (vector-ref sc0 0) ((0) (Unify-Core-n--4015-5874-updateVars arg-0 arg-1 arg-2 arg-3 arg-4 'erased arg-9 arg-10)) (else (let ((e-2 (vector-ref sc0 1))) (vector 1 e-2 (Unify-Core-n--4015-5874-updateVars arg-0 arg-1 arg-2 arg-3 arg-4 'erased arg-9 arg-10))))))))
(define Unify-Core-case--caseC-32blockC-32inC-32toSubVars-5827 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-5)) (cond ((equal? sc0 0) (vector 0 (vector 1 arg-0 arg-3) (vector 2 arg-4))) (else (vector 0 arg-3 (vector 1 arg-4)))))))
(define Unify-Core-case--toSubVars-5811 (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (Unify-Core-case--caseC-32blockC-32inC-32toSubVars-5827 arg-0 arg-1 arg-2 e-2 e-3 (Unify-Core-n--3901-5777-anyFirst arg-0 arg-1 arg-2 arg-2)))))))
(define Unify-Core-case--getVars-5706 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (let ((sc0 arg-6)) (cond ((equal? sc0 0) (vector 0 )) (else (Types-Prelude-C-62C-62C-61_Monad__Maybe 'erased 'erased (Unify-Core-getVars arg-0 (vector 1 arg-2 arg-5) arg-4) (lambda (xsC-39) (Types-Prelude-pure_Applicative__Maybe 'erased (vector 1 arg-2 xsC-39)))))))))
(define Unify-Core-n--4015-5874-updateVars (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (let ((sc0 arg-6)) (case (vector-ref sc0 0) ((0) (vector 0 )) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (Unify-Core-case--patternEnvC-44updateVars-5899 arg-0 arg-1 arg-2 arg-3 arg-4 'erased 'erased e-2 'erased e-3 arg-7 (TT-Core-subElem 'erased 'erased 'erased e-2 'erased arg-7)))))))))
(define Unify-Core-n--4427-6613-updateIVarsB (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-13 arg-14 arg-15 arg-16 arg-17 arg-18) (let ((sc0 arg-18)) (case (vector-ref sc0 0) ((0) (let ((e-1 (vector-ref sc0 1))) (let ((e-2 (vector-ref sc0 2))) (let ((e-3 (vector-ref sc0 3))) (Types-Prelude-C-62C-62C-61_Monad__Maybe 'erased 'erased (Unify-Core-n--4410-6237-updateIVars arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-15 arg-16 arg-17 e-3) (lambda (bind-0) (vector 1 (vector 0 e-1 e-2 bind-0)))))))) ((1) (let ((e-5 (vector-ref sc0 1))) (let ((e-6 (vector-ref sc0 2))) (let ((e-7 (vector-ref sc0 3))) (Types-Prelude-C-62C-62C-61_Monad__Maybe 'erased 'erased (Unify-Core-n--4410-6237-updateIVars arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-15 arg-16 arg-17 e-7) (lambda (bind-0) (vector 1 (vector 1 e-5 e-6 bind-0)))))))) ((2) (let ((e-9 (vector-ref sc0 1))) (let ((e-10 (vector-ref sc0 2))) (Types-Prelude-C-62C-62C-61_Monad__Maybe 'erased 'erased (Unify-Core-n--4410-6237-updateIVars arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-15 arg-16 arg-17 e-10) (lambda (bind-0) (vector 1 (vector 2 e-9 bind-0))))))) (else (let ((e-12 (vector-ref sc0 1))) (Types-Prelude-C-62C-62C-61_Monad__Maybe 'erased 'erased (Unify-Core-n--4410-6237-updateIVars arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-15 arg-16 arg-17 e-12) (lambda (bind-0) (vector 1 (vector 3 bind-0))))))))))
(define Unify-Core-n--4410-6237-updateIVars (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12) (let ((sc0 arg-12)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (Types-Prelude-C-62C-62C-61_Monad__Maybe 'erased 'erased (Unify-Core-n--4410-6236-updateIVar arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 'erased e-2 'erased 'erased arg-11 'erased) (lambda (_-0) (vector 1 (vector 0 _-0)))))) ((1) (let ((e-5 (vector-ref sc0 1))) (let ((e-6 (vector-ref sc0 2))) (Types-Prelude-pure_Applicative__Maybe 'erased (vector 1 e-5 e-6))))) ((2) (let ((e-8 (vector-ref sc0 1))) (let ((e-9 (vector-ref sc0 2))) (Types-Prelude-C-62C-62C-61_Monad__Maybe 'erased 'erased (Types-Prelude-traverse_Traversable__List 'erased 'erased 'erased (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-45) (Types-Prelude-map_Functor__Maybe 'erased 'erased func arg-45))))) (lambda (a) (lambda (arg-112) (Types-Prelude-pure_Applicative__Maybe 'erased arg-112))) (lambda (b) (lambda (a) (lambda (arg-113) (lambda (arg-115) (Types-Prelude-C-60C-42C-62_Applicative__Maybe 'erased 'erased arg-113 arg-115)))))) (lambda (eta-0) (Unify-Core-n--4410-6237-updateIVars arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 eta-0)) e-9) (lambda (bind-0) (Types-Prelude-pure_Applicative__Maybe 'erased (vector 2 e-8 bind-0))))))) ((3) (let ((e-11 (vector-ref sc0 1))) (let ((e-12 (vector-ref sc0 2))) (let ((e-13 (vector-ref sc0 3))) (Types-Prelude-C-62C-62C-61_Monad__Maybe 'erased 'erased (Unify-Core-n--4427-6613-updateIVarsB arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-10 e-11 e-13 e-12 arg-9 arg-11 arg-9 arg-10 arg-11 e-12) (lambda (bC-39) (Types-Prelude-C-62C-62C-61_Monad__Maybe 'erased 'erased (Unify-Core-n--4410-6237-updateIVars arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 (vector 1 e-11 arg-9) (vector 1 e-11 arg-10) (vector 1 (vector 1 0) (Unify-Core-weaken_Weaken__C-40IVarsC-32C-36vsC-41 'erased e-11 arg-10 arg-11)) e-13) (lambda (scC-39) (vector 1 (vector 3 e-11 bC-39 scC-39)))))))))) ((4) (let ((e-15 (vector-ref sc0 1))) (let ((e-16 (vector-ref sc0 2))) (Types-Prelude-C-62C-62C-61_Monad__Maybe 'erased 'erased (Unify-Core-n--4410-6237-updateIVars arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 e-15) (lambda (bind-0) (Types-Prelude-C-62C-62C-61_Monad__Maybe 'erased 'erased (Unify-Core-n--4410-6237-updateIVars arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 e-16) (lambda (bind-1) (vector 1 (vector 4 bind-0 bind-1))))))))) ((6) (vector 1 (vector 6 ))) (else (vector 1 (vector 5 )))))))
(define Unify-Core-n--4410-6236-updateIVar (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-13 arg-14) (let ((sc0 arg-13)) (case (vector-ref sc0 0) ((1) (let ((e-3 (vector-ref sc0 1))) (let ((e-4 (vector-ref sc0 2))) (let ((sc1 e-3)) (case (vector-ref sc1 0) ((0) (Types-Prelude-C-62C-62C-61_Monad__Maybe 'erased 'erased (Unify-Core-n--4410-6236-updateIVar arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 'erased arg-10 'erased 'erased e-4 'erased) (lambda (_-0) (vector 1 (+ 1 _-0))))) ((1) (let ((e-7 (vector-ref sc1 1))) (Unify-Core-case--instantiateC-44updateIVar-6339 arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 'erased 'erased 'erased 'erased 'erased e-7 'erased e-4 arg-10 'erased (Types-Prelude-C-61C-61_Eq__Nat arg-10 e-7))))(else (vector 0 )))))))(else (vector 0 ))))))
(define Unify-Core-n--4410-6238-mkDef (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-13 arg-14) (let ((sc0 arg-11)) (case (vector-ref sc0 0) ((1) (let ((e-1 (vector-ref sc0 1))) (let ((e-2 (vector-ref sc0 2))) (let ((sc1 arg-14)) (case (vector-ref sc1 0) ((3) (let ((e-5 (vector-ref sc1 1))) (let ((e-6 (vector-ref sc1 2))) (let ((e-7 (vector-ref sc1 3))) (let ((sc2 e-6)) (case (vector-ref sc2 0) ((1) (let ((e-9 (vector-ref sc2 1))) (lambda (eta-0) (let ((act-24 ((Unify-Core-n--4410-6238-mkDef arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 (vector 1 e-5 arg-9) arg-10 e-2 (vector 1 (vector 1 e-1) arg-12) arg-13 e-7) eta-0))) (let ((sc3 act-24)) (case (vector-ref sc3 0) ((0) (let ((e-3 (vector-ref sc3 1))) (vector 0 e-3))) (else (let ((e-8 (vector-ref sc3 1))) (vector 1 (vector 3 e-5 (vector 0 e-9 (vector 1 ) (vector 6 )) e-8))))))))))(else (lambda (eta-0) (Unify-Core-ufail 'erased (Strings-Types-Prelude-C-43C-43 "Can't make solution for " (Strings-Types-Prelude-C-43C-43 (TT-Core-show_Show__Name arg-5) (Strings-Types-Prelude-C-43C-43 " at " (TT-Core-show_Show__C-40TermC-32C-36varsC-41 arg-9 arg-14)))) eta-0)))))))))(else (lambda (eta-0) (Unify-Core-ufail 'erased (Strings-Types-Prelude-C-43C-43 "Can't make solution for " (Strings-Types-Prelude-C-43C-43 (TT-Core-show_Show__Name arg-5) (Strings-Types-Prelude-C-43C-43 " at " (TT-Core-show_Show__C-40TermC-32C-36varsC-41 arg-9 arg-14)))) eta-0)))))))) ((0) (Unify-Core-case--instantiateC-44mkDef-6830 arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-14 arg-13 arg-12 (Unify-Core-n--4410-6237-updateIVars arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-12 arg-13)))(else (lambda (eta-0) (Unify-Core-ufail 'erased (Strings-Types-Prelude-C-43C-43 "Can't make solution for " (Strings-Types-Prelude-C-43C-43 (TT-Core-show_Show__Name arg-5) (Strings-Types-Prelude-C-43C-43 " at " (TT-Core-show_Show__C-40TermC-32C-36varsC-41 arg-9 arg-14)))) eta-0)))))))
(define Unify-Core-n--3799-5692-inArgs (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (let ((sc0 arg-7)) (case (vector-ref sc0 0) ((0) 1) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (Basics-Prelude-C-124C-124 (EqOrd-Prelude-C-61C-61_Eq__Integer arg-6 e-2) (lambda () (Unify-Core-n--3799-5692-inArgs arg-0 'erased arg-2 'erased arg-4 arg-5 arg-6 e-3))))))))))
(define Unify-Core-n--3901-5777-anyFirst (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((0) 1) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 e-2)) (cond ((equal? sc1 0) 0)(else (Unify-Core-n--3901-5777-anyFirst arg-0 arg-1 arg-2 e-3)))))))))))
(define Unify-Core-weaken_Weaken__C-40IVarsC-32C-36vsC-41 (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((0) (vector 0 )) (else (let ((e-4 (vector-ref sc0 1))) (let ((e-5 (vector-ref sc0 2))) (let ((sc1 e-4)) (case (vector-ref sc1 0) ((0) (vector 1 (vector 0 ) (Unify-Core-weaken_Weaken__C-40IVarsC-32C-36vsC-41 'erased arg-1 arg-2 e-5))) (else (let ((e-8 (vector-ref sc1 1))) (vector 1 (vector 1 (TT-Core-weaken_Weaken__Var arg-1 arg-2 e-8)) (Unify-Core-weaken_Weaken__C-40IVarsC-32C-36vsC-41 'erased arg-1 arg-2 e-5)))))))))))))
(define Unify-Core-weakenNs_Weaken__C-40IVarsC-32C-36vsC-41 (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((0) arg-3) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (Unify-Core-weaken_Weaken__C-40IVarsC-32C-36vsC-41 'erased e-2 (List-Types-Prelude-C-43C-43 'erased e-3 arg-1) (Unify-Core-weakenNs_Weaken__C-40IVarsC-32C-36vsC-41 'erased arg-1 e-3 arg-3)))))))))
(define Unify-Core-unify_Unify__Term (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 ext-0) (let ((act-24 (let ((act-24 (unbox arg-1))) (vector 1 act-24)))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (let ((act-25 ((Normalise-Core-nf arg-0 e-5 arg-3 arg-4) ext-0))) (let ((sc1 act-25)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-6 (vector-ref sc1 1))) (let ((act-26 ((Normalise-Core-nf arg-0 e-5 arg-3 arg-5) ext-0))) (let ((sc2 act-26)) (case (vector-ref sc2 0) ((0) (let ((e-2 (vector-ref sc2 1))) (vector 0 e-2))) (else (let ((e-7 (vector-ref sc2 1))) ((Unify-Core-unify_Unify__NF arg-0 arg-1 arg-2 arg-3 e-6 e-7) ext-0))))))))))))))))))
(define Unify-Core-unify_Unify__NF (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-4)) (case (vector-ref sc0 0) ((0) (let ((e-4 (vector-ref sc0 1))) (let ((e-5 (vector-ref sc0 2))) (let ((e-6 (vector-ref sc0 3))) (let ((sc1 e-5)) (case (vector-ref sc1 0) ((1) (let ((e-25 (vector-ref sc1 1))) (let ((e-26 (vector-ref sc1 2))) (let ((e-27 (vector-ref sc1 3))) (let ((sc2 arg-5)) (case (vector-ref sc2 0) ((0) (let ((e-33 (vector-ref sc2 1))) (let ((e-34 (vector-ref sc2 2))) (let ((e-35 (vector-ref sc2 3))) (let ((sc3 e-34)) (case (vector-ref sc3 0) ((1) (let ((e-37 (vector-ref sc3 1))) (let ((e-38 (vector-ref sc3 2))) (let ((e-39 (vector-ref sc3 3))) (lambda (eta-0) (let ((act-24 (let ((act-24 (unbox arg-1))) (vector 1 act-24)))) (let ((sc4 act-24)) (case (vector-ref sc4 0) ((0) (let ((e-2 (vector-ref sc4 1))) (vector 0 e-2))) (else (let ((e-7 (vector-ref sc4 1))) (let ((act-25 (Context-Core-clearDefs e-7 eta-0))) (let ((sc5 act-25)) (case (vector-ref sc5 0) ((0) (let ((e-2 (vector-ref sc5 1))) (vector 0 e-2))) (else (let ((e-8 (vector-ref sc5 1))) (let ((act-26 (Normalise-Core-quote_Quote__NF arg-0 e-8 arg-3 e-27 eta-0))) (let ((sc6 act-26)) (case (vector-ref sc6 0) ((0) (let ((e-2 (vector-ref sc6 1))) (vector 0 e-2))) (else (let ((e-9 (vector-ref sc6 1))) (let ((act-27 ((Unify-Core-unify_Unify__NF arg-0 arg-1 arg-2 arg-3 e-27 e-39) eta-0))) (let ((sc7 act-27)) (case (vector-ref sc7 0) ((0) (let ((e-2 (vector-ref sc7 1))) (vector 0 e-2))) (else (let ((e-10 (vector-ref sc7 1))) (let ((act-28 (UnifyState-Core-genName arg-2 "x" eta-0))) (let ((sc8 act-28)) (case (vector-ref sc8 0) ((0) (let ((e-2 (vector-ref sc8 1))) (vector 0 e-2))) (else (let ((e-11 (vector-ref sc8 1))) (let ((envC-39 (vector 1 (vector 1 e-37 (vector 1 ) e-9) arg-3))) ((Unify-Core-case--unify-7525 arg-0 e-27 e-26 e-25 e-6 e-4 e-39 e-38 e-37 e-35 e-33 arg-3 arg-2 arg-1 e-7 e-8 e-9 e-10 e-11 envC-39 (let ((sc9 e-10)) (let ((e-0 (vector-ref sc9 1))) e-0))) eta-0))))))))))))))))))))))))))))))))(else (let ((sc3 arg-5)) (case (vector-ref sc3 0) ((0) (lambda (eta-0) (Unify-Core-convertError 'erased arg-0 arg-1 arg-3 arg-4 arg-5 eta-0)))(else (let ((sc3 arg-5)) (case (vector-ref sc3 0) ((1) (let ((e-1 (vector-ref sc3 1))) (let ((e-2 (vector-ref sc3 2))) (Unify-Core-unifyApp arg-0 arg-1 arg-2 arg-3 e-1 e-2 arg-4))))(else (lambda (eta-0) (Unify-Core-unifyIfEq arg-1 arg-2 arg-0 1 arg-3 arg-4 arg-5 eta-0)))))))))))))))(else (let ((sc2 arg-5)) (case (vector-ref sc2 0) ((0) (lambda (eta-0) (Unify-Core-convertError 'erased arg-0 arg-1 arg-3 arg-4 arg-5 eta-0)))(else (let ((sc2 arg-5)) (case (vector-ref sc2 0) ((1) (let ((e-1 (vector-ref sc2 1))) (let ((e-2 (vector-ref sc2 2))) (Unify-Core-unifyApp arg-0 arg-1 arg-2 arg-3 e-1 e-2 arg-4))))(else (lambda (eta-0) (Unify-Core-unifyIfEq arg-1 arg-2 arg-0 1 arg-3 arg-4 arg-5 eta-0))))))))))))))) ((0) (let ((e-29 (vector-ref sc1 1))) (let ((e-31 (vector-ref sc1 3))) (let ((sc2 arg-5)) (case (vector-ref sc2 0) ((0) (let ((e-42 (vector-ref sc2 2))) (let ((e-43 (vector-ref sc2 3))) (let ((sc3 e-42)) (case (vector-ref sc3 0) ((0) (let ((e-47 (vector-ref sc3 3))) (lambda (eta-0) (let ((act-24 (let ((act-24 (unbox arg-1))) (vector 1 act-24)))) (let ((sc4 act-24)) (case (vector-ref sc4 0) ((0) (let ((e-2 (vector-ref sc4 1))) (vector 0 e-2))) (else (let ((e-7 (vector-ref sc4 1))) (let ((act-25 (Context-Core-clearDefs e-7 eta-0))) (let ((sc5 act-25)) (case (vector-ref sc5 0) ((0) (let ((e-2 (vector-ref sc5 1))) (vector 0 e-2))) (else (let ((e-8 (vector-ref sc5 1))) (let ((act-26 (Normalise-Core-quote_Quote__NF arg-0 e-8 arg-3 e-31 eta-0))) (let ((sc6 act-26)) (case (vector-ref sc6 0) ((0) (let ((e-2 (vector-ref sc6 1))) (vector 0 e-2))) (else (let ((e-9 (vector-ref sc6 1))) (let ((act-27 ((Unify-Core-unify_Unify__NF arg-0 arg-1 arg-2 arg-3 e-31 e-47) eta-0))) (let ((sc7 act-27)) (case (vector-ref sc7 0) ((0) (let ((e-2 (vector-ref sc7 1))) (vector 0 e-2))) (else (let ((e-10 (vector-ref sc7 1))) (let ((act-28 (UnifyState-Core-genName arg-2 "x" eta-0))) (let ((sc8 act-28)) (case (vector-ref sc8 0) ((0) (let ((e-2 (vector-ref sc8 1))) (vector 0 e-2))) (else (let ((e-11 (vector-ref sc8 1))) (let ((envC-39 (vector 1 (vector 0 e-29 (vector 1 ) e-9) arg-3))) (let ((act-29 (Normalise-Core-quote_Quote__NF arg-0 e-8 arg-3 e-31 eta-0))) (let ((sc9 act-29)) (case (vector-ref sc9 0) ((0) (let ((e-2 (vector-ref sc9 1))) (vector 0 e-2))) (else (let ((act-30 (Normalise-Core-quote_Quote__NF arg-0 e-8 arg-3 e-47 eta-0))) (let ((sc10 act-30)) (case (vector-ref sc10 0) ((0) (let ((e-2 (vector-ref sc10 1))) (vector 0 e-2))) (else (let ((act-31 (((e-6 e-7) (Normalise-Core-toClosure 'erased arg-3 (vector 1 (vector 1 ) e-11))) eta-0))) (let ((sc11 act-31)) (case (vector-ref sc11 0) ((0) (let ((e-2 (vector-ref sc11 1))) (vector 0 e-2))) (else (let ((e-14 (vector-ref sc11 1))) (let ((act-32 (((e-43 e-7) (Normalise-Core-toClosure 'erased arg-3 (vector 1 (vector 1 ) e-11))) eta-0))) (let ((sc12 act-32)) (case (vector-ref sc12 0) ((0) (let ((e-2 (vector-ref sc12 1))) (vector 0 e-2))) (else (let ((act-33 (Normalise-Core-quote_Quote__NF arg-0 e-8 arg-3 e-14 eta-0))) (let ((sc13 act-33)) (case (vector-ref sc13 0) ((0) (let ((e-2 (vector-ref sc13 1))) (vector 0 e-2))) (else (let ((e-16 (vector-ref sc13 1))) (let ((act-34 (Normalise-Core-quote_Quote__NF arg-0 e-8 arg-3 e-14 eta-0))) (let ((sc14 act-34)) (case (vector-ref sc14 0) ((0) (let ((e-2 (vector-ref sc14 1))) (vector 0 e-2))) (else (let ((e-17 (vector-ref sc14 1))) (let ((act-35 (Unify-Core-unify_Unify__Term (vector 1 e-4 arg-0) arg-1 arg-2 envC-39 (TT-Core-refsToLocals 'erased (vector 1 e-4 (vector 0 )) (vector 1 e-4 e-11 (vector 0 )) e-16) (TT-Core-refsToLocals 'erased (vector 1 e-4 (vector 0 )) (vector 1 e-4 e-11 (vector 0 )) e-17) eta-0))) (let ((sc15 act-35)) (case (vector-ref sc15 0) ((0) (let ((e-2 (vector-ref sc15 1))) (vector 0 e-2))) (else (let ((e-18 (vector-ref sc15 1))) (vector 1 (Unify-Core-union e-10 e-18)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(else (let ((sc3 arg-5)) (case (vector-ref sc3 0) ((0) (lambda (eta-0) (Unify-Core-convertError 'erased arg-0 arg-1 arg-3 arg-4 arg-5 eta-0)))(else (let ((sc3 arg-5)) (case (vector-ref sc3 0) ((1) (let ((e-1 (vector-ref sc3 1))) (let ((e-2 (vector-ref sc3 2))) (Unify-Core-unifyApp arg-0 arg-1 arg-2 arg-3 e-1 e-2 arg-4))))(else (lambda (eta-0) (Unify-Core-unifyIfEq arg-1 arg-2 arg-0 1 arg-3 arg-4 arg-5 eta-0))))))))))))))(else (let ((sc2 arg-5)) (case (vector-ref sc2 0) ((0) (lambda (eta-0) (Unify-Core-convertError 'erased arg-0 arg-1 arg-3 arg-4 arg-5 eta-0)))(else (let ((sc2 arg-5)) (case (vector-ref sc2 0) ((1) (let ((e-1 (vector-ref sc2 1))) (let ((e-2 (vector-ref sc2 2))) (Unify-Core-unifyApp arg-0 arg-1 arg-2 arg-3 e-1 e-2 arg-4))))(else (lambda (eta-0) (Unify-Core-unifyIfEq arg-1 arg-2 arg-0 1 arg-3 arg-4 arg-5 eta-0))))))))))))))(else (let ((sc1 arg-5)) (case (vector-ref sc1 0) ((0) (lambda (eta-0) (Unify-Core-convertError 'erased arg-0 arg-1 arg-3 arg-4 arg-5 eta-0)))(else (let ((sc1 arg-5)) (case (vector-ref sc1 0) ((1) (let ((e-1 (vector-ref sc1 1))) (let ((e-2 (vector-ref sc1 2))) (Unify-Core-unifyApp arg-0 arg-1 arg-2 arg-3 e-1 e-2 arg-4))))(else (lambda (eta-0) (Unify-Core-unifyIfEq arg-1 arg-2 arg-0 1 arg-3 arg-4 arg-5 eta-0))))))))))))))) ((2) (let ((e-8 (vector-ref sc0 1))) (let ((e-9 (vector-ref sc0 2))) (let ((e-10 (vector-ref sc0 3))) (let ((e-11 (vector-ref sc0 4))) (let ((sc1 arg-5)) (case (vector-ref sc1 0) ((2) (let ((e-49 (vector-ref sc1 1))) (let ((e-50 (vector-ref sc1 2))) (let ((e-51 (vector-ref sc1 3))) (let ((e-52 (vector-ref sc1 4))) (let ((ny (vector 2 e-49 e-50 e-51 e-52))) (let ((nx (vector 2 e-8 e-9 e-10 e-11))) (Unify-Core-case--unify-7929 arg-0 e-52 e-51 e-50 e-49 ny e-11 e-10 e-9 e-8 nx arg-3 arg-2 arg-1 (EqOrd-Prelude-C-61C-61_Eq__Int e-9 e-50)))))))))(else (let ((sc1 arg-5)) (case (vector-ref sc1 0) ((1) (let ((e-1 (vector-ref sc1 1))) (let ((e-2 (vector-ref sc1 2))) (Unify-Core-unifyApp arg-0 arg-1 arg-2 arg-3 e-1 e-2 arg-4))))(else (lambda (eta-0) (Unify-Core-unifyIfEq arg-1 arg-2 arg-0 1 arg-3 arg-4 arg-5 eta-0))))))))))))) ((3) (let ((e-13 (vector-ref sc0 1))) (let ((e-14 (vector-ref sc0 2))) (let ((e-15 (vector-ref sc0 3))) (let ((e-16 (vector-ref sc0 4))) (let ((sc1 arg-5)) (case (vector-ref sc1 0) ((3) (let ((e-54 (vector-ref sc1 1))) (let ((e-55 (vector-ref sc1 2))) (let ((e-56 (vector-ref sc1 3))) (let ((e-57 (vector-ref sc1 4))) (let ((ny (vector 3 e-54 e-55 e-56 e-57))) (let ((nx (vector 3 e-13 e-14 e-15 e-16))) (Unify-Core-case--unify-8010 arg-0 e-57 e-56 e-55 e-54 ny e-16 e-15 e-14 e-13 nx arg-3 arg-2 arg-1 (TT-Core-C-61C-61_Eq__Name e-13 e-54)))))))))(else (let ((sc1 arg-5)) (case (vector-ref sc1 0) ((1) (let ((e-1 (vector-ref sc1 1))) (let ((e-2 (vector-ref sc1 2))) (Unify-Core-unifyApp arg-0 arg-1 arg-2 arg-3 e-1 e-2 arg-4))))(else (lambda (eta-0) (Unify-Core-unifyIfEq arg-1 arg-2 arg-0 1 arg-3 arg-4 arg-5 eta-0))))))))))))) ((1) (let ((e-18 (vector-ref sc0 1))) (let ((e-19 (vector-ref sc0 2))) (Unify-Core-unifyApp arg-0 arg-1 arg-2 arg-3 e-18 e-19 arg-5))))(else (let ((sc0 arg-5)) (case (vector-ref sc0 0) ((1) (let ((e-1 (vector-ref sc0 1))) (let ((e-2 (vector-ref sc0 2))) (Unify-Core-unifyApp arg-0 arg-1 arg-2 arg-3 e-1 e-2 arg-4))))(else (lambda (eta-0) (Unify-Core-unifyIfEq arg-1 arg-2 arg-0 1 arg-3 arg-4 arg-5 eta-0))))))))))
(define Unify-Core-unify_Unify__Closure (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 ext-0) (let ((act-24 (let ((act-24 (unbox arg-1))) (vector 1 act-24)))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (let ((act-25 ((Normalise-Core-evalClosure arg-0 e-5 arg-4) ext-0))) (let ((sc1 act-25)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-6 (vector-ref sc1 1))) (let ((act-26 ((Normalise-Core-evalClosure arg-0 e-5 arg-5) ext-0))) (let ((sc2 act-26)) (case (vector-ref sc2 0) ((0) (let ((e-2 (vector-ref sc2 1))) (vector 0 e-2))) (else (let ((e-7 (vector-ref sc2 1))) ((Unify-Core-unify_Unify__NF arg-0 arg-1 arg-2 arg-3 e-6 e-7) ext-0))))))))))))))))))
(define Unify-Core-__Impl_Weaken_C-40IVarsC-32C-36vsC-41 (lambda (arg-0) (vector 0 (lambda (n) (lambda (vars) (lambda (arg-5303) (Unify-Core-weaken_Weaken__C-40IVarsC-32C-36vsC-41 'erased n vars arg-5303)))) (lambda (vars) (lambda (ns) (lambda (arg-5307) (Unify-Core-weakenNs_Weaken__C-40IVarsC-32C-36vsC-41 'erased vars ns arg-5307)))))))
(define Unify-Core-__Impl_Unify_Term (lambda (ext-6 ext-1 ext-2 ext-3 ext-4 ext-5 ext-0) (Unify-Core-unify_Unify__Term ext-6 ext-1 ext-2 ext-3 ext-4 ext-5 ext-0)))
(define Unify-Core-__Impl_Unify_NF (lambda (ext-0 ext-1 ext-2 ext-3 ext-4 ext-5) (Unify-Core-unify_Unify__NF ext-0 ext-1 ext-2 ext-3 ext-4 ext-5)))
(define Unify-Core-__Impl_Unify_Closure (lambda (ext-6 ext-1 ext-2 ext-3 ext-4 ext-5 ext-0) (Unify-Core-unify_Unify__Closure ext-6 ext-1 ext-2 ext-3 ext-4 ext-5 ext-0)))
(define Unify-Core-unionAll (lambda (arg-0) (let ((sc0 arg-0)) (case (vector-ref sc0 0) ((0) (vector 0 (vector 0 ) 1)) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 e-3)) (case (vector-ref sc1 0) ((0) e-2)(else (Unify-Core-union e-2 (Unify-Core-unionAll e-3))))))))))))
(define Unify-Core-union (lambda (arg-0 arg-1) (vector 0 (List-Data-union 'erased (vector 0 (lambda (arg-2) (lambda (arg-3) (EqOrd-Prelude-C-61C-61_Eq__Int arg-2 arg-3))) (lambda (arg-4) (lambda (arg-5) (EqOrd-Prelude-C-47C-61_Eq__Int arg-4 arg-5)))) (let ((sc0 arg-0)) (let ((e-0 (vector-ref sc0 1))) e-0)) (let ((sc0 arg-1)) (let ((e-0 (vector-ref sc0 1))) e-0))) (Basics-Prelude-C-124C-124 (let ((sc0 arg-0)) (let ((e-1 (vector-ref sc0 2))) e-1)) (lambda () (let ((sc0 arg-1)) (let ((e-1 (vector-ref sc0 2))) e-1)))))))
(define Unify-Core-unifyIfEq (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 ext-0) (let ((act-24 (let ((act-24 (unbox arg-0))) (vector 1 act-24)))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (let ((act-25 (Normalise-Core-convert_Convert__NF arg-2 e-5 arg-4 arg-5 arg-6 ext-0))) (let ((sc1 act-25)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-6 (vector-ref sc1 1))) (let ((sc2 e-6)) (cond ((equal? sc2 0) (vector 1 (Unify-Core-success))) (else (let ((sc3 arg-3)) (cond ((equal? sc3 0) (Unify-Core-postpone arg-2 arg-0 arg-1 arg-4 arg-5 arg-6 ext-0)) (else (Unify-Core-convertError 'erased arg-2 arg-0 arg-4 arg-5 arg-6 ext-0)))))))))))))))))))
(define Unify-Core-unifyArgs (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (let ((sc0 arg-6)) (case (vector-ref sc0 0) ((0) (let ((sc1 arg-7)) (case (vector-ref sc1 0) ((0) (lambda (eta-0) (vector 1 (Unify-Core-success))))(else (lambda (eta-0) (Unify-Core-ufail 'erased "" eta-0)))))) ((1) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 arg-7)) (case (vector-ref sc1 0) ((1) (let ((e-6 (vector-ref sc1 1))) (let ((e-7 (vector-ref sc1 2))) (lambda (eta-0) (let ((act-24 ((Unify-Core-unifyArgs 'erased arg-1 arg-2 arg-3 arg-4 arg-5 e-3 e-7) eta-0))) (let ((sc2 act-24)) (case (vector-ref sc2 0) ((0) (let ((e-4 (vector-ref sc2 1))) (vector 0 e-4))) (else (let ((e-5 (vector-ref sc2 1))) (let ((act-25 ((((((((Builtin-fst 'erased 'erased arg-1) arg-2) arg-3) arg-4) arg-5) e-2) e-6) eta-0))) (let ((sc3 act-25)) (case (vector-ref sc3 0) ((0) (let ((e-4 (vector-ref sc3 1))) (vector 0 e-4))) (else (let ((e-8 (vector-ref sc3 1))) (vector 1 (Unify-Core-union e-8 e-5))))))))))))))))(else (lambda (eta-0) (Unify-Core-ufail 'erased "" eta-0))))))))(else (lambda (eta-0) (Unify-Core-ufail 'erased "" eta-0)))))))
(define Unify-Core-unifyApp (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (let ((sc0 arg-4)) (case (vector-ref sc0 0) ((2) (let ((e-1 (vector-ref sc0 1))) (let ((e-2 (vector-ref sc0 2))) (let ((args (List-Types-Prelude-C-43C-43 'erased e-2 arg-5))) (lambda (eta-0) (let ((act-24 (Unify-Core-patternEnv arg-1 arg-2 arg-0 arg-3 args eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-3 (vector-ref sc1 1))) (vector 0 e-3))) (else (let ((e-5 (vector-ref sc1 1))) (let ((sc2 e-5)) (case (vector-ref sc2 0) ((0) (Unify-Core-postpone arg-0 arg-1 arg-2 arg-3 (vector 1 (vector 2 e-1 e-2) arg-5) arg-6 eta-0)) (else (let ((e-3 (vector-ref sc2 1))) (let ((sc3 e-3)) (let ((e-7 (vector-ref sc3 1))) (let ((e-6 (vector-ref sc3 2))) (let ((sc4 e-6)) (let ((e-9 (vector-ref sc4 1))) (let ((e-10 (vector-ref sc4 2))) (let ((act-25 (let ((act-25 (unbox arg-1))) (vector 1 act-25)))) (let ((sc5 act-25)) (case (vector-ref sc5 0) ((0) (let ((e-4 (vector-ref sc5 1))) (vector 0 e-4))) (else (let ((e-8 (vector-ref sc5 1))) (let ((act-26 (Context-Core-clearDefs e-8 eta-0))) (let ((sc6 act-26)) (case (vector-ref sc6 0) ((0) (let ((e-4 (vector-ref sc6 1))) (vector 0 e-4))) (else (let ((e-11 (vector-ref sc6 1))) (let ((act-27 (Normalise-Core-quote_Quote__NF arg-0 e-11 arg-3 arg-6 eta-0))) (let ((sc7 act-27)) (case (vector-ref sc7 0) ((0) (let ((e-4 (vector-ref sc7 1))) (vector 0 e-4))) (else (let ((e-12 (vector-ref sc7 1))) (let ((bind-0 (vector 1 (vector 0 e-7 (vector 0 e-9 e-10))))) ((Unify-Core-case--caseC-32blockC-32inC-32unifyApp-7197 arg-0 e-2 e-1 arg-6 arg-5 arg-3 arg-2 arg-1 args e-7 e-9 e-10 bind-0 e-8 e-11 e-12 (TT-Core-shrinkTerm 'erased 'erased e-12 e-10)) eta-0)))))))))))))))))))))))))))))))))))))(else (lambda (eta-0) (let ((act-24 (let ((act-24 (unbox arg-1))) (vector 1 act-24)))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (let ((act-25 (Normalise-Core-convert_Convert__NF arg-0 e-5 arg-3 (vector 1 arg-4 arg-5) arg-6 eta-0))) (let ((sc1 act-25)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-6 (vector-ref sc1 1))) (let ((sc2 e-6)) (cond ((equal? sc2 0) (vector 1 (Unify-Core-success))) (else (Unify-Core-postpone arg-0 arg-1 arg-2 arg-3 (vector 1 arg-4 arg-5) arg-6 eta-0))))))))))))))))))))
(define Unify-Core-unify (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 ext-0 ext-1 ext-2) ((((((arg-4 arg-1) arg-2) arg-3) ext-0) ext-1) ext-2)))
(define Unify-Core-ufail (lambda (arg-0 arg-1 ext-0) (Core-Core-throw_Catchable__Core_Error 'erased (vector 3 arg-1) ext-0)))
(define Unify-Core-toSubVars (lambda (arg-0 arg-1) (let ((sc0 arg-0)) (case (vector-ref sc0 0) ((0) (vector 0 (vector 0 ) (vector 0 ))) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (Unify-Core-case--toSubVars-5811 e-2 e-3 arg-1 (Unify-Core-toSubVars e-3 (TT-Core-dropFirst 'erased 'erased arg-1))))))))))
(define Unify-Core-success (lambda () (vector 0 (vector 0 ) 1)))
(define Unify-Core-solvedHole (lambda () (vector 0 (vector 0 ) 0)))
(define Unify-Core-solveConstraints (lambda (arg-0 arg-1 ext-0) (let ((act-24 (let ((act-24 (unbox arg-1))) (vector 1 act-24)))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (let ((act-25 ((Core-Core-traverse 'erased 'erased (lambda (eta-0) (lambda (eta-1) (Unify-Core-retryGuess arg-0 arg-1 eta-0 eta-1))) (SortedSet-Data-toList 'erased (let ((sc1 e-5)) (let ((e-1 (vector-ref sc1 2))) e-1)))) ext-0))) (let ((sc1 act-25)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-6 (vector-ref sc1 1))) (let ((sc2 (Extra-Bool-Data-anyTrue e-6))) (cond ((equal? sc2 0) (Unify-Core-solveConstraints arg-0 arg-1 ext-0)) (else (vector 1 (vector 0 )))))))))))))))))
(define Unify-Core-retryGuess (lambda (arg-0 arg-1 arg-2 ext-0) (let ((act-24 (let ((act-24 (unbox arg-0))) (vector 1 act-24)))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (let ((act-25 (Context-Core-lookupDef arg-2 e-5 ext-0))) (let ((sc1 act-25)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-6 (vector-ref sc1 1))) (let ((sc2 e-6)) (case (vector-ref sc2 0) ((0) (vector 1 1)) (else (let ((e-2 (vector-ref sc2 1))) (let ((bind-0 (vector 1 e-2))) ((Unify-Core-case--caseC-32blockC-32inC-32retryGuess-8499 arg-2 arg-1 arg-0 e-5 e-2 bind-0 (let ((sc3 e-2)) (let ((e-1 (vector-ref sc3 2))) e-1))) ext-0))))))))))))))))))
(define Unify-Core-retry (lambda (arg-0 arg-1 arg-2 ext-0) (let ((act-24 (let ((act-24 (unbox arg-1))) (vector 1 act-24)))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) ((Unify-Core-case--retry-8273 arg-0 arg-2 arg-1 e-5 (SortedMap-Data-lookup 'erased 'erased arg-2 (let ((sc1 e-5)) (let ((e-2 (vector-ref sc1 3))) e-2)))) ext-0))))))))
(define Unify-Core-postpone (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 ext-0) (let ((act-24 (let ((act-24 (unbox arg-1))) (vector 1 act-24)))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (let ((act-25 (Context-Core-clearDefs e-5 ext-0))) (let ((sc1 act-25)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-6 (vector-ref sc1 1))) (let ((act-26 (Normalise-Core-quote_Quote__NF arg-0 e-6 arg-3 arg-4 ext-0))) (let ((sc2 act-26)) (case (vector-ref sc2 0) ((0) (let ((e-2 (vector-ref sc2 1))) (vector 0 e-2))) (else (let ((e-7 (vector-ref sc2 1))) (let ((act-27 (Normalise-Core-quote_Quote__NF arg-0 e-6 arg-3 arg-5 ext-0))) (let ((sc3 act-27)) (case (vector-ref sc3 0) ((0) (let ((e-2 (vector-ref sc3 1))) (vector 0 e-2))) (else (let ((e-8 (vector-ref sc3 1))) (let ((act-28 (UnifyState-Core-addConstraint arg-2 (vector 0 arg-0 arg-3 e-7 e-8) ext-0))) (let ((sc4 act-28)) (case (vector-ref sc4 0) ((0) (let ((e-2 (vector-ref sc4 1))) (vector 0 e-2))) (else (let ((e-9 (vector-ref sc4 1))) (vector 1 (Unify-Core-constrain e-9)))))))))))))))))))))))))))))
(define Unify-Core-patternEnv (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 ext-0) (let ((act-24 (let ((act-24 (unbox arg-0))) (vector 1 act-24)))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (let ((act-25 (Context-Core-clearDefs e-5 ext-0))) (let ((sc1 act-25)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-6 (vector-ref sc1 1))) (let ((act-26 ((Core-Core-traverse 'erased 'erased (lambda (eta-0) (Normalise-Core-evalClosure arg-2 e-6 eta-0)) arg-4) ext-0))) (let ((sc2 act-26)) (case (vector-ref sc2 0) ((0) (let ((e-2 (vector-ref sc2 1))) (vector 0 e-2))) (else (let ((e-7 (vector-ref sc2 1))) ((Unify-Core-case--patternEnv-5983 arg-2 arg-4 arg-3 arg-1 arg-0 e-5 e-6 e-7 (Unify-Core-getVars arg-2 (vector 0 ) e-7)) ext-0))))))))))))))))))
(define Unify-Core-instantiate (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8) (let ((ty (let ((sc0 arg-6)) (let ((e-0 (vector-ref sc0 1))) e-0)))) (lambda (eta-0) (let ((act-24 (let ((act-24 (unbox arg-0))) (vector 1 act-24)))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((act-25 ((Unify-Core-n--4410-6238-mkDef arg-2 arg-3 arg-8 arg-7 arg-6 arg-5 arg-4 arg-1 arg-0 (vector 0 ) arg-3 arg-7 (vector 0 ) arg-8 ty) eta-0))) (let ((sc1 act-25)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-6 (vector-ref sc1 1))) (let ((newdef (let ((sc2 arg-6)) (let ((e-0 (vector-ref sc2 1))) (vector 0 e-0 (vector 1 (vector 0 ) (vector 1 e-6))))))) (let ((act-26 (Context-Core-addDef arg-0 arg-5 newdef eta-0))) (let ((sc2 act-26)) (case (vector-ref sc2 0) ((0) (let ((e-2 (vector-ref sc2 1))) (vector 0 e-2))) (else (UnifyState-Core-removeHole arg-1 arg-5 eta-0)))))))))))))))))))
(define UnifyResult-Unify-Core-holesSolved (lambda (arg-0) (let ((sc0 arg-0)) (let ((e-1 (vector-ref sc0 2))) e-1))))
(define Unify-Core-getVars (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((0) (vector 1 (vector 0 ))) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 e-2)) (case (vector-ref sc1 0) ((1) (let ((e-5 (vector-ref sc1 1))) (let ((e-6 (vector-ref sc1 2))) (let ((sc2 e-5)) (case (vector-ref sc2 0) ((0) (let ((e-9 (vector-ref sc2 1))) (let ((sc3 e-6)) (case (vector-ref sc3 0) ((0) (Unify-Core-case--getVars-5706 arg-0 'erased e-9 'erased e-3 arg-1 (Unify-Core-n--3799-5692-inArgs arg-0 'erased e-9 'erased e-3 arg-1 e-9 arg-1)))(else (vector 0 ))))))(else (vector 0 )))))))(else (vector 0 )))))))))))
(define Unify-Core-convertError (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 ext-0) (let ((act-24 (let ((act-24 (unbox arg-2))) (vector 1 act-24)))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (let ((act-25 (Context-Core-clearDefs e-5 ext-0))) (let ((sc1 act-25)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-6 (vector-ref sc1 1))) (let ((act-26 (Normalise-Core-quote_Quote__NF arg-1 e-6 arg-3 arg-4 ext-0))) (let ((sc2 act-26)) (case (vector-ref sc2 0) ((0) (let ((e-2 (vector-ref sc2 1))) (vector 0 e-2))) (else (let ((e-7 (vector-ref sc2 1))) (let ((act-27 (Normalise-Core-quote_Quote__NF arg-1 e-6 arg-3 arg-5 ext-0))) (let ((sc3 act-27)) (case (vector-ref sc3 0) ((0) (let ((e-2 (vector-ref sc3 1))) (vector 0 e-2))) (else (let ((e-8 (vector-ref sc3 1))) (Core-Core-throw_Catchable__Core_Error 'erased (vector 0 arg-1 arg-3 e-7 e-8) ext-0)))))))))))))))))))))))
(define UnifyResult-Unify-Core-constraints (lambda (arg-0) (let ((sc0 arg-0)) (let ((e-0 (vector-ref sc0 1))) e-0))))
(define Unify-Core-constrain (lambda (arg-0) (vector 0 (vector 1 arg-0 (vector 0 )) 1)))
(define Extra-Bool-Data-anyTrue (lambda (arg-0) (let ((sc0 arg-0)) (case (vector-ref sc0 0) ((0) 1) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (Basics-Prelude-C-124C-124 e-2 (lambda () (Extra-Bool-Data-anyTrue e-3))))))))))
(define Normalise-Core-case--convGen-3180 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12) (let ((sc0 arg-12)) (cond ((equal? sc0 0) (Normalise-Core-allConv arg-0 arg-11 arg-10 arg-9 arg-3 arg-6)) (else (lambda (eta-0) (vector 1 1)))))))
(define Normalise-Core-case--convGen-3110 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12) (let ((sc0 arg-12)) (cond ((equal? sc0 0) (Normalise-Core-allConv arg-0 arg-11 arg-10 arg-9 arg-3 arg-6)) (else (lambda (eta-0) (vector 1 1)))))))
(define Normalise-Core-case--convGen-3058 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8) (let ((sc0 arg-8)) (cond ((equal? sc0 0) (Normalise-Core-allConv arg-0 arg-7 arg-6 arg-5 arg-1 arg-3)) (else (lambda (eta-0) (vector 1 1)))))))
(define Normalise-Core-case--convGen-2975 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12) (let ((sc0 arg-12)) (cond ((equal? sc0 0) (lambda (eta-0) (let ((act-24 (((arg-1 arg-8) arg-11) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc1 1))) (let ((act-25 (((arg-4 arg-8) arg-11) eta-0))) (let ((sc2 act-25)) (case (vector-ref sc2 0) ((0) (let ((e-2 (vector-ref sc2 1))) (vector 0 e-2))) (else (let ((e-6 (vector-ref sc2 1))) ((Normalise-Core-convGen_Convert__NF arg-0 arg-9 arg-8 arg-7 e-5 e-6) eta-0))))))))))))) (else (lambda (eta-0) (vector 1 1)))))))
(define Normalise-Core-case--chkConvHead-2799 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8) (let ((sc0 arg-8)) (cond ((equal? sc0 0) (Normalise-Core-allConv arg-0 arg-7 arg-6 arg-5 arg-1 arg-3)) (else (lambda (eta-0) (vector 1 1)))))))
(define Normalise-Core-case--quoteHead-2021 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8) (let ((sc0 arg-8)) (case (vector-ref sc0 0) ((1) (let ((e-1 (vector-ref sc0 1))) (lambda (eta-0) (vector 1 (vector 0 e-1))))) (else (lambda (eta-0) (vector 1 (vector 1 (vector 1 ) (vector 1 arg-3 arg-2)))))))))
(define Normalise-Core-case--quoteHeadC-44findName-1978 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12) (vector 1 (+ 1 arg-12))))
(define Normalise-Core-case--caseC-32blockC-32inC-32quoteHeadC-44findName-1920 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-13) (vector 1 (+ 1 arg-13))))
(define Normalise-Core-case--quoteHeadC-44findName-1847 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-13) (let ((sc0 arg-13)) (cond ((equal? sc0 0) (vector 1 0)) (else (Types-Prelude-C-62C-62C-61_Monad__Maybe 'erased 'erased (Normalise-Core-n--4494-1831-findName arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 'erased arg-11) (lambda (_-0) (vector 1 (+ 1 _-0)))))))))
(define Normalise-Core-case--quoteHead-1793 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 ext-0) (vector 1 (vector 0 arg-9))))
(define Normalise-Core-case--quoteHeadC-44addLater-1743 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-13 arg-14 arg-15) (+ 1 arg-15)))
(define Normalise-Core-case--caseC-32blockC-32inC-32evalDef-1383 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9) (let ((sc0 arg-9)) (case (vector-ref sc0 0) ((0) (let ((e-1 (vector-ref sc0 1))) (lambda (eta-0) (vector 1 e-1))))(else (lambda (eta-0) (vector 1 (arg-4))))))))
(define Normalise-Core-case--evalDef-1333 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (let ((sc0 arg-7)) (case (vector-ref sc0 0) ((0) (lambda (eta-0) (vector 1 (arg-4)))) (else (let ((e-2 (vector-ref sc0 1))) (let ((sc1 e-2)) (let ((e-5 (vector-ref sc1 1))) (let ((e-6 (vector-ref sc1 2))) (lambda (eta-0) (let ((act-24 ((Normalise-Core-evalTree arg-0 arg-2 arg-1 arg-6 e-5 e-6 arg-3) eta-0))) (let ((sc2 act-24)) (case (vector-ref sc2 0) ((0) (let ((e-3 (vector-ref sc2 1))) (vector 0 e-3))) (else (let ((e-7 (vector-ref sc2 1))) (let ((sc3 e-7)) (case (vector-ref sc3 0) ((0) (let ((e-1 (vector-ref sc3 1))) (vector 1 e-1)))(else (vector 1 (arg-4))))))))))))))))))))
(define Normalise-Core-case--argsFromStack-1299 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (let ((sc0 arg-6)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (Types-Prelude-pure_Applicative__Maybe 'erased (vector 0 (vector 1 arg-4 e-2) e-3)))))))
(define Normalise-Core-case--findAlt-1083 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9) (let ((sc0 arg-9)) (case (vector-ref sc0 0) ((0) (let ((e-1 (vector-ref sc0 1))) (lambda (eta-0) (vector 1 (vector 0 e-1))))) ((1) (Normalise-Core-findAlt arg-0 arg-1 arg-2 arg-8 arg-7 arg-6 arg-5 arg-4)) (else (lambda (eta-0) (vector 1 (vector 2 ))))))))
(define Normalise-Core-case--tryAlt-1000 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8) (let ((sc0 arg-8)) (cond ((equal? sc0 0) (Normalise-Core-evalTree arg-0 arg-2 arg-1 arg-7 arg-6 arg-5 arg-3)) (else (lambda (eta-0) (vector 1 (vector 2 ))))))))
(define Normalise-Core-case--tryAlt-914 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-13 arg-14) (let ((sc0 arg-14)) (cond ((equal? sc0 0) (Normalise-Core-evalConAlt arg-0 arg-7 arg-1 arg-13 arg-12 arg-11 arg-6 arg-2 arg-8)) (else (lambda (eta-0) (vector 1 (vector 1 ))))))))
(define Normalise-Core-case--evalConAlt-855 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9) (let ((sc0 arg-9)) (case (vector-ref sc0 0) ((1) (let ((e-1 (vector-ref sc0 1))) (Normalise-Core-evalTree arg-0 (List-Types-Prelude-C-43C-43 'erased arg-3 arg-1) arg-2 arg-8 e-1 arg-6 arg-4))) (else (lambda (eta-0) (vector 1 (vector 2 ))))))))
(define Normalise-Core-case--evalRef-756 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (let ((sc0 arg-7)) (case (vector-ref sc0 0) ((1) (let ((e-1 (vector-ref sc0 1))) (Normalise-Core-evalDef arg-0 arg-1 arg-6 (let ((sc1 e-1)) (let ((e-2 (vector-ref sc1 2))) e-2)) arg-3 arg-2))) (else (lambda (eta-0) (vector 1 (arg-2))))))))
(define Normalise-Core-n--4494-1831-findName (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9) (let ((sc0 arg-9)) (case (vector-ref sc0 0) ((0) (vector 0 )) (else (let ((e-1 (vector-ref sc0 1))) (let ((e-2 (vector-ref sc0 2))) (let ((e-3 (vector-ref sc0 3))) (let ((sc1 e-2)) (case (vector-ref sc1 0) ((1) (let ((e-4 (vector-ref sc1 1))) (let ((e-5 (vector-ref sc1 2))) (Normalise-Core-case--quoteHeadC-44findName-1847 arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 'erased e-5 e-4 e-3 e-1 (EqOrd-Prelude-C-61C-61_Eq__Int arg-2 e-5)))))(else (Types-Prelude-C-62C-62C-61_Monad__Maybe 'erased 'erased (Normalise-Core-n--4494-1831-findName arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 'erased e-3) (lambda (_-0) (vector 1 (+ 1 _-0)))))))))))))))
(define Normalise-Core-n--3238-984-concrete (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8) (let ((sc0 arg-8)) (case (vector-ref sc0 0) ((2) 0)(else 1)))))
(define Normalise-Core-n--4494-1714-addLater (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-13) (let ((sc0 arg-12)) (case (vector-ref sc0 0) ((0) arg-11) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (Normalise-Core-case--quoteHeadC-44addLater-1743 arg-0 'erased arg-2 'erased arg-4 arg-5 arg-6 arg-7 arg-8 'erased 'erased arg-11 e-2 e-3 'erased (Normalise-Core-n--4494-1714-addLater arg-0 'erased arg-2 'erased arg-4 arg-5 arg-6 arg-7 arg-8 'erased 'erased arg-11 e-3 'erased)))))))))
(define Normalise-Core-quote_Quote__Term (lambda (arg-0 arg-1 arg-2 arg-3 ext-0) (let ((act-24 (Core-Core-newRef 'erased 'erased (vector "Core.Normalise.QVar" ) 0 ext-0))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (Normalise-Core-quoteGen_Quote__Term arg-0 e-5 arg-1 arg-2 arg-3 ext-0))))))))
(define Normalise-Core-quote_Quote__NF (lambda (arg-0 arg-1 arg-2 arg-3 ext-0) (let ((act-24 (Core-Core-newRef 'erased 'erased (vector "Core.Normalise.QVar" ) 0 ext-0))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) ((Normalise-Core-quoteGen_Quote__NF arg-0 e-5 arg-1 arg-2 arg-3) ext-0))))))))
(define Normalise-Core-quote_Quote__Closure (lambda (arg-0 arg-1 arg-2 arg-3 ext-0) (let ((act-24 (Core-Core-newRef 'erased 'erased (vector "Core.Normalise.QVar" ) 0 ext-0))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (Normalise-Core-quoteGen_Quote__Closure arg-0 e-5 arg-1 arg-2 arg-3 ext-0))))))))
(define Normalise-Core-quoteGen_Quote__Term (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 ext-0) (vector 1 arg-4)))
(define Normalise-Core-quoteGen_Quote__NF (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (Normalise-Core-quoteGenNF (vector 0 ) arg-0 arg-1 arg-2 (vector 0 ) arg-3 arg-4)))
(define Normalise-Core-quoteGen_Quote__Closure (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 ext-0) (let ((act-24 ((Normalise-Core-evalClosure arg-0 arg-2 arg-4) ext-0))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) ((Normalise-Core-quoteGen_Quote__NF arg-0 arg-1 arg-2 arg-3 e-5) ext-0))))))))
(define Normalise-Core-convert_Convert__NF (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 ext-0) (let ((act-24 (Core-Core-newRef 'erased 'erased (vector "Core.Normalise.QVar" ) 0 ext-0))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) ((Normalise-Core-convGen_Convert__NF arg-0 e-5 arg-1 arg-2 arg-3 arg-4) ext-0))))))))
(define Normalise-Core-convert_Convert__Closure (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 ext-0) (let ((act-24 (Core-Core-newRef 'erased 'erased (vector "Core.Normalise.QVar" ) 0 ext-0))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (Normalise-Core-convGen_Convert__Closure arg-0 e-5 arg-1 arg-2 arg-3 arg-4 ext-0))))))))
(define Normalise-Core-convGen_Convert__NF (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-4)) (case (vector-ref sc0 0) ((0) (let ((e-5 (vector-ref sc0 2))) (let ((e-6 (vector-ref sc0 3))) (let ((sc1 arg-5)) (case (vector-ref sc1 0) ((0) (let ((e-23 (vector-ref sc1 2))) (let ((e-24 (vector-ref sc1 3))) (lambda (eta-0) (let ((act-24 (Normalise-Core-genName arg-1 "conv" eta-0))) (let ((sc2 act-24)) (case (vector-ref sc2 0) ((0) (let ((e-2 (vector-ref sc2 1))) (vector 0 e-2))) (else (let ((e-7 (vector-ref sc2 1))) (let ((c (vector 0 (vector 0 ) (vector 0 ) arg-3 (vector 1 (vector 1 ) e-7)))) (let ((act-25 ((Normalise-Core-convBinders arg-0 arg-1 arg-2 arg-3 e-5 e-23) eta-0))) (let ((sc3 act-25)) (case (vector-ref sc3 0) ((0) (let ((e-2 (vector-ref sc3 1))) (vector 0 e-2))) (else (let ((e-8 (vector-ref sc3 1))) (let ((sc4 e-8)) (cond ((equal? sc4 0) (let ((act-26 (((e-6 arg-2) c) eta-0))) (let ((sc5 act-26)) (case (vector-ref sc5 0) ((0) (let ((e-2 (vector-ref sc5 1))) (vector 0 e-2))) (else (let ((e-9 (vector-ref sc5 1))) (let ((act-27 (((e-24 arg-2) c) eta-0))) (let ((sc6 act-27)) (case (vector-ref sc6 0) ((0) (let ((e-2 (vector-ref sc6 1))) (vector 0 e-2))) (else (let ((e-10 (vector-ref sc6 1))) ((Normalise-Core-convGen_Convert__NF arg-0 arg-1 arg-2 arg-3 e-9 e-10) eta-0)))))))))))) (else (vector 1 1)))))))))))))))))))(else (let ((sc1 arg-5)) (case (vector-ref sc1 0) ((5) (lambda (eta-0) (vector 1 0)))(else (let ((sc1 arg-4)) (case (vector-ref sc1 0) ((4) (let ((sc2 arg-5)) (case (vector-ref sc2 0) ((4) (lambda (eta-0) (vector 1 0)))(else (lambda (eta-0) (vector 1 1))))))(else (lambda (eta-0) (vector 1 1)))))))))))))) ((1) (let ((e-8 (vector-ref sc0 1))) (let ((e-9 (vector-ref sc0 2))) (let ((sc1 arg-5)) (case (vector-ref sc1 0) ((1) (let ((e-26 (vector-ref sc1 1))) (let ((e-27 (vector-ref sc1 2))) (lambda (eta-0) (let ((act-24 ((Normalise-Core-chkConvHead arg-0 arg-1 arg-2 arg-3 e-8 e-26) eta-0))) (let ((sc2 act-24)) (case (vector-ref sc2 0) ((0) (let ((e-2 (vector-ref sc2 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc2 1))) (let ((sc3 e-5)) (cond ((equal? sc3 0) ((Normalise-Core-allConv arg-0 arg-1 arg-2 arg-3 e-9 e-27) eta-0)) (else (vector 1 1)))))))))))))(else (let ((sc1 arg-5)) (case (vector-ref sc1 0) ((5) (lambda (eta-0) (vector 1 0)))(else (let ((sc1 arg-4)) (case (vector-ref sc1 0) ((4) (let ((sc2 arg-5)) (case (vector-ref sc2 0) ((4) (lambda (eta-0) (vector 1 0)))(else (lambda (eta-0) (vector 1 1))))))(else (lambda (eta-0) (vector 1 1)))))))))))))) ((2) (let ((e-11 (vector-ref sc0 1))) (let ((e-12 (vector-ref sc0 2))) (let ((e-13 (vector-ref sc0 3))) (let ((e-14 (vector-ref sc0 4))) (let ((sc1 arg-5)) (case (vector-ref sc1 0) ((2) (let ((e-29 (vector-ref sc1 1))) (let ((e-30 (vector-ref sc1 2))) (let ((e-31 (vector-ref sc1 3))) (let ((e-32 (vector-ref sc1 4))) (Normalise-Core-case--convGen-3110 arg-0 e-31 e-13 e-14 e-12 e-11 e-32 e-30 e-29 arg-3 arg-2 arg-1 (EqOrd-Prelude-C-61C-61_Eq__Int e-12 e-30)))))))(else (let ((sc1 arg-5)) (case (vector-ref sc1 0) ((5) (lambda (eta-0) (vector 1 0)))(else (let ((sc1 arg-4)) (case (vector-ref sc1 0) ((4) (let ((sc2 arg-5)) (case (vector-ref sc2 0) ((4) (lambda (eta-0) (vector 1 0)))(else (lambda (eta-0) (vector 1 1))))))(else (lambda (eta-0) (vector 1 1)))))))))))))))) ((3) (let ((e-16 (vector-ref sc0 1))) (let ((e-17 (vector-ref sc0 2))) (let ((e-18 (vector-ref sc0 3))) (let ((e-19 (vector-ref sc0 4))) (let ((sc1 arg-5)) (case (vector-ref sc1 0) ((3) (let ((e-34 (vector-ref sc1 1))) (let ((e-35 (vector-ref sc1 2))) (let ((e-36 (vector-ref sc1 3))) (let ((e-37 (vector-ref sc1 4))) (Normalise-Core-case--convGen-3180 arg-0 e-36 e-18 e-19 e-17 e-16 e-37 e-35 e-34 arg-3 arg-2 arg-1 (TT-Core-C-61C-61_Eq__Name e-16 e-34)))))))(else (let ((sc1 arg-5)) (case (vector-ref sc1 0) ((5) (lambda (eta-0) (vector 1 0)))(else (let ((sc1 arg-4)) (case (vector-ref sc1 0) ((4) (let ((sc2 arg-5)) (case (vector-ref sc2 0) ((4) (lambda (eta-0) (vector 1 0)))(else (lambda (eta-0) (vector 1 1))))))(else (lambda (eta-0) (vector 1 1)))))))))))))))) ((5) (lambda (eta-0) (vector 1 0)))(else (let ((sc0 arg-5)) (case (vector-ref sc0 0) ((5) (lambda (eta-0) (vector 1 0)))(else (let ((sc0 arg-4)) (case (vector-ref sc0 0) ((4) (let ((sc1 arg-5)) (case (vector-ref sc1 0) ((4) (lambda (eta-0) (vector 1 0)))(else (lambda (eta-0) (vector 1 1))))))(else (lambda (eta-0) (vector 1 1)))))))))))))
(define Normalise-Core-convGen_Convert__Closure (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 ext-0) (let ((act-24 ((Normalise-Core-evalClosure arg-0 arg-2 arg-4) ext-0))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (let ((act-25 ((Normalise-Core-evalClosure arg-0 arg-2 arg-5) ext-0))) (let ((sc1 act-25)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-6 (vector-ref sc1 1))) ((Normalise-Core-convGen_Convert__NF arg-0 arg-1 arg-2 arg-3 e-5 e-6) ext-0)))))))))))))
(define Normalise-Core-__Impl_Quote_Term (lambda () (vector 0 (lambda (vars) (lambda (arg-1506) (lambda (arg-1507) (lambda (arg-1509) (lambda (eta-0) (Normalise-Core-quote_Quote__Term vars arg-1506 arg-1507 arg-1509 eta-0)))))) (lambda (vars) (lambda (arg-1511) (lambda (arg-1513) (lambda (arg-1514) (lambda (arg-1516) (lambda (eta-0) (Normalise-Core-quoteGen_Quote__Term vars arg-1511 arg-1513 arg-1514 arg-1516 eta-0))))))))))
(define Normalise-Core-__Impl_Quote_NF (lambda () (vector 0 (lambda (vars) (lambda (arg-1506) (lambda (arg-1507) (lambda (arg-1509) (lambda (eta-0) (Normalise-Core-quote_Quote__NF vars arg-1506 arg-1507 arg-1509 eta-0)))))) (lambda (vars) (lambda (arg-1511) (lambda (arg-1513) (lambda (arg-1514) (lambda (arg-1516) (Normalise-Core-quoteGen_Quote__NF vars arg-1511 arg-1513 arg-1514 arg-1516)))))))))
(define Normalise-Core-__Impl_Quote_Closure (lambda () (vector 0 (lambda (vars) (lambda (arg-1506) (lambda (arg-1507) (lambda (arg-1509) (lambda (eta-0) (Normalise-Core-quote_Quote__Closure vars arg-1506 arg-1507 arg-1509 eta-0)))))) (lambda (vars) (lambda (arg-1511) (lambda (arg-1513) (lambda (arg-1514) (lambda (arg-1516) (lambda (eta-0) (Normalise-Core-quoteGen_Quote__Closure vars arg-1511 arg-1513 arg-1514 arg-1516 eta-0))))))))))
(define Normalise-Core-__Impl_Convert_NF (lambda () (vector 0 (lambda (vars) (lambda (arg-2575) (lambda (arg-2576) (lambda (arg-2578) (lambda (arg-2579) (lambda (eta-0) (Normalise-Core-convert_Convert__NF vars arg-2575 arg-2576 arg-2578 arg-2579 eta-0))))))) (lambda (vars) (lambda (arg-2581) (lambda (arg-2583) (lambda (arg-2584) (lambda (arg-2586) (lambda (arg-2587) (Normalise-Core-convGen_Convert__NF vars arg-2581 arg-2583 arg-2584 arg-2586 arg-2587))))))))))
(define Normalise-Core-__Impl_Convert_Closure (lambda () (vector 0 (lambda (vars) (lambda (arg-2575) (lambda (arg-2576) (lambda (arg-2578) (lambda (arg-2579) (lambda (eta-0) (Normalise-Core-convert_Convert__Closure vars arg-2575 arg-2576 arg-2578 arg-2579 eta-0))))))) (lambda (vars) (lambda (arg-2581) (lambda (arg-2583) (lambda (arg-2584) (lambda (arg-2586) (lambda (arg-2587) (lambda (eta-0) (Normalise-Core-convGen_Convert__Closure vars arg-2581 arg-2583 arg-2584 arg-2586 arg-2587 eta-0)))))))))))
(define Normalise-Core-tryAlt (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (let ((sc0 arg-6)) (case (vector-ref sc0 0) ((2) (let ((e-3 (vector-ref sc0 1))) (let ((e-4 (vector-ref sc0 2))) (let ((e-5 (vector-ref sc0 3))) (let ((e-6 (vector-ref sc0 4))) (let ((sc1 arg-7)) (case (vector-ref sc1 0) ((0) (let ((e-8 (vector-ref sc1 1))) (let ((e-9 (vector-ref sc1 2))) (let ((e-10 (vector-ref sc1 3))) (let ((e-11 (vector-ref sc1 4))) (Normalise-Core-case--tryAlt-914 arg-0 arg-1 e-6 e-5 e-4 e-3 e-10 arg-2 e-11 e-9 e-8 arg-5 arg-4 arg-3 (EqOrd-Prelude-C-61C-61_Eq__Int e-9 e-4)))))))(else (let ((sc1 arg-7)) (case (vector-ref sc1 0) ((1) (let ((e-1 (vector-ref sc1 1))) (Normalise-Core-case--tryAlt-1000 arg-0 arg-1 arg-2 e-1 arg-6 arg-5 arg-4 arg-3 (Normalise-Core-n--3238-984-concrete arg-0 arg-1 arg-2 e-1 arg-6 arg-5 arg-4 arg-3 arg-6))))(else (lambda (eta-0) (vector 1 (vector 2 ))))))))))))))(else (let ((sc0 arg-7)) (case (vector-ref sc0 0) ((1) (let ((e-1 (vector-ref sc0 1))) (Normalise-Core-case--tryAlt-1000 arg-0 arg-1 arg-2 e-1 arg-6 arg-5 arg-4 arg-3 (Normalise-Core-n--3238-984-concrete arg-0 arg-1 arg-2 e-1 arg-6 arg-5 arg-4 arg-3 arg-6))))(else (lambda (eta-0) (vector 1 (vector 2 )))))))))))
(define Normalise-Core-toClosure (lambda (arg-0 arg-1 arg-2) (vector 0 (vector 0 ) (vector 0 ) arg-1 arg-2)))
(define Normalise-Core-quoteHead (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (let ((sc0 arg-6)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (lambda (eta-0) (Normalise-Core-case--quoteHead-1793 arg-1 'erased e-2 'erased arg-5 arg-0 arg-4 arg-3 arg-2 (Normalise-Core-n--4494-1714-addLater arg-1 'erased e-2 'erased arg-5 arg-0 arg-4 arg-3 arg-2 'erased 'erased e-2 arg-0 'erased) eta-0)))) ((1) (let ((e-5 (vector-ref sc0 1))) (let ((e-6 (vector-ref sc0 2))) (let ((sc1 e-5)) (case (vector-ref sc1 0) ((1) (let ((sc2 e-6)) (case (vector-ref sc2 0) ((1) (let ((e-10 (vector-ref sc2 1))) (let ((e-11 (vector-ref sc2 2))) (Normalise-Core-case--quoteHead-2021 arg-0 arg-1 e-11 e-10 arg-5 arg-4 arg-3 arg-2 (Normalise-Core-n--4494-1831-findName arg-0 arg-1 e-11 e-10 arg-5 arg-4 arg-3 arg-2 'erased arg-4)))))(else (lambda (eta-0) (vector 1 (vector 1 e-5 e-6)))))))(else (lambda (eta-0) (vector 1 (vector 1 e-5 e-6))))))))) (else (let ((e-8 (vector-ref sc0 1))) (let ((e-9 (vector-ref sc0 2))) (lambda (eta-0) (let ((act-24 ((Normalise-Core-quoteArgs arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 e-9) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc1 1))) (vector 1 (vector 2 e-8 e-5)))))))))))))))
(define Normalise-Core-quoteGenNF (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (let ((sc0 arg-6)) (case (vector-ref sc0 0) ((0) (let ((e-1 (vector-ref sc0 1))) (let ((e-2 (vector-ref sc0 2))) (let ((e-3 (vector-ref sc0 3))) (lambda (eta-0) (let ((act-24 (Normalise-Core-genName arg-2 "qv" eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-4 (vector-ref sc1 1))) (vector 0 e-4))) (else (let ((e-5 (vector-ref sc1 1))) (let ((act-25 (let ((act-25 (((e-3 arg-3) (Normalise-Core-toClosure 'erased arg-5 (vector 1 (vector 1 ) e-5))) eta-0))) (let ((sc2 act-25)) (case (vector-ref sc2 0) ((0) (let ((e-4 (vector-ref sc2 1))) (vector 0 e-4))) (else (let ((e-6 (vector-ref sc2 1))) ((Normalise-Core-quoteGenNF (vector 1 e-1 arg-0) arg-1 arg-2 arg-3 (vector 1 e-1 e-5 arg-4) arg-5 e-6) eta-0)))))))) (let ((sc2 act-25)) (case (vector-ref sc2 0) ((0) (let ((e-4 (vector-ref sc2 1))) (vector 0 e-4))) (else (let ((e-6 (vector-ref sc2 1))) (let ((act-26 ((Normalise-Core-quoteBinder arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 e-2) eta-0))) (let ((sc3 act-26)) (case (vector-ref sc3 0) ((0) (let ((e-4 (vector-ref sc3 1))) (vector 0 e-4))) (else (let ((e-7 (vector-ref sc3 1))) (vector 1 (vector 3 e-1 e-7 e-6)))))))))))))))))))))) ((1) (let ((e-5 (vector-ref sc0 1))) (let ((e-6 (vector-ref sc0 2))) (lambda (eta-0) (let ((act-24 ((Normalise-Core-quoteHead arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 e-5) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-7 (vector-ref sc1 1))) (let ((act-25 ((Normalise-Core-quoteArgs arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 e-6) eta-0))) (let ((sc2 act-25)) (case (vector-ref sc2 0) ((0) (let ((e-2 (vector-ref sc2 1))) (vector 0 e-2))) (else (let ((e-8 (vector-ref sc2 1))) (vector 1 (TT-Core-apply 'erased e-7 e-8)))))))))))))))) ((2) (let ((e-8 (vector-ref sc0 1))) (let ((e-9 (vector-ref sc0 2))) (let ((e-10 (vector-ref sc0 3))) (let ((e-11 (vector-ref sc0 4))) (lambda (eta-0) (let ((act-24 ((Normalise-Core-quoteArgs arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 e-11) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc1 1))) (vector 1 (TT-Core-apply 'erased (vector 1 (vector 2 e-9 e-10) e-8) e-5))))))))))))) ((3) (let ((e-13 (vector-ref sc0 1))) (let ((e-14 (vector-ref sc0 2))) (let ((e-15 (vector-ref sc0 3))) (let ((e-16 (vector-ref sc0 4))) (lambda (eta-0) (let ((act-24 ((Normalise-Core-quoteArgs arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 e-16) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc1 1))) (vector 1 (TT-Core-apply 'erased (vector 1 (vector 3 e-14 e-15) e-13) e-5))))))))))))) ((5) (lambda (eta-0) (vector 1 (vector 6 )))) (else (lambda (eta-0) (vector 1 (vector 5 ))))))))
(define Normalise-Core-quoteGen (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (let ((e-2 (vector-ref sc0 2))) (lambda (arg-3) (lambda (arg-4) (lambda (arg-5) (lambda (arg-6) (((((e-2 arg-1) arg-3) arg-4) arg-5) arg-6)))))))))
(define Normalise-Core-quoteBinder (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (let ((sc0 arg-6)) (case (vector-ref sc0 0) ((0) (let ((e-1 (vector-ref sc0 1))) (let ((e-2 (vector-ref sc0 2))) (let ((e-3 (vector-ref sc0 3))) (lambda (eta-0) (let ((act-24 ((Normalise-Core-quoteGenNF arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 e-3) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-4 (vector-ref sc1 1))) (vector 0 e-4))) (else (let ((e-5 (vector-ref sc1 1))) (vector 1 (vector 0 e-1 e-2 e-5)))))))))))) ((1) (let ((e-5 (vector-ref sc0 1))) (let ((e-6 (vector-ref sc0 2))) (let ((e-7 (vector-ref sc0 3))) (lambda (eta-0) (let ((act-24 ((Normalise-Core-quoteGenNF arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 e-7) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-8 (vector-ref sc1 1))) (vector 1 (vector 1 e-5 e-6 e-8)))))))))))) ((2) (let ((e-9 (vector-ref sc0 1))) (let ((e-10 (vector-ref sc0 2))) (lambda (eta-0) (let ((act-24 ((Normalise-Core-quoteGenNF arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 e-10) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc1 1))) (vector 1 (vector 2 e-9 e-5))))))))))) (else (let ((e-12 (vector-ref sc0 1))) (lambda (eta-0) (let ((act-24 ((Normalise-Core-quoteGenNF arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 e-12) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc1 1))) (vector 1 (vector 3 e-5))))))))))))))
(define Normalise-Core-quoteArgs (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (let ((sc0 arg-6)) (case (vector-ref sc0 0) ((0) (lambda (eta-0) (vector 1 (vector 0 )))) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (lambda (eta-0) (let ((act-24 ((Normalise-Core-evalClosure arg-1 arg-3 e-2) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-4 (vector-ref sc1 1))) (vector 0 e-4))) (else (let ((e-5 (vector-ref sc1 1))) (let ((act-25 ((Normalise-Core-quoteGenNF arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 e-5) eta-0))) (let ((sc2 act-25)) (case (vector-ref sc2 0) ((0) (let ((e-4 (vector-ref sc2 1))) (vector 0 e-4))) (else (let ((e-6 (vector-ref sc2 1))) (let ((act-26 ((Normalise-Core-quoteArgs arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 e-3) eta-0))) (let ((sc3 act-26)) (case (vector-ref sc3 0) ((0) (let ((e-4 (vector-ref sc3 1))) (vector 0 e-4))) (else (let ((e-7 (vector-ref sc3 1))) (vector 1 (vector 1 e-6 e-7)))))))))))))))))))))))))
(define Normalise-Core-quote (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (let ((e-1 (vector-ref sc0 1))) (lambda (arg-3) (lambda (arg-4) (lambda (arg-5) ((((e-1 arg-1) arg-3) arg-4) arg-5))))))))
(define Normalise-Core-normalise (lambda (arg-0 arg-1 arg-2 arg-3 ext-0) (let ((act-24 ((Normalise-Core-nf arg-0 arg-1 arg-2 arg-3) ext-0))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (Normalise-Core-quote_Quote__NF arg-0 arg-1 arg-2 e-5 ext-0))))))))
(define Normalise-Core-nf (lambda (arg-0 arg-1 arg-2 arg-3) (Normalise-Core-eval arg-1 arg-0 (vector 0 ) arg-2 (vector 0 ) arg-3 (vector 0 ))))
(define Normalise-Core-gnf (lambda (arg-0 arg-1 arg-2) (vector 0 (lambda (eta-0) (vector 1 arg-2)) (lambda (c) (lambda (eta-0) (let ((act-24 (let ((act-24 (unbox c))) (vector 1 act-24)))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) ((Normalise-Core-nf arg-0 e-5 arg-1 arg-2) eta-0)))))))))))
(define Normalise-Core-glueBack (lambda (arg-0 arg-1 arg-2 arg-3) (vector 0 (lambda (eta-0) (let ((act-24 (Context-Core-clearDefs arg-1 eta-0))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (Normalise-Core-quote_Quote__NF arg-0 e-5 arg-2 arg-3 eta-0))))))) (lambda (eta-0) (lambda (eta-1) (vector 1 arg-3))))))
(define Normalise-Core-getValArity (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 2))) (let ((e-3 (vector-ref sc0 3))) (let ((sc1 e-2)) (case (vector-ref sc1 0) ((1) (lambda (eta-0) (let ((act-24 (((e-3 arg-1) (Normalise-Core-toClosure 'erased arg-2 (vector 6 ))) eta-0))) (let ((sc2 act-24)) (case (vector-ref sc2 0) ((0) (let ((e-4 (vector-ref sc2 1))) (vector 0 e-4))) (else (let ((e-8 (vector-ref sc2 1))) (let ((act-25 ((Normalise-Core-getValArity arg-0 arg-1 arg-2 e-8) eta-0))) (let ((sc3 act-25)) (case (vector-ref sc3 0) ((0) (let ((e-4 (vector-ref sc3 1))) (vector 0 e-4))) (else (let ((e-9 (vector-ref sc3 1))) (vector 1 (+ 1 e-9))))))))))))))(else (lambda (eta-0) (vector 1 0))))))))(else (lambda (eta-0) (vector 1 0)))))))
(define Normalise-Core-getTerm (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (let ((e-1 (vector-ref sc0 1))) e-1))))
(define Normalise-Core-getNF (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (let ((e-2 (vector-ref sc0 2))) (e-2 arg-1)))))
(define Normalise-Core-getCaseBound (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((0) (let ((sc1 arg-4)) (case (vector-ref sc1 0) ((0) (vector 1 arg-5)) (else (vector 0 ))))) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 arg-4)) (case (vector-ref sc1 0) ((0) (vector 0 )) (else (let ((e-11 (vector-ref sc1 2))) (Interfaces-Prelude-C-60C-36C-62 'erased 'erased 'erased (lambda (eta-0) (lambda (eta-1) (lambda (eta-2) (lambda (eta-3) (Types-Prelude-map_Functor__Maybe 'erased 'erased eta-2 eta-3))))) (lambda (arg-6) (vector 1 e-2 arg-6)) (Normalise-Core-getCaseBound arg-0 'erased 'erased e-3 e-11 arg-5)))))))))))))
(define Normalise-Core-getArity (lambda (arg-0 arg-1 arg-2 arg-3 ext-0) (let ((act-24 ((Normalise-Core-nf arg-0 arg-1 arg-2 arg-3) ext-0))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) ((Normalise-Core-getValArity arg-0 arg-1 arg-2 e-5) ext-0))))))))
(define Normalise-Core-genName (lambda (arg-0 arg-1 ext-0) (let ((act-24 (let ((act-24 (unbox arg-0))) (vector 1 act-24)))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (let ((act-25 (let ((act-25 (set-box! arg-0 (b+ e-5 1 63)))) (vector 1 act-25)))) (let ((sc1 act-25)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (vector 1 (vector 1 arg-1 e-5)))))))))))))
(define Normalise-Core-gType (lambda (arg-0) (vector 0 (lambda (eta-0) (vector 1 (vector 5 ))) (lambda (eta-0) (lambda (eta-1) (vector 1 (vector 4 )))))))
(define Normalise-Core-findAlt (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (let ((sc0 arg-7)) (case (vector-ref sc0 0) ((0) (lambda (eta-0) (vector 1 (vector 2 )))) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (lambda (eta-0) (let ((act-24 ((Normalise-Core-tryAlt arg-0 arg-2 arg-1 arg-3 arg-4 arg-5 arg-6 e-2) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-4 (vector-ref sc1 1))) (vector 0 e-4))) (else (let ((e-5 (vector-ref sc1 1))) (let ((sc2 e-5)) (case (vector-ref sc2 0) ((0) (let ((e-1 (vector-ref sc2 1))) (vector 1 (vector 0 e-1)))) ((1) ((Normalise-Core-findAlt arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 e-3) eta-0)) (else (vector 1 (vector 2 ))))))))))))))))))
(define Normalise-Core-evalTree (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (let ((sc0 arg-6)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 3))) (let ((e-5 (vector-ref sc0 5))) (lambda (eta-0) (let ((act-24 ((Normalise-Core-evalLocal arg-0 'erased arg-2 arg-1 arg-3 e-2 'erased (vector 0 ) arg-4) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-3 (vector-ref sc1 1))) (vector 0 e-3))) (else (let ((e-6 (vector-ref sc1 1))) ((Normalise-Core-findAlt arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 e-6 e-5) eta-0)))))))))) ((1) (let ((e-7 (vector-ref sc0 1))) (lambda (eta-0) (let ((act-24 ((Normalise-Core-eval arg-0 arg-2 arg-1 arg-3 arg-4 (TT-Core-embed 'erased 'erased e-7) arg-5) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc1 1))) (vector 1 (vector 0 e-5))))))))))(else (lambda (eta-0) (vector 1 (vector 2 ))))))))
(define Normalise-Core-evalTop (lambda (arg-0 arg-1 arg-2 ext-0 ext-1 ext-2 ext-3) (Normalise-Core-eval arg-2 arg-0 arg-1 ext-0 ext-1 ext-2 ext-3)))
(define Normalise-Core-evalRef (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((2) (let ((e-0 (vector-ref sc0 1))) (let ((e-1 (vector-ref sc0 2))) (lambda (eta-0) (vector 1 (vector 2 arg-4 e-0 e-1 arg-5)))))) ((3) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (lambda (eta-0) (vector 1 (vector 3 arg-4 e-2 e-3 arg-5)))))) ((1) (lambda (eta-0) (vector 1 (arg-6))))(else (lambda (eta-0) (let ((act-24 (Context-Core-lookupDef arg-4 arg-0 eta-0))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (let ((sc1 e-5)) (case (vector-ref sc1 0) ((1) (let ((e-1 (vector-ref sc1 1))) ((Normalise-Core-evalDef arg-0 arg-1 arg-2 (let ((sc2 e-1)) (let ((e-2 (vector-ref sc2 2))) e-2)) arg-5 arg-6) eta-0))) (else (vector 1 (arg-6))))))))))))))))
(define Normalise-Core-evalMeta (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (Normalise-Core-evalRef arg-0 arg-1 arg-2 (vector 0 ) arg-3 (List-Types-Prelude-C-43C-43 'erased arg-4 arg-5) (lambda () (vector 1 (vector 2 arg-3 arg-4) arg-5)))))
(define Normalise-Core-evalLocal (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((0) (lambda (eta-0) (vector 1 (vector 1 (vector 0 arg-5) arg-7)))) (else (let ((e-3 (vector-ref sc0 2))) (let ((sc1 arg-5)) (cond ((equal? sc1 0) (let ((sc2 arg-8)) (let ((e-8 (vector-ref sc2 1))) (Normalise-Core-evalLocClosure arg-0 arg-2 arg-4 arg-7 e-8))))(else (let ((e-4 (- arg-5 1))) (let ((sc1 arg-8)) (let ((e-14 (vector-ref sc1 2))) (Normalise-Core-evalLocal arg-0 'erased arg-2 e-3 arg-4 e-4 'erased arg-7 e-14)))))))))))))
(define Normalise-Core-evalLocClosure (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-4)) (let ((e-1 (vector-ref sc0 1))) (let ((e-2 (vector-ref sc0 2))) (let ((e-3 (vector-ref sc0 3))) (let ((e-4 (vector-ref sc0 4))) (Normalise-Core-eval arg-0 arg-1 e-1 e-3 e-2 e-4 arg-3))))))))
(define Normalise-Core-evalDef (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((1) (let ((e-0 (vector-ref sc0 1))) (let ((e-1 (vector-ref sc0 2))) (Normalise-Core-case--evalDef-1333 arg-0 arg-1 e-0 e-1 arg-5 arg-4 arg-2 (Normalise-Core-argsFromStack arg-0 'erased e-0 arg-4)))))(else (lambda (eta-0) (vector 1 (arg-5))))))))
(define Normalise-Core-evalConAlt (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8) (Normalise-Core-case--evalConAlt-855 arg-0 arg-1 arg-2 arg-6 arg-8 arg-7 arg-5 arg-4 arg-3 (Normalise-Core-getCaseBound arg-0 'erased 'erased arg-7 arg-6 arg-4))))
(define Normalise-Core-evalClosure (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (let ((e-1 (vector-ref sc0 1))) (let ((e-2 (vector-ref sc0 2))) (let ((e-3 (vector-ref sc0 3))) (let ((e-4 (vector-ref sc0 4))) (Normalise-Core-eval arg-1 arg-0 e-1 e-3 e-2 e-4 (vector 0 )))))))))
(define Normalise-Core-eval (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (let ((sc0 arg-5)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (Normalise-Core-evalLocal arg-0 'erased arg-1 arg-2 arg-3 e-2 'erased arg-6 arg-4))) ((1) (let ((e-5 (vector-ref sc0 1))) (let ((e-6 (vector-ref sc0 2))) (Normalise-Core-evalRef arg-0 arg-1 arg-3 e-5 e-6 arg-6 (lambda () (vector 1 (vector 1 e-5 e-6) arg-6)))))) ((2) (let ((e-8 (vector-ref sc0 1))) (let ((e-9 (vector-ref sc0 2))) (Normalise-Core-evalMeta arg-0 arg-1 arg-3 e-8 (Types-Prelude-map_Functor__List 'erased 'erased (lambda (eta-0) (vector 0 arg-2 arg-4 arg-3 eta-0)) e-9) arg-6)))) ((3) (let ((e-11 (vector-ref sc0 1))) (let ((e-12 (vector-ref sc0 2))) (let ((e-13 (vector-ref sc0 3))) (let ((sc1 e-12)) (case (vector-ref sc1 0) ((0) (let ((sc2 arg-6)) (case (vector-ref sc2 0) ((1) (let ((e-24 (vector-ref sc2 1))) (let ((e-25 (vector-ref sc2 2))) (Normalise-Core-eval arg-0 arg-1 (vector 1 e-11 arg-2) arg-3 (vector 1 e-24 arg-4) e-13 e-25))))(else (lambda (eta-0) (let ((act-24 ((Binder-Core-Core-traverse 'erased 'erased (lambda (tm) (Normalise-Core-eval arg-0 arg-1 arg-2 arg-3 arg-4 tm (vector 0 ))) e-12) eta-0))) (let ((sc2 act-24)) (case (vector-ref sc2 0) ((0) (let ((e-2 (vector-ref sc2 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc2 1))) (vector 1 (vector 0 e-11 e-5 (lambda (defsC-39) (lambda (arg) (Normalise-Core-evalTop arg-1 (vector 1 e-11 arg-2) defsC-39 arg-3 (vector 1 arg arg-4) e-13 arg-6)))))))))))))))(else (lambda (eta-0) (let ((act-24 ((Binder-Core-Core-traverse 'erased 'erased (lambda (tm) (Normalise-Core-eval arg-0 arg-1 arg-2 arg-3 arg-4 tm (vector 0 ))) e-12) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc1 1))) (vector 1 (vector 0 e-11 e-5 (lambda (defsC-39) (lambda (arg) (Normalise-Core-evalTop arg-1 (vector 1 e-11 arg-2) defsC-39 arg-3 (vector 1 arg arg-4) e-13 arg-6)))))))))))))))))) ((4) (let ((e-15 (vector-ref sc0 1))) (let ((e-16 (vector-ref sc0 2))) (Normalise-Core-eval arg-0 arg-1 arg-2 arg-3 arg-4 e-15 (vector 1 (vector 0 arg-2 arg-4 arg-3 e-16) arg-6))))) ((5) (lambda (eta-0) (vector 1 (vector 4 )))) (else (lambda (eta-0) (vector 1 (vector 5 ))))))))
(define Normalise-Core-convert (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (let ((e-1 (vector-ref sc0 1))) (lambda (arg-3) (lambda (arg-4) (lambda (arg-5) (lambda (arg-6) (((((e-1 arg-1) arg-3) arg-4) arg-5) arg-6)))))))))
(define Normalise-Core-convGen (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (let ((e-2 (vector-ref sc0 2))) (lambda (arg-3) (lambda (arg-4) (lambda (arg-5) (lambda (arg-6) (lambda (arg-7) ((((((e-2 arg-1) arg-3) arg-4) arg-5) arg-6) arg-7))))))))))
(define Normalise-Core-convBinders (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-4)) (case (vector-ref sc0 0) ((1) (let ((e-3 (vector-ref sc0 3))) (let ((sc1 arg-5)) (case (vector-ref sc1 0) ((1) (let ((e-11 (vector-ref sc1 3))) (Normalise-Core-convGen_Convert__NF arg-0 arg-1 arg-2 arg-3 e-3 e-11)))(else (lambda (eta-0) (vector 1 1))))))) ((0) (let ((e-7 (vector-ref sc0 3))) (let ((sc1 arg-5)) (case (vector-ref sc1 0) ((0) (let ((e-15 (vector-ref sc1 3))) (Normalise-Core-convGen_Convert__NF arg-0 arg-1 arg-2 arg-3 e-7 e-15)))(else (lambda (eta-0) (vector 1 1)))))))(else (lambda (eta-0) (vector 1 1)))))))
(define Normalise-Core-chkConvHead (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-4)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (let ((sc1 arg-5)) (case (vector-ref sc1 0) ((0) (let ((e-12 (vector-ref sc1 1))) (lambda (eta-0) (vector 1 (Types-Prelude-C-61C-61_Eq__Nat e-2 e-12)))))(else (lambda (eta-0) (vector 1 1))))))) ((1) (let ((e-6 (vector-ref sc0 2))) (let ((sc1 arg-5)) (case (vector-ref sc1 0) ((1) (let ((e-16 (vector-ref sc1 2))) (lambda (eta-0) (vector 1 (TT-Core-C-61C-61_Eq__Name e-6 e-16)))))(else (lambda (eta-0) (vector 1 1))))))) ((2) (let ((e-8 (vector-ref sc0 1))) (let ((e-9 (vector-ref sc0 2))) (let ((sc1 arg-5)) (case (vector-ref sc1 0) ((2) (let ((e-18 (vector-ref sc1 1))) (let ((e-19 (vector-ref sc1 2))) (Normalise-Core-case--chkConvHead-2799 arg-0 e-9 e-8 e-19 e-18 arg-3 arg-2 arg-1 (TT-Core-C-61C-61_Eq__Name e-8 e-18)))))(else (lambda (eta-0) (vector 1 1))))))))(else (lambda (eta-0) (vector 1 1)))))))
(define Normalise-Core-argsFromStack (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((0) (vector 1 (vector 0 (vector 0 ) arg-3))) (else (let ((e-3 (vector-ref sc0 2))) (let ((sc1 arg-3)) (case (vector-ref sc1 0) ((0) (vector 0 )) (else (let ((e-6 (vector-ref sc1 1))) (let ((e-7 (vector-ref sc1 2))) (Types-Prelude-C-62C-62C-61_Monad__Maybe 'erased 'erased (Normalise-Core-argsFromStack arg-0 'erased e-3 e-7) (lambda (_-0) (let ((sc2 _-0)) (let ((e-5 (vector-ref sc2 1))) (let ((e-4 (vector-ref sc2 2))) (Types-Prelude-pure_Applicative__Maybe 'erased (vector 0 (vector 1 e-6 e-5) e-4))))))))))))))))))
(define Normalise-Core-allConv (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-4)) (case (vector-ref sc0 0) ((0) (let ((sc1 arg-5)) (case (vector-ref sc1 0) ((0) (lambda (eta-0) (vector 1 0)))(else (lambda (eta-0) (vector 1 1)))))) ((1) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 arg-5)) (case (vector-ref sc1 0) ((1) (let ((e-6 (vector-ref sc1 1))) (let ((e-7 (vector-ref sc1 2))) (lambda (eta-0) (let ((act-24 (Normalise-Core-convGen_Convert__Closure arg-0 arg-1 arg-2 arg-3 e-2 e-6 eta-0))) (let ((sc2 act-24)) (case (vector-ref sc2 0) ((0) (let ((e-4 (vector-ref sc2 1))) (vector 0 e-4))) (else (let ((e-5 (vector-ref sc2 1))) (let ((act-25 ((Normalise-Core-allConv arg-0 arg-1 arg-2 arg-3 e-3 e-7) eta-0))) (let ((sc3 act-25)) (case (vector-ref sc3 0) ((0) (let ((e-4 (vector-ref sc3 1))) (vector 0 e-4))) (else (let ((e-8 (vector-ref sc3 1))) (vector 1 (Basics-Prelude-C-38C-38 e-5 (lambda () e-8)))))))))))))))))(else (lambda (eta-0) (vector 1 1))))))))(else (lambda (eta-0) (vector 1 1)))))))
(define Normalise-Core-Stack (lambda (arg-0) (vector "Prelude.Types.List" (vector "Core.Value.Closure" arg-0))))
(define CaseBuilder-Core-with--groupConsC-44addConG-7652 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-13 arg-14 arg-15 arg-16 arg-17) (let ((sc0 arg-10)) (case (vector-ref sc0 0) ((0) (let ((e-7 (vector-ref sc0 1))) (let ((e-8 (vector-ref sc0 2))) (let ((e-9 (vector-ref sc0 3))) (let ((e-10 (vector-ref sc0 4))) (let ((sc1 e-10)) (case (vector-ref sc1 0) ((1) (let ((e-12 (vector-ref sc1 1))) (let ((e-13 (vector-ref sc1 2))) (let ((sc2 e-12)) (case (vector-ref sc2 0) ((0) (let ((e-16 (vector-ref sc2 1))) (let ((e-17 (vector-ref sc2 2))) (let ((e-18 (vector-ref sc2 3))) (let ((sc3 arg-14)) (case (vector-ref sc3 0) ((0) (let ((e-29 (vector-ref sc3 1))) (let ((newps (CaseBuilder-Core-newPats 'erased 'erased 'erased arg-11 e-29 e-17))) (let ((patsC-39 (CaseBuilder-Core-updatePatNames 'erased 'erased (CaseBuilder-Core-updateNames (List-Data-zip 'erased 'erased e-7 arg-11)) (CaseBuilder-Core-weakenNs 'erased arg-9 e-7 arg-17)))) (let ((newclause (vector 0 e-16 (CaseBuilder-Core-C-43C-43 'erased 'erased 'erased newps patsC-39) (TT-Core-weakenNs_Weaken__Term arg-9 e-7 arg-16)))) (lambda (eta-0) (vector 1 (vector 1 (vector 0 e-7 e-8 e-9 (vector 1 (vector 0 e-16 e-17 e-18) (List-Types-Prelude-C-43C-43 'erased e-13 (vector 1 newclause (vector 0 ))))) arg-15))))))))(else (let ((sc3 arg-14)) (lambda (eta-0) (let ((act-24 ((CaseBuilder-Core-n--6374-7334-addConG arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-9 arg-8 arg-13 arg-12 arg-11 arg-17 arg-16 arg-15) eta-0))) (let ((sc4 act-24)) (case (vector-ref sc4 0) ((0) (let ((e-2 (vector-ref sc4 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc4 1))) (vector 1 (vector 1 arg-10 e-5))))))))))))))))(else (let ((sc2 arg-14)) (lambda (eta-0) (let ((act-24 ((CaseBuilder-Core-n--6374-7334-addConG arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-9 arg-8 arg-13 arg-12 arg-11 arg-17 arg-16 arg-15) eta-0))) (let ((sc3 act-24)) (case (vector-ref sc3 0) ((0) (let ((e-2 (vector-ref sc3 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc3 1))) (vector 1 (vector 1 arg-10 e-5)))))))))))))))(else (let ((sc1 arg-14)) (lambda (eta-0) (let ((act-24 ((CaseBuilder-Core-n--6374-7334-addConG arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-9 arg-8 arg-13 arg-12 arg-11 arg-17 arg-16 arg-15) eta-0))) (let ((sc2 act-24)) (case (vector-ref sc2 0) ((0) (let ((e-2 (vector-ref sc2 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc2 1))) (vector 1 (vector 1 arg-10 e-5)))))))))))))))))(else (let ((sc0 arg-14)) (lambda (eta-0) (let ((act-24 ((CaseBuilder-Core-n--6374-7334-addConG arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-9 arg-8 arg-13 arg-12 arg-11 arg-17 arg-16 arg-15) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc1 1))) (vector 1 (vector 1 arg-10 e-5))))))))))))))
(define CaseBuilder-Core-with--partition-6156 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-4)) (case (vector-ref sc0 0) ((0) (let ((e-3 (vector-ref sc0 1))) (let ((e-5 (vector-ref sc0 3))) (let ((e-6 (vector-ref sc0 4))) (let ((e-7 (vector-ref sc0 5))) (let ((sc1 e-3)) (case (vector-ref sc1 0) ((1) (CaseBuilder-Core-case--withC-32blockC-32inC-32partition-6173 arg-2 arg-1 arg-0 e-5 e-7 e-6 arg-5 (CaseBuilder-Core-clauseType 'erased 'erased 'erased arg-5)))(else (let ((sc1 arg-3)) (let ((sc2 arg-4)) (CaseBuilder-Core-case--withC-32blockC-32inC-32partition-6295 arg-2 arg-1 arg-0 arg-5 (CaseBuilder-Core-clauseType 'erased 'erased 'erased arg-5)))))))))))) ((1) (let ((e-8 (vector-ref sc0 1))) (let ((e-10 (vector-ref sc0 3))) (let ((e-11 (vector-ref sc0 4))) (let ((e-12 (vector-ref sc0 5))) (let ((sc1 e-8)) (case (vector-ref sc1 0) ((1) (CaseBuilder-Core-case--withC-32blockC-32inC-32partition-6235 arg-2 arg-1 arg-0 e-10 e-12 e-11 arg-5 (CaseBuilder-Core-clauseType 'erased 'erased 'erased arg-5)))(else (let ((sc1 arg-3)) (let ((sc2 arg-4)) (CaseBuilder-Core-case--withC-32blockC-32inC-32partition-6295 arg-2 arg-1 arg-0 arg-5 (CaseBuilder-Core-clauseType 'erased 'erased 'erased arg-5))))))))))))(else (let ((sc0 arg-3)) (let ((sc1 arg-4)) (CaseBuilder-Core-case--withC-32blockC-32inC-32partition-6295 arg-2 arg-1 arg-0 arg-5 (CaseBuilder-Core-clauseType 'erased 'erased 'erased arg-5)))))))))
(define CaseBuilder-Core-case--getPMDef-10363 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (let ((sc0 arg-6)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (lambda (eta-0) (vector 1 (vector 0 e-2 e-3))))))))
(define CaseBuilder-Core-case--caseC-32blockC-32inC-32toPatClause-10032 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (let ((sc0 arg-7)) (cond ((equal? sc0 0) (lambda (eta-0) (vector 1 (vector 0 (Types-Prelude-map_Functor__List 'erased 'erased (lambda (eta-1) (CaseTree-Core-argToPat eta-1)) arg-5) arg-1)))) (else (lambda (eta-0) (Core-Core-throw_Catchable__Core_Error 'erased (vector 3 (Strings-Types-Prelude-C-43C-43 "Wrong function name in pattern LHS " (Show-Prelude-show_Show__C-40C-124C-40C-40BuiltinC-46PairC-32C-36aC-41C-32C-36bC-41C-44C-40C-40BuiltinC-46MkPairC-32C-36aC-41C-32C-36bC-41C-124C-41 'erased 'erased (vector 0 (vector 0 (lambda (x) (TT-Core-show_Show__Name x)) (lambda (d) (lambda (x) (TT-Core-showPrec_Show__Name d x)))) (vector 0 (lambda (x) (TT-Core-show_Show__Name x)) (lambda (d) (lambda (x) (TT-Core-showPrec_Show__Name d x))))) (vector 0 arg-2 arg-4)))) eta-0)))))))
(define CaseBuilder-Core-case--toPatClause-10002 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-4)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 e-2)) (case (vector-ref sc1 0) ((1) (let ((e-5 (vector-ref sc1 1))) (let ((e-6 (vector-ref sc1 2))) (let ((sc2 e-5)) (case (vector-ref sc2 0) ((0) (lambda (eta-0) (let ((act-24 (let ((act-24 (unbox arg-3))) (vector 1 act-24)))) (let ((sc3 act-24)) (case (vector-ref sc3 0) ((0) (let ((e-4 (vector-ref sc3 1))) (vector 0 e-4))) (else (let ((e-7 (vector-ref sc3 1))) ((CaseBuilder-Core-case--caseC-32blockC-32inC-32toPatClause-10032 arg-0 arg-1 arg-2 arg-3 e-6 e-3 e-7 (TT-Core-C-61C-61_Eq__Name arg-2 e-6)) eta-0))))))))(else (lambda (eta-0) (Core-Core-throw_Catchable__Core_Error 'erased (vector 3 "Not a function name in pattern LHS") eta-0))))))))(else (lambda (eta-0) (Core-Core-throw_Catchable__Core_Error 'erased (vector 3 "Not a function name in pattern LHS") eta-0))))))))))
(define CaseBuilder-Core-case--mkPatClauseC-44mkNames-9571 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-13) (let ((sc0 arg-11)) (case (vector-ref sc0 0) ((0) (lambda (eta-0) (vector 1 (vector 0 (vector 0 ) (vector 2 ))))) (else (let ((e-2 (vector-ref sc0 1))) (let ((sc1 e-2)) (case (vector-ref sc1 0) ((0) (let ((e-5 (vector-ref sc1 2))) (let ((e-6 (vector-ref sc1 3))) (let ((sc2 e-5)) (case (vector-ref sc2 0) ((1) (let ((e-10 (vector-ref sc2 3))) (lambda (eta-0) (let ((act-24 (((e-6 arg-12) (Normalise-Core-toClosure 'erased (vector 0 ) (vector 1 (vector 1 ) arg-6))) eta-0))) (let ((sc3 act-24)) (case (vector-ref sc3 0) ((0) (let ((e-3 (vector-ref sc3 1))) (vector 0 e-3))) (else (let ((e-7 (vector-ref sc3 1))) (let ((act-25 (Normalise-Core-quote_Quote__NF (vector 0 ) arg-13 (vector 0 ) e-10 eta-0))) (let ((sc4 act-25)) (case (vector-ref sc4 0) ((0) (let ((e-3 (vector-ref sc4 1))) (vector 0 e-3))) (else (let ((e-11 (vector-ref sc4 1))) (vector 1 (vector 0 (vector 1 e-7) (vector 0 (TT-Core-embed 'erased 'erased e-11)))))))))))))))))(else (lambda (eta-0) (let ((act-24 (Normalise-Core-quote_Quote__NF (vector 0 ) arg-13 (vector 0 ) e-2 eta-0))) (let ((sc2 act-24)) (case (vector-ref sc2 0) ((0) (let ((e-3 (vector-ref sc2 1))) (vector 0 e-3))) (else (let ((e-7 (vector-ref sc2 1))) (vector 1 (vector 0 (vector 0 ) (vector 1 (TT-Core-embed 'erased 'erased e-7))))))))))))))))(else (lambda (eta-0) (let ((act-24 (Normalise-Core-quote_Quote__NF (vector 0 ) arg-13 (vector 0 ) e-2 eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-3 (vector-ref sc1 1))) (vector 0 e-3))) (else (let ((e-5 (vector-ref sc1 1))) (vector 1 (vector 0 (vector 0 ) (vector 1 (TT-Core-embed 'erased 'erased e-5)))))))))))))))))))
(define CaseBuilder-Core-case--conRule-9232 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-13 arg-14 arg-15 arg-16 arg-17 arg-18) (let ((sc0 arg-5)) (case (vector-ref sc0 0) ((0) (let ((e-1 (vector-ref sc0 1))) (lambda (eta-0) (vector 1 e-1))))(else (lambda (eta-0) (Core-Core-throw_Catchable__Core_Error 'erased (vector 2 arg-14 (vector 4 )) eta-0)))))))
(define CaseBuilder-Core-case--match-8965 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8) (let ((sc0 arg-8)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((clausesC-39 (Types-Prelude-map_Functor__List 'erased 'erased (lambda (eta-0) (CaseBuilder-Core-shuffleVars 'erased 'erased 'erased e-3 'erased eta-0)) arg-4))) (let ((ps (CaseBuilder-Core-partition e-2 (TT-Core-dropVar 'erased (vector 1 arg-2 arg-1) e-3 'erased) arg-0 clausesC-39))) (lambda (eta-0) (let ((act-24 ((CaseBuilder-Core-mixture e-2 arg-0 (TT-Core-dropVar 'erased (vector 1 arg-2 arg-1) e-3 'erased) arg-7 arg-6 clausesC-39 arg-5 ps arg-3) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-4 (vector-ref sc1 1))) (vector 0 e-4))) (else (let ((e-5 (vector-ref sc1 1))) ((Types-Prelude-maybe 'erased 'erased (lambda () (lambda (eta-1) (vector 1 (vector 2 "No clauses")))) (lambda () (lambda (eta-1) (lambda (eta-2) (vector 1 eta-1)))) e-5) eta-0))))))))))))))
(define CaseBuilder-Core-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32pickNext-8790 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9) (let ((sc0 arg-9)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (lambda (eta-0) (vector 1 (vector 0 e-2 (+ 1 e-3)))))))))
(define CaseBuilder-Core-case--caseC-32blockC-32inC-32pickNext-8717 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8) (let ((sc0 arg-8)) (case (vector-ref sc0 0) ((1) (let ((e-2 (vector-ref sc0 1))) (let ((sc1 e-2)) (case (vector-ref sc1 0) ((0) (lambda (eta-0) (vector 1 (vector 0 arg-0 0))))(else (lambda (eta-0) (let ((act-24 ((CaseBuilder-Core-pickNext arg-2 arg-1 arg-3 arg-7 arg-6 arg-5 (Types-Prelude-map_Functor__List 'erased 'erased (lambda (eta-1) (CaseBuilder-Core-tail 'erased 'erased 'erased eta-1)) arg-4)) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-3 (vector-ref sc1 1))) (vector 0 e-3))) (else (let ((e-5 (vector-ref sc1 1))) (let ((sc2 e-5)) (let ((e-4 (vector-ref sc2 1))) (let ((e-3 (vector-ref sc2 2))) (vector 1 (vector 0 e-4 (+ 1 e-3)))))))))))))))))(else (lambda (eta-0) (let ((act-24 ((CaseBuilder-Core-pickNext arg-2 arg-1 arg-3 arg-7 arg-6 arg-5 (Types-Prelude-map_Functor__List 'erased 'erased (lambda (eta-1) (CaseBuilder-Core-tail 'erased 'erased 'erased eta-1)) arg-4)) eta-0))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (let ((sc1 e-5)) (let ((e-2 (vector-ref sc1 1))) (let ((e-3 (vector-ref sc1 2))) (vector 1 (vector 0 e-2 (+ 1 e-3)))))))))))))))))
(define CaseBuilder-Core-case--pickNext-8656 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8) (let ((sc0 arg-8)) (cond ((equal? sc0 0) (lambda (eta-0) (vector 1 (vector 0 arg-0 0)))) (else (lambda (eta-0) (let ((act-24 (CaseBuilder-Core-getScore 'erased 'erased arg-1 arg-7 arg-6 arg-5 arg-4 eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc1 1))) (let ((sc2 e-5)) (case (vector-ref sc2 0) ((1) (let ((e-2 (vector-ref sc2 1))) (let ((sc3 e-2)) (case (vector-ref sc3 0) ((0) (vector 1 (vector 0 arg-0 0)))(else (let ((act-25 ((CaseBuilder-Core-pickNext arg-2 arg-1 arg-3 arg-7 arg-6 arg-5 (Types-Prelude-map_Functor__List 'erased 'erased (lambda (eta-1) (CaseBuilder-Core-tail 'erased 'erased 'erased eta-1)) arg-4)) eta-0))) (let ((sc3 act-25)) (case (vector-ref sc3 0) ((0) (let ((e-3 (vector-ref sc3 1))) (vector 0 e-3))) (else (let ((e-6 (vector-ref sc3 1))) (let ((sc4 e-6)) (let ((e-4 (vector-ref sc4 1))) (let ((e-3 (vector-ref sc4 2))) (vector 1 (vector 0 e-4 (+ 1 e-3))))))))))))))))(else (let ((act-25 ((CaseBuilder-Core-pickNext arg-2 arg-1 arg-3 arg-7 arg-6 arg-5 (Types-Prelude-map_Functor__List 'erased 'erased (lambda (eta-1) (CaseBuilder-Core-tail 'erased 'erased 'erased eta-1)) arg-4)) eta-0))) (let ((sc2 act-25)) (case (vector-ref sc2 0) ((0) (let ((e-2 (vector-ref sc2 1))) (vector 0 e-2))) (else (let ((e-6 (vector-ref sc2 1))) (let ((sc3 e-6)) (let ((e-2 (vector-ref sc3 1))) (let ((e-3 (vector-ref sc3 2))) (vector 1 (vector 0 e-2 (+ 1 e-3)))))))))))))))))))))))))
(define CaseBuilder-Core-case--caseC-32blockC-32inC-32pickNext-8596 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (let ((sc0 arg-6)) (case (vector-ref sc0 0) ((1) (let ((e-2 (vector-ref sc0 1))) (let ((sc1 e-2)) (lambda (eta-0) (vector 1 (vector 0 arg-0 0)))))) (else (let ((e-5 (vector-ref sc0 1))) (lambda (eta-0) (Core-Core-throw_Catchable__Core_Error 'erased (vector 2 arg-3 e-5) eta-0))))))))
(define CaseBuilder-Core-case--pickNext-8543 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (let ((sc0 arg-6)) (cond ((equal? sc0 0) (lambda (eta-0) (vector 1 (vector 0 arg-0 0)))) (else (lambda (eta-0) (let ((act-24 (CaseBuilder-Core-getScore 'erased 'erased arg-1 arg-5 arg-4 arg-3 arg-2 eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc1 1))) (let ((sc2 e-5)) (case (vector-ref sc2 0) ((1) (let ((e-2 (vector-ref sc2 1))) (let ((sc3 e-2)) (vector 1 (vector 0 arg-0 0))))) (else (let ((e-6 (vector-ref sc2 1))) (Core-Core-throw_Catchable__Core_Error 'erased (vector 2 arg-3 e-6) eta-0))))))))))))))))
(define CaseBuilder-Core-case--getScore-8459 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (let ((sc0 arg-7)) (case (vector-ref sc0 0) ((2) (let ((e-1 (vector-ref sc0 2))) (lambda (eta-0) (vector 1 (vector 0 e-1)))))(else (lambda (eta-0) (Core-Core-throw_Catchable__Core_Error 'erased arg-7 eta-0)))))))
(define CaseBuilder-Core-case--sameType-8197 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10) (let ((sc0 arg-10)) (case (vector-ref sc0 0) ((0) (let ((e-1 (vector-ref sc0 1))) (lambda (eta-0) (let ((act-24 ((Normalise-Core-nf arg-2 arg-9 arg-5 e-1) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc1 1))) ((CaseBuilder-Core-n--7111-7984-sameTypeAs 'erased 'erased arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 e-5 (Types-Prelude-map_Functor__List 'erased 'erased (lambda (eta-1) (CaseBuilder-Core-getFirstArgType 'erased 'erased 'erased eta-1)) arg-4)) eta-0)))))))))(else (lambda (eta-0) (Core-Core-throw_Catchable__Core_Error 'erased (vector 2 arg-6 (vector 1 )) eta-0)))))))
(define CaseBuilder-Core-case--sameTypeC-44sameTypeAs-8114 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-13 arg-14) (let ((sc0 arg-14)) (cond ((equal? sc0 0) (CaseBuilder-Core-n--7111-7984-sameTypeAs 'erased 'erased arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-11 arg-10)) (else (lambda (eta-0) (Core-Core-throw_Catchable__Core_Error 'erased (vector 2 arg-6 (vector 1 )) eta-0)))))))
(define CaseBuilder-Core-case--groupConsC-44addGroup-7765 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-13 arg-14 arg-15 arg-16 arg-17 arg-18 arg-19 arg-20) (let ((sc0 arg-20)) (cond ((equal? sc0 0) (CaseBuilder-Core-n--6374-7334-addConG arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-9 arg-10 arg-15 arg-14 arg-12 arg-18 arg-17 arg-16)) (else (lambda (eta-0) (Core-Core-throw_Catchable__Core_Error 'erased (vector 2 arg-5 (vector 3 arg-15)) eta-0)))))))
(define CaseBuilder-Core-case--caseC-32blockC-32inC-32groupConsC-44addConG-7571 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-13 arg-14 arg-15 arg-16) (let ((sc0 arg-16)) (case (vector-ref sc0 0) ((1) (let ((e-1 (vector-ref sc0 1))) (Normalise-Core-nf arg-8 arg-15 (Env-Core-mkEnv arg-8) (TT-Core-embed 'erased 'erased (let ((sc1 e-1)) (let ((e-0 (vector-ref sc1 1))) e-0)))))) (else (lambda (eta-0) (vector 1 (vector 5 ))))))))
(define CaseBuilder-Core-case--groupConsC-44addConG-7448 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-13 arg-14 arg-15) (let ((sc0 arg-15)) (cond ((equal? sc0 0) (lambda (eta-0) (vector 1 (vector 0 (vector 1 "_" 0) (vector 1 (vector 1 "_" 0) (vector 1 ) (vector 4 )) (lambda (d) (lambda (a) (lambda (eta-1) (vector 1 (vector 0 (vector 1 "_" 1) (vector 1 (vector 1 "_" 1) (vector 1 ) (vector 5 )) (lambda (d-0) (lambda (a-0) (lambda (eta-2) (vector 1 (vector 4 )))))))))))))) (else (lambda (eta-0) (let ((act-24 (let ((act-24 (unbox arg-6))) (vector 1 act-24)))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc1 1))) (let ((act-25 (Context-Core-lookupDef arg-14 e-5 eta-0))) (let ((sc2 act-25)) (case (vector-ref sc2 0) ((0) (let ((e-2 (vector-ref sc2 1))) (vector 0 e-2))) (else (let ((e-6 (vector-ref sc2 1))) (let ((sc3 e-6)) (case (vector-ref sc3 0) ((1) (let ((e-1 (vector-ref sc3 1))) ((Normalise-Core-nf arg-8 e-5 (Env-Core-mkEnv arg-8) (TT-Core-embed 'erased 'erased (let ((sc4 e-1)) (let ((e-0 (vector-ref sc4 1))) e-0)))) eta-0))) (else (vector 1 (vector 5 )))))))))))))))))))))
(define CaseBuilder-Core-case--groupConsC-44addConG-7365 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-13 arg-14 arg-15 arg-16) (let ((sc0 arg-16)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((patsC-39 (CaseBuilder-Core-updatePatNames 'erased 'erased (CaseBuilder-Core-updateNames (List-Data-zip 'erased 'erased e-2 arg-12)) (CaseBuilder-Core-weakenNs 'erased arg-8 e-2 arg-11)))) (let ((clause (vector 0 arg-4 (CaseBuilder-Core-C-43C-43 'erased 'erased 'erased e-3 patsC-39) (TT-Core-weakenNs_Weaken__Term arg-8 e-2 arg-9)))) (lambda (eta-0) (vector 1 (vector 1 (vector 0 e-2 arg-14 arg-13 (vector 1 clause (vector 0 ))) (vector 0 )))))))))))
(define CaseBuilder-Core-case--updatePatNames-7294 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (let ((sc0 arg-4)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((e-4 (vector-ref sc0 3))) (let ((e-6 (vector-ref sc0 4))) (vector 0 e-2 e-3 (CaseBuilder-Core-n--6239-7221-update 'erased 'erased 'erased arg-3 arg-4 arg-5 'erased e-4) e-6))))))))
(define CaseBuilder-Core-case--updatePatNamesC-44update-7238 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8) (let ((sc0 arg-8)) (case (vector-ref sc0 0) ((0) (vector 1 arg-7)) (else (let ((e-2 (vector-ref sc0 1))) (vector 1 e-2)))))))
(define CaseBuilder-Core-case--newPats-7152 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9) (let ((sc0 arg-8)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((e-6 (vector-ref sc0 4))) (vector 0 e-2 e-3 arg-4 e-6)))))))
(define CaseBuilder-Core-case--nextNames-6910 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((0) (lambda (eta-0) (vector 1 (vector 0 (vector 0 ) (vector 2 ))))) (else (let ((e-2 (vector-ref sc0 1))) (let ((sc1 e-2)) (case (vector-ref sc1 0) ((0) (let ((e-5 (vector-ref sc1 2))) (let ((e-6 (vector-ref sc1 3))) (let ((sc2 e-5)) (case (vector-ref sc2 0) ((1) (let ((e-10 (vector-ref sc2 3))) (let ((sc3 e-10)) (case (vector-ref sc3 0) ((5) (lambda (eta-0) (let ((act-24 (((e-6 arg-7) (Normalise-Core-toClosure 'erased arg-10 (vector 1 (vector 1 ) arg-9))) eta-0))) (let ((sc4 act-24)) (case (vector-ref sc4 0) ((0) (let ((e-3 (vector-ref sc4 1))) (vector 0 e-3))) (else (let ((e-7 (vector-ref sc4 1))) (vector 1 (vector 0 (vector 1 e-7) (vector 2 ))))))))))(else (lambda (eta-0) (let ((act-24 (((e-6 arg-7) (Normalise-Core-toClosure 'erased arg-10 (vector 1 (vector 1 ) arg-9))) eta-0))) (let ((sc3 act-24)) (case (vector-ref sc3 0) ((0) (let ((e-3 (vector-ref sc3 1))) (vector 0 e-3))) (else (let ((e-7 (vector-ref sc3 1))) (let ((act-25 (Normalise-Core-quote_Quote__NF arg-2 arg-8 arg-10 e-10 eta-0))) (let ((sc4 act-25)) (case (vector-ref sc4 0) ((0) (let ((e-3 (vector-ref sc4 1))) (vector 0 e-3))) (else (let ((e-11 (vector-ref sc4 1))) (vector 1 (vector 0 (vector 1 e-7) (vector 0 e-11)))))))))))))))))))(else (lambda (eta-0) (let ((act-24 (Normalise-Core-quote_Quote__NF arg-2 arg-8 arg-10 e-2 eta-0))) (let ((sc2 act-24)) (case (vector-ref sc2 0) ((0) (let ((e-3 (vector-ref sc2 1))) (vector 0 e-3))) (else (let ((e-7 (vector-ref sc2 1))) (vector 1 (vector 0 (vector 0 ) (vector 1 e-7)))))))))))))))(else (lambda (eta-0) (let ((act-24 (Normalise-Core-quote_Quote__NF arg-2 arg-8 arg-10 e-2 eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-3 (vector-ref sc1 1))) (vector 0 e-3))) (else (let ((e-5 (vector-ref sc1 1))) (vector 1 (vector 0 (vector 0 ) (vector 1 e-5))))))))))))))))))
(define CaseBuilder-Core-case--caseC-32blockC-32inC-32nextNames-6772 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-13 arg-14 arg-15) (let ((sc0 arg-15)) (case (vector-ref sc0 0) ((2) (vector 2 )) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 (TT-Core-weakenNs_Weaken__Term arg-2 (vector 1 arg-9 arg-12) e-2)))) (else (let ((e-4 (vector-ref sc0 1))) (vector 1 (TT-Core-weakenNs_Weaken__Term arg-2 (vector 1 arg-9 arg-12) e-4))))))))
(define CaseBuilder-Core-case--nextNames-6736 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12) (let ((sc0 arg-12)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((argTy (let ((_-0 (vector 0 e-2 e-3))) (CaseBuilder-Core-case--caseC-32blockC-32inC-32nextNames-6772 arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 e-2 e-3 _-0 (Builtin-snd 'erased 'erased arg-11))))) (lambda (eta-0) (vector 1 (vector 0 (vector 1 arg-9 e-2) (vector 1 (vector 0 0 arg-9 arg-0 argTy) (CaseBuilder-Core-weaken 'erased arg-9 (List-Types-Prelude-C-43C-43 'erased e-2 arg-2) e-3)))))))))))
(define CaseBuilder-Core-case--caseC-32blockC-32inC-32checkGroupMatch-6535 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-13) (let ((sc0 arg-13)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 e-2)) (case (vector-ref sc1 0) ((1) (let ((e-5 (vector-ref sc1 1))) (let ((sc2 e-5)) (case (vector-ref sc2 0) ((0) (let ((sc3 e-3)) (case (vector-ref sc3 0) ((0) (let ((e-9 (vector-ref sc3 1))) (let ((sc4 e-9)) (case (vector-ref sc4 0) ((0) (vector 0 arg-12))(else (vector 1 ))))))(else (vector 1 )))))(else (vector 1 ))))))(else (vector 1 )))))))(else (vector 1 ))))))
(define CaseBuilder-Core-case--checkGroupMatch-6465 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12) (let ((sc0 arg-12)) (case (vector-ref sc0 0) ((0) (vector 1 )) (else (let ((e-2 (vector-ref sc0 1))) (CaseBuilder-Core-case--caseC-32blockC-32inC-32checkGroupMatch-6535 'erased 'erased arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 e-2 (vector 0 (TT-Core-nameEq arg-3 arg-10) (Equality-Decidable-decEq_DecEq__Int arg-2 arg-9)))))))))
(define CaseBuilder-Core-case--withC-32blockC-32inC-32partition-6295 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-4)) (case (vector-ref sc0 0) ((0) (vector 0 (vector 1 arg-2 arg-1) arg-0 (vector 0 ) (vector 1 arg-3 (vector 0 )) (vector 2 ))) (else (vector 1 (vector 1 arg-2 arg-1) arg-0 (vector 0 ) (vector 1 arg-3 (vector 0 )) (vector 2 )))))))
(define CaseBuilder-Core-case--withC-32blockC-32inC-32partition-6235 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (let ((sc0 arg-7)) (case (vector-ref sc0 0) ((0) (vector 0 (vector 1 arg-2 arg-1) arg-0 (List-Types-Prelude-C-43C-43 'erased arg-5 arg-3) (vector 1 arg-6 (vector 0 )) (vector 1 (vector 1 arg-2 arg-1) arg-0 arg-3 arg-5 arg-4))) (else (vector 1 (vector 1 arg-2 arg-1) arg-0 arg-3 (vector 1 arg-6 arg-5) arg-4))))))
(define CaseBuilder-Core-case--withC-32blockC-32inC-32partition-6173 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (let ((sc0 arg-7)) (case (vector-ref sc0 0) ((0) (vector 0 (vector 1 arg-2 arg-1) arg-0 arg-3 (vector 1 arg-6 arg-5) arg-4)) (else (vector 1 (vector 1 arg-2 arg-1) arg-0 (List-Types-Prelude-C-43C-43 'erased arg-5 arg-3) (vector 1 arg-6 (vector 0 )) (vector 0 (vector 1 arg-2 arg-1) arg-0 arg-3 arg-5 arg-4)))))))
(define CaseBuilder-Core-case--substInPats-5538 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9) (let ((sc0 arg-9)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (lambda (eta-0) (let ((act-24 ((CaseBuilder-Core-substInPats arg-0 arg-1 arg-7 arg-6 arg-5 e-3) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-4 (vector-ref sc1 1))) (vector 0 e-4))) (else (let ((e-5 (vector-ref sc1 1))) (vector 1 (vector 1 e-2 e-5)))))))))))))
(define CaseBuilder-Core-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32substInPatInfo-5394 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-13 arg-14 arg-15 arg-16 arg-17 arg-18 arg-19 arg-20) (let ((sc0 arg-4)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((e-4 (vector-ref sc0 3))) (vector 0 e-2 e-3 e-4 (vector 0 arg-18))))))))
(define CaseBuilder-Core-case--caseC-32blockC-32inC-32substInPatInfo-5315 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12) (let ((sc0 arg-12)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 2))) (let ((e-3 (vector-ref sc0 3))) (let ((sc1 e-2)) (case (vector-ref sc1 0) ((1) (let ((e-7 (vector-ref sc1 3))) (lambda (eta-0) (let ((act-24 (Normalise-Core-quote_Quote__NF arg-1 arg-10 arg-11 e-7 eta-0))) (let ((sc2 act-24)) (case (vector-ref sc2 0) ((0) (let ((e-4 (vector-ref sc2 1))) (vector 0 e-4))) (else (let ((e-8 (vector-ref sc2 1))) (let ((act-25 (((e-3 arg-9) (Normalise-Core-toClosure 'erased arg-11 (vector 1 (vector 1 ) arg-3))) eta-0))) (let ((sc3 act-25)) (case (vector-ref sc3 0) ((0) (let ((e-4 (vector-ref sc3 1))) (vector 0 e-4))) (else (let ((e-9 (vector-ref sc3 1))) (let ((act-26 ((CaseBuilder-Core-updatePats arg-1 arg-0 arg-7 arg-11 e-9 arg-2) eta-0))) (let ((sc4 act-26)) (case (vector-ref sc4 0) ((0) (let ((e-4 (vector-ref sc4 1))) (vector 0 e-4))) (else (let ((e-10 (vector-ref sc4 1))) (vector 1 (vector 0 (let ((sc5 arg-4)) (let ((e-13 (vector-ref sc5 1))) (let ((e-12 (vector-ref sc5 2))) (let ((e-4 (vector-ref sc5 3))) (vector 0 e-13 e-12 e-4 (vector 0 e-8)))))) e-10))))))))))))))))))))(else (lambda (eta-0) (vector 1 (vector 0 arg-4 arg-2)))))))))(else (lambda (eta-0) (vector 1 (vector 0 arg-4 arg-2))))))))
(define CaseBuilder-Core-case--caseC-32blockC-32inC-32substInPatInfo-5243 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8) (let ((sc0 arg-4)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((e-4 (vector-ref sc0 3))) (vector 0 e-2 e-3 e-4 (vector 0 (TT-Core-substName arg-1 arg-6 arg-5 arg-8)))))))))
(define CaseBuilder-Core-case--substInPatInfo-5206 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8) (let ((sc0 arg-8)) (case (vector-ref sc0 0) ((0) (let ((e-1 (vector-ref sc0 1))) (lambda (eta-0) (vector 1 (vector 0 (let ((sc1 arg-4)) (let ((e-2 (vector-ref sc1 1))) (let ((e-3 (vector-ref sc1 2))) (let ((e-4 (vector-ref sc1 3))) (vector 0 e-2 e-3 e-4 (vector 0 (TT-Core-substName arg-1 arg-6 arg-5 e-1))))))) arg-2))))) ((1) (let ((e-3 (vector-ref sc0 1))) (lambda (eta-0) (let ((act-24 (let ((act-24 (unbox arg-7))) (vector 1 act-24)))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc1 1))) (let ((act-25 (Context-Core-clearDefs e-5 eta-0))) (let ((sc2 act-25)) (case (vector-ref sc2 0) ((0) (let ((e-2 (vector-ref sc2 1))) (vector 0 e-2))) (else (let ((e-6 (vector-ref sc2 1))) (let ((env (Env-Core-mkEnv arg-1))) (let ((act-26 ((Normalise-Core-nf arg-1 e-5 env (TT-Core-substName arg-1 arg-6 arg-5 e-3)) eta-0))) (let ((sc3 act-26)) (case (vector-ref sc3 0) ((0) (let ((e-2 (vector-ref sc3 1))) (vector 0 e-2))) (else (let ((e-7 (vector-ref sc3 1))) (let ((sc4 e-7)) (case (vector-ref sc4 0) ((0) (let ((e-2 (vector-ref sc4 2))) (let ((e-4 (vector-ref sc4 3))) (let ((sc5 e-2)) (case (vector-ref sc5 0) ((1) (let ((e-8 (vector-ref sc5 3))) (let ((act-27 (Normalise-Core-quote_Quote__NF arg-1 e-6 env e-8 eta-0))) (let ((sc6 act-27)) (case (vector-ref sc6 0) ((0) (let ((e-11 (vector-ref sc6 1))) (vector 0 e-11))) (else (let ((e-11 (vector-ref sc6 1))) (let ((act-28 (((e-4 e-5) (Normalise-Core-toClosure 'erased env (vector 1 (vector 1 ) arg-3))) eta-0))) (let ((sc7 act-28)) (case (vector-ref sc7 0) ((0) (let ((e-12 (vector-ref sc7 1))) (vector 0 e-12))) (else (let ((e-12 (vector-ref sc7 1))) (let ((act-29 ((CaseBuilder-Core-updatePats arg-1 arg-0 arg-7 env e-12 arg-2) eta-0))) (let ((sc8 act-29)) (case (vector-ref sc8 0) ((0) (let ((e-13 (vector-ref sc8 1))) (vector 0 e-13))) (else (let ((e-13 (vector-ref sc8 1))) (vector 1 (vector 0 (let ((sc9 arg-4)) (let ((e-17 (vector-ref sc9 1))) (let ((e-16 (vector-ref sc9 2))) (let ((e-15 (vector-ref sc9 3))) (vector 0 e-17 e-16 e-15 (vector 0 e-11)))))) e-13)))))))))))))))))))(else (vector 1 (vector 0 arg-4 arg-2))))))))(else (vector 1 (vector 0 arg-4 arg-2)))))))))))))))))))))))) (else (lambda (eta-0) (vector 1 (vector 0 arg-4 arg-2))))))))
(define CaseBuilder-Core-case--caseC-32blockC-32inC-32updatePats-5132 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11) (let ((sc0 arg-4)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((e-4 (vector-ref sc0 3))) (vector 0 e-2 e-3 e-4 (vector 1 arg-11))))))))
(define CaseBuilder-Core-case--updatePats-5070 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9) (let ((sc0 arg-9)) (case (vector-ref sc0 0) ((2) (lambda (eta-0) (let ((act-24 (let ((act-24 (unbox arg-7))) (vector 1 act-24)))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc1 1))) (let ((act-25 (Context-Core-clearDefs e-5 eta-0))) (let ((sc2 act-25)) (case (vector-ref sc2 0) ((0) (let ((e-2 (vector-ref sc2 1))) (vector 0 e-2))) (else (let ((e-6 (vector-ref sc2 1))) (let ((act-26 (Normalise-Core-quote_Quote__NF arg-0 e-6 arg-6 arg-5 eta-0))) (let ((sc3 act-26)) (case (vector-ref sc3 0) ((0) (let ((e-2 (vector-ref sc3 1))) (vector 0 e-2))) (else (let ((e-7 (vector-ref sc3 1))) (vector 1 (vector 1 (let ((sc4 arg-4)) (let ((e-2 (vector-ref sc4 1))) (let ((e-3 (vector-ref sc4 2))) (let ((e-4 (vector-ref sc4 3))) (vector 0 e-2 e-3 e-4 (vector 1 e-7)))))) arg-3)))))))))))))))))))(else (lambda (eta-0) (vector 1 (vector 1 arg-4 arg-3))))))))
(define CaseBuilder-Core-case--caseC-32blockC-32inC-32updatePats-4979 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-13 arg-14 arg-15 arg-16) (let ((sc0 arg-9)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((e-4 (vector-ref sc0 3))) (vector 0 e-2 e-3 e-4 (vector 0 arg-14))))))))
(define CaseBuilder-Core-case--updatePats-4894 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12) (let ((sc0 arg-12)) (case (vector-ref sc0 0) ((2) (lambda (eta-0) (let ((act-24 (let ((act-24 (unbox arg-11))) (vector 1 act-24)))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc1 1))) (let ((act-25 (Context-Core-clearDefs e-5 eta-0))) (let ((sc2 act-25)) (case (vector-ref sc2 0) ((0) (let ((e-2 (vector-ref sc2 1))) (vector 0 e-2))) (else (let ((e-6 (vector-ref sc2 1))) (let ((act-26 (Normalise-Core-quote_Quote__NF arg-0 e-6 arg-10 arg-6 eta-0))) (let ((sc3 act-26)) (case (vector-ref sc3 0) ((0) (let ((e-2 (vector-ref sc3 1))) (vector 0 e-2))) (else (let ((e-7 (vector-ref sc3 1))) (let ((act-27 (((arg-7 e-5) (Normalise-Core-toClosure 'erased arg-10 (vector 1 (vector 1 ) arg-4))) eta-0))) (let ((sc4 act-27)) (case (vector-ref sc4 0) ((0) (let ((e-2 (vector-ref sc4 1))) (vector 0 e-2))) (else (let ((e-8 (vector-ref sc4 1))) (let ((act-28 ((CaseBuilder-Core-updatePats arg-0 arg-5 arg-11 arg-10 e-8 arg-8) eta-0))) (let ((sc5 act-28)) (case (vector-ref sc5 0) ((0) (let ((e-2 (vector-ref sc5 1))) (vector 0 e-2))) (else (let ((e-9 (vector-ref sc5 1))) (vector 1 (vector 1 (let ((sc6 arg-9)) (let ((e-2 (vector-ref sc6 1))) (let ((e-3 (vector-ref sc6 2))) (let ((e-4 (vector-ref sc6 3))) (vector 0 e-2 e-3 e-4 (vector 0 e-7)))))) e-9)))))))))))))))))))))))))))))(else (lambda (eta-0) (vector 1 (vector 1 arg-9 arg-8))))))))
(define CaseBuilder-Core-n--8181-9316-updateVar (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8) (let ((sc0 arg-8)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((e-4 (vector-ref sc0 3))) (let ((sc1 e-3)) (let ((e-8 (vector-ref sc1 1))) (let ((e-9 (vector-ref sc1 2))) (let ((sc2 e-8)) (let ((e-12 (vector-ref sc2 1))) (let ((e-14 (vector-ref sc2 3))) (let ((sc3 e-14)) (case (vector-ref sc3 0) ((1) (let ((e-17 (vector-ref sc3 1))) (lambda (eta-0) (let ((act-24 ((CaseBuilder-Core-substInPats arg-1 arg-0 arg-6 arg-3 (vector 0 e-12) e-9) eta-0))) (let ((sc4 act-24)) (case (vector-ref sc4 0) ((0) (let ((e-5 (vector-ref sc4 1))) (vector 0 e-5))) (else (let ((e-5 (vector-ref sc4 1))) (vector 1 (vector 0 (vector 1 e-17 e-2) e-5 (TT-Core-substName arg-1 e-17 (vector 0 e-12) e-4)))))))))))(else (lambda (eta-0) (let ((act-24 ((CaseBuilder-Core-substInPats arg-1 arg-0 arg-6 arg-3 (CaseTree-Core-mkTerm arg-1 e-14) e-9) eta-0))) (let ((sc3 act-24)) (case (vector-ref sc3 0) ((0) (let ((e-5 (vector-ref sc3 1))) (vector 0 e-5))) (else (let ((e-5 (vector-ref sc3 1))) (vector 1 (vector 0 e-2 e-5 e-4)))))))))))))))))))))))
(define CaseBuilder-Core-n--6239-7221-update (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (let ((sc0 arg-7)) (case (vector-ref sc0 0) ((0) (let ((e-0 (vector-ref sc0 1))) (let ((e-1 (vector-ref sc0 2))) (let ((e-2 (vector-ref sc0 3))) (let ((e-3 (vector-ref sc0 4))) (vector 0 e-0 e-1 e-2 (Types-Prelude-map_Functor__List 'erased 'erased (lambda (eta-0) (CaseBuilder-Core-n--6239-7221-update 'erased 'erased 'erased arg-3 arg-4 arg-5 'erased eta-0)) e-3))))))) ((1) (let ((e-4 (vector-ref sc0 1))) (CaseBuilder-Core-case--updatePatNamesC-44update-7238 'erased 'erased 'erased arg-3 arg-4 arg-5 'erased e-4 (List-Data-lookup 'erased 'erased (vector 0 (lambda (arg-8) (lambda (arg-9) (TT-Core-C-61C-61_Eq__Name arg-8 arg-9))) (lambda (arg-8) (lambda (arg-9) (TT-Core-C-47C-61_Eq__Name arg-8 arg-9)))) e-4 arg-5))))(else arg-7)))))
(define CaseBuilder-Core-n--6219-7182-update (lambda (arg-0) (let ((sc0 arg-0)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 e-3)) (case (vector-ref sc1 0) ((1) (let ((e-4 (vector-ref sc1 1))) (vector 1 (vector 0 e-4 e-2))))(else (vector 0 )))))))(else (vector 0 ))))))
(define CaseBuilder-Core-n--9444-10238-toClosed (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-5)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 e-3)) (let ((e-4 (vector-ref sc1 1))) (let ((e-5 (vector-ref sc1 2))) (let ((e-6 (vector-ref sc1 3))) (let ((e-7 (vector-ref sc1 4))) (vector 0 (CaseBuilder-Core-n--9444-10237-close arg-0 arg-1 arg-2 arg-3 e-4 e-5 e-2 e-6) (CaseBuilder-Core-n--9444-10237-close arg-0 arg-1 arg-2 arg-3 e-4 e-5 e-2 e-7))))))))))))
(define CaseBuilder-Core-n--7111-7984-sameTypeAs (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10) (let ((sc0 arg-10)) (case (vector-ref sc0 0) ((0) (lambda (eta-0) (vector 1 (vector 0 )))) ((1) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 e-2)) (case (vector-ref sc1 0) ((0) (let ((e-5 (vector-ref sc1 1))) (lambda (eta-0) (let ((act-24 (let ((act-24 (unbox arg-7))) (vector 1 act-24)))) (let ((sc2 act-24)) (case (vector-ref sc2 0) ((0) (let ((e-4 (vector-ref sc2 1))) (vector 0 e-4))) (else (let ((e-6 (vector-ref sc2 1))) (let ((act-25 ((Normalise-Core-nf arg-2 e-6 arg-5 e-5) eta-0))) (let ((sc3 act-25)) (case (vector-ref sc3 0) ((0) (let ((e-4 (vector-ref sc3 1))) (vector 0 e-4))) (else (let ((e-7 (vector-ref sc3 1))) ((CaseBuilder-Core-case--sameTypeC-44sameTypeAs-8114 'erased 'erased arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 e-5 e-3 arg-9 e-6 e-7 (CaseBuilder-Core-n--7111-7983-headEq 'erased 'erased arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 e-7)) eta-0))))))))))))))(else (lambda (eta-0) (Core-Core-throw_Catchable__Core_Error 'erased (vector 2 arg-6 (vector 1 )) eta-0))))))))(else (lambda (eta-0) (Core-Core-throw_Catchable__Core_Error 'erased (vector 2 arg-6 (vector 1 )) eta-0)))))))
(define CaseBuilder-Core-n--7445-8279-samePatAs (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (let ((sc0 arg-6)) (case (vector-ref sc0 0) ((0) 0)(else (let ((sc0 arg-5)) (case (vector-ref sc0 0) ((0) (let ((e-0 (vector-ref sc0 1))) (let ((e-1 (vector-ref sc0 2))) (let ((e-2 (vector-ref sc0 3))) (let ((e-3 (vector-ref sc0 4))) (let ((sc1 arg-6)) (case (vector-ref sc1 0) ((1) (let ((e-6 (vector-ref sc1 1))) (let ((e-7 (vector-ref sc1 2))) (let ((sc2 e-6)) (case (vector-ref sc2 0) ((0) (let ((e-8 (vector-ref sc2 1))) (let ((e-9 (vector-ref sc2 2))) (Basics-Prelude-C-38C-38 (TT-Core-C-61C-61_Eq__Name e-0 e-8) (lambda () (Basics-Prelude-C-38C-38 (EqOrd-Prelude-C-61C-61_Eq__Int e-1 e-9) (lambda () (CaseBuilder-Core-n--7445-8279-samePatAs 'erased 'erased 'erased arg-3 arg-4 (vector 0 e-0 e-1 e-2 e-3) e-7))))))))(else 1))))))(else 1)))))))) ((1) (let ((e-4 (vector-ref sc0 1))) (let ((sc1 arg-6)) (case (vector-ref sc1 0) ((1) (let ((e-13 (vector-ref sc1 1))) (let ((e-14 (vector-ref sc1 2))) (let ((sc2 e-13)) (case (vector-ref sc2 0) ((1) (CaseBuilder-Core-n--7445-8279-samePatAs 'erased 'erased 'erased arg-3 arg-4 (vector 1 e-4) e-14))(else 1))))))(else 1)))))(else 1))))))))
(define CaseBuilder-Core-n--9444-10236-mkSubstEnv (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (let ((sc0 arg-7)) (case (vector-ref sc0 0) ((0) (vector 0 )) (else (let ((e-5 (vector-ref sc0 2))) (vector 1 (vector 1 (vector 1 ) (vector 1 arg-6 arg-5)) (CaseBuilder-Core-n--9444-10236-mkSubstEnv arg-0 arg-1 arg-2 arg-3 'erased (b+ arg-5 1 63) arg-6 e-5))))))))
(define CaseBuilder-Core-n--9134-9882-mkPatClausesFrom (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (let ((sc0 arg-7)) (case (vector-ref sc0 0) ((0) (lambda (eta-0) (vector 1 (vector 0 )))) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (lambda (eta-0) (let ((act-24 ((CaseBuilder-Core-mkPatClause arg-5 arg-4 arg-6 arg-3 e-2) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-4 (vector-ref sc1 1))) (vector 0 e-4))) (else (let ((e-5 (vector-ref sc1 1))) (let ((act-25 ((CaseBuilder-Core-n--9134-9882-mkPatClausesFrom arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 e-3) eta-0))) (let ((sc2 act-25)) (case (vector-ref sc2 0) ((0) (let ((e-4 (vector-ref sc2 1))) (vector 0 e-4))) (else (let ((e-6 (vector-ref sc2 1))) (vector 1 (vector 1 e-5 e-6))))))))))))))))))))
(define CaseBuilder-Core-n--8814-9492-mkNames (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9) (let ((sc0 arg-6)) (case (vector-ref sc0 0) ((0) (let ((sc1 arg-7)) (let ((sc2 arg-8)) (lambda (eta-0) (vector 1 (vector 0 )))))) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 arg-7)) (let ((e-8 (vector-ref sc1 1))) (let ((e-9 (vector-ref sc1 2))) (let ((sc2 arg-8)) (let ((e-16 (vector-ref sc2 1))) (lambda (eta-0) (let ((act-24 (let ((act-24 (unbox arg-5))) (vector 1 act-24)))) (let ((sc3 act-24)) (case (vector-ref sc3 0) ((0) (let ((e-4 (vector-ref sc3 1))) (vector 0 e-4))) (else (let ((e-5 (vector-ref sc3 1))) (let ((act-25 (Context-Core-clearDefs e-5 eta-0))) (let ((sc4 act-25)) (case (vector-ref sc4 0) ((0) (let ((e-4 (vector-ref sc4 1))) (vector 0 e-4))) (else (let ((e-6 (vector-ref sc4 1))) (let ((act-26 (let ((sc5 arg-9)) (case (vector-ref sc5 0) ((0) (vector 1 (vector 0 (vector 0 ) (vector 2 )))) (else (let ((e-4 (vector-ref sc5 1))) (let ((sc6 e-4)) (case (vector-ref sc6 0) ((0) (let ((e-10 (vector-ref sc6 2))) (let ((e-7 (vector-ref sc6 3))) (let ((sc7 e-10)) (case (vector-ref sc7 0) ((1) (let ((e-12 (vector-ref sc7 3))) (let ((act-26 (((e-7 e-5) (Normalise-Core-toClosure 'erased (vector 0 ) (vector 1 (vector 1 ) e-2))) eta-0))) (let ((sc8 act-26)) (case (vector-ref sc8 0) ((0) (let ((e-15 (vector-ref sc8 1))) (vector 0 e-15))) (else (let ((e-15 (vector-ref sc8 1))) (let ((act-27 (Normalise-Core-quote_Quote__NF (vector 0 ) e-6 (vector 0 ) e-12 eta-0))) (let ((sc9 act-27)) (case (vector-ref sc9 0) ((0) (let ((e-17 (vector-ref sc9 1))) (vector 0 e-17))) (else (let ((e-17 (vector-ref sc9 1))) (vector 1 (vector 0 (vector 1 e-15) (vector 0 (TT-Core-embed 'erased 'erased e-17))))))))))))))))(else (let ((act-26 (Normalise-Core-quote_Quote__NF (vector 0 ) e-6 (vector 0 ) e-4 eta-0))) (let ((sc7 act-26)) (case (vector-ref sc7 0) ((0) (let ((e-12 (vector-ref sc7 1))) (vector 0 e-12))) (else (let ((e-12 (vector-ref sc7 1))) (vector 1 (vector 0 (vector 0 ) (vector 1 (TT-Core-embed 'erased 'erased e-12)))))))))))))))(else (let ((act-26 (Normalise-Core-quote_Quote__NF (vector 0 ) e-6 (vector 0 ) e-4 eta-0))) (let ((sc6 act-26)) (case (vector-ref sc6 0) ((0) (let ((e-7 (vector-ref sc6 1))) (vector 0 e-7))) (else (let ((e-7 (vector-ref sc6 1))) (vector 1 (vector 0 (vector 0 ) (vector 1 (TT-Core-embed 'erased 'erased e-7)))))))))))))))))) (let ((sc5 act-26)) (case (vector-ref sc5 0) ((0) (let ((e-4 (vector-ref sc5 1))) (vector 0 e-4))) (else (let ((e-7 (vector-ref sc5 1))) (let ((act-27 ((CaseBuilder-Core-n--8814-9492-mkNames arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 e-3 e-9 e-16 (Builtin-fst 'erased 'erased e-7)) eta-0))) (let ((sc6 act-27)) (case (vector-ref sc6 0) ((0) (let ((e-4 (vector-ref sc6 1))) (vector 0 e-4))) (else (let ((e-10 (vector-ref sc6 1))) (vector 1 (vector 1 (vector 0 0 e-2 e-8 (Builtin-snd 'erased 'erased e-7)) (CaseBuilder-Core-weaken 'erased e-2 e-3 e-10))))))))))))))))))))))))))))))))))))
(define CaseBuilder-Core-n--9444-10235-labelPat (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (let ((sc0 arg-6)) (case (vector-ref sc0 0) ((0) (vector 0 )) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (vector 1 (vector 0 (Strings-Types-Prelude-C-43C-43 "pat" (Strings-Types-Prelude-C-43C-43 (Show-Prelude-show_Show__Int arg-5) ":")) e-2) (CaseBuilder-Core-n--9444-10235-labelPat arg-0 arg-1 arg-2 arg-3 'erased (b+ arg-5 1 63) e-3)))))))))
(define CaseBuilder-Core-n--7111-7983-headEq (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10) (let ((sc0 arg-9)) (case (vector-ref sc0 0) ((0) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 e-3)) (case (vector-ref sc1 0) ((1) (let ((sc2 arg-10)) (case (vector-ref sc2 0) ((0) (let ((e-21 (vector-ref sc2 2))) (let ((sc3 e-21)) (case (vector-ref sc3 0) ((1) 0)(else (let ((sc3 arg-10)) (case (vector-ref sc3 0) ((5) 0)(else 1))))))))(else (let ((sc2 arg-10)) (case (vector-ref sc2 0) ((5) 0)(else 1)))))))(else (let ((sc1 arg-10)) (case (vector-ref sc1 0) ((5) 0)(else 1)))))))) ((3) (let ((e-6 (vector-ref sc0 1))) (let ((sc1 arg-10)) (case (vector-ref sc1 0) ((3) (let ((e-28 (vector-ref sc1 1))) (TT-Core-C-61C-61_Eq__Name e-6 e-28)))(else (let ((sc1 arg-10)) (case (vector-ref sc1 0) ((5) 0)(else 1)))))))) ((4) (let ((sc1 arg-10)) (case (vector-ref sc1 0) ((4) 0)(else (let ((sc1 arg-10)) (case (vector-ref sc1 0) ((5) 0)(else 1))))))) ((1) (let ((e-12 (vector-ref sc0 1))) (let ((sc1 e-12)) (case (vector-ref sc1 0) ((1) (let ((e-35 (vector-ref sc1 2))) (let ((sc2 arg-10)) (case (vector-ref sc2 0) ((1) (let ((e-37 (vector-ref sc2 1))) (let ((sc3 e-37)) (case (vector-ref sc3 0) ((1) (let ((e-41 (vector-ref sc3 2))) (TT-Core-C-61C-61_Eq__Name e-35 e-41)))(else (let ((sc3 arg-10)) (case (vector-ref sc3 0) ((5) 0)(else 1))))))))(else (let ((sc2 arg-10)) (case (vector-ref sc2 0) ((5) 0)(else 1))))))))(else (let ((sc1 arg-10)) (case (vector-ref sc1 0) ((5) 0)(else 1)))))))) ((5) 0)(else (let ((sc0 arg-10)) (case (vector-ref sc0 0) ((5) 0)(else 1))))))))
(define CaseBuilder-Core-n--9134-9883-getNames (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (let ((sc0 arg-7)) (case (vector-ref sc0 0) ((0) (vector 0 )) (else (let ((e-3 (vector-ref sc0 2))) (vector 1 (vector 1 "arg" arg-6) (CaseBuilder-Core-n--9134-9883-getNames arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 (b+ arg-6 1 63) e-3))))))))
(define CaseBuilder-Core-n--4966-6106-getClauseType (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11) (let ((sc0 arg-11)) (case (vector-ref sc0 0) ((0) (vector 0 ))(else (CaseBuilder-Core-n--4966-6105-clauseTypeC-39 'erased 'erased 'erased arg-3 arg-4 'erased arg-6 arg-7 arg-8 arg-9 arg-10 arg-11))))))
(define CaseBuilder-Core-n--9444-10152-getArgs (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-4)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 2))) (let ((e-3 (vector-ref sc0 3))) (let ((sc1 e-2)) (case (vector-ref sc1 0) ((1) (lambda (eta-0) (let ((act-24 (let ((act-24 (unbox arg-2))) (vector 1 act-24)))) (let ((sc2 act-24)) (case (vector-ref sc2 0) ((0) (let ((e-4 (vector-ref sc2 1))) (vector 0 e-4))) (else (let ((e-8 (vector-ref sc2 1))) (let ((act-25 (((e-3 e-8) (Normalise-Core-toClosure 'erased (vector 0 ) (vector 6 ))) eta-0))) (let ((sc3 act-25)) (case (vector-ref sc3 0) ((0) (let ((e-4 (vector-ref sc3 1))) (vector 0 e-4))) (else (let ((e-9 (vector-ref sc3 1))) (let ((act-26 ((CaseBuilder-Core-n--9444-10152-getArgs arg-0 arg-1 arg-2 arg-3 e-9) eta-0))) (let ((sc4 act-26)) (case (vector-ref sc4 0) ((0) (let ((e-4 (vector-ref sc4 1))) (vector 0 e-4))) (else (let ((e-10 (vector-ref sc4 1))) (vector 1 (vector 1 (vector 1 "arg" arg-3) e-10)))))))))))))))))))(else (lambda (eta-0) (vector 1 (vector 0 )))))))))(else (lambda (eta-0) (vector 1 (vector 0 ))))))))
(define CaseBuilder-Core-n--6374-7336-gc (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12) (let ((sc0 arg-12)) (case (vector-ref sc0 0) ((0) (lambda (eta-0) (vector 1 arg-11))) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 e-2)) (let ((e-7 (vector-ref sc1 2))) (let ((e-8 (vector-ref sc1 3))) (let ((sc2 e-7)) (let ((e-12 (vector-ref sc2 1))) (let ((e-13 (vector-ref sc2 2))) (let ((sc3 e-12)) (let ((e-16 (vector-ref sc3 1))) (let ((e-18 (vector-ref sc3 3))) (lambda (eta-0) (let ((act-24 ((CaseBuilder-Core-n--6374-7335-addGroup arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 'erased arg-9 arg-10 e-16 e-18 'erased e-13 e-8 arg-11) eta-0))) (let ((sc4 act-24)) (case (vector-ref sc4 0) ((0) (let ((e-4 (vector-ref sc4 1))) (vector 0 e-4))) (else (let ((e-5 (vector-ref sc4 1))) ((CaseBuilder-Core-n--6374-7336-gc arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 e-5 e-3) eta-0)))))))))))))))))))))))
(define CaseBuilder-Core-n--9444-10237-close (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (SubstEnv-TT-Core-substs arg-4 (vector 0 ) (CaseBuilder-Core-n--9444-10236-mkSubstEnv arg-0 arg-1 arg-2 arg-3 'erased 0 arg-6 arg-5) arg-7)))
(define CaseBuilder-Core-n--4966-6105-clauseTypeC-39 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11) (let ((sc0 arg-11)) (case (vector-ref sc0 0) ((0) (vector 0 ))(else (vector 1 ))))))
(define CaseBuilder-Core-n--8166-9083-altGroups (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11) (let ((sc0 arg-11)) (case (vector-ref sc0 0) ((0) (Types-Prelude-maybe 'erased 'erased (lambda () (lambda (eta-0) (vector 1 (vector 0 )))) (lambda () (lambda (e) (lambda (eta-0) (vector 1 (vector 1 (vector 1 e) (vector 0 )))))) arg-4)) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 e-2)) (let ((e-6 (vector-ref sc1 1))) (let ((e-7 (vector-ref sc1 2))) (let ((e-8 (vector-ref sc1 3))) (let ((e-9 (vector-ref sc1 4))) (lambda (eta-0) (let ((act-24 ((CaseBuilder-Core-match (List-Types-Prelude-C-43C-43 'erased e-6 arg-3) (List-Types-Prelude-C-43C-43 'erased e-6 arg-1) arg-10 arg-9 arg-8 e-9 (Types-Prelude-map_Functor__Maybe 'erased 'erased (lambda (arg-12) (CaseTree-Core-weakenNs_Weaken__CaseTree arg-3 e-6 arg-12)) arg-4)) eta-0))) (let ((sc2 act-24)) (case (vector-ref sc2 0) ((0) (let ((e-4 (vector-ref sc2 1))) (vector 0 e-4))) (else (let ((e-5 (vector-ref sc2 1))) (let ((act-25 ((CaseBuilder-Core-n--8166-9083-altGroups arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 'erased arg-8 arg-9 arg-10 e-3) eta-0))) (let ((sc3 act-25)) (case (vector-ref sc3 0) ((0) (let ((e-4 (vector-ref sc3 1))) (vector 0 e-4))) (else (let ((e-10 (vector-ref sc3 1))) (vector 1 (vector 1 (vector 0 e-7 e-8 e-6 e-5) e-10)))))))))))))))))))))))))
(define CaseBuilder-Core-n--6374-7335-addGroup (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-13 arg-14 arg-15 arg-16) (let ((sc0 arg-12)) (case (vector-ref sc0 0) ((0) (let ((e-0 (vector-ref sc0 1))) (let ((e-1 (vector-ref sc0 2))) (let ((e-2 (vector-ref sc0 3))) (let ((e-3 (vector-ref sc0 4))) (CaseBuilder-Core-case--groupConsC-44addGroup-7765 arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 'erased arg-9 arg-10 arg-11 e-3 e-2 e-1 e-0 arg-16 arg-15 arg-14 'erased (Types-Prelude-C-61C-61_Eq__Nat e-2 (List-Types-Prelude-length 'erased e-3))))))))(else (lambda (eta-0) (vector 1 arg-16)))))))
(define CaseBuilder-Core-n--6374-7334-addConG (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-13 arg-14 arg-15) (let ((sc0 arg-15)) (case (vector-ref sc0 0) ((0) (lambda (eta-0) (let ((act-24 ((CaseBuilder-Core-case--groupConsC-44addConG-7448 arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-14 arg-9 arg-13 arg-12 arg-11 arg-10 (TT-Core-C-61C-61_Eq__Name arg-10 (vector 0 "->"))) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc1 1))) (let ((act-25 ((CaseBuilder-Core-nextNames arg-8 arg-7 arg-6 "e" arg-12 (vector 1 e-5)) eta-0))) (let ((sc2 act-25)) (case (vector-ref sc2 0) ((0) (let ((e-2 (vector-ref sc2 1))) (vector 0 e-2))) (else (let ((e-6 (vector-ref sc2 1))) (let ((sc3 e-6)) (let ((e-2 (vector-ref sc3 1))) (let ((e-3 (vector-ref sc3 2))) (let ((patsC-39 (CaseBuilder-Core-updatePatNames 'erased 'erased (CaseBuilder-Core-updateNames (List-Data-zip 'erased 'erased e-2 arg-12)) (CaseBuilder-Core-weakenNs 'erased arg-8 e-2 arg-13)))) (let ((clause (vector 0 arg-4 (CaseBuilder-Core-C-43C-43 'erased 'erased 'erased e-3 patsC-39) (TT-Core-weakenNs_Weaken__Term arg-8 e-2 arg-14)))) (vector 1 (vector 1 (vector 0 e-2 arg-10 arg-11 (vector 1 clause (vector 0 ))) (vector 0 )))))))))))))))))))) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (CaseBuilder-Core-with--groupConsC-44addConG-7652 arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-9 arg-8 e-2 arg-12 arg-11 arg-10 (CaseBuilder-Core-checkGroupMatch 'erased 'erased (vector 0 arg-10 arg-11) arg-12 e-2) e-3 arg-14 arg-13))))))))
(define CaseBuilder-Core-weaken_Weaken__ArgType (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((0) (let ((e-1 (vector-ref sc0 1))) (vector 0 (TT-Core-weaken_Weaken__Term arg-0 arg-1 e-1)))) ((1) (let ((e-3 (vector-ref sc0 1))) (vector 1 (TT-Core-weaken_Weaken__Term arg-0 arg-1 e-3)))) (else (vector 2 ))))))
(define CaseBuilder-Core-weaken_Weaken__C-40PatInfoC-32C-36pC-41 (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((e-4 (vector-ref sc0 3))) (let ((e-6 (vector-ref sc0 4))) (vector 0 (+ 1 e-2) e-3 e-4 (CaseBuilder-Core-weaken_Weaken__ArgType arg-1 arg-2 e-6)))))))))
(define CaseBuilder-Core-weakenNs_Weaken__C-40PatInfoC-32C-36pC-41 (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((0) arg-3) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (CaseBuilder-Core-weaken_Weaken__C-40PatInfoC-32C-36pC-41 'erased e-2 (List-Types-Prelude-C-43C-43 'erased e-3 arg-1) (CaseBuilder-Core-weakenNs_Weaken__C-40PatInfoC-32C-36pC-41 'erased arg-1 e-3 arg-3)))))))))
(define CaseBuilder-Core-__Impl_Weaken_C-40PatInfoC-32C-36pC-41 (lambda (arg-0) (vector 0 (lambda (n) (lambda (vars) (lambda (arg-5303) (CaseBuilder-Core-weaken_Weaken__C-40PatInfoC-32C-36pC-41 'erased n vars arg-5303)))) (lambda (vars) (lambda (ns) (lambda (arg-5307) (CaseBuilder-Core-weakenNs_Weaken__C-40PatInfoC-32C-36pC-41 'erased vars ns arg-5307)))))))
(define CaseBuilder-Core-weakenNs (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((0) (vector 0 )) (else (let ((e-4 (vector-ref sc0 1))) (let ((e-5 (vector-ref sc0 2))) (vector 1 (CaseBuilder-Core-weakenNs_Weaken__C-40PatInfoC-32C-36pC-41 'erased arg-1 arg-2 e-4) (CaseBuilder-Core-weakenNs 'erased arg-1 arg-2 e-5)))))))))
(define CaseBuilder-Core-weaken (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((0) (vector 0 )) (else (let ((e-4 (vector-ref sc0 1))) (let ((e-5 (vector-ref sc0 2))) (vector 1 (CaseBuilder-Core-weaken_Weaken__C-40PatInfoC-32C-36pC-41 'erased arg-1 arg-2 e-4) (CaseBuilder-Core-weaken 'erased arg-1 arg-2 e-5)))))))))
(define CaseBuilder-Core-varRule (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 ext-0) (let ((act-24 ((Core-Core-traverse 'erased 'erased (lambda (eta-0) (CaseBuilder-Core-n--8181-9316-updateVar arg-2 arg-1 arg-7 arg-0 arg-6 arg-5 arg-4 arg-3 eta-0)) arg-6) ext-0))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) ((CaseBuilder-Core-match arg-1 arg-2 arg-3 arg-4 arg-5 e-5 arg-7) ext-0))))))))
(define CaseBuilder-Core-updatePats (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-1)) (case (vector-ref sc0 0) ((0) (let ((sc1 arg-5)) (lambda (eta-0) (vector 1 (vector 0 ))))) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 arg-4)) (case (vector-ref sc1 0) ((0) (let ((e-11 (vector-ref sc1 1))) (let ((e-12 (vector-ref sc1 2))) (let ((e-13 (vector-ref sc1 3))) (let ((sc2 e-12)) (case (vector-ref sc2 0) ((1) (let ((e-15 (vector-ref sc2 1))) (let ((e-16 (vector-ref sc2 2))) (let ((e-17 (vector-ref sc2 3))) (let ((sc3 arg-5)) (case (vector-ref sc3 0) ((1) (let ((e-21 (vector-ref sc3 1))) (let ((e-22 (vector-ref sc3 2))) (CaseBuilder-Core-case--updatePats-4894 arg-0 e-11 e-15 e-16 e-2 e-3 e-17 e-13 e-22 e-21 arg-3 arg-2 (let ((sc4 e-21)) (let ((e-6 (vector-ref sc4 4))) e-6))))))(else (let ((sc3 arg-5)) (let ((e-8 (vector-ref sc3 1))) (let ((e-9 (vector-ref sc3 2))) (let ((todo (vector 1 e-2 e-3))) (CaseBuilder-Core-case--updatePats-5070 arg-0 e-3 e-2 e-9 e-8 arg-4 arg-3 arg-2 todo (let ((sc4 e-8)) (let ((e-6 (vector-ref sc4 4))) e-6))))))))))))))(else (let ((sc2 arg-5)) (let ((e-8 (vector-ref sc2 1))) (let ((e-9 (vector-ref sc2 2))) (let ((todo (vector 1 e-2 e-3))) (CaseBuilder-Core-case--updatePats-5070 arg-0 e-3 e-2 e-9 e-8 arg-4 arg-3 arg-2 todo (let ((sc3 e-8)) (let ((e-6 (vector-ref sc3 4))) e-6))))))))))))))(else (let ((sc1 arg-5)) (let ((e-8 (vector-ref sc1 1))) (let ((e-9 (vector-ref sc1 2))) (let ((todo (vector 1 e-2 e-3))) (CaseBuilder-Core-case--updatePats-5070 arg-0 e-3 e-2 e-9 e-8 arg-4 arg-3 arg-2 todo (let ((sc2 e-8)) (let ((e-6 (vector-ref sc2 4))) e-6)))))))))))))))))
(define CaseBuilder-Core-updatePatNames (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((0) (vector 0 )) (else (let ((e-4 (vector-ref sc0 1))) (let ((e-5 (vector-ref sc0 2))) (vector 1 (let ((sc1 e-4)) (let ((e-2 (vector-ref sc1 1))) (let ((e-3 (vector-ref sc1 2))) (let ((e-7 (vector-ref sc1 3))) (let ((e-6 (vector-ref sc1 4))) (vector 0 e-2 e-3 (CaseBuilder-Core-n--6239-7221-update 'erased 'erased 'erased e-5 e-4 arg-2 'erased e-7) e-6)))))) (CaseBuilder-Core-updatePatNames 'erased 'erased arg-2 e-5)))))))))
(define CaseBuilder-Core-updateNames (lambda (ext-0) (List-Data-mapMaybe 'erased 'erased (lambda (eta-0) (CaseBuilder-Core-n--6219-7182-update eta-0)) ext-0)))
(define CaseBuilder-Core-toPatClause (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (CaseBuilder-Core-case--toPatClause-10002 e-2 e-3 arg-1 arg-0 (TT-Core-getFnArgs 'erased e-2)))))))
(define CaseBuilder-Core-tail (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (let ((e-4 (vector-ref sc0 2))) e-4))))
(define CaseBuilder-Core-substInPats (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-1)) (case (vector-ref sc0 0) ((0) (let ((sc1 arg-5)) (lambda (eta-0) (vector 1 (vector 0 ))))) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 arg-5)) (let ((e-8 (vector-ref sc1 1))) (let ((e-9 (vector-ref sc1 2))) (lambda (eta-0) (let ((act-24 ((CaseBuilder-Core-substInPatInfo e-2 arg-0 e-3 arg-2 arg-3 arg-4 e-8 e-9) eta-0))) (let ((sc2 act-24)) (case (vector-ref sc2 0) ((0) (let ((e-4 (vector-ref sc2 1))) (vector 0 e-4))) (else (let ((e-5 (vector-ref sc2 1))) (let ((sc3 e-5)) (let ((e-6 (vector-ref sc3 1))) (let ((e-4 (vector-ref sc3 2))) (let ((act-25 ((CaseBuilder-Core-substInPats arg-0 e-3 arg-2 arg-3 arg-4 e-4) eta-0))) (let ((sc4 act-25)) (case (vector-ref sc4 0) ((0) (let ((e-7 (vector-ref sc4 1))) (vector 0 e-7))) (else (let ((e-7 (vector-ref sc4 1))) (vector 1 (vector 1 e-6 e-7))))))))))))))))))))))))))
(define CaseBuilder-Core-substInPatInfo (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (CaseBuilder-Core-case--substInPatInfo-5206 arg-2 arg-1 arg-7 arg-0 arg-6 arg-5 arg-4 arg-3 (let ((sc0 arg-6)) (let ((e-6 (vector-ref sc0 4))) e-6)))))
(define CaseBuilder-Core-substInClause (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-4)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((e-4 (vector-ref sc0 3))) (let ((sc1 e-3)) (let ((e-8 (vector-ref sc1 1))) (let ((e-9 (vector-ref sc1 2))) (let ((sc2 e-8)) (let ((e-12 (vector-ref sc2 1))) (let ((e-13 (vector-ref sc2 2))) (let ((e-14 (vector-ref sc2 3))) (let ((e-16 (vector-ref sc2 4))) (lambda (eta-0) (let ((act-24 ((CaseBuilder-Core-substInPats arg-1 arg-2 arg-3 arg-0 (CaseTree-Core-mkTerm arg-1 e-14) e-9) eta-0))) (let ((sc3 act-24)) (case (vector-ref sc3 0) ((0) (let ((e-5 (vector-ref sc3 1))) (vector 0 e-5))) (else (let ((e-5 (vector-ref sc3 1))) (vector 1 (vector 0 e-2 (vector 1 (vector 0 e-12 e-13 e-14 e-16) e-5) e-4))))))))))))))))))))))
(define CaseBuilder-Core-simpleCase (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 ext-0) (let ((act-24 ((Core-Core-traverse 'erased 'erased (lambda (eta-0) (CaseBuilder-Core-toPatClause arg-0 arg-1 eta-0)) arg-4) ext-0))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (let ((act-25 (let ((act-25 (unbox arg-0))) (vector 1 act-25)))) (let ((sc1 act-25)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else ((CaseBuilder-Core-patCompile arg-0 arg-1 arg-2 e-5 arg-3) ext-0))))))))))))
(define CaseBuilder-Core-shuffleVars (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-5)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((e-4 (vector-ref sc0 3))) (vector 0 e-2 (CaseBuilder-Core-moveFirst 'erased 'erased 'erased arg-3 'erased e-3) e-4)))))))
(define CaseBuilder-Core-sameType (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (let ((sc0 arg-7)) (case (vector-ref sc0 0) ((0) (lambda (eta-0) (vector 1 (vector 0 )))) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (lambda (eta-0) (let ((act-24 (let ((act-24 (unbox arg-4))) (vector 1 act-24)))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-4 (vector-ref sc1 1))) (vector 0 e-4))) (else (let ((e-5 (vector-ref sc1 1))) ((CaseBuilder-Core-case--sameType-8197 'erased 'erased arg-2 e-2 e-3 arg-6 arg-5 arg-4 arg-3 e-5 (CaseBuilder-Core-getFirstArgType 'erased 'erased 'erased e-2)) eta-0))))))))))))))
(define CaseBuilder-Core-samePat (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((0) 0) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (CaseBuilder-Core-n--7445-8279-samePatAs 'erased 'erased 'erased e-2 e-3 (CaseBuilder-Core-getFirstPat 'erased 'erased 'erased e-2) (Types-Prelude-map_Functor__List 'erased 'erased (lambda (eta-0) (CaseBuilder-Core-getFirstPat 'erased 'erased 'erased eta-0)) e-3)))))))))
(define CaseBuilder-Core-pickNext (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((0) (CaseBuilder-Core-case--pickNext-8543 arg-0 arg-1 arg-6 arg-5 arg-4 arg-3 (CaseBuilder-Core-samePat 'erased 'erased 'erased arg-6))) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (CaseBuilder-Core-case--pickNext-8656 arg-0 arg-1 e-2 e-3 arg-6 arg-5 arg-4 arg-3 (CaseBuilder-Core-samePat 'erased 'erased 'erased arg-6)))))))))
(define CaseBuilder-Core-patCompile (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((0) (Types-Prelude-maybe 'erased 'erased (lambda () (lambda (eta-0) (vector 1 (vector 0 (vector 0 ) (vector 2 "No definition"))))) (lambda () (lambda (e) (lambda (eta-0) (vector 1 (vector 0 (vector 0 ) e))))) arg-4)) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((ns (CaseBuilder-Core-n--9134-9883-getNames e-2 e-3 arg-4 arg-2 arg-1 arg-0 0 (Builtin-fst 'erased 'erased e-2)))) (lambda (eta-0) (let ((act-24 ((CaseBuilder-Core-n--9134-9882-mkPatClausesFrom e-2 e-3 arg-4 arg-2 arg-1 arg-0 ns (vector 1 e-2 e-3)) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-4 (vector-ref sc1 1))) (vector 0 e-4))) (else (let ((e-5 (vector-ref sc1 1))) (let ((act-25 (Core-Core-newRef 'erased 'erased (vector "Core.CaseBuilder.PName" ) 0 eta-0))) (let ((sc2 act-25)) (case (vector-ref sc2 0) ((0) (let ((e-4 (vector-ref sc2 1))) (vector 0 e-4))) (else (let ((e-6 (vector-ref sc2 1))) (let ((act-26 ((CaseBuilder-Core-match ns ns e-6 arg-0 arg-1 e-5 (Types-Prelude-map_Functor__Maybe 'erased 'erased (lambda (arg-5) (CaseTree-Core-weakenNs_Weaken__CaseTree (vector 0 ) ns arg-5)) arg-4)) eta-0))) (let ((sc3 act-26)) (case (vector-ref sc3 0) ((0) (let ((e-4 (vector-ref sc3 1))) (vector 0 e-4))) (else (let ((e-7 (vector-ref sc3 1))) (vector 1 (vector 0 ns e-7))))))))))))))))))))))))))
(define PatInfo-CaseBuilder-Core-pat (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (let ((e-4 (vector-ref sc0 3))) e-4))))
(define CaseBuilder-Core-partition (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((0) (vector 2 )) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (CaseBuilder-Core-with--partition-6156 arg-0 arg-1 arg-2 e-3 (CaseBuilder-Core-partition arg-0 arg-1 arg-2 e-3) e-2))))))))
(define CaseBuilder-Core-nextNames (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-4)) (case (vector-ref sc0 0) ((0) (lambda (eta-0) (vector 1 (vector 0 (vector 0 ) (vector 0 ))))) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (lambda (eta-0) (let ((act-24 (let ((act-24 (unbox arg-2))) (vector 1 act-24)))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-4 (vector-ref sc1 1))) (vector 0 e-4))) (else (let ((e-5 (vector-ref sc1 1))) (let ((act-25 (Context-Core-clearDefs e-5 eta-0))) (let ((sc2 act-25)) (case (vector-ref sc2 0) ((0) (let ((e-4 (vector-ref sc2 1))) (vector 0 e-4))) (else (let ((e-6 (vector-ref sc2 1))) (let ((act-26 (CaseBuilder-Core-nextName arg-1 arg-3 eta-0))) (let ((sc3 act-26)) (case (vector-ref sc3 0) ((0) (let ((e-4 (vector-ref sc3 1))) (vector 0 e-4))) (else (let ((e-7 (vector-ref sc3 1))) (let ((env (Env-Core-mkEnv arg-0))) (let ((act-27 (let ((sc4 arg-5)) (case (vector-ref sc4 0) ((0) (vector 1 (vector 0 (vector 0 ) (vector 2 )))) (else (let ((e-4 (vector-ref sc4 1))) (let ((sc5 e-4)) (case (vector-ref sc5 0) ((0) (let ((e-9 (vector-ref sc5 2))) (let ((e-8 (vector-ref sc5 3))) (let ((sc6 e-9)) (case (vector-ref sc6 0) ((1) (let ((e-11 (vector-ref sc6 3))) (let ((sc7 e-11)) (case (vector-ref sc7 0) ((5) (let ((act-27 (((e-8 e-5) (Normalise-Core-toClosure 'erased env (vector 1 (vector 1 ) e-7))) eta-0))) (let ((sc8 act-27)) (case (vector-ref sc8 0) ((0) (let ((e-14 (vector-ref sc8 1))) (vector 0 e-14))) (else (let ((e-14 (vector-ref sc8 1))) (vector 1 (vector 0 (vector 1 e-14) (vector 2 )))))))))(else (let ((act-27 (((e-8 e-5) (Normalise-Core-toClosure 'erased env (vector 1 (vector 1 ) e-7))) eta-0))) (let ((sc7 act-27)) (case (vector-ref sc7 0) ((0) (let ((e-14 (vector-ref sc7 1))) (vector 0 e-14))) (else (let ((e-14 (vector-ref sc7 1))) (let ((act-28 (Normalise-Core-quote_Quote__NF arg-0 e-6 env e-11 eta-0))) (let ((sc8 act-28)) (case (vector-ref sc8 0) ((0) (let ((e-15 (vector-ref sc8 1))) (vector 0 e-15))) (else (let ((e-15 (vector-ref sc8 1))) (vector 1 (vector 0 (vector 1 e-14) (vector 0 e-15))))))))))))))))))(else (let ((act-27 (Normalise-Core-quote_Quote__NF arg-0 e-6 env e-4 eta-0))) (let ((sc6 act-27)) (case (vector-ref sc6 0) ((0) (let ((e-11 (vector-ref sc6 1))) (vector 0 e-11))) (else (let ((e-11 (vector-ref sc6 1))) (vector 1 (vector 0 (vector 0 ) (vector 1 e-11))))))))))))))(else (let ((act-27 (Normalise-Core-quote_Quote__NF arg-0 e-6 env e-4 eta-0))) (let ((sc5 act-27)) (case (vector-ref sc5 0) ((0) (let ((e-8 (vector-ref sc5 1))) (vector 0 e-8))) (else (let ((e-8 (vector-ref sc5 1))) (vector 1 (vector 0 (vector 0 ) (vector 1 e-8))))))))))))))))) (let ((sc4 act-27)) (case (vector-ref sc4 0) ((0) (let ((e-4 (vector-ref sc4 1))) (vector 0 e-4))) (else (let ((e-8 (vector-ref sc4 1))) (let ((act-28 ((CaseBuilder-Core-nextNames arg-0 arg-1 arg-2 arg-3 e-3 (Builtin-fst 'erased 'erased e-8)) eta-0))) (let ((sc5 act-28)) (case (vector-ref sc5 0) ((0) (let ((e-4 (vector-ref sc5 1))) (vector 0 e-4))) (else (let ((e-9 (vector-ref sc5 1))) (let ((sc6 e-9)) (let ((e-10 (vector-ref sc6 1))) (let ((e-4 (vector-ref sc6 2))) (let ((argTy (let ((_-0 (vector 0 e-10 e-4))) (CaseBuilder-Core-case--caseC-32blockC-32inC-32nextNames-6772 e-2 e-3 arg-0 arg-5 arg-3 arg-2 arg-1 e-5 e-6 e-7 env e-8 e-10 e-4 _-0 (Builtin-snd 'erased 'erased e-8))))) (vector 1 (vector 0 (vector 1 e-7 e-10) (vector 1 (vector 0 0 e-7 e-2 argTy) (CaseBuilder-Core-weaken 'erased e-7 (List-Types-Prelude-C-43C-43 'erased e-10 arg-0) e-4))))))))))))))))))))))))))))))))))))))))))
(define CaseBuilder-Core-nextName (lambda (arg-0 arg-1 ext-0) (let ((act-24 (let ((act-24 (unbox arg-0))) (vector 1 act-24)))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (let ((act-25 (let ((act-25 (set-box! arg-0 (b+ e-5 1 63)))) (vector 1 act-25)))) (let ((sc1 act-25)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (vector 1 (vector 1 arg-1 e-5)))))))))))))
(define CaseBuilder-Core-newPats (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((0) (let ((sc1 arg-4)) (vector 0 ))) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 arg-4)) (let ((e-12 (vector-ref sc1 1))) (let ((sc2 arg-5)) (let ((e-16 (vector-ref sc2 1))) (let ((e-17 (vector-ref sc2 2))) (vector 1 (let ((sc3 e-16)) (let ((e-7 (vector-ref sc3 1))) (let ((e-5 (vector-ref sc3 2))) (let ((e-6 (vector-ref sc3 4))) (vector 0 e-7 e-5 e-2 e-6))))) (CaseBuilder-Core-newPats 'erased 'erased 'erased e-3 e-12 e-17))))))))))))))
(define CaseBuilder-Core-moveFirst (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (vector 1 (CaseBuilder-Core-getPat 'erased 'erased 'erased arg-3 'erased arg-5) (CaseBuilder-Core-dropPat 'erased 'erased 'erased arg-3 'erased arg-5))))
(define CaseBuilder-Core-mkPatClause (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-4)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (Types-Prelude-maybe 'erased 'erased (lambda () (lambda (eta-0) (Core-Core-throw_Catchable__Core_Error 'erased (vector 2 arg-1 (vector 0 )) eta-0))) (lambda () (lambda (eq) (lambda (eta-0) (let ((act-24 (let ((act-24 (unbox arg-0))) (vector 1 act-24)))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-4 (vector-ref sc1 1))) (vector 0 e-4))) (else (let ((e-5 (vector-ref sc1 1))) (let ((act-25 ((Normalise-Core-nf (vector 0 ) e-5 (vector 0 ) arg-3) eta-0))) (let ((sc2 act-25)) (case (vector-ref sc2 0) ((0) (let ((e-4 (vector-ref sc2 1))) (vector 0 e-4))) (else (let ((e-6 (vector-ref sc2 1))) (let ((act-26 ((CaseBuilder-Core-n--8814-9492-mkNames e-2 e-3 arg-3 arg-2 arg-1 arg-0 arg-2 e-2 eq (vector 1 e-6)) eta-0))) (let ((sc3 act-26)) (case (vector-ref sc3 0) ((0) (let ((e-4 (vector-ref sc3 1))) (vector 0 e-4))) (else (let ((e-7 (vector-ref sc3 1))) (vector 1 (vector 0 (vector 0 ) e-7 (TT-Core-weakenNs_Weaken__Term (vector 0 ) arg-2 e-3))))))))))))))))))))) (LengthMatch-Data-checkLengthMatch 'erased 'erased arg-2 e-2)))))))
(define CaseBuilder-Core-mixture (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8) (let ((sc0 arg-7)) (case (vector-ref sc0 0) ((0) (let ((e-3 (vector-ref sc0 1))) (let ((e-5 (vector-ref sc0 3))) (let ((e-6 (vector-ref sc0 4))) (let ((e-7 (vector-ref sc0 5))) (let ((sc1 e-3)) (case (vector-ref sc1 0) ((1) (lambda (eta-0) (let ((act-24 ((CaseBuilder-Core-mixture arg-0 arg-1 arg-2 arg-3 arg-4 e-5 arg-6 e-7 arg-8) eta-0))) (let ((sc2 act-24)) (case (vector-ref sc2 0) ((0) (let ((e-2 (vector-ref sc2 1))) (vector 0 e-2))) (else (let ((e-8 (vector-ref sc2 1))) (let ((act-25 ((CaseBuilder-Core-conRule arg-0 arg-1 arg-2 arg-3 arg-4 arg-6 e-6 e-8) eta-0))) (let ((sc3 act-25)) (case (vector-ref sc3 0) ((0) (let ((e-2 (vector-ref sc3 1))) (vector 0 e-2))) (else (let ((e-9 (vector-ref sc3 1))) (vector 1 (vector 1 e-9))))))))))))))(else (let ((sc1 arg-5)) (let ((sc2 arg-7)) (lambda (eta-0) (vector 1 arg-8)))))))))))) ((1) (let ((e-8 (vector-ref sc0 1))) (let ((e-10 (vector-ref sc0 3))) (let ((e-11 (vector-ref sc0 4))) (let ((e-12 (vector-ref sc0 5))) (let ((sc1 e-8)) (case (vector-ref sc1 0) ((1) (lambda (eta-0) (let ((act-24 ((CaseBuilder-Core-mixture arg-0 arg-1 arg-2 arg-3 arg-4 e-10 arg-6 e-12 arg-8) eta-0))) (let ((sc2 act-24)) (case (vector-ref sc2 0) ((0) (let ((e-2 (vector-ref sc2 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc2 1))) (let ((act-25 (CaseBuilder-Core-varRule arg-0 arg-1 arg-2 arg-3 arg-4 arg-6 e-11 e-5 eta-0))) (let ((sc3 act-25)) (case (vector-ref sc3 0) ((0) (let ((e-2 (vector-ref sc3 1))) (vector 0 e-2))) (else (let ((e-6 (vector-ref sc3 1))) (vector 1 (vector 1 e-6))))))))))))))(else (let ((sc1 arg-5)) (let ((sc2 arg-7)) (lambda (eta-0) (vector 1 arg-8))))))))))))(else (let ((sc0 arg-5)) (let ((sc1 arg-7)) (lambda (eta-0) (vector 1 arg-8)))))))))
(define CaseBuilder-Core-match (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (let ((sc0 arg-1)) (case (vector-ref sc0 0) ((1) (let ((e-1 (vector-ref sc0 1))) (let ((e-2 (vector-ref sc0 2))) (lambda (eta-0) (let ((act-24 ((CaseBuilder-Core-pickNext e-1 arg-0 e-2 arg-2 arg-3 arg-4 (Types-Prelude-map_Functor__List 'erased 'erased (lambda (eta-1) (CaseBuilder-Core-getNPs 'erased 'erased eta-1)) arg-5)) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-3 (vector-ref sc1 1))) (vector 0 e-3))) (else (let ((e-5 (vector-ref sc1 1))) (let ((sc2 e-5)) (let ((e-4 (vector-ref sc2 1))) (let ((e-3 (vector-ref sc2 2))) (let ((clausesC-39 (Types-Prelude-map_Functor__List 'erased 'erased (lambda (eta-1) (CaseBuilder-Core-shuffleVars 'erased 'erased 'erased e-3 'erased eta-1)) arg-5))) (let ((ps (CaseBuilder-Core-partition e-4 (TT-Core-dropVar 'erased (vector 1 e-1 e-2) e-3 'erased) arg-0 clausesC-39))) (let ((act-25 ((CaseBuilder-Core-mixture e-4 arg-0 (TT-Core-dropVar 'erased (vector 1 e-1 e-2) e-3 'erased) arg-2 arg-3 clausesC-39 arg-4 ps arg-6) eta-0))) (let ((sc3 act-25)) (case (vector-ref sc3 0) ((0) (let ((e-6 (vector-ref sc3 1))) (vector 0 e-6))) (else (let ((e-6 (vector-ref sc3 1))) ((Types-Prelude-maybe 'erased 'erased (lambda () (lambda (eta-1) (vector 1 (vector 2 "No clauses")))) (lambda () (lambda (eta-1) (lambda (eta-2) (vector 1 eta-1)))) e-6) eta-0)))))))))))))))))))) (else (let ((sc1 arg-5)) (case (vector-ref sc1 0) ((0) (Types-Prelude-maybe 'erased 'erased (lambda () (lambda (eta-0) (vector 1 (vector 2 "No patterns")))) (lambda () (lambda (eta-0) (lambda (eta-1) (vector 1 eta-0)))) arg-6)) (else (let ((e-6 (vector-ref sc1 1))) (let ((sc2 e-6)) (let ((e-11 (vector-ref sc2 2))) (let ((e-12 (vector-ref sc2 3))) (let ((sc3 e-11)) (let ((sc4 e-12)) (case (vector-ref sc4 0) ((6) (lambda (eta-0) (vector 1 (vector 3 ))))(else (lambda (eta-0) (vector 1 (vector 1 e-12)))))))))))))))))))
(define CaseBuilder-Core-groupCons (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (CaseBuilder-Core-n--6374-7336-gc arg-0 arg-1 arg-2 arg-7 arg-6 arg-5 arg-4 arg-3 arg-0 arg-1 arg-2 (vector 0 ) arg-7)))
(define CaseBuilder-Core-getScore (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 ext-0) (Core-Core-catch_Catchable__Core_Error 'erased (lambda (eta-0) (let ((act-24 ((CaseBuilder-Core-sameType 'erased 'erased arg-2 arg-3 arg-4 arg-5 (Env-Core-mkEnv arg-2) arg-6) eta-0))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (vector 1 (vector 1 (vector 0 )))))))) (lambda (err) (let ((sc0 err)) (case (vector-ref sc0 0) ((2) (let ((e-1 (vector-ref sc0 2))) (lambda (eta-0) (vector 1 (vector 0 e-1)))))(else (lambda (eta-0) (Core-Core-throw_Catchable__Core_Error 'erased err eta-0)))))) ext-0)))
(define CaseBuilder-Core-getPat (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-3)) (cond ((equal? sc0 0) (let ((sc1 arg-5)) (let ((e-4 (vector-ref sc1 1))) e-4)))(else (let ((e-0 (- arg-3 1))) (let ((sc0 arg-5)) (let ((e-10 (vector-ref sc0 2))) (CaseBuilder-Core-getPat 'erased 'erased 'erased e-0 'erased e-10)))))))))
(define CaseBuilder-Core-getPMDef (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((0) (lambda (eta-0) (let ((act-24 (let ((act-24 (unbox arg-0))) (vector 1 act-24)))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc1 1))) (let ((act-25 ((Normalise-Core-nf (vector 0 ) e-5 (vector 0 ) arg-2) eta-0))) (let ((sc2 act-25)) (case (vector-ref sc2 0) ((0) (let ((e-2 (vector-ref sc2 1))) (vector 0 e-2))) (else (let ((e-6 (vector-ref sc2 1))) (let ((act-26 ((CaseBuilder-Core-n--9444-10152-getArgs arg-2 arg-1 arg-0 0 e-6) eta-0))) (let ((sc3 act-26)) (case (vector-ref sc3 0) ((0) (let ((e-2 (vector-ref sc3 1))) (vector 0 e-2))) (else (let ((e-7 (vector-ref sc3 1))) (vector 1 (vector 0 e-7 (vector 2 "No clauses"))))))))))))))))))))(else (lambda (eta-0) (let ((act-24 (let ((act-24 (unbox arg-0))) (vector 1 act-24)))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (let ((cs (Types-Prelude-map_Functor__List 'erased 'erased (lambda (eta-1) (CaseBuilder-Core-n--9444-10238-toClosed arg-3 arg-2 arg-1 arg-0 e-5 eta-1)) (CaseBuilder-Core-n--9444-10235-labelPat arg-3 arg-2 arg-1 arg-0 'erased 0 arg-3)))) (let ((act-25 (CaseBuilder-Core-simpleCase arg-0 arg-1 arg-2 (vector 0 ) cs eta-0))) (let ((sc1 act-25)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-6 (vector-ref sc1 1))) (let ((sc2 e-6)) (let ((e-2 (vector-ref sc2 1))) (let ((e-3 (vector-ref sc2 2))) (vector 1 (vector 0 e-2 e-3))))))))))))))))))))))
(define CaseBuilder-Core-getNPs (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (let ((e-3 (vector-ref sc0 2))) e-3))))
(define CaseBuilder-Core-getFirstPat (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (let ((e-3 (vector-ref sc0 1))) (let ((sc1 e-3)) (let ((e-5 (vector-ref sc1 3))) e-5))))))
(define CaseBuilder-Core-getFirstArgType (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (let ((e-3 (vector-ref sc0 1))) (let ((sc1 e-3)) (let ((e-6 (vector-ref sc1 4))) e-6))))))
(define CaseBuilder-Core-dropPat (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-3)) (cond ((equal? sc0 0) (let ((sc1 arg-5)) (let ((e-5 (vector-ref sc1 2))) e-5)))(else (let ((e-0 (- arg-3 1))) (let ((sc0 arg-5)) (let ((e-9 (vector-ref sc0 1))) (let ((e-10 (vector-ref sc0 2))) (vector 1 e-9 (CaseBuilder-Core-dropPat 'erased 'erased 'erased e-0 'erased e-10)))))))))))
(define CaseBuilder-Core-conRule (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (let ((sc0 arg-6)) (case (vector-ref sc0 0) ((0) (Types-Prelude-maybe 'erased 'erased (lambda () (lambda (eta-0) (vector 1 (vector 2 "No constructor clauses")))) (lambda () (lambda (eta-0) (lambda (eta-1) (vector 1 eta-0)))) arg-7)) (else (let ((e-2 (vector-ref sc0 1))) (let ((sc1 e-2)) (let ((e-6 (vector-ref sc1 1))) (let ((e-7 (vector-ref sc1 2))) (let ((sc2 e-7)) (let ((e-12 (vector-ref sc2 1))) (let ((sc3 e-12)) (let ((e-16 (vector-ref sc3 1))) (let ((e-17 (vector-ref sc3 2))) (let ((e-20 (vector-ref sc3 4))) (lambda (eta-0) (let ((act-24 ((Core-Core-traverse 'erased 'erased (lambda (eta-1) (CaseBuilder-Core-substInClause arg-0 arg-1 arg-2 arg-4 eta-1)) arg-6) eta-0))) (let ((sc4 act-24)) (case (vector-ref sc4 0) ((0) (let ((e-4 (vector-ref sc4 1))) (vector 0 e-4))) (else (let ((e-5 (vector-ref sc4 1))) (let ((act-25 ((CaseBuilder-Core-groupCons arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 e-6 e-5) eta-0))) (let ((sc5 act-25)) (case (vector-ref sc5 0) ((0) (let ((e-4 (vector-ref sc5 1))) (vector 0 e-4))) (else (let ((e-9 (vector-ref sc5 1))) (let ((act-26 (let ((sc6 e-20)) (case (vector-ref sc6 0) ((0) (let ((e-1 (vector-ref sc6 1))) (vector 1 e-1)))(else (Core-Core-throw_Catchable__Core_Error 'erased (vector 2 arg-5 (vector 4 )) eta-0)))))) (let ((sc6 act-26)) (case (vector-ref sc6 0) ((0) (let ((e-4 (vector-ref sc6 1))) (vector 0 e-4))) (else (let ((e-10 (vector-ref sc6 1))) (CaseBuilder-Core-caseGroups e-17 arg-1 arg-2 arg-3 arg-4 arg-5 e-16 'erased e-10 e-9 arg-7 eta-0))))))))))))))))))))))))))))))))
(define CaseBuilder-Core-clauseType (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((e-4 (vector-ref sc0 3))) (let ((sc1 e-3)) (let ((e-8 (vector-ref sc1 1))) (let ((e-9 (vector-ref sc1 2))) (let ((sc2 e-8)) (let ((e-12 (vector-ref sc2 1))) (let ((e-13 (vector-ref sc2 2))) (let ((e-14 (vector-ref sc2 3))) (let ((e-16 (vector-ref sc2 4))) (CaseBuilder-Core-n--4966-6106-getClauseType 'erased 'erased 'erased e-12 e-13 'erased e-16 e-14 e-9 e-4 e-2 e-14)))))))))))))))
(define CaseBuilder-Core-checkGroupMatch (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((0) (let ((e-0 (vector-ref sc0 1))) (let ((e-1 (vector-ref sc0 2))) (let ((sc1 arg-4)) (case (vector-ref sc1 0) ((0) (let ((e-4 (vector-ref sc1 1))) (let ((e-5 (vector-ref sc1 2))) (let ((e-6 (vector-ref sc1 3))) (let ((e-7 (vector-ref sc1 4))) (let ((sc2 e-7)) (case (vector-ref sc2 0) ((1) (let ((e-9 (vector-ref sc2 1))) (let ((e-10 (vector-ref sc2 2))) (let ((sc3 e-9)) (case (vector-ref sc3 0) ((0) (let ((e-13 (vector-ref sc3 1))) (let ((e-14 (vector-ref sc3 2))) (let ((e-15 (vector-ref sc3 3))) (CaseBuilder-Core-case--checkGroupMatch-6465 'erased 'erased e-1 e-0 e-4 e-15 e-14 e-13 e-10 e-6 e-5 arg-3 (LengthMatch-Data-checkLengthMatch 'erased 'erased arg-3 e-4))))))(else (vector 1 )))))))(else (vector 1 )))))))))(else (vector 1 )))))))(else (vector 1 ))))))
(define CaseBuilder-Core-caseGroups (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 ext-0) (let ((act-24 ((CaseBuilder-Core-n--8166-9083-altGroups arg-0 arg-2 arg-6 arg-1 arg-10 arg-9 arg-8 'erased arg-5 arg-4 arg-3 arg-9) ext-0))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (vector 1 (vector 0 arg-0 arg-1 arg-6 (TT-Core-resolveNames arg-1 arg-8) e-5)))))))))
(define PatInfo-CaseBuilder-Core-argType (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (let ((e-6 (vector-ref sc0 4))) e-6))))
(define CaseBuilder-Core-C-43C-43 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((0) arg-4) (else (let ((e-4 (vector-ref sc0 1))) (let ((e-5 (vector-ref sc0 2))) (vector 1 e-4 (CaseBuilder-Core-C-43C-43 'erased 'erased 'erased e-5 arg-4)))))))))
(define LengthMatch-Data-checkLengthMatch (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((0) (let ((sc1 arg-3)) (case (vector-ref sc1 0) ((0) (vector 1 (vector 0 ))) (else (vector 0 ))))) (else (let ((e-3 (vector-ref sc0 2))) (let ((sc1 arg-3)) (case (vector-ref sc1 0) ((0) (vector 0 )) (else (let ((e-11 (vector-ref sc1 2))) (Types-Prelude-C-62C-62C-61_Monad__Maybe 'erased 'erased (LengthMatch-Data-checkLengthMatch 'erased 'erased e-3 e-11) (lambda (bind-0) (vector 1 (vector 1 bind-0))))))))))))))
(define Source-Parser-case--parseFile-448 (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((1) (let ((e-2 (vector-ref sc0 1))) (lambda (eta-0) (Source-Parser-runParser 'erased 0 (Unlit-Parser-isLitFile arg-2) e-2 arg-1)))) (else (let ((e-5 (vector-ref sc0 1))) (lambda (eta-0) (vector 0 (vector 2 e-5)))))))))
(define Source-Parser-runParserTo (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (Types-Prelude-C-62C-62C-61_Monad__C-40EitherC-32C-36eC-41 'erased 'erased 'erased (Either-Utils-mapError 'erased 'erased 'erased (lambda (eta-0) (vector 3 eta-0)) (Unlit-Parser-unlit arg-2 arg-4)) (lambda (str) (Types-Prelude-C-62C-62C-61_Monad__C-40EitherC-32C-36eC-41 'erased 'erased 'erased (Either-Utils-mapError 'erased 'erased 'erased (lambda (eta-0) (vector 1 eta-0)) (Source-Lexer-Parser-lexTo arg-3 str)) (lambda (toks) (Types-Prelude-C-62C-62C-61_Monad__C-40EitherC-32C-36eC-41 'erased 'erased 'erased (Either-Utils-mapError 'erased 'erased 'erased (lambda (eta-0) (Support-Parser-toGenericParsingError 'erased eta-0)) (Core-Parser-Text-parse 'erased 'erased arg-1 arg-5 toks)) (lambda (parsed) (vector 1 (Builtin-fst 'erased 'erased parsed))))))))))
(define Source-Parser-runParser (lambda (arg-0 arg-1 arg-2 ext-0 ext-1) (Source-Parser-runParserTo 'erased arg-1 arg-2 (lambda (eta-0) 1) ext-0 ext-1)))
(define Source-Parser-parseFile (lambda (arg-0 arg-1 arg-2 ext-0) (let ((act-24 ((File-System-readFile 'erased (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-45) (lambda (eta-0) (IO-Prelude-map_Functor__IO 'erased 'erased func arg-45 eta-0)))))) (lambda (a) (lambda (arg-112) (lambda (eta-0) arg-112))) (lambda (b) (lambda (a) (lambda (arg-113) (lambda (arg-115) (lambda (eta-0) (let ((act-17 (arg-113 eta-0))) (let ((act-16 (arg-115 eta-0))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-274) (lambda (arg-275) (lambda (eta-0) (let ((act-24 (arg-274 eta-0))) ((arg-275 act-24) eta-0))))))) (lambda (a) (lambda (arg-277) (lambda (eta-0) (let ((act-51 (arg-277 eta-0))) (act-51 eta-0)))))) (lambda (a) (lambda (arg-5832) arg-5832))) arg-1) ext-0))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((1) (let ((e-2 (vector-ref sc0 1))) (Source-Parser-runParser 'erased 0 (Unlit-Parser-isLitFile arg-1) e-2 arg-2))) (else (let ((e-5 (vector-ref sc0 1))) (vector 0 (vector 2 e-5)))))))))
(define Either-Utils-mapError (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (Types-Prelude-either 'erased 'erased 'erased (lambda () (lambda (eta-0) (vector 0 (arg-3 eta-0)))) (lambda () (lambda (eta-0) (vector 1 eta-0))) arg-4)))
(define Unlit-Parser-case--caseC-32blockC-32inC-32isLitFile-2064 (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (case (vector-ref sc0 0) ((1) (let ((e-1 (vector-ref sc0 1))) (vector 1 e-1))) (else (Unlit-Parser-n--1726-2021-isStyle arg-0 (Unlit-Parser-styleCMark)))))))
(define Unlit-Parser-case--isLitFile-2049 (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (case (vector-ref sc0 0) ((1) (let ((e-1 (vector-ref sc0 1))) (vector 1 e-1))) (else (Unlit-Parser-case--caseC-32blockC-32inC-32isLitFile-2064 arg-0 (Unlit-Parser-n--1726-2021-isStyle arg-0 (Unlit-Parser-styleOrg))))))))
(define Unlit-Parser-case--isLitFileC-44isStyle-2032 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (cond ((equal? sc0 0) (vector 1 arg-1)) (else (vector 0 ))))))
(define Unlit-Parser-n--1726-2021-isStyle (lambda (arg-0 arg-1) (Unlit-Parser-case--isLitFileC-44isStyle-2032 arg-0 arg-1 ((Interfaces-Prelude-any 'erased 'erased (vector 0 (lambda (acc) (lambda (elem) (lambda (func) (lambda (init) (lambda (input) (Types-Prelude-foldr_Foldable__List 'erased 'erased func init input)))))) (lambda (elem) (lambda (acc) (lambda (func) (lambda (init) (lambda (input) (Types-Prelude-foldl_Foldable__List 'erased 'erased func init input))))))) (lambda (eta-0) (Unlit-Parser-n--1726-2020-hasSuffix arg-0 eta-0))) (let ((sc0 arg-1)) (let ((e-2 (vector-ref sc0 3))) e-2))))))
(define Unlit-Parser-n--1726-2020-hasSuffix (lambda (arg-0 arg-1) (Strings-Data-isSuffixOf arg-1 arg-0)))
(define Unlit-Parser-unlit (lambda (arg-0 arg-1) (let ((sc0 arg-0)) (case (vector-ref sc0 0) ((0) (vector 1 arg-1)) (else (let ((e-2 (vector-ref sc0 1))) (Literate-Text-unlit e-2 arg-1)))))))
(define Unlit-Parser-styleOrg (lambda () (vector 0 (vector 1 (vector 0 "#+BEGIN_SRC idris" "#+END_SRC") (vector 1 (vector 0 "#+begin_src idris" "#+end_src") (vector 1 (vector 0 "#+COMMENT idris" "#+END_COMMENT") (vector 1 (vector 0 "#+comment idris" "#+end_comment") (vector 0 ))))) (vector 1 "#+IDRIS:" (vector 0 )) (vector 1 ".org" (vector 0 )))))
(define Unlit-Parser-styleCMark (lambda () (vector 0 (vector 1 (vector 0 "```idris" "```") (vector 0 )) (vector 0 ) (vector 1 ".md" (vector 1 ".markdown" (vector 0 ))))))
(define Unlit-Parser-styleBird (lambda () (vector 0 (vector 0 ) (vector 1 ">" (vector 1 "<" (vector 0 ))) (vector 1 ".lidr" (vector 0 )))))
(define Unlit-Parser-isLitFile (lambda (arg-0) (Unlit-Parser-case--isLitFile-2049 arg-0 (Unlit-Parser-n--1726-2021-isStyle arg-0 (Unlit-Parser-styleBird)))))
(define Literate-Text-with--withC-32blockC-32inC-32reduce-2165 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11) (let ((sc0 arg-0)) (case (vector-ref sc0 0) ((0) (let ((sc1 arg-1)) (case (vector-ref sc1 0) ((0) (Literate-Text-reduce arg-8 arg-7))(else (let ((sc1 arg-1)) (let ((e-2 (vector-ref sc1 2))) (Literate-Text-reduce arg-8 (vector 1 "\xa;" (vector 1 (Strings-Data-unlines e-2) arg-7)))))))))(else (let ((sc0 arg-1)) (let ((e-2 (vector-ref sc0 2))) (Literate-Text-reduce arg-8 (vector 1 "\xa;" (vector 1 (Strings-Data-unlines e-2) arg-7))))))))))
(define Literate-Text-with--reduce-2142 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9) (let ((sc0 arg-1)) (case (vector-ref sc0 0) ((0) (Literate-Text-reduce arg-8 arg-9)) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (Literate-Text-with--withC-32blockC-32inC-32reduce-2165 e-3 (Views-List-Data-snocList 'erased e-3) arg-2 arg-3 arg-4 arg-5 e-2 arg-9 arg-8 arg-7 arg-6 arg-0))))))))
(define Literate-Text-case--extractCode-2242 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-4)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 e-3)) (let ((e-6 (vector-ref sc1 1))) (let ((e-7 (vector-ref sc1 2))) (let ((sc2 e-7)) (let ((e-10 (vector-ref sc2 1))) (let ((e-11 (vector-ref sc2 2))) (let ((sc3 e-11)) (cond ((equal? sc3 "") (vector 1 (Literate-Text-reduce e-2 (vector 0 ))))(else (vector 0 (vector 0 e-6 e-10 e-11))))))))))))))))
(define Literate-Text-case--reduce-2081 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8) (let ((sc0 arg-8)) (cond ((equal? sc0 0) (Literate-Text-reduce arg-6 (vector 1 "\xa;" arg-7))) (else (Literate-Text-reduce arg-6 (vector 1 (Types-Prelude-substr (Types-Prelude-C-43_Num__Nat (Strings-Types-Prelude-length arg-5) (+ 1 0)) (Strings-Types-Prelude-length arg-4) arg-4) arg-7)))))))
(define Literate-Text-case--rawTokens-2019 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (vector 0 (Literate-Text-block e-2 e-3) (lambda (eta-0) (vector 0 (Strings-Data-trim e-2) (Strings-Data-trim e-3) eta-0))))))))
(define Literate-Text-n--2286-2052-blank_content (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (Strings-Data-fastAppend (List-Data-replicate 'erased (List-Types-Prelude-length 'erased (Strings-Data-lines arg-4)) "\xa;"))))
(define Literate-Text-untilEOL (lambda () (Lexer-Text-manyUntil 'erased (Lexer-Text-newline) (Lexer-Text-any))))
(define Literate-Text-unlit (lambda (ext-0 ext-1) (Literate-Text-extractCode ext-0 ext-1)))
(define Literate-Text-reduce (lambda (arg-0 arg-1) (let ((sc0 arg-0)) (case (vector-ref sc0 0) ((0) (Strings-Data-fastAppend (List-Data-reverse 'erased arg-1))) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 e-2)) (let ((e-5 (vector-ref sc1 1))) (let ((e-6 (vector-ref sc1 2))) (let ((e-7 (vector-ref sc1 3))) (let ((e-8 (vector-ref sc1 4))) (let ((e-9 (vector-ref sc1 5))) (let ((sc2 e-9)) (case (vector-ref sc2 0) ((1) (let ((e-10 (vector-ref sc2 1))) (Literate-Text-reduce e-3 (vector 1 (Literate-Text-n--2286-2052-blank_content e-5 e-6 e-7 e-8 e-10 e-3 arg-1) arg-1)))) ((2) (let ((e-11 (vector-ref sc2 1))) (let ((e-12 (vector-ref sc2 2))) (Literate-Text-case--reduce-2081 e-5 e-6 e-7 e-8 e-12 e-11 e-3 arg-1 (EqOrd-Prelude-C-61C-61_Eq__String e-11 (Strings-Data-trim e-12)))))) (else (let ((e-13 (vector-ref sc2 1))) (let ((e-14 (vector-ref sc2 2))) (let ((e-15 (vector-ref sc2 3))) (Literate-Text-with--reduce-2142 e-15 (Strings-Data-lines e-15) e-5 e-6 e-7 e-8 e-14 e-13 e-3 arg-1))))))))))))))))))))
(define Literate-Text-rawTokens (lambda (arg-0 arg-1) (List-Types-Prelude-C-43C-43 'erased (Types-Prelude-map_Functor__List 'erased 'erased (lambda (lamc-0) (let ((sc0 lamc-0)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (vector 0 (Literate-Text-block e-2 e-3) (lambda (eta-0) (vector 0 (Strings-Data-trim e-2) (Strings-Data-trim e-3) eta-0))))))) arg-0) (List-Types-Prelude-C-43C-43 'erased (Types-Prelude-map_Functor__List 'erased 'erased (lambda (m) (vector 0 (Literate-Text-line m) (lambda (eta-0) (vector 2 (Strings-Data-trim m) eta-0)))) arg-1) (vector 1 (vector 0 (Literate-Text-notCodeLine) (lambda (eta-0) (vector 1 eta-0))) (vector 0 ))))))
(define Literate-Text-notCodeLine (lambda () (Core-Lexer-Text-C-60C-124C-62 'erased 'erased (Lexer-Text-newline) (vector 4 (Lexer-Text-any) (lambda () (Literate-Text-untilEOL))))))
(define Literate-Text-line (lambda (arg-0) (vector 4 (Lexer-Text-exact arg-0) (lambda () (Core-Lexer-Text-C-60C-124C-62 'erased 'erased (Lexer-Text-newline) (vector 4 (Lexer-Text-space) (lambda () (Literate-Text-untilEOL))))))))
(define LiterateStyle-Literate-Text-file_extensions (lambda (arg-0) (let ((sc0 arg-0)) (let ((e-2 (vector-ref sc0 3))) e-2))))
(define Literate-Text-extractCode (lambda (arg-0 arg-1) (let ((sc0 arg-0)) (let ((e-0 (vector-ref sc0 1))) (let ((e-1 (vector-ref sc0 2))) (let ((e-2 (vector-ref sc0 3))) (Literate-Text-case--extractCode-2242 e-2 e-1 e-0 arg-1 (Core-Lexer-Text-lex 'erased (Literate-Text-rawTokens e-0 e-1) arg-1))))))))
(define Literate-Text-block (lambda (arg-0 arg-1) (Lexer-Text-surround (vector 4 (Lexer-Text-exact arg-0) (lambda () (Literate-Text-untilEOL))) (vector 4 (Lexer-Text-exact arg-1) (lambda () (Literate-Text-untilEOL))) (Lexer-Text-any))))
(define Views-List-Data-snocListHelp (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((0) arg-2) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (Views-List-Data-snocListHelp 'erased (List-Types-Prelude-C-43C-43 'erased arg-1 (vector 1 e-2 (vector 0 ))) (vector 1 e-2 arg-1 arg-2) e-3))))))))
(define Views-List-Data-snocList (lambda (arg-0 arg-1) (Views-List-Data-snocListHelp 'erased (vector 0 ) (vector 0 ) arg-1)))
(define Lexer-Text-case--approx-451 (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (case (vector-ref sc0 0) ((0) (Core-Lexer-Text-fail 'erased)) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (Core-Lexer-Text-concatMap 'erased 'erased (lambda (eta-0) (Lexer-Text-like eta-0)) (vector 1 e-2 e-3)))))))))
(define Lexer-Text-case--exact-430 (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (case (vector-ref sc0 0) ((0) (Core-Lexer-Text-fail 'erased)) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (Core-Lexer-Text-concatMap 'erased 'erased (lambda (eta-0) (Lexer-Text-is eta-0)) (vector 1 e-2 e-3)))))))))
(define Lexer-Text-n--2518-575-lexStr (lambda (arg-0) (let ((sc0 arg-0)) (case (vector-ref sc0 0) ((0) (Core-Lexer-Text-fail 'erased)) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (Core-Lexer-Text-C-60C-124C-62 'erased 'erased (Lexer-Text-exact e-2) (Lexer-Text-n--2518-575-lexStr e-3)))))))))
(define Lexer-Text-n--2518-576-control (lambda () (Core-Lexer-Text-C-60C-124C-62 'erased 'erased (Lexer-Text-n--2518-575-lexStr (vector 1 "NUL" (vector 1 "SOH" (vector 1 "STX" (vector 1 "ETX" (vector 1 "EOT" (vector 1 "ENQ" (vector 1 "ACK" (vector 1 "BEL" (vector 1 "BS" (vector 1 "HT" (vector 1 "LF" (vector 1 "VT" (vector 1 "FF" (vector 1 "CR" (vector 1 "SO" (vector 1 "SI" (vector 1 "DLE" (vector 1 "DC1" (vector 1 "DC2" (vector 1 "DC3" (vector 1 "DC4" (vector 1 "NAK" (vector 1 "SYN" (vector 1 "ETB" (vector 1 "CAN" (vector 1 "EM" (vector 1 "SUB" (vector 1 "ESC" (vector 1 "FS" (vector 1 "GS" (vector 1 "RS" (vector 1 "US" (vector 1 "SP" (vector 1 "DEL" (vector 0 )))))))))))))))))))))))))))))))))))) (Core-Lexer-Text-C-60C-124C-62 'erased 'erased (vector 4 (Lexer-Text-is #\x) (lambda () (Lexer-Text-hexDigits))) (Core-Lexer-Text-C-60C-124C-62 'erased 'erased (vector 4 (Lexer-Text-is #\o) (lambda () (Lexer-Text-octDigits))) (Lexer-Text-digits))))))
(define Lexer-Text-symbol (lambda () (Core-Lexer-Text-pred (lambda (x) (Basics-Prelude-not (Basics-Prelude-C-124C-124 (Types-Prelude-isSpace x) (lambda () (Types-Prelude-isAlphaNum x))))))))
(define Lexer-Text-surround (lambda (arg-0 arg-1 arg-2) (vector 4 arg-0 (lambda () (Lexer-Text-manyThen 'erased arg-1 arg-2)))))
(define Lexer-Text-stringLit (lambda () (Lexer-Text-quote (Lexer-Text-is #\") (Core-Lexer-Text-C-60C-124C-62 'erased 'erased (Lexer-Text-escape #\\ (Lexer-Text-any)) (Lexer-Text-any)))))
(define Lexer-Text-space (lambda () (Core-Lexer-Text-pred (lambda (eta-0) (Types-Prelude-isSpace eta-0)))))
(define Lexer-Text-some (lambda (arg-0) (vector 4 arg-0 (lambda () (Lexer-Text-many arg-0)))))
(define Lexer-Text-quote (lambda (arg-0 arg-1) (Lexer-Text-surround arg-0 arg-0 arg-1)))
(define Lexer-Text-opt (lambda (arg-0) (Core-Lexer-Text-C-60C-124C-62 'erased 'erased arg-0 (Core-Lexer-Text-empty))))
(define Lexer-Text-oneOf (lambda (arg-0) (Core-Lexer-Text-pred (lambda (x) (Types-Prelude-elem 'erased (vector 0 (lambda (arg-2) (lambda (arg-3) (EqOrd-Prelude-C-61C-61_Eq__Char arg-2 arg-3))) (lambda (arg-4) (lambda (arg-5) (EqOrd-Prelude-C-47C-61_Eq__Char arg-4 arg-5)))) x (Types-Prelude-unpack arg-0))))))
(define Lexer-Text-octLit (lambda () (vector 4 (Lexer-Text-exact "0o") (lambda () (Lexer-Text-octDigits)))))
(define Lexer-Text-octDigits (lambda () (Lexer-Text-some (Lexer-Text-octDigit))))
(define Lexer-Text-octDigit (lambda () (Core-Lexer-Text-pred (lambda (eta-0) (Types-Prelude-isOctDigit eta-0)))))
(define Lexer-Text-newline (lambda () (let ((crlf "\xd;\xa;")) (Core-Lexer-Text-C-60C-124C-62 'erased 'erased (Lexer-Text-exact crlf) (Lexer-Text-oneOf crlf)))))
(define Lexer-Text-manyUntil (lambda (arg-0 arg-1 arg-2) (Lexer-Text-many (vector 5 (Core-Lexer-Text-reject 'erased arg-1) arg-2))))
(define Lexer-Text-manyThen (lambda (arg-0 arg-1 arg-2) (vector 5 (Lexer-Text-manyUntil 'erased arg-1 arg-2) arg-1)))
(define Lexer-Text-many (lambda (arg-0) (Lexer-Text-opt (Lexer-Text-some arg-0))))
(define Lexer-Text-like (lambda (arg-0) (Core-Lexer-Text-pred (lambda (y) (EqOrd-Prelude-C-61C-61_Eq__Char (Types-Prelude-toUpper arg-0) (Types-Prelude-toUpper y))))))
(define Lexer-Text-isNot (lambda (arg-0) (Core-Lexer-Text-pred (lambda (arg-1) (EqOrd-Prelude-C-47C-61_Eq__Char arg-1 arg-0)))))
(define Lexer-Text-is (lambda (arg-0) (Core-Lexer-Text-pred (lambda (arg-1) (EqOrd-Prelude-C-61C-61_Eq__Char arg-1 arg-0)))))
(define Lexer-Text-hexLit (lambda () (vector 4 (Lexer-Text-approx "0x") (lambda () (Lexer-Text-hexDigits)))))
(define Lexer-Text-hexDigits (lambda () (Lexer-Text-some (Lexer-Text-hexDigit))))
(define Lexer-Text-hexDigit (lambda () (Core-Lexer-Text-pred (lambda (eta-0) (Types-Prelude-isHexDigit eta-0)))))
(define Lexer-Text-exact (lambda (arg-0) (Lexer-Text-case--exact-430 arg-0 (Types-Prelude-unpack arg-0))))
(define Lexer-Text-escape (lambda (arg-0 arg-1) (vector 4 (Lexer-Text-is arg-0) (lambda () arg-1))))
(define Lexer-Text-digits (lambda () (Lexer-Text-some (Lexer-Text-digit))))
(define Lexer-Text-digit (lambda () (Core-Lexer-Text-pred (lambda (eta-0) (Types-Prelude-isDigit eta-0)))))
(define Lexer-Text-choiceMap (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-3)) (let ((e-1 (vector-ref sc0 1))) (((((e-1 'erased) 'erased) (lambda (x) (lambda (acc) (Core-Lexer-Text-C-60C-124C-62 'erased 'erased (arg-4 x) acc)))) (Core-Lexer-Text-fail 'erased)) arg-5)))))
(define Lexer-Text-choice (lambda (arg-0 arg-1 arg-2 ext-0) (Lexer-Text-choiceMap 'erased 'erased arg-1 arg-2 (lambda (eta-0) eta-0) ext-0)))
(define Lexer-Text-charLit (lambda () (let ((q #\')) (vector 4 (vector 4 (Lexer-Text-is q) (lambda () (Core-Lexer-Text-C-60C-124C-62 'erased 'erased (Lexer-Text-escape #\\ (Core-Lexer-Text-C-60C-124C-62 'erased 'erased (Lexer-Text-n--2518-576-control) (Lexer-Text-any))) (Lexer-Text-isNot q)))) (lambda () (Lexer-Text-is q))))))
(define Lexer-Text-approx (lambda (arg-0) (Lexer-Text-case--approx-451 arg-0 (Types-Prelude-unpack arg-0))))
(define Lexer-Text-any (lambda () (Core-Lexer-Text-pred (lambda (eta-0) 0))))
(define Core-Lexer-Text-case--lexTo-2805 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-4)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 e-3)) (let ((e-6 (vector-ref sc1 1))) (let ((e-7 (vector-ref sc1 2))) (let ((sc2 e-7)) (let ((e-10 (vector-ref sc2 1))) (let ((e-11 (vector-ref sc2 2))) (vector 0 e-2 (vector 0 e-6 (vector 0 e-10 (Types-Prelude-fastPack e-11)))))))))))))))
(define Core-Lexer-Text-case--lex-2753 (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 e-3)) (let ((e-6 (vector-ref sc1 1))) (let ((e-7 (vector-ref sc1 2))) (let ((sc2 e-7)) (let ((e-10 (vector-ref sc2 1))) (let ((e-11 (vector-ref sc2 2))) (vector 0 e-2 (vector 0 e-6 (vector 0 e-10 (Types-Prelude-fastPack e-11)))))))))))))))
(define Core-Lexer-Text-case--caseC-32blockC-32inC-32tokenise-2634 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11) (let ((sc0 arg-11)) (cond ((equal? sc0 0) (vector 0 (List-Data-reverse 'erased arg-3) (vector 0 arg-5 (vector 0 arg-4 (vector 0 ))))) (else (Core-Lexer-Text-tokenise 'erased arg-6 arg-8 arg-9 (vector 1 arg-7 arg-3) arg-2 arg-10))))))
(define Core-Lexer-Text-case--tokenise-2601 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (let ((sc0 arg-7)) (case (vector-ref sc0 0) ((1) (let ((e-1 (vector-ref sc0 1))) (let ((sc1 e-1)) (let ((e-5 (vector-ref sc1 1))) (let ((e-6 (vector-ref sc1 2))) (let ((sc2 e-6)) (let ((e-9 (vector-ref sc2 1))) (let ((e-10 (vector-ref sc2 2))) (let ((sc3 e-10)) (let ((e-13 (vector-ref sc3 1))) (let ((e-14 (vector-ref sc3 2))) (Core-Lexer-Text-case--caseC-32blockC-32inC-32tokenise-2634 'erased arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 e-5 e-9 e-13 e-14 (arg-6 e-5))))))))))))) (else (vector 0 (List-Data-reverse 'erased arg-3) (vector 0 arg-5 (vector 0 arg-4 arg-1))))))))
(define Core-Lexer-Text-case--tokeniseC-44getFirstToken-2515 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11) (let ((sc0 arg-11)) (case (vector-ref sc0 0) ((1) (let ((e-1 (vector-ref sc0 1))) (let ((sc1 e-1)) (let ((e-5 (vector-ref sc1 1))) (let ((e-6 (vector-ref sc1 2))) (let ((lineC-39 (b+ arg-5 (Types-Prelude-cast_Cast__Nat_Int (Core-Lexer-Text-n--2748-2408-countNLs 'erased arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 e-5)) 63))) (let ((colC-39 (Core-Lexer-Text-n--2748-2409-getCols 'erased arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 e-5 arg-4))) (vector 1 (vector 0 (vector 0 arg-5 arg-4 lineC-39 colC-39 (arg-8 (Types-Prelude-fastPack (List-Data-reverse 'erased e-5)))) (vector 0 lineC-39 (vector 0 colC-39 e-6))))))))))) (else (Core-Lexer-Text-n--2748-2410-getFirstToken 'erased arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-9 arg-10))))))
(define Core-Lexer-Text-case--tokeniseC-44getCols-2434 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9) (let ((sc0 arg-9)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 e-3)) (case (vector-ref sc1 0) ((0) (b+ arg-7 (Types-Prelude-cast_Cast__Nat_Int (List-Types-Prelude-length 'erased e-2)) 63))(else (Types-Prelude-cast_Cast__Nat_Int (List-Types-Prelude-length 'erased e-2))))))))))
(define Core-Lexer-Text-case--scan-2250 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-5)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (Core-Lexer-Text-scan 'erased arg-1 e-2 e-3))))))
(define Core-Lexer-Text-case--scan-2215 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (let ((sc0 arg-7)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (Core-Lexer-Text-scan 'erased arg-2 e-2 e-3))))))
(define Core-Lexer-Text-case--scan-2179 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (let ((sc0 arg-6)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (Core-Lexer-Text-scan 'erased (arg-1) e-2 e-3))))))
(define Core-Lexer-Text-case--scan-2134 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-4)) (cond ((equal? sc0 0) (vector 1 (vector 0 (vector 1 arg-1 arg-3) arg-2))) (else (vector 0 ))))))
(define Core-Lexer-Text-case--scan-2085 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (let ((sc0 arg-6)) (cond ((equal? sc0 0) (Types-Prelude-pure_Applicative__Maybe 'erased (vector 0 arg-4 arg-3))) (else (vector 0 ))))))
(define Core-Lexer-Text-n--2748-2410-getFirstToken (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8) (let ((sc0 arg-7)) (case (vector-ref sc0 0) ((0) (vector 0 )) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 e-2)) (let ((e-6 (vector-ref sc1 1))) (let ((e-7 (vector-ref sc1 2))) (Core-Lexer-Text-case--tokeniseC-44getFirstToken-2515 'erased arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 e-6 e-7 e-3 arg-8 (Core-Lexer-Text-scan 'erased e-6 (vector 0 ) arg-8))))))))))))
(define Core-Lexer-Text-n--2748-2409-getCols (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8) (Core-Lexer-Text-case--tokeniseC-44getCols-2434 'erased arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-8 arg-7 (List-Data-span 'erased (lambda (arg-9) (EqOrd-Prelude-C-47C-61_Eq__Char arg-9 (integer->char 10))) (List-Data-reverse 'erased arg-7)))))
(define Core-Lexer-Text-n--2748-2408-countNLs (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (List-Types-Prelude-length 'erased (List-Data-filter 'erased (lambda (arg-8) (EqOrd-Prelude-C-61C-61_Eq__Char arg-8 (integer->char 10))) arg-7))))
(define Core-Lexer-Text-tokenise (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (Core-Lexer-Text-case--tokenise-2601 'erased arg-6 arg-5 arg-4 arg-3 arg-2 arg-1 (Core-Lexer-Text-n--2748-2410-getFirstToken 'erased arg-6 arg-5 arg-4 arg-3 arg-2 arg-1 arg-5 arg-6))))
(define TokenData-Core-Lexer-Text-tok (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (let ((e-5 (vector-ref sc0 5))) e-5))))
(define Core-Lexer-Text-scan (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-1)) (case (vector-ref sc0 0) ((0) (Types-Prelude-pure_Applicative__Maybe 'erased (vector 0 arg-2 arg-3))) ((1) (vector 0 )) ((2) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (Core-Lexer-Text-case--scan-2085 'erased e-3 e-2 arg-3 arg-2 'erased (EqOrd-Prelude-C-61C-61_Eq__Bool (Maybe-Data-isJust 'erased (Core-Lexer-Text-scan 'erased e-3 arg-2 arg-3)) e-2))))) ((3) (let ((e-4 (vector-ref sc0 1))) (let ((sc1 arg-3)) (case (vector-ref sc1 0) ((0) (vector 0 )) (else (let ((e-21 (vector-ref sc1 1))) (let ((e-22 (vector-ref sc1 2))) (Core-Lexer-Text-case--scan-2134 e-4 e-21 e-22 arg-2 (e-4 e-21))))))))) ((4) (let ((e-6 (vector-ref sc0 1))) (let ((e-7 (vector-ref sc0 2))) (Types-Prelude-C-62C-62C-61_Monad__Maybe 'erased 'erased (Core-Lexer-Text-scan 'erased e-6 arg-2 arg-3) (lambda (_-0) (let ((sc1 _-0)) (let ((e-2 (vector-ref sc1 1))) (let ((e-3 (vector-ref sc1 2))) (Core-Lexer-Text-scan 'erased (e-7) e-2 e-3))))))))) ((5) (let ((e-10 (vector-ref sc0 1))) (let ((e-11 (vector-ref sc0 2))) (Types-Prelude-C-62C-62C-61_Monad__Maybe 'erased 'erased (Core-Lexer-Text-scan 'erased e-10 arg-2 arg-3) (lambda (_-0) (let ((sc1 _-0)) (let ((e-2 (vector-ref sc1 1))) (let ((e-3 (vector-ref sc1 2))) (Core-Lexer-Text-scan 'erased e-11 e-2 e-3))))))))) ((6) (let ((e-13 (vector-ref sc0 1))) (let ((e-14 (vector-ref sc0 2))) (Types-Prelude-C-62C-62C-61_Monad__Maybe 'erased 'erased (Core-Lexer-Text-scan 'erased e-13 arg-2 arg-3) (lambda (_-0) (let ((sc1 _-0)) (let ((e-2 (vector-ref sc1 1))) (let ((e-3 (vector-ref sc1 2))) (Core-Lexer-Text-scan 'erased e-14 e-2 e-3))))))))) (else (let ((e-17 (vector-ref sc0 1))) (let ((e-18 (vector-ref sc0 2))) (Types-Prelude-maybe 'erased 'erased (lambda () (Core-Lexer-Text-scan 'erased e-18 arg-2 arg-3)) (lambda () (lambda (eta-0) (vector 1 eta-0))) (Core-Lexer-Text-scan 'erased e-17 arg-2 arg-3)))))))))
(define Core-Lexer-Text-reject (lambda (arg-0 ext-0) (vector 2 1 ext-0)))
(define Core-Lexer-Text-pred (lambda (ext-0) (vector 3 ext-0)))
(define TokenData-Core-Lexer-Text-line (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (let ((e-1 (vector-ref sc0 1))) e-1))))
(define Core-Lexer-Text-lexTo (lambda (arg-0 arg-1 arg-2 arg-3) (Core-Lexer-Text-case--lexTo-2805 'erased arg-3 arg-2 arg-1 (Core-Lexer-Text-tokenise 'erased arg-1 0 0 (vector 0 ) arg-2 (Types-Prelude-unpack arg-3)))))
(define Core-Lexer-Text-lex (lambda (arg-0 arg-1 arg-2) (Core-Lexer-Text-case--lex-2753 'erased arg-2 arg-1 (Core-Lexer-Text-tokenise 'erased (lambda (eta-0) 1) 0 0 (vector 0 ) arg-1 (Types-Prelude-unpack arg-2)))))
(define Core-Lexer-Text-fail (lambda (arg-0) (vector 1 )))
(define Core-Lexer-Text-expect (lambda (arg-0 ext-0) (vector 2 0 ext-0)))
(define Core-Lexer-Text-empty (lambda () (vector 0 )))
(define Core-Lexer-Text-concatMap (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((0) (vector 0 )) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 e-3)) (case (vector-ref sc1 0) ((0) (arg-2 e-2)) (else (vector 6 (arg-2 e-2) (Core-Lexer-Text-concatMap 'erased 'erased arg-2 e-3))))))))))))
(define TokenData-Core-Lexer-Text-col (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (let ((e-2 (vector-ref sc0 2))) e-2))))
(define Core-Lexer-Text-Lexer (lambda () (vector "Text.Lexer.Core.Recognise" 0)))
(define Core-Lexer-Text-C-60C-124C-62 (lambda (arg-0 arg-1 ext-0 ext-1) (vector 7 ext-0 ext-1)))
(define Core-Lexer-Text-C-60C-43C-62 (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (cond ((equal? sc0 1) (lambda (eta-0) (lambda (eta-1) (vector 5 eta-0 eta-1)))) (else (lambda (eta-0) (lambda (eta-1) (vector 4 eta-0 eta-1))))))))
(define Source-Rule-Parser-case--terminatorC-44afterDedent-2889 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-4)) (cond ((equal? sc0 0) (vector 0 (vector 1 arg-2))) (else (vector 4 1 "Not the end of a block entry"))))))
(define Source-Rule-Parser-case--terminatorC-44afterDedent-2855 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-4)) (cond ((equal? sc0 0) (vector 0 (vector 1 arg-2))) (else (vector 4 1 "Not the end of a block entry"))))))
(define Source-Rule-Parser-case--terminatorC-44afterDedent-2825 (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (cond ((equal? sc0 0) (vector 0 (vector 0 ))) (else (vector 4 1 "Not the end of a block entry"))))))
(define Source-Rule-Parser-case--atEnd-2750 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (cond ((equal? sc0 0) (vector 0 (vector 0 ))) (else (vector 4 1 "Not the end of a block entry"))))))
(define Source-Rule-Parser-case--checkValid-2634 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (cond ((equal? sc0 0) (vector 0 (vector 0 ))) (else (vector 4 1 "Invalid indentation"))))))
(define Source-Rule-Parser-case--checkValid-2608 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (cond ((equal? sc0 0) (vector 0 (vector 0 ))) (else (vector 4 1 "Invalid indentation"))))))
(define Source-Rule-Parser-case--continueF-2511 (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (cond ((equal? sc0 0) arg-1) (else (vector 0 (vector 0 )))))))
(define Source-Rule-Parser-case--holeName-2366 (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (case (vector-ref sc0 0) ((4) (let ((e-0 (vector-ref sc0 1))) (vector 1 e-0)))(else (vector 0 ))))))
(define Source-Rule-Parser-case--identPart-2285 (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (case (vector-ref sc0 0) ((5) (let ((e-0 (vector-ref sc0 1))) (vector 1 e-0)))(else (vector 0 ))))))
(define Source-Rule-Parser-case--caseC-32blockC-32inC-32exactIdent-2163 (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (cond ((equal? sc0 0) (vector 1 (vector 0 ))) (else (vector 0 ))))))
(define Source-Rule-Parser-case--exactIdent-2151 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((5) (let ((e-0 (vector-ref sc0 1))) (Source-Rule-Parser-case--caseC-32blockC-32inC-32exactIdent-2163 arg-0 arg-1 e-0 (EqOrd-Prelude-C-61C-61_Eq__String e-0 arg-0))))(else (vector 0 ))))))
(define Source-Rule-Parser-case--caseC-32blockC-32inC-32keyword-2114 (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (cond ((equal? sc0 0) (vector 1 (vector 0 ))) (else (vector 0 ))))))
(define Source-Rule-Parser-case--keyword-2102 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((13) (let ((e-0 (vector-ref sc0 1))) (Source-Rule-Parser-case--caseC-32blockC-32inC-32keyword-2114 arg-0 arg-1 e-0 (EqOrd-Prelude-C-61C-61_Eq__String e-0 arg-0))))(else (vector 0 ))))))
(define Source-Rule-Parser-case--caseC-32blockC-32inC-32symbol-2062 (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (cond ((equal? sc0 0) (vector 1 (vector 0 ))) (else (vector 0 ))))))
(define Source-Rule-Parser-case--symbol-2050 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((8) (let ((e-0 (vector-ref sc0 1))) (Source-Rule-Parser-case--caseC-32blockC-32inC-32symbol-2062 arg-0 arg-1 e-0 (EqOrd-Prelude-C-61C-61_Eq__String e-0 arg-0))))(else (vector 0 ))))))
(define Source-Rule-Parser-n--2777-1915-isEOI (lambda (arg-0) (let ((sc0 arg-0)) (case (vector-ref sc0 0) ((12) 0)(else 1)))))
(define Source-Rule-Parser-n--3710-2809-afterSemi (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((0) (vector 0 )) ((1) (let ((e-0 (vector-ref sc0 1))) (vector 2 e-0))) ((2) (let ((e-1 (vector-ref sc0 1))) (vector 2 e-1))) (else (vector 3 ))))))
(define Source-Rule-Parser-n--3710-2810-afterDedent (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((0) (Source-Rule-Parser-case--terminatorC-44afterDedent-2825 arg-0 arg-1 arg-3 (EqOrd-Prelude-C-60C-61_Ord__Int arg-3 arg-0))) ((2) (let ((e-0 (vector-ref sc0 1))) (Source-Rule-Parser-case--terminatorC-44afterDedent-2855 arg-0 arg-1 e-0 arg-3 (EqOrd-Prelude-C-60C-61_Ord__Int arg-3 arg-0)))) ((1) (let ((e-1 (vector-ref sc0 1))) (Source-Rule-Parser-case--terminatorC-44afterDedent-2889 arg-0 arg-1 e-1 arg-3 (EqOrd-Prelude-C-60C-61_Ord__Int arg-3 arg-0)))) (else (vector 0 (vector 3 )))))))
(define Source-Rule-Parser-unqualifiedName (lambda () (Source-Rule-Parser-identPart)))
(define Source-Rule-Parser-terminator (lambda (arg-0 arg-1) (vector 9 1 (Basics-Prelude-C-38C-38 (Basics-Prelude-C-124C-124 0 (lambda () 1)) (lambda () (Basics-Prelude-C-38C-38 1 (lambda () 1)))) (vector 8 1 1 (Source-Rule-Parser-eoi) (lambda (_-2972) (vector 0 (vector 3 )))) (lambda () (vector 9 (Basics-Prelude-C-124C-124 0 (lambda () 1)) (Basics-Prelude-C-38C-38 1 (lambda () 1)) (vector 7 1 (Source-Rule-Parser-symbol ";") (lambda () (lambda (_-2958) (vector 0 (Source-Rule-Parser-n--3710-2809-afterSemi arg-1 arg-0 arg-0))))) (lambda () (vector 9 1 1 (vector 8 1 1 (Common-Rule-Parser-column (vector "Parser.Lexer.Source.Token" )) (lambda (col) (Source-Rule-Parser-n--3710-2810-afterDedent arg-1 arg-0 arg-0 col))) (lambda () (vector 0 (vector 3 ))))))))))
(define Source-Rule-Parser-symbol (lambda (arg-0) (vector 1 (Strings-Types-Prelude-C-43C-43 "Expected '" (Strings-Types-Prelude-C-43C-43 arg-0 "'")) (lambda (x) (Source-Rule-Parser-case--symbol-2050 arg-0 x (let ((sc0 x)) (let ((e-5 (vector-ref sc0 5))) e-5)))))))
(define Source-Rule-Parser-nonEmptyBlock (lambda (arg-0 arg-1) (vector 9 (Basics-Prelude-C-124C-124 0 (lambda () 0)) 0 (vector 7 0 (Source-Rule-Parser-symbol "{") (lambda () (lambda (_-3548) (vector 8 1 0 (vector 5 ) (lambda (_-3558) (vector 7 0 (Source-Rule-Parser-blockEntry 'erased (vector 0 ) arg-1) (lambda () (lambda (res) (vector 8 1 0 (Source-Rule-Parser-blockEntries 'erased (Builtin-snd 'erased 'erased res) arg-1) (lambda (ps) (vector 7 1 (Source-Rule-Parser-symbol "}") (lambda () (lambda (_-3589) (vector 0 (vector 1 (Builtin-fst 'erased 'erased res) ps))))))))))))))) (lambda () (vector 8 1 0 (Common-Rule-Parser-column (vector "Parser.Lexer.Source.Token" )) (lambda (col) (vector 7 1 (Source-Rule-Parser-blockEntry 'erased (vector 1 col) arg-1) (lambda () (lambda (res) (vector 8 1 1 (Source-Rule-Parser-blockEntries 'erased (Builtin-snd 'erased 'erased res) arg-1) (lambda (ps) (vector 0 (vector 1 (Builtin-fst 'erased 'erased res) ps)))))))))))))
(define Source-Rule-Parser-name (lambda () (vector 7 1 (Source-Rule-Parser-unqualifiedName) (lambda () (lambda (n) (vector 0 (vector 0 n)))))))
(define Source-Rule-Parser-mustContinue (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (case (vector-ref sc0 0) ((0) (Source-Rule-Parser-continueF (vector 4 0 "Unexpected end of expression") arg-0)) (else (let ((e-2 (vector-ref sc0 1))) (Source-Rule-Parser-continueF (vector 4 0 (Strings-Types-Prelude-C-43C-43 "Expected '" (Strings-Types-Prelude-C-43C-43 e-2 "'"))) arg-0)))))))
(define Source-Rule-Parser-keyword (lambda (arg-0) (vector 1 (Strings-Types-Prelude-C-43C-43 "Expected '" (Strings-Types-Prelude-C-43C-43 arg-0 "'")) (lambda (x) (Source-Rule-Parser-case--keyword-2102 arg-0 x (let ((sc0 x)) (let ((e-5 (vector-ref sc0 5))) e-5)))))))
(define Source-Rule-Parser-isTerminator (lambda (arg-0) (let ((sc0 arg-0)) (case (vector-ref sc0 0) ((8) (let ((e-0 (vector-ref sc0 1))) (let ((sc1 e-0)) (cond ((equal? sc1 ",") 0) ((equal? sc1 "]") 0) ((equal? sc1 ";") 0) ((equal? sc1 "}") 0) ((equal? sc1 ")") 0) ((equal? sc1 "|") 0)(else 1))))) ((13) (let ((e-1 (vector-ref sc0 1))) (let ((sc1 e-1)) (cond ((equal? sc1 "in") 0) ((equal? sc1 "then") 0) ((equal? sc1 "else") 0) ((equal? sc1 "where") 0)(else 1))))) ((12) 0)(else 1)))))
(define Source-Rule-Parser-init (lambda () 0))
(define Source-Rule-Parser-identPart (lambda () (vector 1 "Expected name" (lambda (x) (Source-Rule-Parser-case--identPart-2285 x (let ((sc0 x)) (let ((e-5 (vector-ref sc0 5))) e-5)))))))
(define Source-Rule-Parser-holeName (lambda () (vector 1 "Expected hole name" (lambda (x) (Source-Rule-Parser-case--holeName-2366 x (let ((sc0 x)) (let ((e-5 (vector-ref sc0 5))) e-5)))))))
(define Source-Rule-Parser-exactIdent (lambda (arg-0) (vector 1 (Strings-Types-Prelude-C-43C-43 "Expected " arg-0) (lambda (x) (Source-Rule-Parser-case--exactIdent-2151 arg-0 x (let ((sc0 x)) (let ((e-5 (vector-ref sc0 5))) e-5)))))))
(define Source-Rule-Parser-eoi (lambda () (vector 8 1 1 (vector 2 "Expected end of input" (lambda (eta-0) (Source-Rule-Parser-n--2777-1915-isEOI (let ((sc0 eta-0)) (let ((e-5 (vector-ref sc0 5))) e-5))))) (lambda (_-1936) (vector 0 (vector 0 ))))))
(define Source-Rule-Parser-continueF (lambda (arg-0 arg-1) (vector 9 1 (Basics-Prelude-C-38C-38 0 (lambda () 1)) (vector 8 1 1 (Source-Rule-Parser-eoi) (lambda (_-2503) arg-0)) (lambda () (vector 9 0 1 (vector 7 1 (Source-Rule-Parser-keyword "where") (lambda () (lambda (_-2494) arg-0))) (lambda () (vector 8 1 1 (Common-Rule-Parser-column (vector "Parser.Lexer.Source.Token" )) (lambda (col) (Source-Rule-Parser-case--continueF-2511 arg-1 arg-0 col (EqOrd-Prelude-C-60C-61_Ord__Int col arg-1))))))))))
(define Source-Rule-Parser-continue (lambda (ext-0) (Source-Rule-Parser-continueF (vector 4 1 "Unexpected end of expression") ext-0)))
(define Source-Rule-Parser-checkValid (lambda (arg-0 arg-1) (let ((sc0 arg-0)) (case (vector-ref sc0 0) ((0) (vector 0 (vector 0 ))) ((1) (let ((e-0 (vector-ref sc0 1))) (Source-Rule-Parser-case--checkValid-2608 e-0 arg-1 (EqOrd-Prelude-C-61C-61_Eq__Int arg-1 e-0)))) ((2) (let ((e-1 (vector-ref sc0 1))) (Source-Rule-Parser-case--checkValid-2634 e-1 arg-1 (EqOrd-Prelude-C-62C-61_Ord__Int arg-1 e-1)))) (else (vector 4 1 "End of block"))))))
(define Source-Rule-Parser-blockEntry (lambda (arg-0 arg-1 arg-2) (vector 8 1 0 (Common-Rule-Parser-column (vector "Parser.Lexer.Source.Token" )) (lambda (col) (vector 8 1 0 (Source-Rule-Parser-checkValid arg-1 col) (lambda (_-3001) (vector 7 1 (arg-2 col) (lambda () (lambda (p) (vector 8 1 1 (Source-Rule-Parser-terminator arg-1 col) (lambda (validC-39) (vector 0 (vector 0 p validC-39)))))))))))))
(define Source-Rule-Parser-blockEntries (lambda (arg-0 arg-1 arg-2) (vector 9 1 (Basics-Prelude-C-38C-38 0 (lambda () 1)) (vector 8 1 1 (Source-Rule-Parser-eoi) (lambda (_-3071) (vector 0 (vector 0 )))) (lambda () (vector 9 0 1 (vector 7 1 (Source-Rule-Parser-blockEntry 'erased arg-1 arg-2) (lambda () (lambda (res) (vector 8 1 1 (Source-Rule-Parser-blockEntries 'erased (Builtin-snd 'erased 'erased res) arg-2) (lambda (ts) (vector 0 (vector 1 (Builtin-fst 'erased 'erased res) ts))))))) (lambda () (vector 0 (vector 0 ))))))))
(define Source-Rule-Parser-block (lambda (arg-0 arg-1) (vector 9 (Basics-Prelude-C-124C-124 0 (lambda () 0)) 1 (vector 7 0 (Source-Rule-Parser-symbol "{") (lambda () (lambda (_-3128) (vector 8 1 0 (vector 5 ) (lambda (_-3138) (vector 8 1 0 (Source-Rule-Parser-blockEntries 'erased (vector 0 ) arg-1) (lambda (ps) (vector 7 1 (Source-Rule-Parser-symbol "}") (lambda () (lambda (_-3157) (vector 0 ps))))))))))) (lambda () (vector 8 1 1 (Common-Rule-Parser-column (vector "Parser.Lexer.Source.Token" )) (lambda (col) (Source-Rule-Parser-blockEntries 'erased (vector 1 col) arg-1)))))))
(define Source-Rule-Parser-atEnd (lambda (arg-0) (vector 9 1 (Basics-Prelude-C-38C-38 1 (lambda () 1)) (Source-Rule-Parser-eoi) (lambda () (vector 9 1 1 (vector 8 1 1 (vector 2 "Expected end of block" (lambda (eta-0) (Source-Rule-Parser-isTerminator (let ((sc0 eta-0)) (let ((e-5 (vector-ref sc0 5))) e-5))))) (lambda (_-2739) (vector 0 (vector 0 )))) (lambda () (vector 8 1 1 (Common-Rule-Parser-column (vector "Parser.Lexer.Source.Token" )) (lambda (col) (Source-Rule-Parser-case--atEnd-2750 arg-0 col (EqOrd-Prelude-C-60C-61_Ord__Int col arg-0))))))))))
(define Source-Rule-Parser-Rule (lambda (ext-0) (Common-Rule-Parser-Rule (vector "Parser.Lexer.Source.Token" ) ext-0)))
(define Source-Rule-Parser-IndentInfo (lambda () (vector "Int" )))
(define Support-Parser-show_Show__C-40ParseErrorC-32C-36tokC-41 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((0) (let ((e-1 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 3))) (Strings-Types-Prelude-C-43C-43 "Parse error: " (Strings-Types-Prelude-C-43C-43 e-1 (Strings-Types-Prelude-C-43C-43 " (next tokens: " (Strings-Types-Prelude-C-43C-43 (Show-Prelude-show_Show__C-40ListC-32C-36aC-41 'erased arg-1 (List-Data-take 'erased (+ 1 (+ 1 (+ 1 (+ 1 (+ 1 (+ 1 (+ 1 (+ 1 (+ 1 (+ 1 0)))))))))) e-3)) ")"))))))) ((1) (let ((e-5 (vector-ref sc0 1))) (let ((sc1 e-5)) (let ((e-12 (vector-ref sc1 1))) (let ((e-13 (vector-ref sc1 2))) (let ((sc2 e-13)) (let ((e-16 (vector-ref sc2 1))) (let ((e-17 (vector-ref sc2 2))) (Strings-Types-Prelude-C-43C-43 "Lex error at " (Strings-Types-Prelude-C-43C-43 (Show-Prelude-show_Show__C-40C-124C-40C-40BuiltinC-46PairC-32C-36aC-41C-32C-36bC-41C-44C-40C-40BuiltinC-46MkPairC-32C-36aC-41C-32C-36bC-41C-124C-41 'erased 'erased (vector 0 (vector 0 (lambda (x) (Show-Prelude-show_Show__Int x)) (lambda (d) (lambda (x) (Show-Prelude-showPrec_Show__Int d x)))) (vector 0 (lambda (x) (Show-Prelude-show_Show__Int x)) (lambda (d) (lambda (x) (Show-Prelude-showPrec_Show__Int d x))))) (vector 0 e-12 e-16)) (Strings-Types-Prelude-C-43C-43 " input: " e-17))))))))))) ((2) (let ((e-7 (vector-ref sc0 1))) (Strings-Types-Prelude-C-43C-43 "File error: " (File-System-show_Show__FileError e-7)))) (else (let ((e-9 (vector-ref sc0 1))) (let ((sc1 e-9)) (let ((e-18 (vector-ref sc1 1))) (let ((e-19 (vector-ref sc1 2))) (let ((e-20 (vector-ref sc1 3))) (Strings-Types-Prelude-C-43C-43 "Lit error(s) at " (Strings-Types-Prelude-C-43C-43 (Show-Prelude-show_Show__C-40C-124C-40C-40BuiltinC-46PairC-32C-36aC-41C-32C-36bC-41C-44C-40C-40BuiltinC-46MkPairC-32C-36aC-41C-32C-36bC-41C-124C-41 'erased 'erased (vector 0 (vector 0 (lambda (x) (Show-Prelude-show_Show__Int x)) (lambda (d) (lambda (x) (Show-Prelude-showPrec_Show__Int d x)))) (vector 0 (lambda (x) (Show-Prelude-show_Show__Int x)) (lambda (d) (lambda (x) (Show-Prelude-showPrec_Show__Int d x))))) (vector 0 e-19 e-18)) (Strings-Types-Prelude-C-43C-43 " input: " e-20)))))))))))))
(define Support-Parser-showPrec_Show__C-40ParseErrorC-32C-36tokC-41 (lambda (arg-0 arg-1 arg-2 arg-3) (Support-Parser-show_Show__C-40ParseErrorC-32C-36tokC-41 'erased arg-1 arg-3)))
(define Support-Parser-__Impl_Show_C-40ParseErrorC-32C-36tokC-41 (lambda (arg-0 arg-1) (vector 0 (lambda (x) (Support-Parser-show_Show__C-40ParseErrorC-32C-36tokC-41 'erased arg-1 x)) (lambda (d) (lambda (x) (Support-Parser-showPrec_Show__C-40ParseErrorC-32C-36tokC-41 'erased arg-1 d x))))))
(define Support-Parser-toGenericParsingError (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (let ((e-1 (vector-ref sc0 1))) (let ((e-2 (vector-ref sc0 2))) (let ((sc1 e-2)) (case (vector-ref sc1 0) ((0) (vector 0 e-1 (vector 0 ) (vector 0 ))) (else (let ((e-5 (vector-ref sc1 1))) (let ((e-6 (vector-ref sc1 2))) (vector 0 e-1 (vector 1 (vector 0 (let ((sc2 e-5)) (let ((e-9 (vector-ref sc2 1))) e-9)) (let ((sc2 e-5)) (let ((e-8 (vector-ref sc2 2))) e-8)))) (Types-Prelude-map_Functor__List 'erased 'erased (lambda (eta-0) (let ((sc2 eta-0)) (let ((e-7 (vector-ref sc2 5))) e-7))) (vector 1 e-5 e-6)))))))))))))
(define Parser-Text-some (lambda (arg-0 arg-1 arg-2) (vector 7 1 arg-2 (lambda () (lambda (bind-0) (vector 8 1 1 (Parser-Text-many 'erased 'erased arg-2) (lambda (bind-1) (vector 0 (vector 1 bind-0 bind-1)))))))))
(define Parser-Text-sepBy1 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (vector 8 (Basics-Prelude-C-124C-124 1 (lambda () arg-3)) 1 (vector 8 1 arg-3 (vector 0 (lambda (eta-0) (lambda (eta-1) (vector 1 eta-0 eta-1)))) (lambda (f) (Core-Parser-Text-map_Functor__C-40C-40GrammarC-32C-36tokC-41C-32C-36cC-41 'erased 'erased 'erased arg-3 f arg-5))) (lambda (f) (Core-Parser-Text-map_Functor__C-40C-40GrammarC-32C-36tokC-41C-32C-36cC-41 'erased 'erased 'erased 1 f (Parser-Text-many 'erased 'erased (vector 8 0 arg-3 (Core-Parser-Text-map_Functor__C-40C-40GrammarC-32C-36tokC-41C-32C-36cC-41 'erased 'erased 'erased 0 (lambda (eta-0) (lambda (eta-1) eta-1)) arg-4) (lambda (f-0) (Core-Parser-Text-map_Functor__C-40C-40GrammarC-32C-36tokC-41C-32C-36cC-41 'erased 'erased 'erased arg-3 f-0 arg-5)))))))))
(define Parser-Text-option (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-2)) (cond ((equal? sc0 1) (vector 9 1 1 arg-4 (lambda () (vector 0 arg-3)))) (else (vector 9 0 1 arg-4 (lambda () (vector 0 arg-3))))))))
(define Parser-Text-many (lambda (arg-0 arg-1 arg-2) (Parser-Text-option 'erased 'erased 0 (vector 0 ) (Parser-Text-some 'erased 'erased arg-2))))
(define Core-Parser-Text-case--parse-1801 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-5)) (case (vector-ref sc0 0) ((0) (let ((e-4 (vector-ref sc0 3))) (let ((e-5 (vector-ref sc0 4))) (vector 0 (vector 0 e-4 e-5))))) (else (let ((e-9 (vector-ref sc0 2))) (let ((e-10 (vector-ref sc0 3))) (vector 1 (vector 0 e-9 e-10)))))))))
(define Core-Parser-Text-case--caseC-32blockC-32inC-32doParse-1713 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12) (let ((sc0 arg-12)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((e-4 (vector-ref sc0 3))) (let ((e-5 (vector-ref sc0 4))) (vector 0 e-2 e-3 e-4 e-5)))))) (else (let ((e-8 (vector-ref sc0 1))) (let ((e-9 (vector-ref sc0 2))) (let ((e-10 (vector-ref sc0 3))) (vector 1 e-8 e-9 e-10)))))))))
(define Core-Parser-Text-case--doParse-1652 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9) (let ((sc0 arg-9)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((e-4 (vector-ref sc0 3))) (let ((e-5 (vector-ref sc0 4))) (vector 0 e-2 e-3 e-4 e-5)))))) (else (let ((e-8 (vector-ref sc0 1))) (let ((e-9 (vector-ref sc0 2))) (let ((e-10 (vector-ref sc0 3))) (Core-Parser-Text-case--caseC-32blockC-32inC-32doParse-1713 'erased 'erased 'erased arg-3 arg-4 arg-5 arg-6 arg-7 'erased e-9 e-10 e-8 (Core-Parser-Text-doParse 'erased 'erased 'erased e-8 ((arg-4) e-9) e-10))))))))))
(define Core-Parser-Text-case--caseC-32blockC-32inC-32doParse-1553 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-13) (let ((sc0 arg-13)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((e-4 (vector-ref sc0 3))) (let ((e-5 (vector-ref sc0 4))) (vector 0 e-2 e-3 e-4 e-5)))))) (else (let ((e-8 (vector-ref sc0 1))) (let ((e-9 (vector-ref sc0 2))) (let ((e-10 (vector-ref sc0 3))) (vector 1 e-8 e-9 e-10)))))))))
(define Core-Parser-Text-case--doParse-1488 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10) (let ((sc0 arg-10)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((e-4 (vector-ref sc0 3))) (let ((e-5 (vector-ref sc0 4))) (vector 0 e-2 e-3 e-4 e-5)))))) (else (let ((e-8 (vector-ref sc0 1))) (let ((e-9 (vector-ref sc0 2))) (let ((e-10 (vector-ref sc0 3))) (Core-Parser-Text-case--caseC-32blockC-32inC-32doParse-1553 'erased 'erased 'erased arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 'erased e-9 e-10 e-8 (Core-Parser-Text-doParse 'erased 'erased 'erased e-8 (arg-5 e-9) e-10))))))))))
(define Core-Parser-Text-case--caseC-32blockC-32inC-32doParse-1374 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-13) (let ((sc0 arg-13)) (cond ((equal? sc0 0) (vector 0 arg-7 arg-11 arg-10 arg-9)) (else (Core-Parser-Text-doParse 'erased 'erased 'erased 1 (arg-3) arg-6))))))
(define Core-Parser-Text-case--doParse-1350 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9) (let ((sc0 arg-9)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((e-4 (vector-ref sc0 3))) (let ((e-5 (vector-ref sc0 4))) (Core-Parser-Text-case--caseC-32blockC-32inC-32doParse-1374 'erased 'erased arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 'erased e-5 e-4 e-3 e-2 (Basics-Prelude-C-124C-124 e-2 (lambda () e-3)))))))) (else (let ((e-9 (vector-ref sc0 2))) (let ((e-10 (vector-ref sc0 3))) (vector 1 arg-7 e-9 e-10))))))))
(define Core-Parser-Text-case--doParse-1279 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8) (let ((sc0 arg-8)) (cond ((equal? sc0 0) (vector 1 arg-5 arg-3 (vector 1 arg-3 arg-4))) (else (vector 0 arg-5 1 arg-2 (vector 1 arg-3 arg-4)))))))
(define Core-Parser-Text-case--doParse-1160 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8) (let ((sc0 arg-8)) (case (vector-ref sc0 0) ((0) (vector 0 arg-6 1 arg-3 (vector 1 arg-4 arg-5))) (else (let ((e-2 (vector-ref sc0 1))) (vector 1 arg-6 e-2 arg-5)))))))
(define Core-Parser-Text-case--doParse-1092 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (let ((sc0 arg-6)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (let ((e-4 (vector-ref sc0 3))) (let ((e-5 (vector-ref sc0 4))) (vector 0 e-2 0 e-4 e-5)))))(else arg-6)))))
(define Core-Parser-Text-map_Functor__C-40C-40GrammarC-32C-36tokC-41C-32C-36cC-41 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-3)) (cond ((equal? sc0 1) (let ((sc1 arg-5)) (case (vector-ref sc1 0) ((0) (let ((e-34 (vector-ref sc1 1))) (vector 0 (arg-4 e-34))))(else (let ((sc1 arg-5)) (case (vector-ref sc1 0) ((4) (let ((e-26 (vector-ref sc1 1))) (let ((e-27 (vector-ref sc1 2))) (vector 4 e-26 e-27)))) ((6) (let ((e-31 (vector-ref sc1 1))) (vector 6 (Core-Parser-Text-map_Functor__C-40C-40GrammarC-32C-36tokC-41C-32C-36cC-41 'erased 'erased 'erased arg-3 arg-4 e-31))))(else (let ((sc1 arg-3)) (cond ((equal? sc1 0) (let ((sc2 arg-5)) (case (vector-ref sc2 0) ((1) (let ((e-21 (vector-ref sc2 1))) (let ((e-22 (vector-ref sc2 2))) (vector 1 e-21 (lambda (t) (Types-Prelude-map_Functor__Maybe 'erased 'erased arg-4 (e-22 t)))))))(else (let ((sc2 arg-5)) (case (vector-ref sc2 0) ((9) (let ((e-15 (vector-ref sc2 1))) (let ((e-16 (vector-ref sc2 2))) (let ((e-17 (vector-ref sc2 3))) (let ((e-18 (vector-ref sc2 4))) (vector 9 e-15 e-16 (Core-Parser-Text-map_Functor__C-40C-40GrammarC-32C-36tokC-41C-32C-36cC-41 'erased 'erased 'erased e-15 arg-4 e-17) (lambda () (Core-Parser-Text-map_Functor__C-40C-40GrammarC-32C-36tokC-41C-32C-36cC-41 'erased 'erased 'erased e-16 arg-4 (e-18)))))))))(else (let ((sc2 arg-3)) (cond ((equal? sc2 0) (let ((sc3 arg-5)) (case (vector-ref sc3 0) ((7) (let ((e-10 (vector-ref sc3 1))) (let ((e-11 (vector-ref sc3 2))) (let ((e-12 (vector-ref sc3 3))) (vector 7 e-10 e-11 (lambda () (lambda (val) (Core-Parser-Text-map_Functor__C-40C-40GrammarC-32C-36tokC-41C-32C-36cC-41 'erased 'erased 'erased e-10 arg-4 ((e-12) val)))))))))(else (let ((sc3 arg-5)) (case (vector-ref sc3 0) ((8) (let ((e-3 (vector-ref sc3 1))) (let ((e-4 (vector-ref sc3 2))) (let ((e-5 (vector-ref sc3 3))) (let ((e-6 (vector-ref sc3 4))) (vector 8 e-3 e-4 e-5 (lambda (val) (Core-Parser-Text-map_Functor__C-40C-40GrammarC-32C-36tokC-41C-32C-36cC-41 'erased 'erased 'erased e-4 arg-4 (e-6 val)))))))))(else (let ((sc3 arg-3)) (cond (else (vector 8 1 1 arg-5 (lambda (eta-0) (vector 0 (arg-4 eta-0))))))))))))))(else (let ((sc2 arg-5)) (case (vector-ref sc2 0) ((8) (let ((e-3 (vector-ref sc2 1))) (let ((e-4 (vector-ref sc2 2))) (let ((e-5 (vector-ref sc2 3))) (let ((e-6 (vector-ref sc2 4))) (vector 8 e-3 e-4 e-5 (lambda (val) (Core-Parser-Text-map_Functor__C-40C-40GrammarC-32C-36tokC-41C-32C-36cC-41 'erased 'erased 'erased e-4 arg-4 (e-6 val)))))))))(else (let ((sc2 arg-3)) (cond (else (vector 8 1 1 arg-5 (lambda (eta-0) (vector 0 (arg-4 eta-0))))))))))))))))))))(else (let ((sc1 arg-5)) (case (vector-ref sc1 0) ((9) (let ((e-15 (vector-ref sc1 1))) (let ((e-16 (vector-ref sc1 2))) (let ((e-17 (vector-ref sc1 3))) (let ((e-18 (vector-ref sc1 4))) (vector 9 e-15 e-16 (Core-Parser-Text-map_Functor__C-40C-40GrammarC-32C-36tokC-41C-32C-36cC-41 'erased 'erased 'erased e-15 arg-4 e-17) (lambda () (Core-Parser-Text-map_Functor__C-40C-40GrammarC-32C-36tokC-41C-32C-36cC-41 'erased 'erased 'erased e-16 arg-4 (e-18)))))))))(else (let ((sc1 arg-3)) (cond ((equal? sc1 0) (let ((sc2 arg-5)) (case (vector-ref sc2 0) ((7) (let ((e-10 (vector-ref sc2 1))) (let ((e-11 (vector-ref sc2 2))) (let ((e-12 (vector-ref sc2 3))) (vector 7 e-10 e-11 (lambda () (lambda (val) (Core-Parser-Text-map_Functor__C-40C-40GrammarC-32C-36tokC-41C-32C-36cC-41 'erased 'erased 'erased e-10 arg-4 ((e-12) val)))))))))(else (let ((sc2 arg-5)) (case (vector-ref sc2 0) ((8) (let ((e-3 (vector-ref sc2 1))) (let ((e-4 (vector-ref sc2 2))) (let ((e-5 (vector-ref sc2 3))) (let ((e-6 (vector-ref sc2 4))) (vector 8 e-3 e-4 e-5 (lambda (val) (Core-Parser-Text-map_Functor__C-40C-40GrammarC-32C-36tokC-41C-32C-36cC-41 'erased 'erased 'erased e-4 arg-4 (e-6 val)))))))))(else (let ((sc2 arg-3)) (cond (else (vector 8 1 1 arg-5 (lambda (eta-0) (vector 0 (arg-4 eta-0))))))))))))))(else (let ((sc1 arg-5)) (case (vector-ref sc1 0) ((8) (let ((e-3 (vector-ref sc1 1))) (let ((e-4 (vector-ref sc1 2))) (let ((e-5 (vector-ref sc1 3))) (let ((e-6 (vector-ref sc1 4))) (vector 8 e-3 e-4 e-5 (lambda (val) (Core-Parser-Text-map_Functor__C-40C-40GrammarC-32C-36tokC-41C-32C-36cC-41 'erased 'erased 'erased e-4 arg-4 (e-6 val)))))))))(else (let ((sc1 arg-3)) (cond (else (vector 8 1 1 arg-5 (lambda (eta-0) (vector 0 (arg-4 eta-0))))))))))))))))))))))))))(else (let ((sc0 arg-5)) (case (vector-ref sc0 0) ((4) (let ((e-26 (vector-ref sc0 1))) (let ((e-27 (vector-ref sc0 2))) (vector 4 e-26 e-27)))) ((6) (let ((e-31 (vector-ref sc0 1))) (vector 6 (Core-Parser-Text-map_Functor__C-40C-40GrammarC-32C-36tokC-41C-32C-36cC-41 'erased 'erased 'erased arg-3 arg-4 e-31))))(else (let ((sc0 arg-3)) (cond ((equal? sc0 0) (let ((sc1 arg-5)) (case (vector-ref sc1 0) ((1) (let ((e-21 (vector-ref sc1 1))) (let ((e-22 (vector-ref sc1 2))) (vector 1 e-21 (lambda (t) (Types-Prelude-map_Functor__Maybe 'erased 'erased arg-4 (e-22 t)))))))(else (let ((sc1 arg-5)) (case (vector-ref sc1 0) ((9) (let ((e-15 (vector-ref sc1 1))) (let ((e-16 (vector-ref sc1 2))) (let ((e-17 (vector-ref sc1 3))) (let ((e-18 (vector-ref sc1 4))) (vector 9 e-15 e-16 (Core-Parser-Text-map_Functor__C-40C-40GrammarC-32C-36tokC-41C-32C-36cC-41 'erased 'erased 'erased e-15 arg-4 e-17) (lambda () (Core-Parser-Text-map_Functor__C-40C-40GrammarC-32C-36tokC-41C-32C-36cC-41 'erased 'erased 'erased e-16 arg-4 (e-18)))))))))(else (let ((sc1 arg-3)) (cond ((equal? sc1 0) (let ((sc2 arg-5)) (case (vector-ref sc2 0) ((7) (let ((e-10 (vector-ref sc2 1))) (let ((e-11 (vector-ref sc2 2))) (let ((e-12 (vector-ref sc2 3))) (vector 7 e-10 e-11 (lambda () (lambda (val) (Core-Parser-Text-map_Functor__C-40C-40GrammarC-32C-36tokC-41C-32C-36cC-41 'erased 'erased 'erased e-10 arg-4 ((e-12) val)))))))))(else (let ((sc2 arg-5)) (case (vector-ref sc2 0) ((8) (let ((e-3 (vector-ref sc2 1))) (let ((e-4 (vector-ref sc2 2))) (let ((e-5 (vector-ref sc2 3))) (let ((e-6 (vector-ref sc2 4))) (vector 8 e-3 e-4 e-5 (lambda (val) (Core-Parser-Text-map_Functor__C-40C-40GrammarC-32C-36tokC-41C-32C-36cC-41 'erased 'erased 'erased e-4 arg-4 (e-6 val)))))))))(else (let ((sc2 arg-3)) (cond (else (vector 8 1 1 arg-5 (lambda (eta-0) (vector 0 (arg-4 eta-0))))))))))))))(else (let ((sc1 arg-5)) (case (vector-ref sc1 0) ((8) (let ((e-3 (vector-ref sc1 1))) (let ((e-4 (vector-ref sc1 2))) (let ((e-5 (vector-ref sc1 3))) (let ((e-6 (vector-ref sc1 4))) (vector 8 e-3 e-4 e-5 (lambda (val) (Core-Parser-Text-map_Functor__C-40C-40GrammarC-32C-36tokC-41C-32C-36cC-41 'erased 'erased 'erased e-4 arg-4 (e-6 val)))))))))(else (let ((sc1 arg-3)) (cond (else (vector 8 1 1 arg-5 (lambda (eta-0) (vector 0 (arg-4 eta-0))))))))))))))))))))(else (let ((sc0 arg-5)) (case (vector-ref sc0 0) ((9) (let ((e-15 (vector-ref sc0 1))) (let ((e-16 (vector-ref sc0 2))) (let ((e-17 (vector-ref sc0 3))) (let ((e-18 (vector-ref sc0 4))) (vector 9 e-15 e-16 (Core-Parser-Text-map_Functor__C-40C-40GrammarC-32C-36tokC-41C-32C-36cC-41 'erased 'erased 'erased e-15 arg-4 e-17) (lambda () (Core-Parser-Text-map_Functor__C-40C-40GrammarC-32C-36tokC-41C-32C-36cC-41 'erased 'erased 'erased e-16 arg-4 (e-18)))))))))(else (let ((sc0 arg-3)) (cond ((equal? sc0 0) (let ((sc1 arg-5)) (case (vector-ref sc1 0) ((7) (let ((e-10 (vector-ref sc1 1))) (let ((e-11 (vector-ref sc1 2))) (let ((e-12 (vector-ref sc1 3))) (vector 7 e-10 e-11 (lambda () (lambda (val) (Core-Parser-Text-map_Functor__C-40C-40GrammarC-32C-36tokC-41C-32C-36cC-41 'erased 'erased 'erased e-10 arg-4 ((e-12) val)))))))))(else (let ((sc1 arg-5)) (case (vector-ref sc1 0) ((8) (let ((e-3 (vector-ref sc1 1))) (let ((e-4 (vector-ref sc1 2))) (let ((e-5 (vector-ref sc1 3))) (let ((e-6 (vector-ref sc1 4))) (vector 8 e-3 e-4 e-5 (lambda (val) (Core-Parser-Text-map_Functor__C-40C-40GrammarC-32C-36tokC-41C-32C-36cC-41 'erased 'erased 'erased e-4 arg-4 (e-6 val)))))))))(else (let ((sc1 arg-3)) (cond (else (vector 8 1 1 arg-5 (lambda (eta-0) (vector 0 (arg-4 eta-0))))))))))))))(else (let ((sc0 arg-5)) (case (vector-ref sc0 0) ((8) (let ((e-3 (vector-ref sc0 1))) (let ((e-4 (vector-ref sc0 2))) (let ((e-5 (vector-ref sc0 3))) (let ((e-6 (vector-ref sc0 4))) (vector 8 e-3 e-4 e-5 (lambda (val) (Core-Parser-Text-map_Functor__C-40C-40GrammarC-32C-36tokC-41C-32C-36cC-41 'erased 'erased 'erased e-4 arg-4 (e-6 val)))))))))(else (let ((sc0 arg-3)) (cond (else (vector 8 1 1 arg-5 (lambda (eta-0) (vector 0 (arg-4 eta-0)))))))))))))))))))))))))))
(define Core-Parser-Text-__Impl_Functor_C-40C-40GrammarC-32C-36tokC-41C-32C-36cC-41 (lambda (arg-0 arg-1 ext-0 ext-1 ext-2 ext-3) (Core-Parser-Text-map_Functor__C-40C-40GrammarC-32C-36tokC-41C-32C-36cC-41 'erased 'erased 'erased arg-1 ext-2 ext-3)))
(define Core-Parser-Text-terminal (lambda (arg-0 arg-1 ext-0 ext-1) (vector 1 ext-0 ext-1)))
(define Core-Parser-Text-pure (lambda (arg-0 arg-1 ext-0) (vector 0 ext-0)))
(define Core-Parser-Text-peek (lambda (arg-0) (vector 2 "Unrecognised token" (lambda (eta-0) 0))))
(define Core-Parser-Text-parse (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (Core-Parser-Text-case--parse-1801 'erased 'erased arg-2 arg-4 arg-3 (Core-Parser-Text-doParse 'erased 'erased 'erased 1 arg-3 arg-4))))
(define Core-Parser-Text-nextIs (lambda (arg-0 ext-0 ext-1) (vector 2 ext-0 ext-1)))
(define Core-Parser-Text-fatalError (lambda (arg-0 arg-1 arg-2 ext-0) (vector 4 0 ext-0)))
(define Core-Parser-Text-fail (lambda (arg-0 arg-1 arg-2 ext-0) (vector 4 1 ext-0)))
(define Core-Parser-Text-doParse (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-4)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 1 arg-3 e-2 arg-5))) ((4) (let ((e-6 (vector-ref sc0 1))) (let ((e-7 (vector-ref sc0 2))) (let ((sc1 arg-5)) (case (vector-ref sc1 0) ((0) (vector 0 arg-3 e-6 e-7 (vector 0 ))) (else (let ((e-42 (vector-ref sc1 1))) (let ((e-43 (vector-ref sc1 2))) (vector 0 arg-3 e-6 e-7 (vector 1 e-42 e-43)))))))))) ((5) (vector 1 0 (vector 0 ) arg-5)) ((6) (let ((e-12 (vector-ref sc0 1))) (let ((pC-39 (Core-Parser-Text-doParse 'erased 'erased 'erased arg-3 e-12 arg-5))) (let ((sc1 pC-39)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (let ((e-4 (vector-ref sc1 3))) (let ((e-5 (vector-ref sc1 4))) (vector 0 e-2 0 e-4 e-5)))))(else pC-39)))))) ((1) (let ((e-15 (vector-ref sc0 1))) (let ((e-16 (vector-ref sc0 2))) (let ((sc1 arg-5)) (case (vector-ref sc1 0) ((0) (vector 0 arg-3 1 "End of input" (vector 0 ))) (else (let ((e-46 (vector-ref sc1 1))) (let ((e-47 (vector-ref sc1 2))) (Core-Parser-Text-case--doParse-1160 'erased 'erased e-16 e-15 e-46 e-47 arg-3 'erased (e-16 e-46)))))))))) ((3) (let ((sc1 arg-5)) (case (vector-ref sc1 0) ((0) (vector 1 arg-3 (vector 0 ) (vector 0 ))) (else (let ((e-50 (vector-ref sc1 1))) (let ((e-51 (vector-ref sc1 2))) (vector 0 arg-3 1 "Expected end of input" (vector 1 e-50 e-51)))))))) ((2) (let ((e-19 (vector-ref sc0 1))) (let ((e-20 (vector-ref sc0 2))) (let ((sc1 arg-5)) (case (vector-ref sc1 0) ((0) (vector 0 arg-3 1 "End of input" (vector 0 ))) (else (let ((e-54 (vector-ref sc1 1))) (let ((e-55 (vector-ref sc1 2))) (Core-Parser-Text-case--doParse-1279 'erased e-20 e-19 e-54 e-55 arg-3 'erased 'erased (e-20 e-54)))))))))) ((9) (let ((e-23 (vector-ref sc0 1))) (let ((e-24 (vector-ref sc0 2))) (let ((e-25 (vector-ref sc0 3))) (let ((e-26 (vector-ref sc0 4))) (Core-Parser-Text-case--doParse-1350 'erased 'erased e-24 e-26 e-23 e-25 arg-5 arg-3 'erased (Core-Parser-Text-doParse 'erased 'erased 'erased 1 e-25 arg-5))))))) ((8) (let ((e-30 (vector-ref sc0 1))) (let ((e-31 (vector-ref sc0 2))) (let ((e-32 (vector-ref sc0 3))) (let ((e-33 (vector-ref sc0 4))) (Core-Parser-Text-case--doParse-1488 'erased 'erased 'erased e-30 e-31 e-33 e-32 arg-5 arg-3 'erased (Core-Parser-Text-doParse 'erased 'erased 'erased arg-3 e-32 arg-5))))))) (else (let ((e-37 (vector-ref sc0 1))) (let ((e-38 (vector-ref sc0 2))) (let ((e-39 (vector-ref sc0 3))) (Core-Parser-Text-case--doParse-1652 'erased 'erased 'erased e-37 e-39 e-38 arg-5 arg-3 'erased (Core-Parser-Text-doParse 'erased 'erased 'erased arg-3 e-38 arg-5))))))))))
(define Core-Parser-Text-commit (lambda (arg-0) (vector 5 )))
(define Core-Parser-Text-C-62C-62C-61 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-3)) (cond ((equal? sc0 1) (lambda (eta-0) (lambda (eta-1) (vector 8 1 arg-4 eta-0 eta-1)))) (else (lambda (eta-0) (lambda (eta-1) (vector 7 arg-4 eta-0 eta-1))))))))
(define Core-Parser-Text-C-60C-124C-62 (lambda (arg-0 arg-1 arg-2 arg-3 ext-0 ext-1) (vector 9 arg-2 arg-3 ext-0 ext-1)))
(define Core-Parser-Text-C-60C-42C-62 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (vector 8 arg-3 arg-4 arg-5 (lambda (f) (Core-Parser-Text-map_Functor__C-40C-40GrammarC-32C-36tokC-41C-32C-36cC-41 'erased 'erased 'erased arg-4 f arg-6)))))
(define Core-Parser-Text-C-42C-62 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (vector 8 arg-3 arg-4 (Core-Parser-Text-map_Functor__C-40C-40GrammarC-32C-36tokC-41C-32C-36cC-41 'erased 'erased 'erased arg-3 (lambda (eta-0) (lambda (eta-1) eta-1)) arg-5) (lambda (f) (Core-Parser-Text-map_Functor__C-40C-40GrammarC-32C-36tokC-41C-32C-36cC-41 'erased 'erased 'erased arg-4 f arg-6)))))
(define Common-Rule-Parser-case--column-1940 (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (let ((e-3 (vector-ref sc0 2))) (vector 0 e-3)))))
(define Common-Rule-Parser-location (lambda (arg-0) (vector 8 1 1 (vector 2 "Unrecognised token" (lambda (eta-0) 0)) (lambda (tok) (vector 0 (vector 0 (let ((sc0 tok)) (let ((e-1 (vector-ref sc0 1))) e-1)) (let ((sc0 tok)) (let ((e-2 (vector-ref sc0 2))) e-2))))))))
(define Common-Rule-Parser-column (lambda (arg-0) (vector 8 1 1 (Common-Rule-Parser-location arg-0) (lambda (_-0) (let ((sc0 _-0)) (let ((e-3 (vector-ref sc0 2))) (vector 0 e-3)))))))
(define Common-Rule-Parser-Rule (lambda (arg-0 arg-1) (vector "Text.Parser.Core.Grammar" (vector "Text.Lexer.Core.TokenData" arg-0) 0 arg-1)))
(define Source-Lexer-Parser-case--lexTo-1261 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 e-3)) (case (vector-ref sc1 0) ((0) (let ((e-6 (vector-ref sc1 1))) (let ((e-7 (vector-ref sc1 2))) (let ((sc2 e-7)) (case (vector-ref sc2 0) ((0) (let ((e-10 (vector-ref sc2 1))) (let ((e-11 (vector-ref sc2 2))) (let ((sc3 e-11)) (cond ((equal? sc3 "") (vector 1 (List-Types-Prelude-C-43C-43 'erased (List-Data-filter 'erased (lambda (eta-0) (Source-Lexer-Parser-n--3191-1231-notComment arg-0 arg-1 eta-0)) e-2) (vector 1 (vector 0 e-6 e-10 e-6 e-10 (vector 12 )) (vector 0 )))))(else (vector 0 e-3)))))))(else (vector 0 e-3)))))))(else (vector 0 e-3)))))))))
(define Source-Lexer-Parser-case--lexToC-44notComment-1236 (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((9) 1)(else 0)))))
(define Source-Lexer-Parser-case--rawTokensC-44parseNamespace-1037 (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (case (vector-ref sc0 0) ((0) (let ((e-1 (vector-ref sc0 1))) (let ((e-2 (vector-ref sc0 2))) (let ((sc1 e-2)) (case (vector-ref sc1 0) ((0) (Source-Lexer-Parser-n--2980-1004-parseIdent e-1))(else (vector 6 arg-1)))))))(else (vector 6 arg-1))))))
(define Source-Lexer-Parser-case--rawTokensC-44parseIdent-1012 (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (cond ((equal? sc0 0) (vector 13 arg-0)) (else (vector 5 arg-0))))))
(define Source-Lexer-Parser-case--caseC-32blockC-32inC-32fromOctLit-985 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((0) 0) (else (let ((e-2 (vector-ref sc0 1))) (Types-Prelude-cast_Cast__Int_Integer e-2)))))))
(define Source-Lexer-Parser-case--fromOctLit-969 (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (cond ((equal? sc0 0) 0) (else (let ((num (Strings-Data-strTail (Strings-Data-strTail arg-0)))) (Source-Lexer-Parser-case--caseC-32blockC-32inC-32fromOctLit-985 arg-0 num (Octal-Utils-fromOct (Types-Prelude-reverse num)))))))))
(define Source-Lexer-Parser-case--caseC-32blockC-32inC-32fromHexLit-941 (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((0) 0) (else (let ((e-2 (vector-ref sc0 1))) (Types-Prelude-cast_Cast__Int_Integer e-2)))))))
(define Source-Lexer-Parser-case--fromHexLit-925 (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (cond ((equal? sc0 0) 0) (else (let ((num (Strings-Data-strTail (Strings-Data-strTail arg-0)))) (Source-Lexer-Parser-case--caseC-32blockC-32inC-32fromHexLit-941 arg-0 num (Hex-Utils-fromHex (Types-Prelude-reverse num)))))))))
(define Source-Lexer-Parser-n--2980-1005-parseNamespace (lambda (arg-0) (Source-Lexer-Parser-case--rawTokensC-44parseNamespace-1037 arg-0 (List1-Data-reverse 'erased (Strings-Data-split (lambda (arg-1) (EqOrd-Prelude-C-61C-61_Eq__Char arg-1 #\.)) arg-0)))))
(define Source-Lexer-Parser-n--2980-1004-parseIdent (lambda (arg-0) (Source-Lexer-Parser-case--rawTokensC-44parseIdent-1012 arg-0 (Types-Prelude-elem 'erased (vector 0 (lambda (arg-2) (lambda (arg-3) (EqOrd-Prelude-C-61C-61_Eq__String arg-2 arg-3))) (lambda (arg-4) (lambda (arg-5) (EqOrd-Prelude-C-47C-61_Eq__String arg-4 arg-5)))) arg-0 (Source-Lexer-Parser-keywords)))))
(define Source-Lexer-Parser-n--3191-1231-notComment (lambda (arg-0 arg-1 arg-2) (Source-Lexer-Parser-case--lexToC-44notComment-1236 arg-0 arg-1 arg-2 (let ((sc0 arg-2)) (let ((e-5 (vector-ref sc0 5))) e-5)))))
(define Source-Lexer-Parser-show_Show__Token (lambda (arg-0) (let ((sc0 arg-0)) (case (vector-ref sc0 0) ((0) (let ((e-0 (vector-ref sc0 1))) (Strings-Types-Prelude-C-43C-43 "character " (Show-Prelude-show_Show__String e-0)))) ((1) (let ((e-1 (vector-ref sc0 1))) (Strings-Types-Prelude-C-43C-43 "double " (Show-Prelude-show_Show__Double e-1)))) ((2) (let ((e-2 (vector-ref sc0 1))) (Strings-Types-Prelude-C-43C-43 "literal " (Show-Prelude-show_Show__Integer e-2)))) ((3) (let ((e-3 (vector-ref sc0 1))) (Strings-Types-Prelude-C-43C-43 "string " (Show-Prelude-show_Show__String e-3)))) ((4) (let ((e-4 (vector-ref sc0 1))) (Strings-Types-Prelude-C-43C-43 "hole identifier " e-4))) ((5) (let ((e-5 (vector-ref sc0 1))) (Strings-Types-Prelude-C-43C-43 "identifier " e-5))) ((6) (let ((e-6 (vector-ref sc0 1))) (Strings-Types-Prelude-C-43C-43 "namespaced identifier " (String-Utils-dotSep (List1-Data-toList 'erased (List1-Data-reverse 'erased e-6)))))) ((7) (let ((e-7 (vector-ref sc0 1))) (Strings-Types-Prelude-C-43C-43 "dot+identifier " e-7))) ((8) (let ((e-8 (vector-ref sc0 1))) (Strings-Types-Prelude-C-43C-43 "symbol " e-8))) ((9) "comment") ((10) (let ((e-10 (vector-ref sc0 1))) (Strings-Types-Prelude-C-43C-43 "doc comment: \"" (Strings-Types-Prelude-C-43C-43 e-10 "\"")))) ((11) (let ((e-11 (vector-ref sc0 1))) (Strings-Types-Prelude-C-43C-43 "CGDirective " e-11))) ((12) "end of input") ((13) (let ((e-12 (vector-ref sc0 1))) e-12)) ((14) (let ((e-13 (vector-ref sc0 1))) (Strings-Types-Prelude-C-43C-43 "pragma " e-13))) (else (let ((e-14 (vector-ref sc0 1))) (Strings-Types-Prelude-C-43C-43 "Unrecognised " e-14)))))))
(define Source-Lexer-Parser-showPrec_Show__Token (lambda (arg-0 arg-1) (Source-Lexer-Parser-show_Show__Token arg-1)))
(define Source-Lexer-Parser-__Impl_Show_Token (lambda () (vector 0 (lambda (x) (Source-Lexer-Parser-show_Show__Token x)) (lambda (d) (lambda (x) (Source-Lexer-Parser-showPrec_Show__Token d x))))))
(define Source-Lexer-Parser-validSymbol (lambda () (Lexer-Text-some (Core-Lexer-Text-pred (lambda (eta-0) (Source-Lexer-Parser-isOpChar eta-0))))))
(define Source-Lexer-Parser-toEndComment (lambda (arg-0) (let ((sc0 arg-0)) (cond ((equal? sc0 0) (Core-Lexer-Text-empty))(else (let ((e-0 (- arg-0 1))) (Core-Lexer-Text-C-60C-124C-62 'erased 'erased (vector 4 (Lexer-Text-some (Core-Lexer-Text-pred (lambda (c) (Basics-Prelude-C-38C-38 (EqOrd-Prelude-C-47C-61_Eq__Char c #\-) (lambda () (Basics-Prelude-C-38C-38 (EqOrd-Prelude-C-47C-61_Eq__Char c #\{) (lambda () (EqOrd-Prelude-C-47C-61_Eq__Char c #\")))))))) (lambda () (Source-Lexer-Parser-toEndComment (+ 1 e-0)))) (Core-Lexer-Text-C-60C-124C-62 'erased 'erased (vector 4 (Lexer-Text-is #\{) (lambda () (Source-Lexer-Parser-singleBrace e-0))) (Core-Lexer-Text-C-60C-124C-62 'erased 'erased (vector 4 (Lexer-Text-is #\-) (lambda () (Source-Lexer-Parser-singleDash e-0))) (vector 4 (Lexer-Text-stringLit) (lambda () (Source-Lexer-Parser-toEndComment (+ 1 e-0)))))))))))))
(define Source-Lexer-Parser-symbols (lambda () (vector 1 ".(" (vector 1 "@{" (vector 1 "[|" (vector 1 "|]" (vector 1 "(" (vector 1 ")" (vector 1 "{" (vector 1 "}}" (vector 1 "}" (vector 1 "[" (vector 1 "]" (vector 1 "," (vector 1 ";" (vector 1 "_" (vector 1 "`(" (vector 1 "`{{" (vector 1 "`[" (vector 1 "`" (vector 0 )))))))))))))))))))))
(define Source-Lexer-Parser-singleDash (lambda (arg-0) (Core-Lexer-Text-C-60C-124C-62 'erased 'erased (vector 4 (Lexer-Text-is #\-) (lambda () (Source-Lexer-Parser-doubleDash arg-0))) (Core-Lexer-Text-C-60C-124C-62 'erased 'erased (vector 4 (Lexer-Text-is #\}) (lambda () (Source-Lexer-Parser-toEndComment arg-0))) (Source-Lexer-Parser-toEndComment (+ 1 arg-0))))))
(define Source-Lexer-Parser-singleBrace (lambda (arg-0) (Core-Lexer-Text-C-60C-124C-62 'erased 'erased (vector 4 (vector 4 (Lexer-Text-is #\-) (lambda () (Lexer-Text-many (Lexer-Text-is #\-)))) (lambda () (Source-Lexer-Parser-singleDash (+ 1 arg-0)))) (Source-Lexer-Parser-toEndComment (+ 1 arg-0)))))
(define Source-Lexer-Parser-rawTokens (lambda () (List-Types-Prelude-C-43C-43 'erased (vector 1 (vector 0 (Common-Lexer-Parser-comment) (lambda (eta-0) (vector 9 eta-0))) (vector 1 (vector 0 (Source-Lexer-Parser-blockComment) (lambda (eta-0) (vector 9 eta-0))) (vector 1 (vector 0 (Source-Lexer-Parser-docComment) (lambda (eta-0) (vector 10 (Extra-String-Data-drop (+ 1 (+ 1 (+ 1 0))) eta-0)))) (vector 1 (vector 0 (Source-Lexer-Parser-cgDirective) (lambda (eta-0) (Source-Lexer-Parser-mkDirective eta-0))) (vector 1 (vector 0 (Source-Lexer-Parser-holeIdent) (lambda (x) (vector 4 (Strings-Data-strTail x)))) (vector 0 )))))) (List-Types-Prelude-C-43C-43 'erased (Types-Prelude-map_Functor__List 'erased 'erased (lambda (x) (vector 0 (Lexer-Text-exact x) (lambda (eta-0) (vector 8 eta-0)))) (Source-Lexer-Parser-symbols)) (vector 1 (vector 0 (Source-Lexer-Parser-doubleLit) (lambda (x) (vector 1 (Types-Prelude-cast_Cast__String_Double x)))) (vector 1 (vector 0 (Lexer-Text-hexLit) (lambda (x) (vector 2 (Source-Lexer-Parser-fromHexLit x)))) (vector 1 (vector 0 (Lexer-Text-octLit) (lambda (x) (vector 2 (Source-Lexer-Parser-fromOctLit x)))) (vector 1 (vector 0 (Lexer-Text-digits) (lambda (x) (vector 2 (Types-Prelude-cast_Cast__String_Integer x)))) (vector 1 (vector 0 (Lexer-Text-stringLit) (lambda (x) (vector 3 (String-Utils-stripQuotes x)))) (vector 1 (vector 0 (Lexer-Text-charLit) (lambda (x) (vector 0 (String-Utils-stripQuotes x)))) (vector 1 (vector 0 (Source-Lexer-Parser-dotIdent) (lambda (x) (vector 7 (Strings-Data-strTail x)))) (vector 1 (vector 0 (Common-Lexer-Parser-namespacedIdent) (lambda (eta-0) (Source-Lexer-Parser-n--2980-1005-parseNamespace eta-0))) (vector 1 (vector 0 (Common-Lexer-Parser-identNormal) (lambda (eta-0) (Source-Lexer-Parser-n--2980-1004-parseIdent eta-0))) (vector 1 (vector 0 (Source-Lexer-Parser-pragma) (lambda (x) (vector 14 (Strings-Data-strTail x)))) (vector 1 (vector 0 (Lexer-Text-space) (lambda (eta-0) (vector 9 eta-0))) (vector 1 (vector 0 (Source-Lexer-Parser-validSymbol) (lambda (eta-0) (vector 8 eta-0))) (vector 1 (vector 0 (Lexer-Text-symbol) (lambda (eta-0) (vector 15 eta-0))) (vector 0 ))))))))))))))))))
(define Source-Lexer-Parser-pragma (lambda () (vector 4 (Lexer-Text-is #\%) (lambda () (Common-Lexer-Parser-identNormal)))))
(define Source-Lexer-Parser-mkDirective (lambda (arg-0) (vector 11 (Strings-Data-trim (Types-Prelude-substr (+ 1 (+ 1 (+ 1 0))) (Strings-Types-Prelude-length arg-0) arg-0)))))
(define Source-Lexer-Parser-lexTo (lambda (arg-0 arg-1) (Source-Lexer-Parser-case--lexTo-1261 arg-1 arg-0 (Core-Lexer-Text-lexTo 'erased arg-0 (Source-Lexer-Parser-rawTokens) arg-1))))
(define Source-Lexer-Parser-keywords (lambda () (vector 1 "data" (vector 1 "module" (vector 1 "where" (vector 1 "let" (vector 1 "pat" (vector 1 "in" (vector 1 "do" (vector 1 "record" (vector 1 "auto" (vector 1 "default" (vector 1 "implicit" (vector 1 "mutual" (vector 1 "namespace" (vector 1 "parameters" (vector 1 "with" (vector 1 "impossible" (vector 1 "case" (vector 1 "of" (vector 1 "if" (vector 1 "then" (vector 1 "else" (vector 1 "forall" (vector 1 "rewrite" (vector 1 "using" (vector 1 "interface" (vector 1 "implementation" (vector 1 "open" (vector 1 "import" (vector 1 "public" (vector 1 "export" (vector 1 "private" (vector 1 "infixl" (vector 1 "infixr" (vector 1 "infix" (vector 1 "prefix" (vector 1 "total" (vector 1 "partial" (vector 1 "covering" (vector 0 )))))))))))))))))))))))))))))))))))))))))
(define Source-Lexer-Parser-isOpChar (lambda (arg-0) (Types-Prelude-elem 'erased (vector 0 (lambda (arg-2) (lambda (arg-3) (EqOrd-Prelude-C-61C-61_Eq__Char arg-2 arg-3))) (lambda (arg-4) (lambda (arg-5) (EqOrd-Prelude-C-47C-61_Eq__Char arg-4 arg-5)))) arg-0 (Types-Prelude-unpack ":!#$%&*+./<=>?@\\^|-~"))))
(define Source-Lexer-Parser-holeIdent (lambda () (vector 4 (Lexer-Text-is #\?) (lambda () (Common-Lexer-Parser-identNormal)))))
(define Source-Lexer-Parser-fromOctLit (lambda (arg-0) (Source-Lexer-Parser-case--fromOctLit-969 arg-0 (Types-Prelude-C-60C-61_Ord__Nat (Strings-Types-Prelude-length arg-0) (Types-Prelude-fromInteger_Num__Nat 2)))))
(define Source-Lexer-Parser-fromHexLit (lambda (arg-0) (Source-Lexer-Parser-case--fromHexLit-925 arg-0 (Types-Prelude-C-60C-61_Ord__Nat (Strings-Types-Prelude-length arg-0) (Types-Prelude-fromInteger_Num__Nat 2)))))
(define Source-Lexer-Parser-doubleLit (lambda () (let ((sc0 (Basics-Prelude-C-124C-124 0 (lambda () 0)))) (cond ((equal? sc0 1) (vector 5 (vector 4 (vector 4 (Lexer-Text-digits) (lambda () (Lexer-Text-is #\.))) (lambda () (Lexer-Text-digits))) (lambda () (Lexer-Text-opt (vector 4 (vector 4 (Lexer-Text-is #\e) (lambda () (Lexer-Text-opt (Core-Lexer-Text-C-60C-124C-62 'erased 'erased (Lexer-Text-is #\-) (Lexer-Text-is #\+))))) (lambda () (Lexer-Text-digits))))))) (else (vector 4 (vector 4 (vector 4 (Lexer-Text-digits) (lambda () (Lexer-Text-is #\.))) (lambda () (Lexer-Text-digits))) (lambda () (Lexer-Text-opt (vector 4 (vector 4 (Lexer-Text-is #\e) (lambda () (Lexer-Text-opt (Core-Lexer-Text-C-60C-124C-62 'erased 'erased (Lexer-Text-is #\-) (Lexer-Text-is #\+))))) (lambda () (Lexer-Text-digits)))))))))))
(define Source-Lexer-Parser-doubleDash (lambda (arg-0) (vector 5 (Lexer-Text-many (Lexer-Text-is #\-)) (Lexer-Text-choice 'erased 0 (vector 0 (lambda (acc) (lambda (elem) (lambda (func) (lambda (init) (lambda (input) (Types-Prelude-foldr_Foldable__List 'erased 'erased func init input)))))) (lambda (elem) (lambda (acc) (lambda (func) (lambda (init) (lambda (input) (Types-Prelude-foldl_Foldable__List 'erased 'erased func init input))))))) (vector 1 (vector 4 (Lexer-Text-is #\}) (lambda () (Source-Lexer-Parser-toEndComment arg-0))) (vector 1 (vector 5 (Lexer-Text-many (Lexer-Text-isNot (integer->char 10))) (Source-Lexer-Parser-toEndComment (+ 1 arg-0))) (vector 0 )))))))
(define Source-Lexer-Parser-dotIdent (lambda () (vector 4 (Lexer-Text-is #\.) (lambda () (Common-Lexer-Parser-identNormal)))))
(define Source-Lexer-Parser-docComment (lambda () (let ((sc0 (Basics-Prelude-C-124C-124 0 (lambda () 0)))) (cond ((equal? sc0 1) (vector 5 (vector 4 (vector 4 (Lexer-Text-is #\|) (lambda () (Lexer-Text-is #\|))) (lambda () (Lexer-Text-is #\|))) (lambda () (Lexer-Text-many (Lexer-Text-isNot (integer->char 10)))))) (else (vector 4 (vector 4 (vector 4 (Lexer-Text-is #\|) (lambda () (Lexer-Text-is #\|))) (lambda () (Lexer-Text-is #\|))) (lambda () (Lexer-Text-many (Lexer-Text-isNot (integer->char 10))))))))))
(define Source-Lexer-Parser-cgDirective (lambda () (vector 4 (Lexer-Text-exact "%cg") (lambda () (Core-Lexer-Text-C-60C-124C-62 'erased 'erased (let ((sc0 (Basics-Prelude-C-124C-124 (Basics-Prelude-C-124C-124 (Basics-Prelude-C-124C-124 0 (lambda () 1)) (lambda () 0)) (lambda () 1)))) (cond ((equal? sc0 1) (vector 5 (let ((sc1 (Basics-Prelude-C-124C-124 (Basics-Prelude-C-124C-124 0 (lambda () 1)) (lambda () 0)))) (cond ((equal? sc1 1) (vector 5 (let ((sc2 (Basics-Prelude-C-124C-124 0 (lambda () 1)))) (cond ((equal? sc2 1) (vector 5 (vector 4 (vector 4 (Lexer-Text-some (Lexer-Text-space)) (lambda () (Lexer-Text-some (Core-Lexer-Text-pred (lambda (eta-0) (Types-Prelude-isAlphaNum eta-0)))))) (lambda () (Lexer-Text-many (Lexer-Text-space)))) (lambda () (Lexer-Text-is #\{)))) (else (vector 4 (vector 4 (vector 4 (Lexer-Text-some (Lexer-Text-space)) (lambda () (Lexer-Text-some (Core-Lexer-Text-pred (lambda (eta-0) (Types-Prelude-isAlphaNum eta-0)))))) (lambda () (Lexer-Text-many (Lexer-Text-space)))) (lambda () (Lexer-Text-is #\{)))))) (lambda () (Lexer-Text-many (Lexer-Text-isNot #\}))))) (else (vector 4 (let ((sc2 (Basics-Prelude-C-124C-124 0 (lambda () 1)))) (cond ((equal? sc2 1) (vector 5 (vector 4 (vector 4 (Lexer-Text-some (Lexer-Text-space)) (lambda () (Lexer-Text-some (Core-Lexer-Text-pred (lambda (eta-0) (Types-Prelude-isAlphaNum eta-0)))))) (lambda () (Lexer-Text-many (Lexer-Text-space)))) (lambda () (Lexer-Text-is #\{)))) (else (vector 4 (vector 4 (vector 4 (Lexer-Text-some (Lexer-Text-space)) (lambda () (Lexer-Text-some (Core-Lexer-Text-pred (lambda (eta-0) (Types-Prelude-isAlphaNum eta-0)))))) (lambda () (Lexer-Text-many (Lexer-Text-space)))) (lambda () (Lexer-Text-is #\{)))))) (lambda () (Lexer-Text-many (Lexer-Text-isNot #\}))))))) (lambda () (Lexer-Text-is #\})))) (else (vector 4 (let ((sc1 (Basics-Prelude-C-124C-124 (Basics-Prelude-C-124C-124 0 (lambda () 1)) (lambda () 0)))) (cond ((equal? sc1 1) (vector 5 (let ((sc2 (Basics-Prelude-C-124C-124 0 (lambda () 1)))) (cond ((equal? sc2 1) (vector 5 (vector 4 (vector 4 (Lexer-Text-some (Lexer-Text-space)) (lambda () (Lexer-Text-some (Core-Lexer-Text-pred (lambda (eta-0) (Types-Prelude-isAlphaNum eta-0)))))) (lambda () (Lexer-Text-many (Lexer-Text-space)))) (lambda () (Lexer-Text-is #\{)))) (else (vector 4 (vector 4 (vector 4 (Lexer-Text-some (Lexer-Text-space)) (lambda () (Lexer-Text-some (Core-Lexer-Text-pred (lambda (eta-0) (Types-Prelude-isAlphaNum eta-0)))))) (lambda () (Lexer-Text-many (Lexer-Text-space)))) (lambda () (Lexer-Text-is #\{)))))) (lambda () (Lexer-Text-many (Lexer-Text-isNot #\}))))) (else (vector 4 (let ((sc2 (Basics-Prelude-C-124C-124 0 (lambda () 1)))) (cond ((equal? sc2 1) (vector 5 (vector 4 (vector 4 (Lexer-Text-some (Lexer-Text-space)) (lambda () (Lexer-Text-some (Core-Lexer-Text-pred (lambda (eta-0) (Types-Prelude-isAlphaNum eta-0)))))) (lambda () (Lexer-Text-many (Lexer-Text-space)))) (lambda () (Lexer-Text-is #\{)))) (else (vector 4 (vector 4 (vector 4 (Lexer-Text-some (Lexer-Text-space)) (lambda () (Lexer-Text-some (Core-Lexer-Text-pred (lambda (eta-0) (Types-Prelude-isAlphaNum eta-0)))))) (lambda () (Lexer-Text-many (Lexer-Text-space)))) (lambda () (Lexer-Text-is #\{)))))) (lambda () (Lexer-Text-many (Lexer-Text-isNot #\}))))))) (lambda () (Lexer-Text-is #\})))))) (Lexer-Text-many (Lexer-Text-isNot (integer->char 10))))))))
(define Source-Lexer-Parser-blockComment (lambda () (vector 4 (vector 4 (Lexer-Text-is #\{) (lambda () (Lexer-Text-is #\-))) (lambda () (Source-Lexer-Parser-toEndComment (+ 1 0))))))
(define String-Utils-stripQuotes (lambda (arg-0) (Types-Prelude-substr (+ 1 0) (Types-Prelude-minus (Strings-Types-Prelude-length arg-0) (+ 1 (+ 1 0))) arg-0)))
(define String-Utils-dotSep (lambda (arg-0) (let ((sc0 arg-0)) (case (vector-ref sc0 0) ((0) "") (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 e-3)) (case (vector-ref sc1 0) ((0) e-2)(else (Strings-Types-Prelude-C-43C-43 e-2 ((Interfaces-Prelude-concat 'erased 'erased (vector 0 (vector 0 (lambda (acc) (lambda (elem) (lambda (func) (lambda (init) (lambda (input) (Types-Prelude-foldr_Foldable__List 'erased 'erased func init input)))))) (lambda (elem) (lambda (acc) (lambda (func) (lambda (init) (lambda (input) (Types-Prelude-foldl_Foldable__List 'erased 'erased func init input))))))) (vector 0 (lambda (arg-2) (lambda (arg-3) (Types-Prelude-C-60C-43C-62_Semigroup__String arg-2 arg-3))) (Types-Prelude-neutral_Monoid__String)))) (Types-Prelude-C-62C-62C-61_Monad__List 'erased 'erased e-3 (lambda (y) (Types-Prelude-pure_Applicative__List 'erased (Strings-Types-Prelude-C-43C-43 "." y))))))))))))))))
(define Octal-Utils-n--1593-583-fromOctCharsC-39 (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (case (vector-ref sc0 0) ((0) (vector 1 0)) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (Types-Prelude-C-62C-62C-61_Monad__Maybe 'erased 'erased (Octal-Utils-fromOctDigit (Types-Prelude-toLower e-2)) (lambda (bind-0) (Types-Prelude-C-62C-62C-61_Monad__Maybe 'erased 'erased (Octal-Utils-n--1593-583-fromOctCharsC-39 (b* arg-0 8 63) e-3) (lambda (bind-1) (Types-Prelude-pure_Applicative__Maybe 'erased (b+ (b* bind-0 arg-0 63) bind-1 63)))))))))))))
(define Octal-Utils-fromOctDigit (lambda (arg-0) (let ((sc0 arg-0)) (cond ((equal? sc0 #\0) (vector 1 0)) ((equal? sc0 #\1) (vector 1 1)) ((equal? sc0 #\2) (vector 1 2)) ((equal? sc0 #\3) (vector 1 3)) ((equal? sc0 #\4) (vector 1 4)) ((equal? sc0 #\5) (vector 1 5)) ((equal? sc0 #\6) (vector 1 6)) ((equal? sc0 #\7) (vector 1 7))(else (vector 0 ))))))
(define Octal-Utils-fromOctChars (lambda (ext-0) (Octal-Utils-n--1593-583-fromOctCharsC-39 1 ext-0)))
(define Octal-Utils-fromOct (lambda (ext-0) (Octal-Utils-fromOctChars (Types-Prelude-unpack ext-0))))
(define Hex-Utils-n--2020-692-fromHexCharsC-39 (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (case (vector-ref sc0 0) ((0) (vector 1 0)) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (Types-Prelude-C-62C-62C-61_Monad__Maybe 'erased 'erased (Hex-Utils-fromHexDigit (Types-Prelude-toLower e-2)) (lambda (bind-0) (Types-Prelude-C-62C-62C-61_Monad__Maybe 'erased 'erased (Hex-Utils-n--2020-692-fromHexCharsC-39 (b* arg-0 16 63) e-3) (lambda (bind-1) (Types-Prelude-pure_Applicative__Maybe 'erased (b+ (b* bind-0 arg-0 63) bind-1 63)))))))))))))
(define Hex-Utils-fromHexDigit (lambda (arg-0) (let ((sc0 arg-0)) (cond ((equal? sc0 #\0) (vector 1 0)) ((equal? sc0 #\1) (vector 1 1)) ((equal? sc0 #\2) (vector 1 2)) ((equal? sc0 #\3) (vector 1 3)) ((equal? sc0 #\4) (vector 1 4)) ((equal? sc0 #\5) (vector 1 5)) ((equal? sc0 #\6) (vector 1 6)) ((equal? sc0 #\7) (vector 1 7)) ((equal? sc0 #\8) (vector 1 8)) ((equal? sc0 #\9) (vector 1 9)) ((equal? sc0 #\a) (vector 1 10)) ((equal? sc0 #\b) (vector 1 11)) ((equal? sc0 #\c) (vector 1 12)) ((equal? sc0 #\d) (vector 1 13)) ((equal? sc0 #\e) (vector 1 14)) ((equal? sc0 #\f) (vector 1 15))(else (vector 0 ))))))
(define Hex-Utils-fromHexChars (lambda (ext-0) (Hex-Utils-n--2020-692-fromHexCharsC-39 1 ext-0)))
(define Hex-Utils-fromHex (lambda (ext-0) (Hex-Utils-fromHexChars (Types-Prelude-unpack ext-0))))
(define Extra-String-Data-drop (lambda (arg-0 arg-1) (Types-Prelude-substr arg-0 (Strings-Types-Prelude-length arg-1) arg-1)))
(define Common-Lexer-Parser-namespacedIdent (lambda () (vector 4 (Common-Lexer-Parser-namespaceIdent) (lambda () (Lexer-Text-opt (vector 4 (Lexer-Text-is #\.) (lambda () (Common-Lexer-Parser-identNormal))))))))
(define Common-Lexer-Parser-namespaceIdent (lambda () (vector 4 (vector 4 (Core-Lexer-Text-pred (lambda (eta-0) (Common-Lexer-Parser-isIdentStart (vector 1 ) eta-0))) (lambda () (Lexer-Text-many (Core-Lexer-Text-pred (lambda (eta-0) (Common-Lexer-Parser-isIdentTrailing (vector 1 ) eta-0)))))) (lambda () (Lexer-Text-many (vector 4 (vector 4 (Lexer-Text-is #\.) (lambda () (vector 4 (Core-Lexer-Text-pred (lambda (eta-0) (Common-Lexer-Parser-isIdentStart (vector 1 ) eta-0))) (lambda () (Lexer-Text-many (Core-Lexer-Text-pred (lambda (eta-0) (Common-Lexer-Parser-isIdentTrailing (vector 1 ) eta-0)))))))) (lambda () (Core-Lexer-Text-expect 'erased (Lexer-Text-is #\.)))))))))
(define Common-Lexer-Parser-isIdentTrailing (lambda (arg-0 arg-1) (let ((sc0 arg-0)) (case (vector-ref sc0 0) ((0) (let ((sc1 arg-1)) (cond ((equal? sc1 #\-) 0)(else (let ((sc1 arg-1)) (cond ((equal? sc1 #\') 0) ((equal? sc1 #\_) 0)(else (Basics-Prelude-C-124C-124 (Types-Prelude-isAlphaNum arg-1) (lambda () (EqOrd-Prelude-C-62_Ord__Char arg-1 (Types-Prelude-chr 160)))))))))))(else (let ((sc0 arg-1)) (cond ((equal? sc0 #\') 0) ((equal? sc0 #\_) 0)(else (Basics-Prelude-C-124C-124 (Types-Prelude-isAlphaNum arg-1) (lambda () (EqOrd-Prelude-C-62_Ord__Char arg-1 (Types-Prelude-chr 160))))))))))))
(define Common-Lexer-Parser-isIdentStart (lambda (arg-0 arg-1) (let ((sc0 arg-1)) (cond ((equal? sc0 #\_) 0)(else (let ((sc0 arg-0)) (case (vector-ref sc0 0) ((1) (Basics-Prelude-C-124C-124 (Types-Prelude-isUpper arg-1) (lambda () (EqOrd-Prelude-C-62_Ord__Char arg-1 (Types-Prelude-chr 160)))))(else (Basics-Prelude-C-124C-124 (Types-Prelude-isAlpha arg-1) (lambda () (EqOrd-Prelude-C-62_Ord__Char arg-1 (Types-Prelude-chr 160))))))))))))
(define Common-Lexer-Parser-identNormal (lambda () (vector 4 (Core-Lexer-Text-pred (lambda (eta-0) (Common-Lexer-Parser-isIdentStart (vector 2 ) eta-0))) (lambda () (Lexer-Text-many (Core-Lexer-Text-pred (lambda (eta-0) (Common-Lexer-Parser-isIdentTrailing (vector 2 ) eta-0))))))))
(define Common-Lexer-Parser-ident (lambda (arg-0) (vector 4 (Core-Lexer-Text-pred (lambda (eta-0) (Common-Lexer-Parser-isIdentStart arg-0 eta-0))) (lambda () (Lexer-Text-many (Core-Lexer-Text-pred (lambda (eta-0) (Common-Lexer-Parser-isIdentTrailing arg-0 eta-0))))))))
(define Common-Lexer-Parser-comment (lambda () (let ((sc0 (Basics-Prelude-C-124C-124 (Basics-Prelude-C-124C-124 0 (lambda () 1)) (lambda () 1)))) (cond ((equal? sc0 1) (vector 5 (let ((sc1 (Basics-Prelude-C-124C-124 0 (lambda () 1)))) (cond ((equal? sc1 1) (vector 5 (vector 4 (vector 4 (Lexer-Text-is #\-) (lambda () (Lexer-Text-is #\-))) (lambda () (Lexer-Text-many (Lexer-Text-is #\-)))) (lambda () (Core-Lexer-Text-reject 'erased (Lexer-Text-is #\}))))) (else (vector 4 (vector 4 (vector 4 (Lexer-Text-is #\-) (lambda () (Lexer-Text-is #\-))) (lambda () (Lexer-Text-many (Lexer-Text-is #\-)))) (lambda () (Core-Lexer-Text-reject 'erased (Lexer-Text-is #\}))))))) (lambda () (Lexer-Text-many (Lexer-Text-isNot (integer->char 10)))))) (else (vector 4 (let ((sc1 (Basics-Prelude-C-124C-124 0 (lambda () 1)))) (cond ((equal? sc1 1) (vector 5 (vector 4 (vector 4 (Lexer-Text-is #\-) (lambda () (Lexer-Text-is #\-))) (lambda () (Lexer-Text-many (Lexer-Text-is #\-)))) (lambda () (Core-Lexer-Text-reject 'erased (Lexer-Text-is #\}))))) (else (vector 4 (vector 4 (vector 4 (Lexer-Text-is #\-) (lambda () (Lexer-Text-is #\-))) (lambda () (Lexer-Text-many (Lexer-Text-is #\-)))) (lambda () (Core-Lexer-Text-reject 'erased (Lexer-Text-is #\}))))))) (lambda () (Lexer-Text-many (Lexer-Text-isNot (integer->char 10))))))))))
(define ProcessDecl-TTImp-processDecl (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((0) (let ((e-0 (vector-ref sc0 1))) (let ((sc1 e-0)) (let ((e-4 (vector-ref sc1 1))) (let ((e-5 (vector-ref sc1 2))) (lambda (eta-0) (ProcessType-TTImp-processType arg-0 arg-1 e-4 e-5 eta-0))))))) ((1) (let ((e-1 (vector-ref sc0 1))) (ProcessData-TTImp-processData arg-0 arg-1 e-1))) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (lambda (eta-0) (ProcessDef-TTImp-processDef arg-0 arg-1 e-2 e-3 eta-0)))))))))
(define ProcessType-TTImp-case--processType-7742 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-4)) (let ((e-2 (vector-ref sc0 1))) (lambda (eta-0) (Context-Core-addDef arg-3 arg-1 (Context-Core-newDef e-2 (vector 0 )) eta-0))))))
(define ProcessType-TTImp-processType (lambda (arg-0 arg-1 arg-2 arg-3 ext-0) (let ((act-24 ((Term-Elab-TTImp-checkTerm (vector 0 ) arg-0 arg-1 (vector 0 ) arg-3 (vector 1 (Normalise-Core-gType 'erased))) ext-0))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (let ((sc1 e-5)) (let ((e-2 (vector-ref sc1 1))) (Context-Core-addDef arg-0 arg-2 (Context-Core-newDef e-2 (vector 0 )) ext-0))))))))))
(define ProcessDef-TTImp-with--getRHSEnv-1935 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((0) (lambda (eta-0) (Core-Core-throw_Catchable__Core_Error 'erased (vector 3 "Can't happen: names don't match in getRHSEnv") eta-0))) (else (let ((e-2 (vector-ref sc0 1))) (let ((sc1 e-2)) (ProcessDef-TTImp-getRHSEnv (vector 1 arg-0 arg-3) (vector 1 (vector 2 arg-0 arg-6) arg-9) arg-7 arg-8))))))))
(define ProcessDef-TTImp-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32processDef-2207 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11) (let ((sc0 arg-11)) (let ((e-0 (vector-ref sc0 1))) (vector 0 e-0 (vector 1 arg-8 arg-9))))))
(define ProcessDef-TTImp-case--caseC-32blockC-32inC-32processDef-2157 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8) (let ((sc0 arg-8)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (lambda (eta-0) (let ((act-24 (Context-Core-updateDef arg-3 arg-1 (lambda (rec-0) (let ((sc1 rec-0)) (let ((e-0 (vector-ref sc1 1))) (vector 0 e-0 (vector 1 e-2 e-3))))) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-4 (vector-ref sc1 1))) (vector 0 e-4))) (else (let ((act-25 (UnifyState-Core-addFunction arg-2 arg-1 (let ((sc2 arg-5)) (let ((e-0 (vector-ref sc2 1))) e-0)) eta-0))) (let ((sc2 act-25)) (case (vector-ref sc2 0) ((0) (let ((e-4 (vector-ref sc2 1))) (vector 0 e-4))) (else (let ((act-26 ((IO-Prelude-putStrLn 'erased (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-45) (lambda (eta-1) (IO-Prelude-map_Functor__IO 'erased 'erased func arg-45 eta-1)))))) (lambda (a) (lambda (arg-112) (lambda (eta-1) arg-112))) (lambda (b) (lambda (a) (lambda (arg-113) (lambda (arg-115) (lambda (eta-1) (let ((act-17 (arg-113 eta-1))) (let ((act-16 (arg-115 eta-1))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-274) (lambda (arg-275) (lambda (eta-1) (let ((act-26 (arg-274 eta-1))) ((arg-275 act-26) eta-1))))))) (lambda (a) (lambda (arg-277) (lambda (eta-1) (let ((act-51 (arg-277 eta-1))) (act-51 eta-1)))))) (lambda (a) (lambda (arg-5832) arg-5832))) (Strings-Types-Prelude-C-43C-43 "Processed " (TT-Core-show_Show__Name arg-1))) eta-0))) (vector 1 act-26))))))))))))))))
(define ProcessDef-TTImp-case--processDef-2124 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-5)) (case (vector-ref sc0 0) ((1) (let ((e-1 (vector-ref sc0 1))) (lambda (eta-0) (let ((act-24 ((Core-Core-traverse 'erased 'erased (lambda (eta-1) (ProcessDef-TTImp-processClause arg-3 arg-2 eta-1)) arg-0) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc1 1))) (let ((act-25 ((CaseBuilder-Core-getPMDef arg-3 arg-1 (let ((sc2 e-1)) (let ((e-0 (vector-ref sc2 1))) e-0)) e-5) eta-0))) (let ((sc2 act-25)) (case (vector-ref sc2 0) ((0) (let ((e-2 (vector-ref sc2 1))) (vector 0 e-2))) (else (let ((e-6 (vector-ref sc2 1))) (let ((sc3 e-6)) (let ((e-2 (vector-ref sc3 1))) (let ((e-3 (vector-ref sc3 2))) (let ((act-26 (Context-Core-updateDef arg-3 arg-1 (lambda (rec-0) (let ((sc4 rec-0)) (let ((e-0 (vector-ref sc4 1))) (vector 0 e-0 (vector 1 e-2 e-3))))) eta-0))) (let ((sc4 act-26)) (case (vector-ref sc4 0) ((0) (let ((e-4 (vector-ref sc4 1))) (vector 0 e-4))) (else (let ((act-27 (UnifyState-Core-addFunction arg-2 arg-1 (let ((sc5 e-1)) (let ((e-0 (vector-ref sc5 1))) e-0)) eta-0))) (let ((sc5 act-27)) (case (vector-ref sc5 0) ((0) (let ((e-4 (vector-ref sc5 1))) (vector 0 e-4))) (else (let ((act-28 ((IO-Prelude-putStrLn 'erased (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-45) (lambda (eta-1) (IO-Prelude-map_Functor__IO 'erased 'erased func arg-45 eta-1)))))) (lambda (a) (lambda (arg-112) (lambda (eta-1) arg-112))) (lambda (b) (lambda (a) (lambda (arg-113) (lambda (arg-115) (lambda (eta-1) (let ((act-17 (arg-113 eta-1))) (let ((act-16 (arg-115 eta-1))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-274) (lambda (arg-275) (lambda (eta-1) (let ((act-28 (arg-274 eta-1))) ((arg-275 act-28) eta-1))))))) (lambda (a) (lambda (arg-277) (lambda (eta-1) (let ((act-51 (arg-277 eta-1))) (act-51 eta-1)))))) (lambda (a) (lambda (arg-5832) arg-5832))) (Strings-Types-Prelude-C-43C-43 "Processed " (TT-Core-show_Show__Name arg-1))) eta-0))) (vector 1 act-28)))))))))))))))))))))))))) (else (lambda (eta-0) (Core-Core-throw_Catchable__Core_Error 'erased (vector 3 (Strings-Types-Prelude-C-43C-43 "No type declaration for " (TT-Core-show_Show__Name arg-1))) eta-0)))))))
(define ProcessDef-TTImp-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32processClause-2072 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12) (let ((sc0 arg-12)) (let ((e-2 (vector-ref sc0 1))) (lambda (eta-0) (vector 1 (vector 0 arg-7 arg-8 arg-9 e-2)))))))
(define ProcessDef-TTImp-case--caseC-32blockC-32inC-32processClause-2030 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7) (let ((sc0 arg-7)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 e-3)) (let ((e-6 (vector-ref sc1 1))) (let ((e-7 (vector-ref sc1 2))) (let ((sc2 e-7)) (let ((e-10 (vector-ref sc2 1))) (let ((e-11 (vector-ref sc2 2))) (lambda (eta-0) (let ((act-24 ((Term-Elab-TTImp-checkTerm e-2 arg-3 arg-2 e-6 arg-0 (vector 1 (Normalise-Core-gnf e-2 e-6 e-11))) eta-0))) (let ((sc3 act-24)) (case (vector-ref sc3 0) ((0) (let ((e-4 (vector-ref sc3 1))) (vector 0 e-4))) (else (let ((e-5 (vector-ref sc3 1))) (let ((sc4 e-5)) (let ((e-8 (vector-ref sc4 1))) (vector 1 (vector 0 e-2 e-6 e-10 e-8)))))))))))))))))))))
(define ProcessDef-TTImp-case--processClause-2000 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-4)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (lambda (eta-0) (let ((act-24 (let ((act-24 ((Normalise-Core-getTerm 'erased e-3) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-4 (vector-ref sc1 1))) (vector 0 e-4))) (else (let ((e-5 (vector-ref sc1 1))) ((ProcessDef-TTImp-getRHSEnv (vector 0 ) (vector 0 ) e-2 e-5) eta-0)))))))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-4 (vector-ref sc1 1))) (vector 0 e-4))) (else (let ((e-5 (vector-ref sc1 1))) (let ((sc2 e-5)) (let ((e-6 (vector-ref sc2 1))) (let ((e-4 (vector-ref sc2 2))) (let ((sc3 e-4)) (let ((e-8 (vector-ref sc3 1))) (let ((e-7 (vector-ref sc3 2))) (let ((sc4 e-7)) (let ((e-10 (vector-ref sc4 1))) (let ((e-11 (vector-ref sc4 2))) (let ((act-25 ((Term-Elab-TTImp-checkTerm e-6 arg-3 arg-2 e-8 arg-0 (vector 1 (Normalise-Core-gnf e-6 e-8 e-11))) eta-0))) (let ((sc5 act-25)) (case (vector-ref sc5 0) ((0) (let ((e-9 (vector-ref sc5 1))) (vector 0 e-9))) (else (let ((e-9 (vector-ref sc5 1))) (let ((sc6 e-9)) (let ((e-13 (vector-ref sc6 1))) (vector 1 (vector 0 e-6 e-8 e-10 e-13)))))))))))))))))))))))))))))
(define ProcessDef-TTImp-processDef (lambda (arg-0 arg-1 arg-2 arg-3 ext-0) (let ((act-24 (let ((act-24 (unbox arg-0))) (vector 1 act-24)))) (let ((sc0 act-24)) (case (vector-ref sc0 0) ((0) (let ((e-2 (vector-ref sc0 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc0 1))) (let ((act-25 (Context-Core-lookupDef arg-2 e-5 ext-0))) (let ((sc1 act-25)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-6 (vector-ref sc1 1))) (let ((sc2 e-6)) (case (vector-ref sc2 0) ((1) (let ((e-1 (vector-ref sc2 1))) (let ((act-26 ((Core-Core-traverse 'erased 'erased (lambda (eta-0) (ProcessDef-TTImp-processClause arg-0 arg-1 eta-0)) arg-3) ext-0))) (let ((sc3 act-26)) (case (vector-ref sc3 0) ((0) (let ((e-2 (vector-ref sc3 1))) (vector 0 e-2))) (else (let ((e-7 (vector-ref sc3 1))) (let ((act-27 ((CaseBuilder-Core-getPMDef arg-0 arg-2 (let ((sc4 e-1)) (let ((e-0 (vector-ref sc4 1))) e-0)) e-7) ext-0))) (let ((sc4 act-27)) (case (vector-ref sc4 0) ((0) (let ((e-2 (vector-ref sc4 1))) (vector 0 e-2))) (else (let ((e-8 (vector-ref sc4 1))) (let ((sc5 e-8)) (let ((e-2 (vector-ref sc5 1))) (let ((e-3 (vector-ref sc5 2))) (let ((act-28 (Context-Core-updateDef arg-0 arg-2 (lambda (rec-0) (let ((sc6 rec-0)) (let ((e-0 (vector-ref sc6 1))) (vector 0 e-0 (vector 1 e-2 e-3))))) ext-0))) (let ((sc6 act-28)) (case (vector-ref sc6 0) ((0) (let ((e-4 (vector-ref sc6 1))) (vector 0 e-4))) (else (let ((act-29 (UnifyState-Core-addFunction arg-1 arg-2 (let ((sc7 e-1)) (let ((e-0 (vector-ref sc7 1))) e-0)) ext-0))) (let ((sc7 act-29)) (case (vector-ref sc7 0) ((0) (let ((e-4 (vector-ref sc7 1))) (vector 0 e-4))) (else (let ((act-30 ((IO-Prelude-putStrLn 'erased (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-45) (lambda (eta-0) (IO-Prelude-map_Functor__IO 'erased 'erased func arg-45 eta-0)))))) (lambda (a) (lambda (arg-112) (lambda (eta-0) arg-112))) (lambda (b) (lambda (a) (lambda (arg-113) (lambda (arg-115) (lambda (eta-0) (let ((act-17 (arg-113 eta-0))) (let ((act-16 (arg-115 eta-0))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-274) (lambda (arg-275) (lambda (eta-0) (let ((act-30 (arg-274 eta-0))) ((arg-275 act-30) eta-0))))))) (lambda (a) (lambda (arg-277) (lambda (eta-0) (let ((act-51 (arg-277 eta-0))) (act-51 eta-0)))))) (lambda (a) (lambda (arg-5832) arg-5832))) (Strings-Types-Prelude-C-43C-43 "Processed " (TT-Core-show_Show__Name arg-2))) ext-0))) (vector 1 act-30))))))))))))))))))))))))) (else (Core-Core-throw_Catchable__Core_Error 'erased (vector 3 (Strings-Types-Prelude-C-43C-43 "No type declaration for " (TT-Core-show_Show__Name arg-2))) ext-0))))))))))))))))
(define ProcessDef-TTImp-processClause (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (let ((e-0 (vector-ref sc0 1))) (let ((e-1 (vector-ref sc0 2))) (lambda (eta-0) (let ((act-24 ((Term-Elab-TTImp-checkTerm (vector 0 ) arg-0 arg-1 (vector 0 ) e-0 (vector 0 )) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc1 1))) (let ((sc2 e-5)) (let ((e-2 (vector-ref sc2 1))) (let ((e-3 (vector-ref sc2 2))) (let ((act-25 (let ((act-25 ((Normalise-Core-getTerm 'erased e-3) eta-0))) (let ((sc3 act-25)) (case (vector-ref sc3 0) ((0) (let ((e-4 (vector-ref sc3 1))) (vector 0 e-4))) (else (let ((e-6 (vector-ref sc3 1))) ((ProcessDef-TTImp-getRHSEnv (vector 0 ) (vector 0 ) e-2 e-6) eta-0)))))))) (let ((sc3 act-25)) (case (vector-ref sc3 0) ((0) (let ((e-4 (vector-ref sc3 1))) (vector 0 e-4))) (else (let ((e-6 (vector-ref sc3 1))) (let ((sc4 e-6)) (let ((e-7 (vector-ref sc4 1))) (let ((e-4 (vector-ref sc4 2))) (let ((sc5 e-4)) (let ((e-9 (vector-ref sc5 1))) (let ((e-8 (vector-ref sc5 2))) (let ((sc6 e-8)) (let ((e-10 (vector-ref sc6 1))) (let ((e-11 (vector-ref sc6 2))) (let ((act-26 ((Term-Elab-TTImp-checkTerm e-7 arg-0 arg-1 e-9 e-1 (vector 1 (Normalise-Core-gnf e-7 e-9 e-11))) eta-0))) (let ((sc7 act-26)) (case (vector-ref sc7 0) ((0) (let ((e-12 (vector-ref sc7 1))) (vector 0 e-12))) (else (let ((e-12 (vector-ref sc7 1))) (let ((sc8 e-12)) (let ((e-14 (vector-ref sc8 1))) (vector 1 (vector 0 e-7 e-9 e-10 e-14)))))))))))))))))))))))))))))))))))))
(define ProcessDef-TTImp-getRHSEnv (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((3) (let ((e-1 (vector-ref sc0 1))) (let ((e-2 (vector-ref sc0 2))) (let ((e-3 (vector-ref sc0 3))) (let ((sc1 e-2)) (case (vector-ref sc1 0) ((2) (let ((e-5 (vector-ref sc1 1))) (let ((e-6 (vector-ref sc1 2))) (let ((sc2 arg-3)) (case (vector-ref sc2 0) ((3) (let ((e-8 (vector-ref sc2 1))) (let ((e-9 (vector-ref sc2 2))) (let ((e-10 (vector-ref sc2 3))) (let ((sc3 e-9)) (case (vector-ref sc3 0) ((3) (let ((e-12 (vector-ref sc3 1))) (ProcessDef-TTImp-with--getRHSEnv-1935 e-1 e-8 (TT-Core-nameEq e-1 e-8) arg-0 e-12 e-5 e-6 e-3 e-10 arg-1)))(else (lambda (eta-0) (vector 1 (vector 0 arg-0 (vector 0 arg-1 (vector 0 arg-2 arg-3))))))))))))(else (lambda (eta-0) (vector 1 (vector 0 arg-0 (vector 0 arg-1 (vector 0 arg-2 arg-3)))))))))))(else (lambda (eta-0) (vector 1 (vector 0 arg-0 (vector 0 arg-1 (vector 0 arg-2 arg-3))))))))))))(else (lambda (eta-0) (vector 1 (vector 0 arg-0 (vector 0 arg-1 (vector 0 arg-2 arg-3))))))))))
(define ProcessData-TTImp-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32processData-3661 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-13 arg-14 arg-15 arg-16 arg-17 arg-18 arg-19 arg-20) (let ((sc0 arg-20)) (case (vector-ref sc0 0) ((3) (let ((e-0 (vector-ref sc0 1))) (let ((e-1 (vector-ref sc0 2))) (let ((e-2 (vector-ref sc0 3))) (Context-Core-newDef (let ((sc1 arg-19)) (let ((e-4 (vector-ref sc1 1))) e-4)) (vector 3 e-0 e-1 (vector 1 arg-14 e-2)))))))(else arg-19)))))
(define ProcessData-TTImp-case--caseC-32blockC-32inC-32processData-3605 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 arg-13) (let ((sc0 arg-13)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 e-3)) (let ((e-6 (vector-ref sc1 1))) (let ((e-7 (vector-ref sc1 2))) (lambda (eta-0) (let ((act-24 (Normalise-Core-getArity (vector 0 ) arg-12 (vector 0 ) e-7 eta-0))) (let ((sc2 act-24)) (case (vector-ref sc2 0) ((0) (let ((e-4 (vector-ref sc2 1))) (vector 0 e-4))) (else (let ((e-5 (vector-ref sc2 1))) (let ((act-25 (Context-Core-addDef arg-4 e-6 (Context-Core-newDef e-7 (vector 2 (Types-Prelude-cast_Cast__Nat_Int e-2) e-5)) eta-0))) (let ((sc3 act-25)) (case (vector-ref sc3 0) ((0) (let ((e-4 (vector-ref sc3 1))) (vector 0 e-4))) (else (let ((e-8 (vector-ref sc3 1))) (Context-Core-updateDef arg-4 arg-2 (lambda (d) (let ((lamc-0 (vector 0 e-2 (vector 0 e-6 e-7)))) (ProcessData-TTImp-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32processData-3661 arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9 arg-10 arg-11 arg-12 e-2 e-6 e-7 lamc-0 e-5 e-8 d (let ((sc4 d)) (let ((e-1 (vector-ref sc4 2))) e-1))))) eta-0))))))))))))))))))))
(define ProcessData-TTImp-case--processData-3513 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (let ((sc0 arg-5)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (lambda (eta-0) (let ((act-24 (let ((act-24 (unbox arg-4))) (vector 1 act-24)))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-4 (vector-ref sc1 1))) (vector 0 e-4))) (else (let ((e-5 (vector-ref sc1 1))) (let ((act-25 (Normalise-Core-getArity (vector 0 ) e-5 (vector 0 ) e-2 eta-0))) (let ((sc2 act-25)) (case (vector-ref sc2 0) ((0) (let ((e-4 (vector-ref sc2 1))) (vector 0 e-4))) (else (let ((e-6 (vector-ref sc2 1))) (let ((act-26 (Context-Core-addDef arg-4 arg-2 (Context-Core-newDef e-2 (vector 3 0 e-6 (vector 0 ))) eta-0))) (let ((sc3 act-26)) (case (vector-ref sc3 0) ((0) (let ((e-4 (vector-ref sc3 1))) (vector 0 e-4))) (else (let ((e-7 (vector-ref sc3 1))) (let ((act-27 ((Core-Core-traverse 'erased 'erased (lambda (eta-1) (ProcessData-TTImp-processCon arg-4 arg-3 eta-1)) arg-0) eta-0))) (let ((sc4 act-27)) (case (vector-ref sc4 0) ((0) (let ((e-4 (vector-ref sc4 1))) (vector 0 e-4))) (else (let ((e-8 (vector-ref sc4 1))) (let ((act-28 (let ((act-28 (unbox arg-4))) (vector 1 act-28)))) (let ((sc5 act-28)) (case (vector-ref sc5 0) ((0) (let ((e-4 (vector-ref sc5 1))) (vector 0 e-4))) (else (let ((e-9 (vector-ref sc5 1))) (let ((act-29 ((Core-Core-traverse_ 'erased 'erased (lambda (lamc-0) (let ((_-0 (vector 0 e-2 e-3))) (let ((sc6 lamc-0)) (let ((e-10 (vector-ref sc6 1))) (let ((e-4 (vector-ref sc6 2))) (let ((sc7 e-4)) (let ((e-12 (vector-ref sc7 1))) (let ((e-11 (vector-ref sc7 2))) (lambda (eta-1) (let ((act-29 (Normalise-Core-getArity (vector 0 ) e-9 (vector 0 ) e-11 eta-1))) (let ((sc8 act-29)) (case (vector-ref sc8 0) ((0) (let ((e-13 (vector-ref sc8 1))) (vector 0 e-13))) (else (let ((e-13 (vector-ref sc8 1))) (let ((act-30 (Context-Core-addDef arg-4 e-12 (Context-Core-newDef e-11 (vector 2 (Types-Prelude-cast_Cast__Nat_Int e-10) e-13)) eta-1))) (let ((sc9 act-30)) (case (vector-ref sc9 0) ((0) (let ((e-14 (vector-ref sc9 1))) (vector 0 e-14))) (else (let ((e-14 (vector-ref sc9 1))) (Context-Core-updateDef arg-4 arg-2 (lambda (d) (let ((lamc-1 (vector 0 e-10 (vector 0 e-12 e-11)))) (ProcessData-TTImp-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32processData-3661 arg-0 arg-1 arg-2 arg-3 arg-4 e-3 e-2 _-0 e-5 e-6 e-7 e-8 e-9 e-10 e-12 e-11 lamc-1 e-13 e-14 d (let ((sc10 d)) (let ((e-1 (vector-ref sc10 2))) e-1))))) eta-1)))))))))))))))))))) (List-Data-zip 'erased 'erased (Types-Prelude-rangeFromTo_Range__Nat (Types-Prelude-fromInteger_Num__Nat 0) (List-Types-Prelude-length 'erased e-8)) e-8)) eta-0))) (let ((sc6 act-29)) (case (vector-ref sc6 0) ((0) (let ((e-4 (vector-ref sc6 1))) (vector 0 e-4))) (else (let ((act-30 ((IO-Prelude-putStrLn 'erased (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-45) (lambda (eta-1) (IO-Prelude-map_Functor__IO 'erased 'erased func arg-45 eta-1)))))) (lambda (a) (lambda (arg-112) (lambda (eta-1) arg-112))) (lambda (b) (lambda (a) (lambda (arg-113) (lambda (arg-115) (lambda (eta-1) (let ((act-17 (arg-113 eta-1))) (let ((act-16 (arg-115 eta-1))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-274) (lambda (arg-275) (lambda (eta-1) (let ((act-30 (arg-274 eta-1))) ((arg-275 act-30) eta-1))))))) (lambda (a) (lambda (arg-277) (lambda (eta-1) (let ((act-51 (arg-277 eta-1))) (act-51 eta-1)))))) (lambda (a) (lambda (arg-5832) arg-5832))) (Strings-Types-Prelude-C-43C-43 "Processed " (TT-Core-show_Show__Name arg-2))) eta-0))) (vector 1 act-30)))))))))))))))))))))))))))))))))))))
(define ProcessData-TTImp-case--processCon-3472 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-4)) (let ((e-2 (vector-ref sc0 1))) (lambda (eta-0) (vector 1 (vector 0 arg-1 e-2)))))))
(define ProcessData-TTImp-processData (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (let ((e-0 (vector-ref sc0 1))) (let ((e-1 (vector-ref sc0 2))) (let ((e-2 (vector-ref sc0 3))) (lambda (eta-0) (let ((act-24 ((Term-Elab-TTImp-checkTerm (vector 0 ) arg-0 arg-1 (vector 0 ) e-1 (vector 1 (Normalise-Core-gType 'erased))) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-3 (vector-ref sc1 1))) (vector 0 e-3))) (else (let ((e-5 (vector-ref sc1 1))) (let ((sc2 e-5)) (let ((e-4 (vector-ref sc2 1))) (let ((e-3 (vector-ref sc2 2))) (let ((act-25 (let ((act-25 (unbox arg-0))) (vector 1 act-25)))) (let ((sc3 act-25)) (case (vector-ref sc3 0) ((0) (let ((e-6 (vector-ref sc3 1))) (vector 0 e-6))) (else (let ((e-6 (vector-ref sc3 1))) (let ((act-26 (Normalise-Core-getArity (vector 0 ) e-6 (vector 0 ) e-4 eta-0))) (let ((sc4 act-26)) (case (vector-ref sc4 0) ((0) (let ((e-7 (vector-ref sc4 1))) (vector 0 e-7))) (else (let ((e-7 (vector-ref sc4 1))) (let ((act-27 (Context-Core-addDef arg-0 e-0 (Context-Core-newDef e-4 (vector 3 0 e-7 (vector 0 ))) eta-0))) (let ((sc5 act-27)) (case (vector-ref sc5 0) ((0) (let ((e-8 (vector-ref sc5 1))) (vector 0 e-8))) (else (let ((e-8 (vector-ref sc5 1))) (let ((act-28 ((Core-Core-traverse 'erased 'erased (lambda (eta-1) (ProcessData-TTImp-processCon arg-0 arg-1 eta-1)) e-2) eta-0))) (let ((sc6 act-28)) (case (vector-ref sc6 0) ((0) (let ((e-9 (vector-ref sc6 1))) (vector 0 e-9))) (else (let ((e-9 (vector-ref sc6 1))) (let ((act-29 (let ((act-29 (unbox arg-0))) (vector 1 act-29)))) (let ((sc7 act-29)) (case (vector-ref sc7 0) ((0) (let ((e-10 (vector-ref sc7 1))) (vector 0 e-10))) (else (let ((e-10 (vector-ref sc7 1))) (let ((act-30 ((Core-Core-traverse_ 'erased 'erased (lambda (lamc-0) (let ((_-0 (vector 0 e-4 e-3))) (let ((sc8 lamc-0)) (let ((e-12 (vector-ref sc8 1))) (let ((e-11 (vector-ref sc8 2))) (let ((sc9 e-11)) (let ((e-14 (vector-ref sc9 1))) (let ((e-13 (vector-ref sc9 2))) (lambda (eta-1) (let ((act-30 (Normalise-Core-getArity (vector 0 ) e-10 (vector 0 ) e-13 eta-1))) (let ((sc10 act-30)) (case (vector-ref sc10 0) ((0) (let ((e-15 (vector-ref sc10 1))) (vector 0 e-15))) (else (let ((e-15 (vector-ref sc10 1))) (let ((act-31 (Context-Core-addDef arg-0 e-14 (Context-Core-newDef e-13 (vector 2 (Types-Prelude-cast_Cast__Nat_Int e-12) e-15)) eta-1))) (let ((sc11 act-31)) (case (vector-ref sc11 0) ((0) (let ((e-16 (vector-ref sc11 1))) (vector 0 e-16))) (else (let ((e-16 (vector-ref sc11 1))) (Context-Core-updateDef arg-0 e-0 (lambda (d) (let ((lamc-1 (vector 0 e-12 (vector 0 e-14 e-13)))) (ProcessData-TTImp-case--caseC-32blockC-32inC-32caseC-32blockC-32inC-32processData-3661 e-2 e-1 e-0 arg-1 arg-0 e-3 e-4 _-0 e-6 e-7 e-8 e-9 e-10 e-12 e-14 e-13 lamc-1 e-15 e-16 d (let ((sc12 d)) (let ((e-17 (vector-ref sc12 2))) e-17))))) eta-1)))))))))))))))))))) (List-Data-zip 'erased 'erased (Types-Prelude-rangeFromTo_Range__Nat (Types-Prelude-fromInteger_Num__Nat 0) (List-Types-Prelude-length 'erased e-9)) e-9)) eta-0))) (let ((sc8 act-30)) (case (vector-ref sc8 0) ((0) (let ((e-11 (vector-ref sc8 1))) (vector 0 e-11))) (else (let ((act-31 ((IO-Prelude-putStrLn 'erased (vector 0 (vector 0 (vector 0 (lambda (b) (lambda (a) (lambda (func) (lambda (arg-45) (lambda (eta-1) (IO-Prelude-map_Functor__IO 'erased 'erased func arg-45 eta-1)))))) (lambda (a) (lambda (arg-112) (lambda (eta-1) arg-112))) (lambda (b) (lambda (a) (lambda (arg-113) (lambda (arg-115) (lambda (eta-1) (let ((act-17 (arg-113 eta-1))) (let ((act-16 (arg-115 eta-1))) (act-17 act-16))))))))) (lambda (b) (lambda (a) (lambda (arg-274) (lambda (arg-275) (lambda (eta-1) (let ((act-31 (arg-274 eta-1))) ((arg-275 act-31) eta-1))))))) (lambda (a) (lambda (arg-277) (lambda (eta-1) (let ((act-51 (arg-277 eta-1))) (act-51 eta-1)))))) (lambda (a) (lambda (arg-5832) arg-5832))) (Strings-Types-Prelude-C-43C-43 "Processed " (TT-Core-show_Show__Name e-0))) eta-0))) (vector 1 act-31))))))))))))))))))))))))))))))))))))))))))))))
(define ProcessData-TTImp-processCon (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-2)) (let ((e-0 (vector-ref sc0 1))) (let ((e-1 (vector-ref sc0 2))) (lambda (eta-0) (let ((act-24 ((Term-Elab-TTImp-checkTerm (vector 0 ) arg-0 arg-1 (vector 0 ) e-1 (vector 1 (Normalise-Core-gType 'erased))) eta-0))) (let ((sc1 act-24)) (case (vector-ref sc1 0) ((0) (let ((e-2 (vector-ref sc1 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref sc1 1))) (let ((sc2 e-5)) (let ((e-2 (vector-ref sc2 1))) (vector 1 (vector 0 e-0 e-2)))))))))))))))
(define Parser-TTImp-case--collectDefs-1589 (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (vector 1 (vector 2 arg-1 (List-Types-Prelude-C-43C-43 'erased arg-0 e-2)) (Parser-TTImp-collectDefs e-3)))))))
(define Parser-TTImp-case--collectDefsC-44isClause-1550 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (let ((sc0 arg-6)) (cond ((equal? sc0 0) (vector 1 arg-3)) (else (vector 0 ))))))
(define Parser-TTImp-case--caseC-32blockC-32inC-32collectDefsC-44spanMap-1507 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8 arg-9) (let ((sc0 arg-9)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (vector 0 (List-Types-Prelude-C-43C-43 'erased arg-8 e-2) e-3))))))
(define Parser-TTImp-case--collectDefsC-44spanMap-1446 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 arg-7 arg-8) (let ((sc0 arg-8)) (case (vector-ref sc0 0) ((0) (vector 0 (vector 0 ) (vector 1 arg-5 arg-6))) (else (let ((e-2 (vector-ref sc0 1))) (Parser-TTImp-case--caseC-32blockC-32inC-32collectDefsC-44spanMap-1507 arg-0 arg-1 arg-2 'erased 'erased arg-6 arg-7 arg-5 e-2 (Parser-TTImp-n--3740-1412-spanMap arg-0 arg-1 arg-2 'erased 'erased arg-7 arg-6))))))))
(define Parser-TTImp-case--pibindList-736 (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (vector 0 (vector 1 e-2) e-3))))))
(define Parser-TTImp-n--3740-1412-spanMap (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6) (let ((sc0 arg-6)) (case (vector-ref sc0 0) ((0) (vector 0 (vector 0 ) (vector 0 ))) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (Parser-TTImp-case--collectDefsC-44spanMap-1446 arg-0 arg-1 arg-2 'erased 'erased e-2 e-3 arg-5 (arg-5 e-2)))))))))
(define Parser-TTImp-n--3850-472-mkPi (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((0) arg-2) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 e-2)) (let ((e-6 (vector-ref sc1 1))) (let ((e-7 (vector-ref sc1 2))) (vector 1 e-6 (vector 0 ) arg-2 (Parser-TTImp-n--3850-472-mkPi arg-0 arg-1 e-7 e-3))))))))))))
(define Parser-TTImp-n--3740-1413-isClause (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (let ((sc0 arg-4)) (case (vector-ref sc0 0) ((2) (let ((e-0 (vector-ref sc0 1))) (let ((e-1 (vector-ref sc0 2))) (Parser-TTImp-case--collectDefsC-44isClause-1550 arg-0 arg-1 arg-2 e-1 e-0 arg-3 (TT-Core-C-61C-61_Eq__Name arg-3 e-0)))))(else (vector 0 ))))))
(define Parser-TTImp-n--4607-1181-getFn (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-3)) (case (vector-ref sc0 0) ((0) (let ((e-0 (vector-ref sc0 1))) (vector 0 e-0))) ((4) (let ((e-1 (vector-ref sc0 1))) (Parser-TTImp-n--4607-1181-getFn arg-0 arg-1 arg-2 e-1))) ((3) (let ((e-5 (vector-ref sc0 3))) (Parser-TTImp-n--4607-1181-getFn arg-0 arg-1 arg-2 e-5)))(else (vector 4 1 "Not a function application"))))))
(define Parser-TTImp-n--3859-1042-bindAll (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((0) arg-3) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 e-2)) (let ((e-6 (vector-ref sc1 1))) (let ((e-7 (vector-ref sc1 2))) (vector 3 e-6 e-7 (Parser-TTImp-n--3859-1042-bindAll arg-0 arg-1 e-3 arg-3))))))))))))
(define Parser-TTImp-n--3858-963-bindAll (lambda (arg-0 arg-1 arg-2 arg-3) (let ((sc0 arg-2)) (case (vector-ref sc0 0) ((0) arg-3) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 e-2)) (let ((e-6 (vector-ref sc1 1))) (let ((e-7 (vector-ref sc1 2))) (vector 2 (vector 1 ) (vector 1 e-6) e-7 (Parser-TTImp-n--3858-963-bindAll arg-0 arg-1 e-3 arg-3))))))))))))
(define Parser-TTImp-typeExpr (lambda (arg-0 arg-1) (vector 7 1 (Parser-TTImp-appExpr arg-0 arg-1) (lambda () (lambda (arg) (vector 9 0 1 (vector 8 1 0 (Source-Rule-Parser-continue arg-1) (lambda (_-502) (vector 7 1 (Parser-Text-some 'erased 'erased (vector 7 0 (Parser-TTImp-bindSymbol) (lambda () (lambda (exp) (vector 7 1 (Parser-TTImp-appExpr arg-0 arg-1) (lambda () (lambda (op) (vector 0 (vector 0 exp op))))))))) (lambda () (lambda (rest) (vector 0 (Parser-TTImp-n--3850-472-mkPi arg-1 arg-0 arg rest))))))) (lambda () (vector 0 arg))))))))
(define Parser-TTImp-tyDecl (lambda (arg-0 arg-1) (vector 7 0 (Source-Rule-Parser-name) (lambda () (lambda (n) (vector 7 0 (Source-Rule-Parser-symbol ":") (lambda () (lambda (_-1150) (vector 7 1 (Parser-TTImp-expr arg-0 arg-1) (lambda () (lambda (ty) (vector 8 1 1 (Source-Rule-Parser-atEnd arg-1) (lambda (_-1165) (vector 0 (vector 0 n ty)))))))))))))))
(define Parser-TTImp-topDecl (lambda (arg-0 arg-1) (vector 9 0 0 (vector 7 1 (Parser-TTImp-dataDecl arg-0 arg-1) (lambda () (lambda (dat) (vector 0 (vector 1 dat))))) (lambda () (vector 9 0 0 (vector 7 1 (Parser-TTImp-tyDecl arg-0 arg-1) (lambda () (lambda (claim) (vector 0 (vector 0 claim))))) (lambda () (Parser-TTImp-definition arg-0 arg-1)))))))
(define Parser-TTImp-simpleExpr (lambda (arg-0 arg-1) (vector 9 0 0 (Parser-TTImp-atom arg-0) (lambda () (vector 9 0 (Basics-Prelude-C-124C-124 0 (lambda () 0)) (Parser-TTImp-binder arg-0 arg-1) (lambda () (vector 7 0 (Source-Rule-Parser-symbol "(") (lambda () (lambda (_-441) (vector 7 0 (Parser-TTImp-expr arg-0 arg-1) (lambda () (lambda (e) (vector 7 1 (Source-Rule-Parser-symbol ")") (lambda () (lambda (_-457) (vector 0 e))))))))))))))))
(define Parser-TTImp-prog (lambda (arg-0) (vector 7 1 (Source-Rule-Parser-nonEmptyBlock 'erased (lambda (eta-0) (Parser-TTImp-topDecl arg-0 eta-0))) (lambda () (lambda (ds) (vector 0 (Parser-TTImp-collectDefs ds)))))))
(define Parser-TTImp-pibindListName (lambda (arg-0 arg-1) (vector 9 0 0 (vector 7 0 (Parser-Text-sepBy1 'erased 'erased 'erased 0 (Source-Rule-Parser-symbol ",") (Source-Rule-Parser-unqualifiedName)) (lambda () (lambda (ns) (vector 7 0 (Source-Rule-Parser-symbol ":") (lambda () (lambda (_-631) (vector 7 1 (Parser-TTImp-expr arg-0 arg-1) (lambda () (lambda (ty) (vector 8 1 1 (Source-Rule-Parser-atEnd arg-1) (lambda (_-646) (vector 0 (Types-Prelude-map_Functor__List 'erased 'erased (lambda (n) (vector 0 (vector 0 n) ty)) ns))))))))))))) (lambda () (Parser-Text-sepBy1 'erased 'erased 'erased (Basics-Prelude-C-124C-124 0 (lambda () 0)) (Source-Rule-Parser-symbol ",") (vector 7 0 (Source-Rule-Parser-name) (lambda () (lambda (n) (vector 7 0 (Source-Rule-Parser-symbol ":") (lambda () (lambda (_-679) (vector 7 1 (Parser-TTImp-expr arg-0 arg-1) (lambda () (lambda (ty) (vector 0 (vector 0 n ty))))))))))))))))
(define Parser-TTImp-pibindList (lambda (arg-0 arg-1) (vector 7 1 (Parser-TTImp-pibindListName arg-0 arg-1) (lambda () (lambda (params) (vector 0 (Types-Prelude-map_Functor__List 'erased 'erased (lambda (lamc-0) (let ((sc0 lamc-0)) (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (vector 0 (vector 1 e-2) e-3))))) params)))))))
(define Parser-TTImp-pibindAll (lambda (arg-0 arg-1 arg-2) (let ((sc0 arg-1)) (case (vector-ref sc0 0) ((0) arg-2) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 e-2)) (let ((e-6 (vector-ref sc1 1))) (let ((e-7 (vector-ref sc1 2))) (vector 1 arg-0 e-6 e-7 (Parser-TTImp-pibindAll arg-0 e-3 arg-2))))))))))))
(define Parser-TTImp-pat (lambda (arg-0 arg-1) (vector 7 0 (Source-Rule-Parser-keyword "pat") (lambda () (lambda (_-1062) (vector 7 0 (Parser-TTImp-bindList arg-0 arg-1) (lambda () (lambda (binders) (vector 7 0 (Source-Rule-Parser-symbol "=>") (lambda () (lambda (_-1078) (vector 8 1 0 (Source-Rule-Parser-mustContinue arg-1 (vector 0 )) (lambda (_-1087) (vector 7 1 (Parser-TTImp-expr arg-0 arg-1) (lambda () (lambda (scope) (vector 8 1 1 (Common-Rule-Parser-location (vector "Parser.Lexer.Source.Token" )) (lambda (end) (vector 0 (Parser-TTImp-n--3859-1042-bindAll arg-1 arg-0 binders scope))))))))))))))))))))
(define Parser-TTImp-parseRHS (lambda (arg-0 arg-1 arg-2) (vector 7 0 (Source-Rule-Parser-symbol "=") (lambda () (lambda (_-1208) (vector 8 1 0 (vector 5 ) (lambda (_-1217) (vector 7 1 (Parser-TTImp-expr arg-0 arg-1) (lambda () (lambda (rhs) (vector 8 1 1 (Source-Rule-Parser-atEnd arg-1) (lambda (_-1232) (vector 8 1 1 (Parser-TTImp-n--4607-1181-getFn arg-2 arg-1 arg-0 arg-2) (lambda (bind-0) (vector 0 (vector 0 bind-0 (vector 0 arg-2 rhs)))))))))))))))))
(define Parser-TTImp-lam (lambda (arg-0 arg-1) (vector 7 0 (Source-Rule-Parser-symbol "\\") (lambda () (lambda (_-985) (vector 7 0 (Parser-TTImp-bindList arg-0 arg-1) (lambda () (lambda (binders) (vector 7 0 (Source-Rule-Parser-symbol "=>") (lambda () (lambda (_-1001) (vector 8 1 0 (Source-Rule-Parser-mustContinue arg-1 (vector 0 )) (lambda (_-1010) (vector 7 1 (Parser-TTImp-expr arg-0 arg-1) (lambda () (lambda (scope) (vector 8 1 1 (Common-Rule-Parser-location (vector "Parser.Lexer.Source.Token" )) (lambda (end) (vector 0 (Parser-TTImp-n--3858-963-bindAll arg-1 arg-0 binders scope))))))))))))))))))))
(define Parser-TTImp-implicitPi (lambda (arg-0 arg-1) (vector 7 0 (Source-Rule-Parser-symbol "{") (lambda () (lambda (_-839) (vector 7 0 (Parser-TTImp-pibindList arg-0 arg-1) (lambda () (lambda (binders) (vector 7 0 (Source-Rule-Parser-symbol "}") (lambda () (lambda (_-855) (vector 7 0 (Source-Rule-Parser-symbol "->") (lambda () (lambda (_-864) (vector 7 1 (Parser-TTImp-typeExpr arg-0 arg-1) (lambda () (lambda (scope) (vector 8 1 1 (Common-Rule-Parser-location (vector "Parser.Lexer.Source.Token" )) (lambda (end) (vector 0 (Parser-TTImp-pibindAll (vector 0 ) binders scope)))))))))))))))))))))
(define Parser-TTImp-forall_ (lambda (arg-0 arg-1) (vector 7 0 (Source-Rule-Parser-keyword "forall") (lambda () (lambda (_-761) (vector 8 1 0 (vector 5 ) (lambda (_-770) (vector 7 0 (Parser-Text-sepBy1 'erased 'erased 'erased 0 (Source-Rule-Parser-symbol ",") (Source-Rule-Parser-unqualifiedName)) (lambda () (lambda (ns) (let ((binders (Types-Prelude-map_Functor__List 'erased 'erased (lambda (n) (vector 0 (vector 1 (vector 0 n)) (vector 6 ))) ns))) (vector 7 0 (Source-Rule-Parser-symbol ".") (lambda () (lambda (_-795) (vector 7 1 (Parser-TTImp-typeExpr arg-0 arg-1) (lambda () (lambda (scope) (vector 0 (Parser-TTImp-pibindAll (vector 0 ) binders scope)))))))))))))))))))
(define Parser-TTImp-expr (lambda (ext-0 ext-1) (Parser-TTImp-typeExpr ext-0 ext-1)))
(define Parser-TTImp-explicitPi (lambda (arg-0 arg-1) (vector 7 0 (Source-Rule-Parser-symbol "(") (lambda () (lambda (_-908) (vector 7 0 (Parser-TTImp-pibindList arg-0 arg-1) (lambda () (lambda (binders) (vector 7 0 (Source-Rule-Parser-symbol ")") (lambda () (lambda (_-924) (vector 7 0 (Parser-TTImp-bindSymbol) (lambda () (lambda (exp) (vector 7 1 (Parser-TTImp-typeExpr arg-0 arg-1) (lambda () (lambda (scope) (vector 8 1 1 (Common-Rule-Parser-location (vector "Parser.Lexer.Source.Token" )) (lambda (end) (vector 0 (Parser-TTImp-pibindAll exp binders scope)))))))))))))))))))))
(define Parser-TTImp-definition (lambda (arg-0 arg-1) (vector 7 1 (Parser-TTImp-clause arg-0 arg-1) (lambda () (lambda (nd) (vector 0 (vector 2 (Builtin-fst 'erased 'erased nd) (vector 1 (Builtin-snd 'erased 'erased nd) (vector 0 )))))))))
(define Parser-TTImp-dataDecl (lambda (arg-0 arg-1) (vector 7 0 (Source-Rule-Parser-keyword "data") (lambda () (lambda (_-1315) (vector 7 0 (Source-Rule-Parser-name) (lambda () (lambda (n) (vector 7 0 (Source-Rule-Parser-symbol ":") (lambda () (lambda (_-1332) (vector 7 0 (Parser-TTImp-expr arg-0 arg-1) (lambda () (lambda (ty) (vector 7 1 (Source-Rule-Parser-keyword "where") (lambda () (lambda (_-1349) (vector 8 1 1 (Source-Rule-Parser-block 'erased (lambda (eta-0) (Parser-TTImp-tyDecl arg-0 eta-0))) (lambda (cs) (vector 0 (vector 0 n ty cs)))))))))))))))))))))
(define Parser-TTImp-collectDefs (lambda (arg-0) (let ((sc0 arg-0)) (case (vector-ref sc0 0) ((0) (vector 0 )) (else (let ((e-2 (vector-ref sc0 1))) (let ((e-3 (vector-ref sc0 2))) (let ((sc1 e-2)) (case (vector-ref sc1 0) ((2) (let ((e-4 (vector-ref sc1 1))) (let ((e-5 (vector-ref sc1 2))) (Parser-TTImp-case--collectDefs-1589 e-5 e-4 e-3 (Parser-TTImp-n--3740-1412-spanMap e-5 e-4 e-3 'erased 'erased (lambda (eta-0) (Parser-TTImp-n--3740-1413-isClause e-5 e-4 e-3 e-4 eta-0)) e-3)))))(else (vector 1 e-2 (Parser-TTImp-collectDefs e-3))))))))))))
(define Parser-TTImp-clause (lambda (arg-0 arg-1) (vector 7 0 (Parser-TTImp-expr arg-0 arg-1) (lambda () (lambda (lhs) (Parser-TTImp-parseRHS arg-0 arg-1 lhs))))))
(define Parser-TTImp-binder (lambda (arg-0 arg-1) (vector 9 0 0 (Parser-TTImp-forall_ arg-0 arg-1) (lambda () (vector 9 0 0 (Parser-TTImp-implicitPi arg-0 arg-1) (lambda () (vector 9 0 0 (Parser-TTImp-explicitPi arg-0 arg-1) (lambda () (vector 9 0 0 (Parser-TTImp-lam arg-0 arg-1) (lambda () (Parser-TTImp-pat arg-0 arg-1)))))))))))
(define Parser-TTImp-bindSymbol (lambda () (vector 7 1 (Source-Rule-Parser-symbol "->") (lambda () (lambda (_-353) (vector 0 (vector 1 )))))))
(define Parser-TTImp-bindList (lambda (arg-0 arg-1) (Parser-Text-sepBy1 'erased 'erased 'erased 0 (Source-Rule-Parser-symbol ",") (vector 7 1 (Source-Rule-Parser-unqualifiedName) (lambda () (lambda (n) (vector 8 1 1 (Parser-Text-option 'erased 'erased (Basics-Prelude-C-124C-124 0 (lambda () 0)) (vector 6 ) (vector 7 0 (Source-Rule-Parser-symbol ":") (lambda () (lambda (_-586) (Parser-TTImp-appExpr arg-0 arg-1))))) (lambda (ty) (vector 0 (vector 0 (vector 0 n) ty))))))))))
(define Parser-TTImp-atom (lambda (arg-0) (vector 9 0 0 (vector 7 1 (Source-Rule-Parser-exactIdent "Type") (lambda () (lambda (_-267) (vector 0 (vector 7 ))))) (lambda () (vector 9 (Basics-Prelude-C-124C-124 0 (lambda () 1)) 0 (vector 7 1 (Source-Rule-Parser-symbol "_") (lambda () (lambda (_-284) (vector 0 (vector 6 ))))) (lambda () (vector 9 0 (Basics-Prelude-C-124C-124 0 (lambda () 1)) (vector 7 1 (Source-Rule-Parser-holeName) (lambda () (lambda (n) (vector 0 (vector 5 (vector 0 n)))))) (lambda () (vector 7 1 (Source-Rule-Parser-name) (lambda () (lambda (x) (vector 0 (vector 0 x)))))))))))))
(define Parser-TTImp-argExpr (lambda (arg-0 arg-1) (vector 8 1 0 (Source-Rule-Parser-continue arg-1) (lambda (_-423) (Parser-TTImp-simpleExpr arg-0 arg-1)))))
(define Parser-TTImp-appExpr (lambda (arg-0 arg-1) (vector 7 1 (Parser-TTImp-simpleExpr arg-0 arg-1) (lambda () (lambda (f) (vector 8 1 1 (Parser-Text-many 'erased 'erased (Parser-TTImp-argExpr arg-0 arg-1)) (lambda (args) (vector 0 (TTImp-TTImp-apply f args)))))))))
(load-shared-object "libidris2_support.so")
(collect-request-handler (lambda () (collect) (blodwen-run-finalisers)))
(PrimIO-unsafePerformIO 'erased (lambda (eta-0) (Main-Idris-main eta-0)))(collect 4)
(blodwen-run-finalisers))
