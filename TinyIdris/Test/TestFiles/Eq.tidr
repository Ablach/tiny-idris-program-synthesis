data Eq : (a : Type) -> a -> a -> Type where
  refl : (a : Type) -> (x : a) -> Eq a x x

data Nat : Type where
   Z : Nat
   S : Nat -> Nat

add : Nat -> Nat -> Nat
pat n : Nat =>
   add Z n = n
pat n : Nat, m : Nat => 
   add (S n) m = S (add n m)

data List : Type -> Type where
  Nil : (a : Type) -> List a
  Cons : (a : Type) -> a -> List a -> List a

data Vec : Nat -> Type -> Type where
  VNil : (a : Type) -> Vec Z a
  VCons : (a : Type) -> (n : Nat) -> a -> Vec n a -> Vec (S n) a

len : (a : Type) -> List a -> Nat
pat a : Type =>
  len a (Nil a) = Z
pat a : Type, x : a, xs : List a =>
  len a (Cons a x xs) = S (len a xs)

listToVec : (a : Type) -> (xs : List a) -> Vec (len a xs) a
pat a : Type =>
  listToVec a (Nil a) = VNil a 
pat a : Type, x : a, xs : List a =>
  listToVec a (Cons a x xs) = VCons a (len a xs) x (listToVec a xs)

vecToList : (a : Type) -> (n : Nat) -> Vec n a -> List a
pat a : Type => 
  vecToList a Z (VNil a) = Nil a
pat a : Type, n : Nat, x : a, xs : Vec n a =>
  vecToList a (S n) (VCons a n x xs) = Cons a x (vecToList a n xs)

data Bot : Type where 

data DU : Type -> Type -> Type where
  inl : (a : Type) -> (b : Type) -> (el : a) -> DU a b
  inr : (a : Type) -> (b : Type) -> (el : b) -> DU a b

botElim : (a : Type) -> Bot -> a

not : Type -> Type
pat p : Type =>
  not p = Bot

plusComm : (n : Nat) -> (m : Nat) -> Eq Nat (add n m) (add m n)

plusSuc : (n : Nat) -> (m : Nat) -> Eq Nat (add n (S m)) (S (add n m))

sym : (a : Type) -> (x : a) -> (y : a) -> Eq a x y -> Eq a y x

trans : (a : Type) -> (x : a) -> (y : a) -> (z : a) -> Eq a x y -> Eq a y z -> Eq a x z

cong : (a : Type) -> (b : Type) -> (x : a) -> (y : a) -> (f : a -> b) -> Eq a x y -> Eq b (f x) (f y) 

vofLofV : (a : Type) -> (n : Nat) -> (v : Vec n a) -> Eq (Vec n a) (listToVec a (vecToList a n v))  v

appDU : (a : Type) -> (b : Type) -> (c : Type) -> (DU a b) -> (a -> c) -> (b -> c) -> c

notNot : (a : Type) -> a -> not (not a)

nnnN : (a : Type) -> not (not (not a)) -> not a

